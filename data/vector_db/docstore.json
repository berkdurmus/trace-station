[[["43439606-7dc6-417e-98ae-2ce434de887c",{"pageContent":"Initial document","metadata":{"source":"initialization"}}],["2e360474-1c8f-4bb6-9a08-8d1ac4a6261e",{"pageContent":"---\nid: accessibility-testing\ntitle: \"Accessibility testing\"\n---\n\n## Introduction\n\nPlaywright can be used to test your application for many types of accessibility issues.\n\nA few examples of problems this can catch include:\n- Text that would be hard to read for users with vision impairments due to poor color contrast with the background behind it\n- UI controls and form elements without labels that a screen reader could identify\n- Interactive elements with duplicate IDs which can confuse assistive technologies\n\nThe following examples rely on the [`com.deque.html.axe-core/playwright`](https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright) Maven package which adds support for running the [axe accessibility testing engine](https://www.deque.com/axe/) as part of your Playwright tests.\n\n## Disclaimer","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":1,"to":17}}}}],["88d7a894-5a18-45fd-8ecf-d8862dd70cb6",{"pageContent":"## Disclaimer\n\nAutomated accessibility tests can detect some common accessibility problems such as missing or invalid properties. But many accessibility problems can only be discovered through manual testing. We recommend using a combination of automated testing, manual accessibility assessments, and inclusive user testing.\n\nFor manual assessments, we recommend [Accessibility Insights for Web](https://accessibilityinsights.io/docs/web/overview/?referrer=playwright-accessibility-testing-java), a free and open source dev tool that walks you through assessing a website for [WCAG 2.1 AA](https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&levels=aaa) coverage.\n\n## Example accessibility tests\n\nAccessibility tests work just like any other Playwright test. You can either create separate test cases for them, or integrate accessibility scans and assertions into your existing test cases.\n\nThe following examples demonstrate a few basic accessibility testing scenarios.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":17,"to":27}}}}],["043c53a0-ca0a-41ba-a115-10563dffe59a",{"pageContent":"The following examples demonstrate a few basic accessibility testing scenarios.\n\n### Example 1: Scanning an entire page\n\nThis example demonstrates how to test an entire page for automatically detectable accessibility violations. The test:\n1. Imports the [`com.deque.html.axe-core/playwright`](https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright) package\n1. Uses normal JUnit 5 `@Test` syntax to define a test case\n1. Uses normal Playwright syntax to open a browser and navigate to the page under test\n1. Invokes `AxeBuilder.analyze()` to run the accessibility scan against the page\n1. Uses normal JUnit 5 test assertions to verify that there are no violations in the returned scan results\n\n```java\nimport com.deque.html.axecore.playwright.*; // 1\nimport com.deque.html.axecore.utilities.axeresults.*;\n\nimport org.junit.jupiter.api.*;\nimport com.microsoft.playwright.*;\n\nimport static org.junit.jupiter.api.Assertions.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":27,"to":45}}}}],["f130d71b-5f18-42b8-b402-d4de29917e8d",{"pageContent":"import org.junit.jupiter.api.*;\nimport com.microsoft.playwright.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HomepageTests {\n  @Test // 2\n  void shouldNotHaveAutomaticallyDetectableAccessibilityIssues() throws Exception {\n    Playwright playwright = Playwright.create();\n    Browser browser = playwright.chromium().launch();\n    BrowserContext context = browser.newContext();\n    Page page = context.newPage();\n\n    page.navigate(\"https://your-site.com/\"); // 3\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze(); // 4\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations()); // 5\n  }\n}\n```\n\n### Example 2: Configuring axe to scan a specific part of a page\n\n`com.deque.html.axe-core/playwright` supports many configuration options for axe. You can specify these options by using a Builder pattern with the `AxeBuilder` class.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":42,"to":66}}}}],["62a21950-ade4-4943-9eda-8c70db7dc911",{"pageContent":"`com.deque.html.axe-core/playwright` supports many configuration options for axe. You can specify these options by using a Builder pattern with the `AxeBuilder` class.\n\nFor example, you can use [`AxeBuilder.include()`](https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderincludeliststring-selector) to constrain an accessibility scan to only run against one specific part of a page.\n\n`AxeBuilder.analyze()` will scan the page *in its current state* when you call it. To scan parts of a page that are revealed based on UI interactions, use [Locators](./locators.md) to interact with the page before invoking `analyze()`:\n\n```java\npublic class HomepageTests {\n  @Test\n  void navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    page.locator(\"button[aria-label=\\\"Navigation Menu\\\"]\").click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":66,"to":78}}}}],["89d49a72-a92b-459b-9594-0897190e0e08",{"pageContent":"page.locator(\"button[aria-label=\\\"Navigation Menu\\\"]\").click();\n\n    // It is important to waitFor() the page to be in the desired\n    // state *before* running analyze(). Otherwise, axe might not\n    // find all the elements your test expects it to scan.\n    page.locator(\"#navigation-menu-flyout\").waitFor();\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page)\n      .include(Arrays.asList(\"#navigation-menu-flyout\"))\n      .analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n```\n\n### Example 3: Scanning for WCAG violations\n\nBy default, axe checks against a wide variety of accessibility rules. Some of these rules correspond to specific success criteria from the [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG21/), and others are \"best practice\" rules that are not specifically required by any WCAG criterion.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":78,"to":96}}}}],["54dec4f2-2d8d-46f8-957c-f43db34359f3",{"pageContent":"You can constrain an accessibility scan to only run those rules which are \"tagged\" as corresponding to specific WCAG success criteria by using [`AxeBuilder.withTags()`](https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderwithtagsliststring-rules). For example, [Accessibility Insights for Web's Automated Checks](https://accessibilityinsights.io/docs/web/getstarted/fastpass/?referrer=playwright-accessibility-testing-java) only include axe rules that test for violations of WCAG A and AA success criteria; to match that behavior, you would use the tags `wcag2a`, `wcag2aa`, `wcag21a`, and `wcag21aa`.\n\nNote that [automated testing cannot detect all types of WCAG violations](#disclaimer).\n\n```java\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .withTags(Arrays.asList(\"wcag2a\", \"wcag2aa\", \"wcag21a\", \"wcag21aa\"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":98,"to":108}}}}],["150dd3d6-b2e9-4b62-b752-ecae8f55be17",{"pageContent":"assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\nYou can find a complete listing of the rule tags axe-core supports in [the \"Axe-core Tags\" section of the axe API documentation](https://www.deque.com/axe/core-documentation/api-documentation/#axecore-tags).\n\n## Handling known issues\n\nA common question when adding accessibility tests to an application is \"how do I suppress known violations?\" The following examples demonstrate a few techniques you can use.\n\n### Excluding individual elements from a scan\n\nIf your application contains a few specific elements with known issues, you can use [`AxeBuilder.exclude()`](https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderexcludeliststring-selector) to exclude them from being scanned until you're able to fix the issues.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":107,"to":118}}}}],["a8bf9872-fb53-4b34-bf8b-175ddf1ba263",{"pageContent":"This is usually the simplest option, but it has some important downsides:\n* `exclude()` will exclude the specified elements *and all of their descendants*. Avoid using it with components that contain many children.\n* `exclude()` will prevent *all* rules from running against the specified elements, not just the rules corresponding to known issues.\n\nHere is an example of excluding one element from being scanned in one specific test:\n\n```java\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .exclude(Arrays.asList(\"#element-with-known-issue\"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\nIf the element in question is used repeatedly in many pages, consider [using a test fixture](#using-a-test-fixture-for-common-axe-configuration) to reuse the same `AxeBuilder` configuration across multiple tests.\n\n### Disabling individual scan rules","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":120,"to":136}}}}],["4e16e9ee-53ae-4b4a-9854-21b4f1703fdf",{"pageContent":"### Disabling individual scan rules\n\nIf your application contains many different preexisting violations of a specific rule, you can use [`AxeBuilder.disableRules()`](https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderdisablerulesliststring-rules) to temporarily disable individual rules until you're able to fix the issues.\n\nYou can find the rule IDs to pass to `disableRules()` in the `id` property of the violations you want to suppress. A [complete list of axe's rules](https://github.com/dequelabs/axe-core/blob/master/doc/rule-descriptions.md) can be found in `axe-core`'s documentation.\n\n```java\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .disableRules(Arrays.asList(\"duplicate-id\"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\n### Using violation fingerprints to specific known issues","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":136,"to":150}}}}],["cfdea4c5-77c9-4629-8dd5-2df5b406e9fb",{"pageContent":"assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\n### Using violation fingerprints to specific known issues\n\nIf you would like to allow for a more granular set of known issues, you can use the following pattern:\n\n1. Perform an accessibility scan which is expected to find some known violations\n1. Convert the violations into \"violation fingerprint\" objects\n1. Assert that the set of fingerprints is equivalent to the expected ones\n\nThis approach avoids the downsides of using `AxeBuilder.exclude()` at the cost of slightly more complexity and fragility.\n\nHere is an example of using fingerprints based on only rule IDs and \"target\" selectors pointing to each violation:\n\n```java\npublic class HomepageTests {\n  @Test\n  shouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":147,"to":168}}}}],["0ec7b1ea-4273-4458-bf96-a9b064d2e6fb",{"pageContent":"AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();\n\n    List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);\n\n    assertEquals(Arrays.asList(\n      new ViolationFingerprint(\"aria-roles\", \"[span[role=\\\"invalid\\\"]]\"),\n      new ViolationFingerprint(\"color-contrast\", \"[li:nth-child(2) > span]\"),\n      new ViolationFingerprint(\"label\", \"[input]\")\n    ), violationFingerprints);\n  }\n\n  // You can make your \"fingerprint\" as specific as you like. This one considers a violation to be\n  // \"the same\" if it corresponds the same Axe rule on the same element.\n  //\n  // Using a record type makes it easy to compare fingerprints with assertEquals\n  public record ViolationFingerprint(String ruleId, String target) { }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":168,"to":183}}}}],["ebce995d-3293-40f2-be9d-69beb2de2ee1",{"pageContent":"public List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {\n    return results.getViolations().stream()\n      // Each violation refers to one rule and multiple \"nodes\" which violate it\n      .flatMap(violation -> violation.getNodes().stream()\n        .map(node -> new ViolationFingerprint(\n          violation.getId(),\n          // Each node contains a \"target\", which is a CSS selector that uniquely identifies it\n          // If the page involves iframes or shadow DOMs, it may be a chain of CSS selectors\n          node.getTarget().toString()\n        )))\n      .collect(Collectors.toList());\n  }\n}\n```\n\n## Using a test fixture for common axe configuration","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":185,"to":200}}}}],["6cfa85bf-405f-4779-b43d-72d0d31b5d2b",{"pageContent":"## Using a test fixture for common axe configuration\n\nA [`TestFixtures` class](./test-runners#running-tests-in-parallel) is a good way to share common `AxeBuilder` configuration across many tests. Some scenarios where this might be useful include:\n* Using a common set of rules among all of your tests\n* Suppressing a known violation in a common element which appears in many different pages\n* Attaching standalone accessibility reports consistently for many scans\n\nThe following example demonstrates extending the `TestFixtures` class from the [Test Runners example](./test-runners#running-tests-in-parallel) with a new fixture that contains some common `AxeBuilder` configuration.\n\n### Creating a fixture\n\nThis example fixture creates an `AxeBuilder` object which is pre-configured with shared `withTags()` and `exclude()` configuration.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":200,"to":211}}}}],["57b20b87-ece8-4912-b0e2-c27d288841cf",{"pageContent":"### Creating a fixture\n\nThis example fixture creates an `AxeBuilder` object which is pre-configured with shared `withTags()` and `exclude()` configuration.\n\n```java\nclass AxeTestFixtures extends TestFixtures {\n AxeBuilder makeAxeBuilder() {\n   return new AxeBuilder(page)\n     .withTags(new String[]{\"wcag2a\", \"wcag2aa\", \"wcag21a\", \"wcag21aa\"})\n     .exclude(\"#commonly-reused-element-with-known-issue\");\n }\n}\n```\n\n### Using a fixture\n\nTo use the fixture, replace the earlier examples' `new AxeBuilder(page)` with the newly defined `makeAxeBuilder` fixture:\n\n```java\npublic class HomepageTests extends AxeTestFixtures {\n  @Test\n  void exampleUsingCustomFixture() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include(\"#specific-element-under-test\")\n      .analyze();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":209,"to":237}}}}],["35f094bc-bdcc-4dcc-b396-d67456fb5926",{"pageContent":"assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n```\n\nSee experimental [JUnit integration](./junit.md) to automatically initialize Playwright objects and more.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-java.md","title":"src-accessibility-testing-java","url":"https://playwright.dev/docs/src-accessibility-testing-java","loc":{"lines":{"from":239,"to":244}}}}],["d772e757-d9bb-42fb-8abc-c33b27f49dc4",{"pageContent":"---\nid: accessibility-testing\ntitle: \"Accessibility testing\"\n---\n\n## Introduction\n\nPlaywright can be used to test your application for many types of accessibility issues.\n\nA few examples of problems this can catch include:\n- Text that would be hard to read for users with vision impairments due to poor color contrast with the background behind it\n- UI controls and form elements without labels that a screen reader could identify\n- Interactive elements with duplicate IDs which can confuse assistive technologies\n\nThe following examples rely on the [`@axe-core/playwright`](https://npmjs.org/@axe-core/playwright) package which adds support for running the [axe accessibility testing engine](https://www.deque.com/axe/) as part of your Playwright tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":1,"to":15}}}}],["82291124-45bb-4844-b1d2-4ccd9dba9df2",{"pageContent":":::note[Disclaimer]\nAutomated accessibility tests can detect some common accessibility problems such as missing or invalid properties. But many accessibility problems can only be discovered through manual testing. We recommend using a combination of automated testing, manual accessibility assessments, and inclusive user testing.\n\nFor manual assessments, we recommend [Accessibility Insights for Web](https://accessibilityinsights.io/docs/web/overview/?referrer=playwright-accessibility-testing-js), a free and open source dev tool that walks you through assessing a website for [WCAG 2.1 AA](https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&levels=aaa) coverage.\n:::\n## Example accessibility tests\n\nAccessibility tests work just like any other Playwright test. You can either create separate test cases for them, or integrate accessibility scans and assertions into your existing test cases.\n\nThe following examples demonstrate a few basic accessibility testing scenarios.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":17,"to":26}}}}],["5a1cb1f8-b8e5-4b8a-aae2-c2da7526795b",{"pageContent":"The following examples demonstrate a few basic accessibility testing scenarios.\n\n### Scanning an entire page\n\nThis example demonstrates how to test an entire page for automatically detectable accessibility violations. The test:\n1. Imports the `@axe-core/playwright` package\n1. Uses normal Playwright Test syntax to define a test case\n1. Uses normal Playwright syntax to navigate to the page under test\n1. Awaits `AxeBuilder.analyze()` to run the accessibility scan against the page\n1. Uses normal Playwright Test [assertions](./test-assertions) to verify that there are no violations in the returned scan results\n\n```js tab=js-ts\nimport { test, expect } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright'; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":26,"to":43}}}}],["b1b42572-46dd-4460-93ba-5ae138c23657",{"pageContent":"test.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n```js tab=js-js\nconst { test, expect } = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n### Configuring axe to scan a specific part of a page","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":41,"to":67}}}}],["d1c554f7-947a-42ad-bfef-86fbb4996aa8",{"pageContent":"expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n### Configuring axe to scan a specific part of a page\n\n`@axe-core/playwright` supports many configuration options for axe. You can specify these options by using a Builder pattern with the `AxeBuilder` class.\n\nFor example, you can use [`AxeBuilder.include()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderincludeselector-string--string) to constrain an accessibility scan to only run against one specific part of a page.\n\n`AxeBuilder.analyze()` will scan the page *in its current state* when you call it. To scan parts of a page that are revealed based on UI interactions, use [Locators](./locators.md) to interact with the page before invoking `analyze()`:\n\n```js\ntest('navigation menu should not have automatically detectable accessibility violations', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":62,"to":79}}}}],["92200ce9-08b3-40cc-960e-55a627f21026",{"pageContent":"```js\ntest('navigation menu should not have automatically detectable accessibility violations', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/');\n\n  await page.getByRole('button', { name: 'Navigation Menu' }).click();\n\n  // It is important to waitFor() the page to be in the desired\n  // state *before* running analyze(). Otherwise, axe might not\n  // find all the elements your test expects it to scan.\n  await page.locator('#navigation-menu-flyout').waitFor();\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .include('#navigation-menu-flyout')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n### Scanning for WCAG violations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":75,"to":96}}}}],["f8892238-5dd8-400b-8654-c2b5e7d495d8",{"pageContent":"expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n### Scanning for WCAG violations\n\nBy default, axe checks against a wide variety of accessibility rules. Some of these rules correspond to specific success criteria from the [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG21/), and others are \"best practice\" rules that are not specifically required by any WCAG criterion.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":92,"to":98}}}}],["2d697cc4-795b-494b-b2c3-f2537a73207f",{"pageContent":"You can constrain an accessibility scan to only run those rules which are \"tagged\" as corresponding to specific WCAG success criteria by using [`AxeBuilder.withTags()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderwithtagstags-stringarray). For example, [Accessibility Insights for Web's Automated Checks](https://accessibilityinsights.io/docs/web/getstarted/fastpass/?referrer=playwright-accessibility-testing-js) only include axe rules that test for violations of WCAG A and AA success criteria; to match that behavior, you would use the tags `wcag2a`, `wcag2aa`, `wcag21a`, and `wcag21aa`.\n\nNote that automated testing cannot detect all types of WCAG violations.\n\n```js\ntest('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {\n  await page.goto('https://your-site.com/');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":100,"to":106}}}}],["f1e6eb31-13aa-4d12-bfec-e457963ccc47",{"pageContent":"```js\ntest('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\nYou can find a complete listing of the rule tags axe-core supports in [the \"Axe-core Tags\" section of the axe API documentation](https://www.deque.com/axe/core-documentation/api-documentation/#axecore-tags).\n\n## Handling known issues\n\nA common question when adding accessibility tests to an application is \"how do I suppress known violations?\" The following examples demonstrate a few techniques you can use.\n\n### Excluding individual elements from a scan","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":104,"to":122}}}}],["b6e259a1-5c05-4b88-93fb-05f7820b37de",{"pageContent":"### Excluding individual elements from a scan\n\nIf your application contains a few specific elements with known issues, you can use [`AxeBuilder.exclude()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderexcludeselector-string--string) to exclude them from being scanned until you're able to fix the issues.\n\nThis is usually the simplest option, but it has some important downsides:\n* `exclude()` will exclude the specified elements *and all of their descendants*. Avoid using it with components that contain many children.\n* `exclude()` will prevent *all* rules from running against the specified elements, not just the rules corresponding to known issues.\n\nHere is an example of excluding one element from being scanned in one specific test:\n\n```js\ntest('should not have any accessibility violations outside of elements with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":122,"to":136}}}}],["ef00592c-b0d0-4c89-b705-a2883ebfc295",{"pageContent":"```js\ntest('should not have any accessibility violations outside of elements with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .exclude('#element-with-known-issue')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\nIf the element in question is used repeatedly in many pages, consider [using a test fixture](#using-a-test-fixture-for-common-axe-configuration) to reuse the same `AxeBuilder` configuration across multiple tests.\n\n### Disabling individual scan rules\n\nIf your application contains many different preexisting violations of a specific rule, you can use [`AxeBuilder.disableRules()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderdisablerulesrules-stringarray) to temporarily disable individual rules until you're able to fix the issues.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":132,"to":150}}}}],["9942d4f7-218f-4a8f-94b0-97200db1af72",{"pageContent":"You can find the rule IDs to pass to `disableRules()` in the `id` property of the violations you want to suppress. A [complete list of axe's rules](https://github.com/dequelabs/axe-core/blob/master/doc/rule-descriptions.md) can be found in `axe-core`'s documentation.\n\n```js\ntest('should not have any accessibility violations outside of rules with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .disableRules(['duplicate-id'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n### Using snapshots to allow specific known issues\n\nIf you would like to allow for a more granular set of known issues, you can use [Snapshots](./test-snapshots.md) to verify that a set of preexisting violations has not changed. This approach avoids the downsides of using `AxeBuilder.exclude()` at the cost of slightly more complexity and fragility.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":152,"to":170}}}}],["9a080366-936d-4047-a294-2eab1a817508",{"pageContent":"Do not use a snapshot of the entire `accessibilityScanResults.violations` array. It contains implementation details of the elements in question, such as a snippet of their rendered HTML; if you include these in your snapshots, it will make your tests prone to breaking every time one of the components in question changes for an unrelated reason:\n\n```js\n// Don't do this! This is fragile.\nexpect(accessibilityScanResults.violations).toMatchSnapshot();\n```\n\nInstead, create a *fingerprint* of the violation(s) in question that contains only enough information to uniquely identify the issue, and use a snapshot of the fingerprint:\n\n```js\n// This is less fragile than snapshotting the entire violations array.\nexpect(violationFingerprints(accessibilityScanResults)).toMatchSnapshot();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":172,"to":183}}}}],["20c2174b-24bf-4c0f-b869-ab6a94b9b520",{"pageContent":"```js\n// This is less fragile than snapshotting the entire violations array.\nexpect(violationFingerprints(accessibilityScanResults)).toMatchSnapshot();\n\n// my-test-utils.js\nfunction violationFingerprints(accessibilityScanResults) {\n  const violationFingerprints = accessibilityScanResults.violations.map(violation => ({\n    rule: violation.id,\n    // These are CSS selectors which uniquely identify each element with\n    // a violation of the rule in question.\n    targets: violation.nodes.map(node => node.target),\n  }));\n\n  return JSON.stringify(violationFingerprints, null, 2);\n}\n```\n\n## Exporting scan results as a test attachment","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":181,"to":198}}}}],["8fcddd6f-2cd7-458b-8025-f4d36fc01dfc",{"pageContent":"return JSON.stringify(violationFingerprints, null, 2);\n}\n```\n\n## Exporting scan results as a test attachment\n\nMost accessibility tests are primarily concerned with the `violations` property of the axe scan results. However, the scan results contain more than just `violations`. For example, the results also contain information about rules which passed and about elements which axe found to have inconclusive results for some rules. This information can be useful for debugging tests that aren't detecting all the violations you expect them to.\n\nTo include *all* of the scan results as part of your test results for debugging purposes, you can add the scan results as a test attachment with [`testInfo.attach()`](./api/class-testinfo#test-info-attach). [Reporters](./test-reporters) can then embed or link the full results as part of your test output.\n\nThe following example demonstrates attaching scan results to a test:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":194,"to":204}}}}],["ab0bfd7c-6c1a-4537-9a34-cb88fe47fa70",{"pageContent":"The following example demonstrates attaching scan results to a test:\n\n```js\ntest('example with attachment', async ({ page }, testInfo) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();\n\n  await testInfo.attach('accessibility-scan-results', {\n    body: JSON.stringify(accessibilityScanResults, null, 2),\n    contentType: 'application/json'\n  });\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n## Using a test fixture for common axe configuration\n\n[Test fixtures](./test-fixtures) are a good way to share common `AxeBuilder` configuration across many tests. Some scenarios where this might be useful include:\n* Using a common set of rules among all of your tests\n* Suppressing a known violation in a common element which appears in many different pages\n* Attaching standalone accessibility reports consistently for many scans","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":204,"to":226}}}}],["c81cf55b-7176-4911-af54-40c720a3fa85",{"pageContent":"The following example demonstrates creating and using a test fixture that covers each of those scenarios.\n\n### Creating a fixture\n\nThis example fixture creates an `AxeBuilder` object which is pre-configured with shared `withTags()` and `exclude()` configuration.\n\n```js tab=js-ts title=\"axe-test.ts\"\nimport { test as base } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright';\n\ntype AxeFixture = {\n  makeAxeBuilder: () => AxeBuilder;\n};\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexport const test = base.extend<AxeFixture>({\n  makeAxeBuilder: async ({ page }, use) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":228,"to":250}}}}],["7584c092-48ed-46a0-aafa-e26818ca9d16",{"pageContent":"await use(makeAxeBuilder);\n  }\n});\nexport { expect } from '@playwright/test';\n```\n\n```js tab=js-js title=\"axe-test.js\"\nconst base = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default;\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexports.test = base.test.extend({\n  makeAxeBuilder: async ({ page }, use) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');\n\n    await use(makeAxeBuilder);\n  }\n});\nexports.expect = base.expect;\n```\n\n### Using a fixture\n\nTo use the fixture, replace the earlier examples' `new AxeBuilder({ page })` with the newly defined `makeAxeBuilder` fixture:\n\n```js\nconst { test, expect } = require('./axe-test');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":252,"to":283}}}}],["0bdbbd9c-6ac4-4e56-a0b9-a454645ddb85",{"pageContent":"To use the fixture, replace the earlier examples' `new AxeBuilder({ page })` with the newly defined `makeAxeBuilder` fixture:\n\n```js\nconst { test, expect } = require('./axe-test');\n\ntest('example using custom fixture', async ({ page, makeAxeBuilder }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include('#specific-element-under-test')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-accessibility-testing-js.md","title":"src-accessibility-testing-js","url":"https://playwright.dev/docs/src-accessibility-testing-js","loc":{"lines":{"from":280,"to":296}}}}],["18680297-375d-4b04-be49-ba339cf04786",{"pageContent":"---\nid: actionability\ntitle: \"Auto-waiting\"\n---\n\n## Introduction\n\nPlaywright performs a range of actionability checks on the elements before making actions to ensure these actions\nbehave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given `timeout`, action fails with the `TimeoutError`.\n\nFor example, for [`method: Locator.click`], Playwright will ensure that:\n- locator resolves to exactly one element\n- element is [Visible]\n- element is [Stable], as in not animating or completed animation\n- element [Receives Events], as in not obscured by other elements\n- element is [Enabled]\n\nHere is the complete list of actionability checks performed for each action:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":1,"to":18}}}}],["edee5358-1be7-4a32-9e94-babe04486761",{"pageContent":"| Action | [Visible] | [Stable] | [Receives Events] | [Enabled] | [Editable] |\n| :- | :-: | :-: | :-: | :-: | :-: |\n| [`method: Locator.check`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.click`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.dblclick`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.setChecked`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.tap`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.uncheck`] | Yes | Yes | Yes | Yes | - |\n| [`method: Locator.hover`] | Yes | Yes | Yes | - | - |\n| [`method: Locator.dragTo`] | Yes | Yes | Yes | - | - |\n| [`method: Locator.screenshot`] | Yes | Yes | - | - | - |\n| [`method: Locator.fill`] | Yes | - | - | Yes | Yes |\n| [`method: Locator.clear`] | Yes | - | - | Yes | Yes |\n| [`method: Locator.selectOption`] | Yes | - | - | Yes | - |\n| [`method: Locator.selectText`] | Yes | - | - | - | - |\n| [`method: Locator.scrollIntoViewIfNeeded`] | - | Yes | - | - | - |\n| [`method: Locator.blur`] | - | - | - | - | - |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":20,"to":36}}}}],["bfabb259-4d74-4b96-8fa0-10b77c57b0f3",{"pageContent":"| [`method: Locator.selectText`] | Yes | - | - | - | - |\n| [`method: Locator.scrollIntoViewIfNeeded`] | - | Yes | - | - | - |\n| [`method: Locator.blur`] | - | - | - | - | - |\n| [`method: Locator.dispatchEvent`] | - | - | - | - | - |\n| [`method: Locator.focus`] | - | - | - | - | - |\n| [`method: Locator.press`] | - | - | - | - | - |\n| [`method: Locator.pressSequentially`] | - | - | - | - | - |\n| [`method: Locator.setInputFiles`] | - | - | - | - | - |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":34,"to":41}}}}],["5f641849-ec8b-4c16-bd6c-a3d4e2a17911",{"pageContent":"## Forcing actions\n\nSome actions like [`method: Locator.click`] support `force` option that disables non-essential actionability checks,\nfor example passing truthy `force` to [`method: Locator.click`] method will not check that the target element actually\nreceives click events.\n\n## Assertions\n\nPlaywright includes auto-retrying assertions that remove flakiness by waiting until the condition is met, similarly to auto-waiting before actions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":43,"to":51}}}}],["a0bd3ffc-7915-4ef9-a6c8-5699b4b8e213",{"pageContent":"| Assertion | Description |\n| :- | :- |\n| [`method: LocatorAssertions.toBeAttached`] | Element is attached |\n| [`method: LocatorAssertions.toBeChecked`] | Checkbox is checked |\n| [`method: LocatorAssertions.toBeDisabled`] | Element is disabled |\n| [`method: LocatorAssertions.toBeEditable`] | Element is editable |\n| [`method: LocatorAssertions.toBeEmpty`] | Container is empty |\n| [`method: LocatorAssertions.toBeEnabled`] | Element is enabled |\n| [`method: LocatorAssertions.toBeFocused`] | Element is focused |\n| [`method: LocatorAssertions.toBeHidden`] | Element is not visible |\n| [`method: LocatorAssertions.toBeInViewport`] | Element intersects viewport |\n| [`method: LocatorAssertions.toBeVisible`] | Element is visible |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |\n| [`method: LocatorAssertions.toHaveAttribute`] | Element has a DOM attribute |\n| [`method: LocatorAssertions.toHaveClass`] | Element has a class property |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":53,"to":67}}}}],["2004f52b-8eb5-4904-90cd-28817810e106",{"pageContent":"| [`method: LocatorAssertions.toHaveAttribute`] | Element has a DOM attribute |\n| [`method: LocatorAssertions.toHaveClass`] | Element has a class property |\n| [`method: LocatorAssertions.toHaveCount`] | List has exact number of children |\n| [`method: LocatorAssertions.toHaveCSS`] | Element has CSS property |\n| [`method: LocatorAssertions.toHaveId`] | Element has an ID |\n| [`method: LocatorAssertions.toHaveJSProperty`] | Element has a JavaScript property |\n| [`method: LocatorAssertions.toHaveText`] | Element matches text |\n| [`method: LocatorAssertions.toHaveValue`] | Input has a value |\n| [`method: LocatorAssertions.toHaveValues`] | Select has options selected |\n| [`method: PageAssertions.toHaveTitle`] | Page has a title |\n| [`method: PageAssertions.toHaveURL`] | Page has a URL |\n| [`method: APIResponseAssertions.toBeOK`] | Response has an OK status |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":66,"to":77}}}}],["e148577c-29b5-4a77-823d-954d25dc3fab",{"pageContent":"Learn more in the [assertions guide](./test-assertions.md).\n\n## Visible\n\nElement is considered visible when it has non-empty bounding box and does not have `visibility:hidden` computed style.\n\nNote that according to this definition:\n* Elements of zero size **are not** considered visible.\n* Elements with `display:none` **are not** considered visible.\n* Elements with `opacity:0` **are** considered visible.\n\n## Stable\n\nElement is considered stable when it has maintained the same bounding box for at least two consecutive animation frames.\n\n## Enabled\n\nElement is considered enabled when it is **not disabled**.\n\nElement is **disabled** when:\n- it is a `<button>`, `<select>`, `<input>`, `<textarea>`, `<option>` or `<optgroup>` with a `[disabled]` attribute;\n- it is a `<button>`, `<select>`, `<input>`, `<textarea>`, `<option>` or `<optgroup>` that is a part of a `<fieldset>` with a `[disabled]` attribute;\n- it is a descendant of an element with `[aria-disabled=true]` attribute.\n\n## Editable","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":79,"to":103}}}}],["752b5252-7eb0-4a7a-a302-03e98164aaa7",{"pageContent":"## Editable\n\nElement is considered editable when it is [enabled] and is **not readonly**.\n\nElement is **readonly** when:\n- it is a `<select>`, `<input>` or `<textarea>` with a `[readonly]` attribute;\n- it has an `[aria-readonly=true]` attribute and an aria role that [supports it](https://w3c.github.io/aria/#aria-readonly).\n\n## Receives Events\n\nElement is considered receiving pointer events when it is the hit target of the pointer event at the action point. For example, when clicking at the point `(10;10)`, Playwright checks whether some other element (usually an overlay) will instead capture the click at `(10;10)`.\n\n\nFor example, consider a scenario where Playwright will click `Sign Up` button regardless of when the [`method: Locator.click`] call was made:\n- page is checking that user name is unique and `Sign Up` button is disabled;\n- after checking with the server, the disabled `Sign Up` button is replaced with another one that is now enabled.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":103,"to":118}}}}],["a1710c39-0e7e-46d3-9527-21b7f7d1fc34",{"pageContent":"[Visible]: #visible \"Visible\"\n[Stable]: #stable \"Stable\"\n[Enabled]: #enabled \"Enabled\"\n[Editable]: #editable \"Editable\"\n[Receives Events]: #receives-events \"Receives Events\"","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-actionability.md","title":"src-actionability","url":"https://playwright.dev/docs/src-actionability","loc":{"lines":{"from":120,"to":124}}}}],["bfc7e663-5ff3-42e9-86f0-46db1d5f794a",{"pageContent":"---\nid: api-testing\ntitle: \"API testing\"\n---\n\n## Introduction\n\nPlaywright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of\nyour application.\n\nSometimes you may want to send requests to the server directly from .NET without loading a page and running js code in it.\nA few examples where it may come in handy:\n- Test your server API.\n- Prepare server side state before visiting the web application in a test.\n- Validate server side post-conditions after running some actions in the browser.\n\nAll of that could be achieved via [APIRequestContext] methods.\n\nThe following examples rely on the [`Microsoft.Playwright.MSTest`](./test-runners.md) package which creates a Playwright and Page instance for each test.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":1,"to":23}}}}],["474a168c-1e40-498f-a428-79e4b283a7fb",{"pageContent":"## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.\n\nThe following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:\n- Create a new repository before running tests.\n- Create a few issues and validate server state.\n- Delete the repository after running tests.\n\n### Configure\n\nGitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests.\n\n```csharp\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":21,"to":51}}}}],["0b00cead-c639-4484-8d9a-fb87b635ec71",{"pageContent":"private IAPIRequestContext Request = null!;\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>();\n        // We set this header per GitHub guidelines.\n        headers.Add(\"Accept\", \"application/vnd.github.v3+json\");\n        // Add authorization token to all requests.\n        // Assuming personal access token available in the environment.\n        headers.Add(\"Authorization\", \"token \" + API_TOKEN);\n\n        Request = await this.Playwright.APIRequest.NewContextAsync(new() {\n            // All requests we send go to this API endpoint.\n            BaseURL = \"https://api.github.com\",\n            ExtraHTTPHeaders = headers,\n        });\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await Request.DisposeAsync();\n    }\n}\n```\n\n### Write tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":45,"to":77}}}}],["f8a84026-a49a-462b-98e4-356ccebb2f98",{"pageContent":"[TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await Request.DisposeAsync();\n    }\n}\n```\n\n### Write tests\n\nNow that we initialized request object we can add a few tests that will create new issues in the repository.\n```csharp\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = \"test\";\n    static string USER = Environment.GetEnvironmentVariable(\"GITHUB_USER\");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":69,"to":94}}}}],["5981b891-d5b7-4685-8e29-bfb1c14c646d",{"pageContent":"private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Bug] report 1\" },\n            { \"body\", \"Bug description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":94,"to":105}}}}],["2f85fc56-a6e6-454f-afca-054e769d6219",{"pageContent":"var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Bug] report 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Bug description\", issue?.GetProperty(\"body\").GetString());\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":107,"to":123}}}}],["7a4ebf3e-3083-4756-a793-353f1a38ea84",{"pageContent":"[TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":125,"to":138}}}}],["1582773b-2cb0-4707-81d5-5e0457887394",{"pageContent":"var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Feature] request 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Feature description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    // ...\n}\n```\n\n### Setup and teardown\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use `[SetUp]` and `[TearDown]` hooks for that.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":136,"to":161}}}}],["d73cbe3e-8b5c-4773-bd58-d1c300cec854",{"pageContent":"### Setup and teardown\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use `[SetUp]` and `[TearDown]` hooks for that.\n\n```csharp\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    // ...\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync(\"/user/repos\", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                [\"name\"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":159,"to":191}}}}],["94b66405-d1f2-45be-9cb6-4c6a5e3f3b1d",{"pageContent":"[TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync(\"/repos/\" + USER + \"/\" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n```\n\n### Complete test example\n\nHere is the complete example of an API test:\n\n```csharp\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = \"test-repo-2\";\n    static string USER = Environment.GetEnvironmentVariable(\"GITHUB_USER\");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":193,"to":226}}}}],["94bbb68e-2e80-4f21-b4bf-360e0fc507bc",{"pageContent":"private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Bug] report 1\" },\n            { \"body\", \"Bug description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":226,"to":237}}}}],["81ddea1f-5c61-4634-8ac7-b3efe1eda6ae",{"pageContent":"var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Bug] report 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Bug description\", issue?.GetProperty(\"body\").GetString());\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":239,"to":255}}}}],["97e92fdf-419c-40fc-a094-5623c9ed8995",{"pageContent":"[TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":257,"to":270}}}}],["6e62ce12-efc5-42fe-97b9-03e1b2954489",{"pageContent":"var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Feature] request 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Feature description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":268,"to":292}}}}],["1c9f65ce-c86c-4fb9-b6e4-832d77e1f34d",{"pageContent":"[TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>\n        {\n            // We set this header per GitHub guidelines.\n            { \"Accept\", \"application/vnd.github.v3+json\" },\n            // Add authorization token to all requests.\n            // Assuming personal access token available in the environment.\n            { \"Authorization\", \"token \" + API_TOKEN }\n        };\n\n        Request = await Playwright.APIRequest.NewContextAsync(new()\n        {\n            // All requests we send go to this API endpoint.\n            BaseURL = \"https://api.github.com\",\n            ExtraHTTPHeaders = headers,\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":287,"to":311}}}}],["c028d365-f050-4d28-ac5e-6788f7dc0f91",{"pageContent":"private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync(\"/user/repos\", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                [\"name\"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync(\"/repos/\" + USER + \"/\" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n```\n\n## Prepare server state via API calls\n\nThe following test creates a new issue via API and then navigates to the list of all issues in the\nproject to check that it appears at the top of the list. The check is performed using [LocatorAssertions].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":313,"to":343}}}}],["6987a6ce-abe9-45d8-8908-58dea9f764d4",{"pageContent":"```csharp\nclass TestGitHubAPI : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeFirstInTheList()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        // When inheriting from 'PlaywrightTest' it only gives you a Playwright instance. To get a Page instance, either start\n        // a browser, context, and page manually or inherit from 'PageTest' which will launch it for you.\n        await Page.GotoAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n        var firstIssue = Page.Locator(\"a[data-hovercard-type='issue']\").First;\n        await Expect(firstIssue).ToHaveTextAsync(\"[Feature] request 1\");\n    }\n}\n```\n\n## Check the server state after running user actions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":345,"to":368}}}}],["80f0c4a8-1056-4ceb-aded-18d9b4e52407",{"pageContent":"## Check the server state after running user actions\n\nThe following test creates a new issue via user interface in the browser and then checks via API if\nit was created:\n\n```csharp\n// Make sure to extend from PageTest if you want to use the Page class.\nclass GitHubTests : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeOnTheServer()\n    {\n        await Page.GotoAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n        await Page.Locator(\"text=New Issue\").ClickAsync();\n        await Page.Locator(\"[aria-label='Title']\").FillAsync(\"Bug report 1\");\n        await Page.Locator(\"[aria-label='Comment body']\").FillAsync(\"Bug description\");\n        await Page.Locator(\"text=Submit new issue\").ClickAsync();\n        var issueId = Page.Url.Substring(Page.Url.LastIndexOf('/'));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":368,"to":385}}}}],["50b88ce1-9cf5-41a3-b10f-fe6bffdb409c",{"pageContent":"var newIssue = await Request.GetAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues/\" + issueId);\n        await Expect(newIssue).ToBeOKAsync();\n        StringAssert.Contains(await newIssue.TextAsync(), \"Bug report 1\");\n    }\n}\n```\n\n## Reuse authentication state\n\nWeb apps use cookie-based or token-based authentication, where authenticated\nstate is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies).\nPlaywright provides [`method: APIRequestContext.storageState`] method that can be used to\nretrieve storage state from an authenticated context and then create new contexts with that state.\n\nStorage state is interchangeable between [BrowserContext] and [APIRequestContext]. You can\nuse it to log in via API calls and then create a new context with cookies already there.\nThe following code snippet retrieves state from an authenticated [APIRequestContext] and\ncreates a new [BrowserContext] with that state.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":387,"to":404}}}}],["fbda51cb-7789-4c42-ad2f-759442991cf8",{"pageContent":"```csharp\nvar requestContext = await Playwright.APIRequest.NewContextAsync(new()\n{\n    HttpCredentials = new()\n    {\n        Username = \"user\",\n        Password = \"passwd\"\n    },\n});\nawait requestContext.GetAsync(\"https://api.example.com/login\");\n// Save storage state into a variable.\nvar state = await requestContext.StorageStateAsync();\n\n// Create a new context with the saved storage state.\nvar context = await Browser.NewContextAsync(new() { StorageState = state });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-csharp.md","title":"src-api-testing-csharp","url":"https://playwright.dev/docs/src-api-testing-csharp","loc":{"lines":{"from":406,"to":421}}}}],["b7646c13-240d-4075-96d9-2b36cbc6f0d3",{"pageContent":"---\nid: api-testing\ntitle: \"API testing\"\n---\n\n## Introduction\n\nPlaywright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of\nyour application.\n\nSometimes you may want to send requests to the server directly from Java without loading a page and running js code in it.\nA few examples where it may come in handy:\n- Test your server API.\n- Prepare server side state before visiting the web application in a test.\n- Validate server side post-conditions after running some actions in the browser.\n\nAll of that could be achieved via [APIRequestContext] methods.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":1,"to":21}}}}],["9a4e8675-e93e-45bf-b130-4c718ef4848d",{"pageContent":"All of that could be achieved via [APIRequestContext] methods.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.\n\nThe following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:\n- Create a new repository before running tests.\n- Create a few issues and validate server state.\n- Delete the repository after running tests.\n\n### Configure\n\nGitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests.\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.HashMap;\nimport java.util.Map;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":17,"to":43}}}}],["06f9c3c9-4d77-4640-8391-4e00f83ec56a",{"pageContent":"import java.util.HashMap;\nimport java.util.Map;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put(\"Accept\", \"application/vnd.github.v3+json\");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put(\"Authorization\", \"token \" + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL(\"https://api.github.com\")\n      .setExtraHTTPHeaders(headers));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":42,"to":68}}}}],["693d87e8-1125-4435-b542-4e89f4dd1711",{"pageContent":"@BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n```\n\n### Write tests\n\nNow that we initialized request object we can add a few tests that will create new issues in the repository.\n```java\npackage org.example;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":70,"to":102}}}}],["e3f202ea-08bb-4c48-a1c7-44ff45648f1c",{"pageContent":"### Write tests\n\nNow that we initialized request object we can add a few tests that will create new issues in the repository.\n```java\npackage org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":98,"to":122}}}}],["f48b50f3-afeb-4ee3-b34e-e42df0bbfb9c",{"pageContent":"import java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = \"test-repo-2\";\n  private static final String USER = System.getenv(\"GITHUB_USER\");\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  // ...\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Bug] report 1\");\n    data.put(\"body\", \"Bug description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":118,"to":142}}}}],["281aaefb-ec27-49f1-ba67-ada3a3357dde",{"pageContent":"APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Bug] report 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Bug description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":144,"to":169}}}}],["2c70cce4-9261-4572-8b50-79881401ebc6",{"pageContent":"APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Feature] request 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Feature description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n}\n\n```\n\n### Setup and teardown\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use `@BeforeAll` and `@AfterAll` hooks for that.\n\n```java\npublic class TestGitHubAPI {\n  // ...","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":171,"to":198}}}}],["f7faf073-40ca-49ae-a3a1-ce30ce6a5313",{"pageContent":"```java\npublic class TestGitHubAPI {\n  // ...\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post(\"/user/repos\",\n      RequestOptions.create().setData(Collections.singletonMap(\"name\", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete(\"/repos/\" + USER + \"/\" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n  // ...\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n```\n\n### Complete test example\n\nHere is the complete example of an API test:\n\n```java\npackage org.example;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":196,"to":235}}}}],["a0012d46-26ab-4b17-99ea-0ab250ae999d",{"pageContent":"### Complete test example\n\nHere is the complete example of an API test:\n\n```java\npackage org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.*;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = \"test-repo-2\";\n  private static final String USER = System.getenv(\"GITHUB_USER\");\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":230,"to":261}}}}],["d8c9f7a5-d26e-4803-b222-7dfee9f72e12",{"pageContent":"private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put(\"Accept\", \"application/vnd.github.v3+json\");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put(\"Authorization\", \"token \" + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL(\"https://api.github.com\")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post(\"/user/repos\",\n      RequestOptions.create().setData(Collections.singletonMap(\"name\", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":260,"to":285}}}}],["49dc7cfe-1066-4554-9e61-ec2cfea40ad8",{"pageContent":"@BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete(\"/repos/\" + USER + \"/\" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Bug] report 1\");\n    data.put(\"body\", \"Bug description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":287,"to":329}}}}],["811500f3-ecc5-45d7-954a-95f98a296cd4",{"pageContent":"APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Bug] report 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Bug description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":331,"to":356}}}}],["30c0be30-66ff-433f-af88-79b8e50d51ad",{"pageContent":"APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Feature] request 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Feature description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n}\n```\n\nSee experimental [JUnit integration](./junit.md) to automatically initialize Playwright objects and more.\n\n## Prepare server state via API calls\n\nThe following test creates a new issue via API and then navigates to the list of all issues in the\nproject to check that it appears at the top of the list. The check is performed using [LocatorAssertions].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":358,"to":383}}}}],["8a998bf6-309e-4bab-b218-1edda5d9f21f",{"pageContent":"```java\npublic class TestGitHubAPI {\n  @Test\n  void lastCreatedIssueShouldBeFirstInTheList() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    page.navigate(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n    Locator firstIssue = page.locator(\"a[data-hovercard-type='issue']\").first();\n    assertThat(firstIssue).hasText(\"[Feature] request 1\");\n  }\n}\n```\n\n## Check the server state after running user actions\n\nThe following test creates a new issue via user interface in the browser and then checks via API if\nit was created:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":385,"to":406}}}}],["df3d8de0-63d7-4e56-b3d2-c6076286ab7c",{"pageContent":"## Check the server state after running user actions\n\nThe following test creates a new issue via user interface in the browser and then checks via API if\nit was created:\n\n```java\npublic class TestGitHubAPI {\n  @Test\n  void lastCreatedIssueShouldBeOnTheServer() {\n    page.navigate(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n    page.locator(\"text=New Issue\").click();\n    page.locator(\"[aria-label='Title']\").fill(\"Bug report 1\");\n    page.locator(\"[aria-label='Comment body']\").fill(\"Bug description\");\n    page.locator(\"text=Submit new issue\").click();\n    String issueId = page.url().substring(page.url().lastIndexOf('/'));\n\n    APIResponse newIssue = request.get(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues/\" + issueId);\n    assertThat(newIssue).isOK();\n    assertTrue(newIssue.text().contains(\"Bug report 1\"));\n  }\n}\n```\n\n## Reuse authentication state","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":403,"to":426}}}}],["ed99f17c-7a91-4b73-bf1d-9971a6d6d50f",{"pageContent":"## Reuse authentication state\n\nWeb apps use cookie-based or token-based authentication, where authenticated\nstate is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies).\nPlaywright provides [`method: APIRequestContext.storageState`] method that can be used to\nretrieve storage state from an authenticated context and then create new contexts with that state.\n\nStorage state is interchangeable between [BrowserContext] and [APIRequestContext]. You can\nuse it to log in via API calls and then create a new context with cookies already there.\nThe following code snippet retrieves state from an authenticated [APIRequestContext] and\ncreates a new [BrowserContext] with that state.\n\n```java\nAPIRequestContext requestContext = playwright.request().newContext(\n  new APIRequest.NewContextOptions().setHttpCredentials(\"user\", \"passwd\"));\nrequestContext.get(\"https://api.example.com/login\");\n// Save storage state into a variable.\nString state = requestContext.storageState();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":426,"to":443}}}}],["35081a7e-1b41-4714-9c29-12ab6f3b2eb9",{"pageContent":"// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-java.md","title":"src-api-testing-java","url":"https://playwright.dev/docs/src-api-testing-java","loc":{"lines":{"from":445,"to":447}}}}],["633c2dd5-02b5-4846-bb5f-ff4aad57dcde",{"pageContent":"---\nid: api-testing\ntitle: \"API testing\"\n---\n\n## Introduction\n\nPlaywright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of\nyour application.\n\nSometimes you may want to send requests to the server directly from Node.js without loading a page and running js code in it.\nA few examples where it may come in handy:\n- Test your server API.\n- Prepare server side state before visiting the web application in a test.\n- Validate server side post-conditions after running some actions in the browser.\n\nAll of that could be achieved via [APIRequestContext] methods.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":1,"to":21}}}}],["9b322e02-1e3c-4499-91f6-3f96f76bd90f",{"pageContent":"All of that could be achieved via [APIRequestContext] methods.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.\n\nThe following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:\n- Create a new repository before running tests.\n- Create a few issues and validate server state.\n- Delete the repository after running tests.\n\n### Configuration\n\nGitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests. You can either put them in the configuration file, or in the test file with `test.use()`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":17,"to":30}}}}],["e0b942d3-3a43-498c-9c68-664e373da42d",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  }\n});\n```\n\n**Proxy configuration**\n\nIf your tests need to run behind a proxy, you can specify this in the config and the `request` fixture\nwill pick it up automatically:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://my-proxy:8080',\n      username: 'user',\n      password: 'secret'\n    },\n  }\n});\n```\n\n### Writing tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":32,"to":67}}}}],["62697e3a-20de-4c25-8f23-c5d2685ac890",{"pageContent":"### Writing tests\n\nPlaywright Test comes with the built-in `request` fixture that respects configuration options like `baseURL` or `extraHTTPHeaders` we specified and is ready to send some requests.\n\nNow we can add a few tests that will create new issues in the repository.\n```js\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\ntest('should create a bug report', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Bug] report 1',\n      body: 'Bug description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Bug] report 1',\n    body: 'Bug description'\n  }));\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":67,"to":91}}}}],["e879d556-4989-497e-89cb-c9895263f675",{"pageContent":"test('should create a feature request', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n      body: 'Feature description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Feature] request 1',\n    body: 'Feature description'\n  }));\n});\n```\n\n### Setup and teardown\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use `beforeAll` and `afterAll` hooks for that.\n\n```js\ntest.beforeAll(async ({ request }) => {\n  // Create a new repository\n  const response = await request.post('/user/repos', {\n    data: {\n      name: REPO\n    }\n  });\n  expect(response.ok()).toBeTruthy();\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":93,"to":124}}}}],["62173208-be11-49ef-8dd7-6b16eead7c80",{"pageContent":"test.afterAll(async ({ request }) => {\n  // Delete the repository\n  const response = await request.delete(`/repos/${USER}/${REPO}`);\n  expect(response.ok()).toBeTruthy();\n});\n```\n\n## Using request context\n\nBehind the scenes, [`request` fixture](./api/class-fixtures#fixtures-request) will actually call [`method: APIRequest.newContext`]. You can always do that manually if you'd like more control. Below is a standalone script that does the same as `beforeAll` and `afterAll` from above.\n\n```js\nimport { request } from '@playwright/test';\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n(async () => {\n  // Create a context that will issue http requests.\n  const context = await request.newContext({\n    baseURL: 'https://api.github.com',\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":126,"to":146}}}}],["b125326f-562b-4845-8cef-1a83f601cb07",{"pageContent":"(async () => {\n  // Create a context that will issue http requests.\n  const context = await request.newContext({\n    baseURL: 'https://api.github.com',\n  });\n\n  // Create a repository.\n  await context.post('/user/repos', {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n    data: {\n      name: REPO\n    }\n  });\n\n  // Delete a repository.\n  await context.delete(`/repos/${USER}/${REPO}`, {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    }\n  });\n})();\n```\n\n## Sending API requests from UI tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":142,"to":171}}}}],["f402c819-26a6-4f37-80fc-85262caf7e06",{"pageContent":"## Sending API requests from UI tests\n\nWhile running tests inside browsers you may want to make calls to the HTTP API of your application. It may be helpful if you need to prepare server state before running a test or to check some postconditions on the server after performing some actions in the browser. All of that could be achieved via [APIRequestContext] methods.\n\n### Establishing preconditions\n\nThe following test creates a new issue via API and then navigates to the list of all issues in the\nproject to check that it appears at the top of the list.\n\n```js\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":171,"to":187}}}}],["9d046703-41e9-45d2-99e5-b04ed9f3f191",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":180,"to":206}}}}],["f71ae43c-d61d-481f-ab9d-b3f03c8304c7",{"pageContent":"test.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be first in the list', async ({ page }) => {\n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();\n  await expect(firstIssue).toHaveText('[Feature] request 1');\n});\n```\n\n### Validating postconditions\n\nThe following test creates a new issue via user interface in the browser and then uses checks if\nit was created via API:\n\n```js\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":203,"to":234}}}}],["cffc5ca5-3b01-4740-a308-4dec848bffd5",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":227,"to":253}}}}],["a2bb2a25-ad1e-404a-98f2-1317f1e0155c",{"pageContent":"test.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be on the server', async ({ page }) => {\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  await page.getByText('New Issue').click();\n  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');\n  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');\n  await page.getByText('Submit new issue').click();\n  const issueId = new URL(page.url()).pathname.split('/').pop();\n\n  const newIssue = await apiContext.get(\n      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`\n  );\n  expect(newIssue.ok()).toBeTruthy();\n  expect(newIssue.json()).toEqual(expect.objectContaining({\n    title: 'Bug report 1'\n  }));\n});\n```\n\n## Reusing authentication state","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":250,"to":273}}}}],["7a31b95b-eeb0-49cd-bb14-46cf5a08e2a2",{"pageContent":"## Reusing authentication state\n\nWeb apps use cookie-based or token-based authentication, where authenticated\nstate is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies).\nPlaywright provides [`method: APIRequestContext.storageState`] method that can be used to\nretrieve storage state from an authenticated context and then create new contexts with that state.\n\nStorage state is interchangeable between [BrowserContext] and [APIRequestContext]. You can\nuse it to log in via API calls and then create a new context with cookies already there.\nThe following code snippet retrieves state from an authenticated [APIRequestContext] and\ncreates a new [BrowserContext] with that state.\n\n```js\nconst requestContext = await request.newContext({\n  httpCredentials: {\n    username: 'user',\n    password: 'passwd'\n  }\n});\nawait requestContext.get(`https://api.example.com/login`);\n// Save storage state into the file.\nawait requestContext.storageState({ path: 'state.json' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":273,"to":294}}}}],["f9a82e5e-d134-4907-9569-c575e174dad4",{"pageContent":"// Create a new context with the saved storage state.\nconst context = await browser.newContext({ storageState: 'state.json' });\n```\n\n## Context request vs global request\n\nThere are two types of [APIRequestContext]:\n* associated with a [BrowserContext]\n* isolated instance, created via [`method: APIRequest.newContext`]\n\nThe main difference is that [APIRequestContext] accessible via [`property: BrowserContext.request`] and\n[`property: Page.request`] will populate request's `Cookie` header from the browser context and will\nautomatically update browser cookies if [APIResponse] has `Set-Cookie` header:\n\n```js\ntest('context request will share cookie storage with its browser context', async ({\n  page,\n  context,\n}) => {\n  await context.route('https://www.github.com/', async route => {\n    // Send an API request that shares cookie storage with the browser context.\n    const response = await context.request.fetch(route.request());\n    const responseHeaders = response.headers();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":296,"to":318}}}}],["c5bc615d-900d-49bb-b142-b6aebcdff1c6",{"pageContent":"// The response will have 'Set-Cookie' header.\n    const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will already contain all the cookies from the API response.\n    expect(new Map(contextCookies.map(({ name, value }) =>\n      [name, value])\n    )).toEqual(responseCookies);\n\n    await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n});\n```\n\nIf you don't want [APIRequestContext] to use and update cookies from the browser context, you can manually\ncreate a new instance of [APIRequestContext] which will have its own isolated cookies:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":320,"to":342}}}}],["190e6d08-fe37-43ae-8e5e-22100326347f",{"pageContent":"If you don't want [APIRequestContext] to use and update cookies from the browser context, you can manually\ncreate a new instance of [APIRequestContext] which will have its own isolated cookies:\n\n```js\ntest('global context request has isolated cookie storage', async ({\n  page,\n  context,\n  browser,\n  playwright\n}) => {\n  // Create a new instance of APIRequestContext with isolated cookie storage.\n  const request = await playwright.request.newContext();\n  await context.route('https://www.github.com/', async route => {\n    const response = await request.fetch(route.request());\n    const responseHeaders = response.headers();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":341,"to":355}}}}],["fa9d58ca-e822-40f1-90b4-180cf3a4c1d2",{"pageContent":"const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will not have any cookies from the isolated API request.\n    expect(contextCookies.length).toBe(0);\n\n    // Manually export cookie storage.\n    const storageState = await request.storageState();\n    // Create a new context and initialize it with the cookies from the global request.\n    const browserContext2 = await browser.newContext({ storageState });\n    const contextCookies2 = await browserContext2.cookies();\n    // The new browser context will already contain all the cookies from the API response.\n    expect(\n        new Map(contextCookies2.map(({ name, value }) => [name, value]))\n    ).toEqual(responseCookies);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":357,"to":374}}}}],["e24ef4d3-17e7-454f-ba91-439b816e42c9",{"pageContent":"await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n  await request.dispose();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-js.md","title":"src-api-testing-js","url":"https://playwright.dev/docs/src-api-testing-js","loc":{"lines":{"from":376,"to":384}}}}],["33b99617-f995-4ad4-94eb-6e88c5d68346",{"pageContent":"---\nid: api-testing\ntitle: \"API testing\"\n---\n\n## Introduction\n\nPlaywright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of\nyour application.\n\nSometimes you may want to send requests to the server directly from Python without loading a page and running js code in it.\nA few examples where it may come in handy:\n- Test your server API.\n- Prepare server side state before visiting the web application in a test.\n- Validate server side post-conditions after running some actions in the browser.\n\nAll of that could be achieved via [APIRequestContext] methods.\n\nThe following examples rely on the [`pytest-playwright`](./test-runners.md) package which add Playwright fixtures to the Pytest test-runner.\n\n## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":1,"to":23}}}}],["4235e3a7-d2a5-4539-bde1-37c7a12f480c",{"pageContent":"## Writing API Test\n\n[APIRequestContext] can send all kinds of HTTP(S) requests over network.\n\nThe following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:\n- Create a new repository before running tests.\n- Create a few issues and validate server state.\n- Delete the repository after running tests.\n\n### Configure\n\nGitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests.\n\n```python\nimport os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, APIRequestContext\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":21,"to":42}}}}],["75a1beaa-7729-4abe-9048-91e08e28837e",{"pageContent":"import pytest\nfrom playwright.sync_api import Playwright, APIRequestContext\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\n\n@pytest.fixture(scope=\"session\")\ndef api_request_context(\n    playwright: Playwright,\n) -> Generator[APIRequestContext, None, None]:\n    headers = {\n        # We set this header per GitHub guidelines.\n        \"Accept\": \"application/vnd.github.v3+json\",\n        # Add authorization token to all requests.\n        # Assuming personal access token available in the environment.\n        \"Authorization\": f\"token {GITHUB_API_TOKEN}\",\n    }\n    request_context = playwright.request.new_context(\n        base_url=\"https://api.github.com\", extra_http_headers=headers\n    )\n    yield request_context\n    request_context.dispose()\n\n```\n\n### Write tests\n\nNow that we initialized request object we can add a few tests that will create new issues in the repository.\n```python\nimport os\nfrom typing import Generator","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":38,"to":69}}}}],["b3c35821-6e1a-4759-a8e8-b4b5b360d60f",{"pageContent":"```\n\n### Write tests\n\nNow that we initialized request object we can add a few tests that will create new issues in the repository.\n```python\nimport os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, APIRequestContext\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\nGITHUB_USER = os.getenv(\"GITHUB_USER\")\nassert GITHUB_USER, \"GITHUB_USER is not set\"\n\nGITHUB_REPO = \"test\"\n\n# ...\n\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Bug] report 1\",\n        \"body\": \"Bug description\",\n    }\n    new_issue = api_request_context.post(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data)\n    assert new_issue.ok","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":62,"to":90}}}}],["5f8fa047-d9be-4554-85ad-122e1192f785",{"pageContent":"issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(filter(lambda issue: issue[\"title\"] == \"[Bug] report 1\", issues_response))[0]\n    assert issue\n    assert issue[\"body\"] == \"Bug description\"\n\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Feature] request 1\",\n        \"body\": \"Feature description\",\n    }\n    new_issue = api_request_context.post(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data)\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(filter(lambda issue: issue[\"title\"] == \"[Feature] request 1\", issues_response))[0]\n    assert issue\n    assert issue[\"body\"] == \"Feature description\"\n```\n\n### Setup and teardown","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":92,"to":115}}}}],["f344b6f2-6536-4afd-873d-953a628f4463",{"pageContent":"### Setup and teardown\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use a [session fixture](https://docs.pytest.org/en/stable/how-to/fixtures.html#fixture-scopes) for that. The part before `yield` is the before all and after is the after all.\n\n```python\n# ...\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_repository(\n    api_request_context: APIRequestContext,\n) -> Generator[None, None, None]:\n    # Before all\n    new_repo = api_request_context.post(\"/user/repos\", data={\"name\": GITHUB_REPO})\n    assert new_repo.ok\n    yield\n    # After all\n    deleted_repo = api_request_context.delete(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}\")\n    assert deleted_repo.ok\n```\n\n### Complete test example\n\nHere is the complete example of an API test:\n\n```python\nfrom enum import auto\nimport os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, Page, APIRequestContext, expect","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":115,"to":144}}}}],["38d33054-7f8c-421e-999e-bf8fa4be35af",{"pageContent":"```python\nfrom enum import auto\nimport os\nfrom typing import Generator\n\nimport pytest\nfrom playwright.sync_api import Playwright, Page, APIRequestContext, expect\n\nGITHUB_API_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\nassert GITHUB_API_TOKEN, \"GITHUB_API_TOKEN is not set\"\n\nGITHUB_USER = os.getenv(\"GITHUB_USER\")\nassert GITHUB_USER, \"GITHUB_USER is not set\"\n\nGITHUB_REPO = \"test\"\n\n\n@pytest.fixture(scope=\"session\")\ndef api_request_context(\n    playwright: Playwright,\n) -> Generator[APIRequestContext, None, None]:\n    headers = {\n        # We set this header per GitHub guidelines.\n        \"Accept\": \"application/vnd.github.v3+json\",\n        # Add authorization token to all requests.\n        # Assuming personal access token available in the environment.\n        \"Authorization\": f\"token {GITHUB_API_TOKEN}\",\n    }\n    request_context = playwright.request.new_context(\n        base_url=\"https://api.github.com\", extra_http_headers=headers\n    )\n    yield request_context\n    request_context.dispose()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":138,"to":170}}}}],["1be4b9ce-1658-45b2-af61-19639889c541",{"pageContent":"@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_repository(\n    api_request_context: APIRequestContext,\n) -> Generator[None, None, None]:\n    # Before all\n    new_repo = api_request_context.post(\"/user/repos\", data={\"name\": GITHUB_REPO})\n    assert new_repo.ok\n    yield\n    # After all\n    deleted_repo = api_request_context.delete(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}\")\n    assert deleted_repo.ok\n\n\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Bug] report 1\",\n        \"body\": \"Bug description\",\n    }\n    new_issue = api_request_context.post(\n        f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n    )\n    assert new_issue.ok","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":173,"to":194}}}}],["d9eb283b-12d0-4b59-9d39-50cd4545d3cb",{"pageContent":"issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(\n        filter(lambda issue: issue[\"title\"] == \"[Bug] report 1\", issues_response)\n    )[0]\n    assert issue\n    assert issue[\"body\"] == \"Bug description\"\n\n\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\n    data = {\n        \"title\": \"[Feature] request 1\",\n        \"body\": \"Feature description\",\n    }\n    new_issue = api_request_context.post(\n        f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n    )\n    assert new_issue.ok\n\n    issues = api_request_context.get(f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    assert issues.ok\n    issues_response = issues.json()\n    issue = list(\n        filter(lambda issue: issue[\"title\"] == \"[Feature] request 1\", issues_response)\n    )[0]\n    assert issue\n    assert issue[\"body\"] == \"Feature description\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":196,"to":224}}}}],["c8f41250-6926-45ee-b2a3-2805c92afdd7",{"pageContent":"## Prepare server state via API calls\n\nThe following test creates a new issue via API and then navigates to the list of all issues in the\nproject to check that it appears at the top of the list. The check is performed using [LocatorAssertions].\n\n```python\ndef test_last_created_issue_should_be_first_in_the_list(api_request_context: APIRequestContext, page: Page) -> None:\n    def create_issue(title: str) -> None:\n        data = {\n            \"title\": title,\n            \"body\": \"Feature description\",\n        }\n        new_issue = api_request_context.post(\n            f\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\", data=data\n        )\n        assert new_issue.ok\n    create_issue(\"[Feature] request 1\")\n    create_issue(\"[Feature] request 2\")\n    page.goto(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    first_issue = page.locator(\"a[data-hovercard-type='issue']\").first\n    expect(first_issue).to_have_text(\"[Feature] request 2\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":226,"to":247}}}}],["cbcee5a9-c22a-4aae-a309-776c3290037f",{"pageContent":"## Check the server state after running user actions\n\nThe following test creates a new issue via user interface in the browser and then checks via API if\nit was created:\n\n```python\ndef test_last_created_issue_should_be_on_the_server(api_request_context: APIRequestContext, page: Page) -> None:\n    page.goto(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\")\n    page.locator(\"text=New issue\").click()\n    page.locator(\"[aria-label='Title']\").fill(\"Bug report 1\")\n    page.locator(\"[aria-label='Comment body']\").fill(\"Bug description\")\n    page.locator(\"text=Submit new issue\").click()\n    issue_id = page.url.split(\"/\")[-1]\n\n    new_issue = api_request_context.get(f\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues/{issue_id}\")\n    assert new_issue.ok\n    assert new_issue.json()[\"title\"] == \"[Bug] report 1\"\n    assert new_issue.json()[\"body\"] == \"Bug description\"\n```\n\n## Reuse authentication state","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":249,"to":269}}}}],["de94ca74-90ff-4758-a46a-ac8255b45ef6",{"pageContent":"## Reuse authentication state\n\nWeb apps use cookie-based or token-based authentication, where authenticated\nstate is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies).\nPlaywright provides [`method: APIRequestContext.storageState`] method that can be used to\nretrieve storage state from an authenticated context and then create new contexts with that state.\n\nStorage state is interchangeable between [BrowserContext] and [APIRequestContext]. You can\nuse it to log in via API calls and then create a new context with cookies already there.\nThe following code snippet retrieves state from an authenticated [APIRequestContext] and\ncreates a new [BrowserContext] with that state.\n\n```python\nrequest_context = playwright.request.new_context(http_credentials={\"username\": \"test\", \"password\": \"test\"})\nrequest_context.get(\"https://api.example.com/login\")\n# Save storage state into a variable.\nstate = request_context.storage_state()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":269,"to":285}}}}],["d37b45df-c745-4782-bfa4-b01b4a69eb4e",{"pageContent":"# Create a new context with the saved storage state.\ncontext = browser.new_context(storage_state=state)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-api-testing-python.md","title":"src-api-testing-python","url":"https://playwright.dev/docs/src-api-testing-python","loc":{"lines":{"from":287,"to":289}}}}],["7d04cf0c-f3fb-414f-a265-1151f0cc3c4b",{"pageContent":"---\nid: aria-snapshots\ntitle: \"Snapshot testing\"\n---\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Overview\n\nWith Playwright's Snapshot testing you can assert the accessibility tree of a page against a predefined snapshot template.\n\n```js\nawait page.goto('https://playwright.dev/');\nawait expect(page.getByRole('banner')).toMatchAriaSnapshot(`\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n`);\n```\n\n```python sync\npage.goto('https://playwright.dev/')\nexpect(page.query_selector('banner')).to_match_aria_snapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":1,"to":31}}}}],["3ec9f856-b978-4358-ba47-d16256d9d0a3",{"pageContent":"```python async\nawait page.goto('https://playwright.dev/')\nawait expect(page.query_selector('banner')).to_match_aria_snapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\")\n```\n\n```java\npage.navigate(\"https://playwright.dev/\");\nassertThat(page.locator(\"banner\")).matchesAriaSnapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":33,"to":53}}}}],["cbb90d09-5d6c-41eb-a92d-06b1eb206f4b",{"pageContent":"```csharp\nawait page.GotoAsync(\"https://playwright.dev/\");\nawait Expect(page.Locator(\"banner\")).ToMatchAriaSnapshotAsync(@\"\n  - banner:\n    - heading \"\"Playwright enables reliable end-to-end testing for modern web apps.\"\" [level=1]\n    - link \"\"Get started\"\"\n    - link \"\"Star microsoft/playwright on GitHub\"\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\");\n```\n\n<LiteYouTube\n    id=\"P4R6hnsE0UY\"\n    title=\"Getting started with ARIA Snapshots\"\n/>\n\n## Assertion testing vs Snapshot testing\n\nSnapshot testing and assertion testing serve different purposes in test automation:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":55,"to":73}}}}],["d7a68231-c985-4f56-8141-b42c77c84a16",{"pageContent":"## Assertion testing vs Snapshot testing\n\nSnapshot testing and assertion testing serve different purposes in test automation:\n\n### Assertion testing\nAssertion testing is a targeted approach where you assert specific values or conditions about elements or components. For instance, with Playwright, [`method: LocatorAssertions.toHaveText`]\nverifies that an element contains the expected text, and [`method: LocatorAssertions.toHaveValue`]\nconfirms that an input field has the expected value.\nAssertion tests are specific and generally check the current state of an element or property\nagainst an expected, predefined state.\nThey work well for predictable, single-value checks but are limited in scope when testing the\nbroader structure or variations.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":71,"to":82}}}}],["886a9639-9980-4736-8f62-1b578f86e374",{"pageContent":"**Advantages**\n- **Clarity**: The intent of the test is explicit and easy to understand.\n- **Specificity**: Tests focus on particular aspects of functionality, making them more robust\n  against unrelated changes.\n- **Debugging**: Failures provide targeted feedback, pointing directly to the problematic aspect.\n\n**Disadvantages**\n- **Verbose for complex outputs**: Writing assertions for complex data structures or large outputs\n  can be cumbersome and error-prone.\n- **Maintenance overhead**: As code evolves, manually updating assertions can be time-consuming.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":84,"to":93}}}}],["030f054a-69c1-4330-84d6-06648f1af637",{"pageContent":"### Snapshot testing\nSnapshot testing captures a “snapshot” or representation of the entire\nstate of an element, component, or data at a given moment, which is then saved for future\ncomparisons. When re-running tests, the current state is compared to the snapshot, and if there\nare differences, the test fails. This approach is especially useful for complex or dynamic\nstructures, where manually asserting each detail would be too time-consuming. Snapshot testing\nis broader and more holistic than assertion testing, allowing you to track more complex changes over time.\n\n**Advantages**\n- **Simplifies complex outputs**: For example, testing a UI component's rendered output can be tedious with traditional assertions. Snapshots capture the entire output for easy comparison.\n- **Quick Feedback loop**: Developers can easily spot unintended changes in the output.\n- **Encourages consistency**: Helps maintain consistent output as code evolves.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":95,"to":106}}}}],["9b7c7497-51af-4084-9cc7-5c01fb661d01",{"pageContent":"**Disadvantages**\n- **Over-Reliance**: It can be tempting to accept changes to snapshots without fully understanding\n  them, potentially hiding bugs.\n- **Granularity**: Large snapshots may be hard to interpret when differences arise, especially\n  if minor changes affect large portions of the output.\n- **Suitability**: Not ideal for highly dynamic content where outputs change frequently or\n  unpredictably.\n\n### When to use\n\n- **Snapshot testing** is ideal for:\n  - UI testing of whole pages and components.\n  - Broad structural checks for complex UI components.\n  - Regression testing for outputs that rarely change structure.\n\n- **Assertion testing** is ideal for:\n  - Core logic validation.\n  - Computed value testing.\n  - Fine-grained tests requiring precise conditions.\n\nBy combining snapshot testing for broad, structural checks and assertion testing for specific functionality, you can achieve a well-rounded testing strategy.\n\n## Aria snapshots","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":108,"to":130}}}}],["bd33f861-6420-47c0-b8f7-f127c82ae4b6",{"pageContent":"By combining snapshot testing for broad, structural checks and assertion testing for specific functionality, you can achieve a well-rounded testing strategy.\n\n## Aria snapshots\n\nIn Playwright, aria snapshots provide a YAML representation of the accessibility tree of a page.\nThese snapshots can be stored and compared later to verify if the page structure remains consistent or meets defined\nexpectations.\n\nThe YAML format describes the hierarchical structure of accessible elements on the page, detailing **roles**, **attributes**, **values**, and **text content**.\nThe structure follows a tree-like syntax, where each node represents an accessible element, and indentation indicates\nnested elements.\n\nEach accessible element in the tree is represented as a YAML node:\n\n```yaml\n- role \"name\" [attribute=value]\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":128,"to":144}}}}],["cb3267bc-32bb-4de4-be67-c7d75741ff89",{"pageContent":"Each accessible element in the tree is represented as a YAML node:\n\n```yaml\n- role \"name\" [attribute=value]\n```\n\n- **role**: Specifies the ARIA or HTML role of the element (e.g., `heading`, `list`, `listitem`, `button`).\n- **\"name\"**: Accessible name of the element. Quoted strings indicate exact values, `/patterns/` are used for regular expression.\n- **[attribute=value]**: Attributes and values, in square brackets, represent specific ARIA attributes, such\n  as `checked`, `disabled`, `expanded`, `level`, `pressed`, or `selected`.\n\nThese values are derived from ARIA attributes or calculated based on HTML semantics. To inspect the accessibility tree\nstructure of a page, use the [Chrome DevTools Accessibility Tab](https://developer.chrome.com/docs/devtools/accessibility/reference#tab).\n\n\n## Snapshot matching","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":140,"to":155}}}}],["52824691-911a-40ac-b10c-feb74426cc6c",{"pageContent":"## Snapshot matching\n\nThe [`method: LocatorAssertions.toMatchAriaSnapshot`] assertion method in Playwright compares the accessible\nstructure of the locator scope with a predefined aria snapshot template, helping validate the page's state against\ntesting requirements.\n\nFor the following DOM:\n\n```html\n<h1>title</h1>\n```\n\nYou can match it using the following snapshot template:\n\n```js\nawait expect(page.locator('body')).toMatchAriaSnapshot(`\n  - heading \"title\"\n`);\n```\n\n```python sync\nexpect(page.locator(\"body\")).to_match_aria_snapshot(\"\"\"\n  - heading \"title\"\n\"\"\")\n```\n\n```python async\nawait expect(page.locator(\"body\")).to_match_aria_snapshot(\"\"\"\n  - heading \"title\"\n\"\"\")\n```\n\n```java\nassertThat(page.locator(\"body\")).matchesAriaSnapshot(\"\"\"\n  - heading \"title\"\n\"\"\");\n```\n\n```csharp\nawait Expect(page.Locator(\"body\")).ToMatchAriaSnapshotAsync(@\"\n  - heading \"\"title\"\"\n\");\n```\n\nWhen matching, the snapshot template is compared to the current accessibility tree of the page:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":155,"to":199}}}}],["c46027c1-5d56-41f0-a36e-8f23a32136af",{"pageContent":"When matching, the snapshot template is compared to the current accessibility tree of the page:\n\n* If the tree structure matches the template, the test passes; otherwise, it fails, indicating a mismatch between\n  expected and actual accessibility states.\n* The comparison is case-sensitive and collapses whitespace, so indentation and line breaks are ignored.\n* The comparison is order-sensitive, meaning the order of elements in the snapshot template must match the order in the\n  page's accessibility tree.\n\n\n### Partial matching\n\nYou can perform partial matches on nodes by omitting attributes or accessible names, enabling verification of specific\nparts of the accessibility tree without requiring exact matches. This flexibility is helpful for dynamic or irrelevant\nattributes.\n\n```html\n<button>Submit</button>\n```\n\n*aria snapshot*\n\n```yaml\n- button\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":199,"to":222}}}}],["722e2434-57c3-4e24-851f-59e931e17f61",{"pageContent":"```html\n<button>Submit</button>\n```\n\n*aria snapshot*\n\n```yaml\n- button\n```\n\nIn this example, the button role is matched, but the accessible name (\"Submit\") is not specified, allowing the test to\npass regardless of the button's label.\n\n<hr/>\n\nFor elements with ARIA attributes like `checked` or `disabled`, omitting these attributes allows partial matching,\nfocusing solely on role and hierarchy.\n\n```html\n<input type=\"checkbox\" checked>\n```\n\n*aria snapshot for partial match*\n\n```yaml\n- checkbox\n```\n\nIn this partial match, the `checked` attribute is ignored, so the test will pass regardless of the checkbox state.\n\n<hr/>\n\nSimilarly, you can partially match children in lists or groups by omitting specific list items or nested elements.\n\n```html\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n\n*aria snapshot for partial match*\n\n```yaml\n- list\n  - listitem: Feature B\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":214,"to":261}}}}],["48f5102b-7f1f-40f4-8850-1217a79d5971",{"pageContent":"```html\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n\n*aria snapshot for partial match*\n\n```yaml\n- list\n  - listitem: Feature B\n```\n\nPartial matches let you create flexible snapshot tests that verify essential page structure without enforcing\nspecific content or attributes.\n\n### Strict matching\n\nBy default, a template containing the subset of children will be matched:\n\n```html\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n\n*aria snapshot for partial match*\n\n```yaml\n- list\n  - listitem: Feature B\n```\n\n\nThe `/children` property can be used to control how child elements are matched:\n- `contain` (default): Matches if all specified children are present in order\n- `equal`: Matches if the children exactly match the specified list in order\n- `deep-equal`: Matches if the children exactly match the specified list in order, including nested children","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":248,"to":289}}}}],["65a37586-7e34-4332-983d-d61a17257f2a",{"pageContent":"```html\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n\n*aria snapshot will fail due to Feature C not being in the template*\n\n```yaml\n- list\n  - /children: equal\n  - listitem: Feature A\n  - listitem: Feature B\n```\n\n### Matching with regular expressions\n\nRegular expressions allow flexible matching for elements with dynamic or variable text. Accessible names and text can\nsupport regex patterns.\n\n```html\n<h1>Issues 12</h1>\n```\n\n*aria snapshot with regular expression*\n\n```yaml\n- heading /Issues \\d+/\n```\n\n## Generating snapshots\n\nCreating aria snapshots in Playwright helps ensure and maintain your application's structure.\nYou can generate snapshots in various ways depending on your testing setup and workflow.\n\n### Generating snapshots with the Playwright code generator\n\nIf you're using Playwright's [Code Generator](./codegen.md), generating aria snapshots is streamlined with its\ninteractive interface:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":291,"to":331}}}}],["9fd95e90-b9ab-464f-a352-e4296e529e2f",{"pageContent":"### Generating snapshots with the Playwright code generator\n\nIf you're using Playwright's [Code Generator](./codegen.md), generating aria snapshots is streamlined with its\ninteractive interface:\n\n- **\"Assert snapshot\" Action**: In the code generator, you can use the \"Assert snapshot\" action to automatically create\na snapshot assertion for the selected elements. This is a quick way to capture the aria snapshot as part of your\nrecorded test flow.\n\n- **\"Aria snapshot\" Tab**: The \"Aria snapshot\" tab within the code generator interface visually represents the\naria snapshot for a selected locator, letting you explore, inspect, and verify element roles, attributes, and\naccessible names to aid snapshot creation and review.\n\n### Updating snapshots with `@playwright/test` and the `--update-snapshots` flag\n* langs: js\n\nWhen using the Playwright test runner (`@playwright/test`), you can automatically update snapshots with the `--update-snapshots` flag, `-u` for short.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":328,"to":344}}}}],["8b338b5b-844f-48e4-8647-e6f2fc152b84",{"pageContent":"When using the Playwright test runner (`@playwright/test`), you can automatically update snapshots with the `--update-snapshots` flag, `-u` for short.\n\nRunning tests with the `--update-snapshots` flag will update snapshots that did not match. Matching snapshots will not be updated.\n\n```bash\nnpx playwright test --update-snapshots\n```\n\nUpdating snapshots is useful when application structure changes require new snapshots as a baseline. Note that Playwright will wait for the maximum expect timeout specified in the test runner configuration to ensure the page is settled before taking the snapshot. It might be necessary to adjust the `--timeout` if the test hits the timeout while generating snapshots.\n\n#### Empty template for snapshot generation\n\nPassing an empty string as the template in an assertion generates a snapshot on-the-fly:\n\n```js\nawait expect(locator).toMatchAriaSnapshot('');\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":344,"to":360}}}}],["edb6be7a-fd1d-4b57-87b6-cc42b050fa7b",{"pageContent":"#### Empty template for snapshot generation\n\nPassing an empty string as the template in an assertion generates a snapshot on-the-fly:\n\n```js\nawait expect(locator).toMatchAriaSnapshot('');\n```\n\nNote that Playwright will wait for the maximum expect timeout specified in the test runner configuration to ensure the\npage is settled before taking the snapshot. It might be necessary to adjust the `--timeout` if the test hits the timeout\nwhile generating snapshots.\n\n#### Snapshot patch files\n\nWhen updating snapshots, Playwright creates patch files that capture differences. These patch files can be reviewed,\napplied, and committed to source control, allowing teams to track structural changes over time and ensure updates are\nconsistent with application requirements.\n\nThe way source code is updated can be changed using the `--update-source-method` flag. There are several options available:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":354,"to":372}}}}],["9442c47b-3221-48d1-a2b1-481189fddee0",{"pageContent":"The way source code is updated can be changed using the `--update-source-method` flag. There are several options available:\n\n- **\"patch\"** (default): Generates a unified diff file that can be applied to the source code using `git apply`.\n- **\"3way\"**: Generates merge conflict markers in your source code, allowing you to choose whether to accept changes.\n- **\"overwrite\"**: Overwrites the source code with the new snapshot values.\n\n```bash\nnpx playwright test --update-snapshots --update-source-method=3way\n```\n\n#### Snapshots as separate files\n\nTo store your snapshots in a separate file, use the `toMatchAriaSnapshot` method with the `name` option, specifying a `.aria.yml` file extension.\n\n```js\nawait expect(page.getByRole('main')).toMatchAriaSnapshot({ name: 'main.aria.yml' });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":372,"to":388}}}}],["ec541b84-095a-4413-b355-0163c500880f",{"pageContent":"```js\nawait expect(page.getByRole('main')).toMatchAriaSnapshot({ name: 'main.aria.yml' });\n```\n\nBy default, snapshots from a test file `example.spec.ts` are placed in the `example.spec.ts-snapshots` directory. As snapshots should be the same across browsers, only one snapshot is saved even if testing with multiple browsers. Should you wish, you can customize the [snapshot path template](./api/class-testconfig#test-config-snapshot-path-template) using the following configuration:\n\n```js\nexport default defineConfig({\n  expect: {\n    toMatchAriaSnapshot: {\n      pathTemplate: '__snapshots__/{testFilePath}/{arg}{ext}',\n    },\n  },\n});\n```\n\n### Using the `Locator.ariaSnapshot` method\n\nThe [`method: Locator.ariaSnapshot`] method allows you to programmatically create a YAML representation of accessible\nelements within a locator's scope, especially helpful for generating snapshots dynamically during test execution.\n\n**Example**:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":386,"to":407}}}}],["432db75f-1215-48e8-a685-f29018aa1a64",{"pageContent":"**Example**:\n\n```js\nconst snapshot = await page.locator('body').ariaSnapshot();\nconsole.log(snapshot);\n```\n\n```python sync\nsnapshot = page.locator(\"body\").aria_snapshot()\nprint(snapshot)\n```\n\n```python async\nsnapshot = await page.locator(\"body\").aria_snapshot()\nprint(snapshot)\n```\n\n```java\nString snapshot = page.locator(\"body\").ariaSnapshot();\nSystem.out.println(snapshot);\n```\n\n```csharp\nvar snapshot = await page.Locator(\"body\").AriaSnapshotAsync();\nConsole.WriteLine(snapshot);\n```\n\nThis command outputs the aria snapshot within the specified locator's scope in YAML format, which you can validate\nor store as needed.\n\n## Accessibility tree examples\n\n### Headings with level attributes\n\nHeadings can include a `level` attribute indicating their heading level.\n\n```html\n<h1>Title</h1>\n<h2>Subtitle</h2>\n```\n\n*aria snapshot*\n\n```yaml\n- heading \"Title\" [level=1]\n- heading \"Subtitle\" [level=2]\n```\n\n### Text nodes\n\nStandalone or descriptive text elements appear as text nodes.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":407,"to":457}}}}],["e23dc709-68f4-4987-8c5f-e7196e83447b",{"pageContent":"*aria snapshot*\n\n```yaml\n- heading \"Title\" [level=1]\n- heading \"Subtitle\" [level=2]\n```\n\n### Text nodes\n\nStandalone or descriptive text elements appear as text nodes.\n\n```html\n<div>Sample accessible name</div>\n```\n\n*aria snapshot*\n\n```yaml\n- text: Sample accessible name\n```\n\n### Inline multiline text\n\nMultiline text, such as paragraphs, is normalized in the aria snapshot.\n\n```html\n<p>Line 1<br>Line 2</p>\n```\n\n*aria snapshot*\n\n```yaml\n- paragraph: Line 1 Line 2\n```\n\n### Links\n\nLinks display their text or composed content from pseudo-elements.\n\n```html\n<a href=\"#more-info\">Read more about Accessibility</a>\n```\n\n*aria snapshot*\n\n```yaml\n- link \"Read more about Accessibility\"\n```\n\n### Text boxes\n\nInput elements of type `text` show their `value` attribute content.\n\n```html\n<input type=\"text\" value=\"Enter your name\">\n```\n\n*aria snapshot*\n\n```yaml\n- textbox: Enter your name\n```\n\n### Lists with items\n\nOrdered and unordered lists include their list items.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":448,"to":513}}}}],["37098acb-bfd1-4e51-9647-62782f0eb870",{"pageContent":"```html\n<input type=\"text\" value=\"Enter your name\">\n```\n\n*aria snapshot*\n\n```yaml\n- textbox: Enter your name\n```\n\n### Lists with items\n\nOrdered and unordered lists include their list items.\n\n```html\n<ul aria-label=\"Main Features\">\n  <li>Feature 1</li>\n  <li>Feature 2</li>\n</ul>\n```\n\n*aria snapshot*\n\n```yaml\n- list \"Main Features\":\n  - listitem: Feature 1\n  - listitem: Feature 2\n```\n\n### Grouped elements\n\nGroups capture nested elements, such as `<details>` elements with summary content.\n\n```html\n<details>\n  <summary>Summary</summary>\n  <p>Detail content here</p>\n</details>\n```\n\n*aria snapshot*\n\n```yaml\n- group: Summary\n```\n\n### Attributes and states\n\nCommonly used ARIA attributes, like `checked`, `disabled`, `expanded`, `level`, `pressed`, and `selected`, represent\ncontrol states.\n\n#### Checkbox with `checked` attribute\n\n```html\n<input type=\"checkbox\" checked>\n```\n\n*aria snapshot*\n\n```yaml\n- checkbox [checked]\n```\n\n#### Button with `pressed` attribute","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":501,"to":564}}}}],["dd7fa571-9e50-4ec1-bc72-447c64fd7928",{"pageContent":"#### Checkbox with `checked` attribute\n\n```html\n<input type=\"checkbox\" checked>\n```\n\n*aria snapshot*\n\n```yaml\n- checkbox [checked]\n```\n\n#### Button with `pressed` attribute\n\n```html\n<button aria-pressed=\"true\">Toggle</button>\n```\n\n*aria snapshot*\n\n```yaml\n- button \"Toggle\" [pressed=true]\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-aria-snapshots.md","title":"src-aria-snapshots","url":"https://playwright.dev/docs/src-aria-snapshots","loc":{"lines":{"from":552,"to":574}}}}],["b8f3ae34-4585-473e-b1bd-ef3ad21117cb",{"pageContent":"---\nid: auth\ntitle: \"Authentication\"\n---\n\n## Introduction\n\nPlaywright executes tests in isolated environments called [browser contexts](./browser-contexts.md). This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.\n\n## Core concepts\n\nRegardless of the authentication strategy you choose, you are likely to store authenticated browser state on the file system.\n\nWe recommend to create `playwright/.auth` directory and add it to your `.gitignore`. Your authentication routine will produce authenticated browser state and save it to a file in this `playwright/.auth` directory. Later on, tests will reuse this state and start already authenticated.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":1,"to":14}}}}],["40dee75e-bcbc-440e-9822-6279f118a5c2",{"pageContent":":::danger\nThe browser state file may contain sensitive cookies and headers that could be used to impersonate you or your test account.\nWe strongly discourage checking them into private or public repositories.\n:::\n\n```bash tab=bash-bash\nmkdir -p playwright/.auth\necho $'\\nplaywright/.auth' >> .gitignore\n```\n\n```batch tab=bash-batch\nmd playwright\\.auth\necho. >> .gitignore\necho \"playwright/.auth\" >> .gitignore\n```\n\n```powershell tab=bash-powershell\nNew-Item -ItemType Directory -Force -Path playwright\\.auth\nAdd-Content -path .gitignore \"`r`nplaywright/.auth\"\n```\n\n## Basic: shared account in all tests\n* langs: js\n\nThis is the **recommended** approach for tests **without server-side state**. Authenticate once in the **setup project**, save the authentication state, and then reuse it to bootstrap each test already authenticated.\n\n**When to use**\n- When you can imagine all your tests running at the same time with the same account, without affecting each other.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":16,"to":43}}}}],["b919aeb4-b4be-48cc-8336-9f71d7291d35",{"pageContent":"**When to use**\n- When you can imagine all your tests running at the same time with the same account, without affecting each other.\n\n**When not to use**\n- Your tests modify server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting, and you run tests in parallel. In this case, tests must use different accounts.\n- Your authentication is browser-specific.\n\n**Details**\n\nCreate `tests/auth.setup.ts` that will prepare authenticated browser state for all other tests.\n\n```js title=\"tests/auth.setup.ts\"\nimport { test as setup, expect } from '@playwright/test';\nimport path from 'path';\n\nconst authFile = path.join(__dirname, '../playwright/.auth/user.json');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":42,"to":57}}}}],["65dd8a9a-517a-4959-9cb8-e84a4b9ea668",{"pageContent":"```js title=\"tests/auth.setup.ts\"\nimport { test as setup, expect } from '@playwright/test';\nimport path from 'path';\n\nconst authFile = path.join(__dirname, '../playwright/.auth/user.json');\n\nsetup('authenticate', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":53,"to":71}}}}],["a88032e4-5c7d-4bd6-8f9f-02e2a89db3b4",{"pageContent":"// End of authentication steps.\n\n  await page.context().storageState({ path: authFile });\n});\n```\n\nCreate a new `setup` project in the config and declare it as a [dependency](./test-projects.md#dependencies) for all your testing projects. This project will always run and authenticate before all the tests. All testing projects should use the authenticated state as `storageState`.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    // Setup project\n    { name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // Use prepared auth state.\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":73,"to":97}}}}],["8832ef0a-8126-46df-808d-93ff6f2ba8c0",{"pageContent":"{\n      name: 'firefox',\n      use: {\n        ...devices['Desktop Firefox'],\n        // Use prepared auth state.\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\nTests start already authenticated because we specified `storageState` in the config.\n\n```js title=\"tests/example.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // page is authenticated\n});\n```\n\nNote that you need to delete the stored state when it expires. If you don't need to keep the state between test runs, write the browser state under [`property: TestProject.outputDir`], which is automatically cleaned up before every test run.\n\n### Authenticating in UI mode\n* langs: js\n\nUI mode will not run the `setup` project by default to improve testing speed. We recommend to authenticate by manually running the `auth.setup.ts` from time to time, whenever existing authentication expires.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":99,"to":127}}}}],["f245baf2-33ba-48d3-a7d7-cdd2583adb00",{"pageContent":"First [enable the `setup` project in the filters](./test-ui-mode#filtering-tests), then click the triangle button next to `auth.setup.ts` file, and then disable the `setup` project in the filters again.\n\n\n## Moderate: one account per parallel worker\n* langs: js\n\nThis is the **recommended** approach for tests that **modify server-side state**. In Playwright, worker processes run in parallel. In this approach, each parallel worker is authenticated once. All tests ran by worker are reusing the same authentication state. We will need multiple testing accounts, one per each parallel worker.\n\n**When to use**\n- Your tests modify shared server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting.\n\n**When not to use**\n- Your tests do not modify any shared server-side state. In this case, all tests can use a single shared account.\n\n**Details**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":129,"to":143}}}}],["abc21a2b-58d0-4f7c-9dcd-820e41f19618",{"pageContent":"**When not to use**\n- Your tests do not modify any shared server-side state. In this case, all tests can use a single shared account.\n\n**Details**\n\nWe will authenticate once per [worker process](./test-parallel.md#worker-processes), each with a unique account.\n\nCreate `playwright/fixtures.ts` file that will [override `storageState` fixture](./test-fixtures.md#overriding-fixtures) to authenticate once per worker. Use [`property: TestInfo.parallelIndex`] to differentiate between workers.\n\n```js title=\"playwright/fixtures.ts\"\nimport { test as baseTest, expect } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  // Use the same storage state for all tests in this worker.\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":140,"to":157}}}}],["99dbc343-28ab-4f13-a045-5154ecfeb335",{"pageContent":"// Authenticate once per worker with a worker-scoped fixture.\n  workerStorageState: [async ({ browser }, use) => {\n    // Use parallelIndex as a unique identifier for each worker.\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      // Reuse existing authentication state if any.\n      await use(fileName);\n      return;\n    }\n\n    // Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const page = await browser.newPage({ storageState: undefined });\n\n    // Acquire a unique account, for example create a new one.\n    // Alternatively, you can have a list of precreated accounts for testing.\n    // Make sure that accounts are unique, so that multiple team members\n    // can run tests at the same time without interference.\n    const account = await acquireAccount(id);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":159,"to":178}}}}],["8a1f2535-f2ee-48e8-acf7-56ff3f2b4cc0",{"pageContent":"// Perform authentication steps. Replace these actions with your own.\n    await page.goto('https://github.com/login');\n    await page.getByLabel('Username or email address').fill(account.username);\n    await page.getByLabel('Password').fill(account.password);\n    await page.getByRole('button', { name: 'Sign in' }).click();\n    // Wait until the page receives the cookies.\n    //\n    // Sometimes login flow sets cookies in the process of several redirects.\n    // Wait for the final URL to ensure that the cookies are actually set.\n    await page.waitForURL('https://github.com/');\n    // Alternatively, you can wait until the page reaches a state where all cookies are set.\n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n    // End of authentication steps.\n\n    await page.context().storageState({ path: fileName });\n    await page.close();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":180,"to":200}}}}],["322235c8-37f4-45f6-8af6-3ae49e2ce89f",{"pageContent":"// End of authentication steps.\n\n    await page.context().storageState({ path: fileName });\n    await page.close();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```\n\nNow, each test file should import `test` from our fixtures file instead of `@playwright/test`. No changes are needed in the config.\n\n```js title=\"tests/example.spec.ts\"\n// Important: import our fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\ntest('test', async ({ page }) => {\n  // page is authenticated\n});\n```\n\n\n## Signing in before each test\n* langs: java, python, csharp\n\nThe Playwright API can [automate interaction](./input.md) with a login form.\n\nThe following example logs into GitHub. Once these steps are executed,\nthe browser context will be authenticated.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":193,"to":220}}}}],["460e5677-0627-4f6d-8db7-475b1553859c",{"pageContent":"The Playwright API can [automate interaction](./input.md) with a login form.\n\nThe following example logs into GitHub. Once these steps are executed,\nthe browser context will be authenticated.\n\n```java\nPage page = context.newPage();\npage.navigate(\"https://github.com/login\");\n// Interact with login form\npage.getByLabel(\"Username or email address\").fill(\"username\");\npage.getByLabel(\"Password\").fill(\"password\");\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n// Continue with the test\n```\n\n```python async\npage = await context.new_page()\nawait page.goto('https://github.com/login')\n\n# Interact with login form\nawait page.get_by_label(\"Username or email address\").fill(\"username\")\nawait page.get_by_label(\"Password\").fill(\"password\")\nawait page.get_by_role(\"button\", name=\"Sign in\").click()\n# Continue with the test\n```\n\n```python sync\npage = context.new_page()\npage.goto('https://github.com/login')","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":217,"to":246}}}}],["54541375-99c4-4eed-9f2c-dd8f99b00a37",{"pageContent":"```python sync\npage = context.new_page()\npage.goto('https://github.com/login')\n\n# Interact with login form\npage.get_by_label(\"Username or email address\").fill(\"username\")\npage.get_by_label(\"Password\").fill(\"password\")\npage.get_by_role(\"button\", name=\"Sign in\").click()\n# Continue with the test\n```\n\n```csharp\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://github.com/login\");\n// Interact with login form\nawait page.GetByLabel(\"Username or email address\").FillAsync(\"username\");\nawait page.GetByLabel(\"Password\").FillAsync(\"password\");\nawait page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" }).ClickAsync();\n// Continue with the test\n```\n\nRedoing login for every test can slow down test execution. To mitigate that, reuse\nexisting authentication state instead.\n\n## Reusing signed in state\n* langs: java, csharp, python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":244,"to":269}}}}],["24a546d8-1aff-470f-bff3-0cda793928b7",{"pageContent":"Redoing login for every test can slow down test execution. To mitigate that, reuse\nexisting authentication state instead.\n\n## Reusing signed in state\n* langs: java, csharp, python\n\nPlaywright provides a way to reuse the signed-in state in the tests. That way you can log\nin only once and then skip the log in step for all of the tests.\n\nWeb apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) or in [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API). Playwright provides [`method: BrowserContext.storageState`] method that can be used to retrieve storage state from authenticated contexts and then create new contexts with prepopulated state.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":265,"to":274}}}}],["c1d76567-66e6-4ee0-9ac7-30b64728792f",{"pageContent":"Cookies, local storage and IndexedDB state can be used across different browsers. They depend on your application's authentication model which may require some combination of cookies, local storage or IndexedDB.\n\nThe following code snippet retrieves state from an authenticated context and creates a new context with that state.\n\n```java\n// Save storage state into the file.\ncontext.storageState(new BrowserContext.StorageStateOptions().setPath(Paths.get(\"state.json\")));\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(\n  new Browser.NewContextOptions().setStorageStatePath(Paths.get(\"state.json\")));\n```\n\n```python async\n# Save storage state into the file.\nstorage = await context.storage_state(path=\"state.json\")\n\n# Create a new context with the saved storage state.\ncontext = await browser.new_context(storage_state=\"state.json\")\n```\n\n```python sync\n# Save storage state into the file.\nstorage = context.storage_state(path=\"state.json\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":276,"to":299}}}}],["a69ce2f0-b732-428d-a21d-8171cff72833",{"pageContent":"```python sync\n# Save storage state into the file.\nstorage = context.storage_state(path=\"state.json\")\n\n# Create a new context with the saved storage state.\ncontext = browser.new_context(storage_state=\"state.json\")\n```\n\n```csharp\n// Save storage state into the file.\n// Tests are executed in <TestProject>\\bin\\Debug\\netX.0\\ therefore relative path is used to reference playwright/.auth created in project root\nawait context.StorageStateAsync(new()\n{\n    Path = \"../../../playwright/.auth/state.json\"\n});\n\n// Create a new context with the saved storage state.\nvar context = await browser.NewContextAsync(new()\n{\n    StorageStatePath = \"../../../playwright/.auth/state.json\"\n});\n```\n\n\n## Advanced scenarios\n\n### Authenticate with API request\n* langs: js\n\n**When to use**\n- Your web application supports authenticating via API that is easier/faster than interacting with the app UI.\n\n**Details**\n\nWe will send the API request with [APIRequestContext] and then save authenticated state as usual.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":297,"to":331}}}}],["6603f662-2536-40ad-808c-e1f0beedefd3",{"pageContent":"**Details**\n\nWe will send the API request with [APIRequestContext] and then save authenticated state as usual.\n\nIn the [setup project](#basic-shared-account-in-all-tests):\n\n```js title=\"tests/auth.setup.ts\"\nimport { test as setup } from '@playwright/test';\n\nconst authFile = 'playwright/.auth/user.json';\n\nsetup('authenticate', async ({ request }) => {\n  // Send authentication request. Replace with your own.\n  await request.post('https://github.com/login', {\n    form: {\n      'user': 'user',\n      'password': 'password'\n    }\n  });\n  await request.storageState({ path: authFile });\n});\n```\n\nAlternatively, in a [worker fixture](#moderate-one-account-per-parallel-worker):\n\n```js title=\"playwright/fixtures.ts\"\nimport { test as baseTest, request } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":329,"to":357}}}}],["20e1edc6-1662-4690-a933-113eb4ed6172",{"pageContent":"```js title=\"playwright/fixtures.ts\"\nimport { test as baseTest, request } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  // Use the same storage state for all tests in this worker.\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),\n\n  // Authenticate once per worker with a worker-scoped fixture.\n  workerStorageState: [async ({}, use) => {\n    // Use parallelIndex as a unique identifier for each worker.\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      // Reuse existing authentication state if any.\n      await use(fileName);\n      return;\n    }\n\n    // Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const context = await request.newContext({ storageState: undefined });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":354,"to":377}}}}],["e95b7230-2324-42e2-95e7-dea6b3536156",{"pageContent":"// Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const context = await request.newContext({ storageState: undefined });\n\n    // Acquire a unique account, for example create a new one.\n    // Alternatively, you can have a list of precreated accounts for testing.\n    // Make sure that accounts are unique, so that multiple team members\n    // can run tests at the same time without interference.\n    const account = await acquireAccount(id);\n\n    // Send authentication request. Replace with your own.\n    await context.post('https://github.com/login', {\n      form: {\n        'user': 'user',\n        'password': 'password'\n      }\n    });\n\n    await context.storageState({ path: fileName });\n    await context.dispose();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```\n\n### Multiple signed in roles\n* langs: js\n\n**When to use**\n- You have more than one role in your end to end tests, but you can reuse accounts across all tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":376,"to":404}}}}],["c99a34ba-9c6c-4998-a915-376c189e4429",{"pageContent":"### Multiple signed in roles\n* langs: js\n\n**When to use**\n- You have more than one role in your end to end tests, but you can reuse accounts across all tests.\n\n**Details**\n\nWe will authenticate multiple times in the setup project.\n\n```js title=\"tests/auth.setup.ts\"\nimport { test as setup, expect } from '@playwright/test';\n\nconst adminFile = 'playwright/.auth/admin.json';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":400,"to":413}}}}],["b4ca7c5a-a9d8-4222-84b0-bea052ceeb3e",{"pageContent":"```js title=\"tests/auth.setup.ts\"\nimport { test as setup, expect } from '@playwright/test';\n\nconst adminFile = 'playwright/.auth/admin.json';\n\nsetup('authenticate as admin', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('admin');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  // End of authentication steps.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":410,"to":429}}}}],["b9bbc9e8-3bce-4217-95d6-5649d37489df",{"pageContent":"// End of authentication steps.\n\n  await page.context().storageState({ path: adminFile });\n});\n\nconst userFile = 'playwright/.auth/user.json';\n\nsetup('authenticate as user', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  // End of authentication steps.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":429,"to":450}}}}],["b322a6d6-49d4-42f5-8bbf-e92cff58d8fe",{"pageContent":"// End of authentication steps.\n\n  await page.context().storageState({ path: userFile });\n});\n```\n\nAfter that, specify `storageState` for each test file or test group, **instead of** setting it in the config.\n\n```js title=\"tests/example.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest.use({ storageState: 'playwright/.auth/admin.json' });\n\ntest('admin test', async ({ page }) => {\n  // page is authenticated as admin\n});\n\ntest.describe(() => {\n  test.use({ storageState: 'playwright/.auth/user.json' });\n\n  test('user test', async ({ page }) => {\n    // page is authenticated as a user\n  });\n});\n```\n\nSee also about [authenticating in the UI mode](#authenticating-in-ui-mode).\n\n### Testing multiple roles together\n* langs: js\n\n**When to use**\n- You need to test how multiple authenticated roles interact together, in a single test.\n\n**Details**\n\nUse multiple [BrowserContext]s and [Page]s with different storage states in the same test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":450,"to":486}}}}],["e86bbd09-8edc-4f4e-a54f-ba60d3e39715",{"pageContent":"**Details**\n\nUse multiple [BrowserContext]s and [Page]s with different storage states in the same test.\n\n```js title=\"tests/example.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  // adminContext and all pages inside, including adminPage, are signed in as \"admin\".\n  const adminContext = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });\n  const adminPage = await adminContext.newPage();\n\n  // userContext and all pages inside, including userPage, are signed in as \"user\".\n  const userContext = await browser.newContext({ storageState: 'playwright/.auth/user.json' });\n  const userPage = await userContext.newPage();\n\n  // ... interact with both adminPage and userPage ...\n\n  await adminContext.close();\n  await userContext.close();\n});\n```\n\n### Testing multiple roles with POM fixtures\n* langs: js\n\n**When to use**\n- You need to test how multiple authenticated roles interact together, in a single test.\n\n**Details**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":484,"to":513}}}}],["e8137cff-9307-46f5-9517-383a8d87b919",{"pageContent":"### Testing multiple roles with POM fixtures\n* langs: js\n\n**When to use**\n- You need to test how multiple authenticated roles interact together, in a single test.\n\n**Details**\n\nYou can introduce fixtures that will provide a page authenticated as each role.\n\nBelow is an example that [creates fixtures](./test-fixtures.md#creating-a-fixture) for two [Page Object Models](./pom.md) - admin POM and user POM. It assumes `adminStorageState.json` and `userStorageState.json` files were created in the global setup.\n\n```js title=\"playwright/fixtures.ts\"\nimport { test as base, type Page, type Locator } from '@playwright/test';\n\n// Page Object Model for the \"admin\" page.\n// Here you can add locators and helper methods specific to the admin page.\nclass AdminPage {\n  // Page signed in as \"admin\".\n  page: Page;\n\n  // Example locator pointing to \"Welcome, Admin\" greeting.\n  greeting: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.greeting = page.locator('#greeting');\n  }\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":507,"to":535}}}}],["cabca344-daf8-4d66-922b-383a09931b0a",{"pageContent":"// Example locator pointing to \"Welcome, Admin\" greeting.\n  greeting: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.greeting = page.locator('#greeting');\n  }\n}\n\n// Page Object Model for the \"user\" page.\n// Here you can add locators and helper methods specific to the user page.\nclass UserPage {\n  // Page signed in as \"user\".\n  page: Page;\n\n  // Example locator pointing to \"Welcome, User\" greeting.\n  greeting: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.greeting = page.locator('#greeting');\n  }\n}\n\n// Declare the types of your fixtures.\ntype MyFixtures = {\n  adminPage: AdminPage;\n  userPage: UserPage;\n};","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":528,"to":556}}}}],["b717cadc-327b-45aa-ac8d-0ff57488571f",{"pageContent":"// Declare the types of your fixtures.\ntype MyFixtures = {\n  adminPage: AdminPage;\n  userPage: UserPage;\n};\n\nexport * from '@playwright/test';\nexport const test = base.extend<MyFixtures>({\n  adminPage: async ({ browser }, use) => {\n    const context = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });\n    const adminPage = new AdminPage(await context.newPage());\n    await use(adminPage);\n    await context.close();\n  },\n  userPage: async ({ browser }, use) => {\n    const context = await browser.newContext({ storageState: 'playwright/.auth/user.json' });\n    const userPage = new UserPage(await context.newPage());\n    await use(userPage);\n    await context.close();\n  },\n});\n\n```\n\n```js title=\"tests/example.spec.ts\"\n// Import test with our new fixtures.\nimport { test, expect } from '../playwright/fixtures';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":552,"to":578}}}}],["2930d919-68e3-482e-9486-5716e101795c",{"pageContent":"```\n\n```js title=\"tests/example.spec.ts\"\n// Import test with our new fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\n// Use adminPage and userPage fixtures in the test.\ntest('admin and user', async ({ adminPage, userPage }) => {\n  // ... interact with both adminPage and userPage ...\n  await expect(adminPage.greeting).toHaveText('Welcome, Admin');\n  await expect(userPage.greeting).toHaveText('Welcome, User');\n});\n```\n\n\n### Session storage","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":574,"to":589}}}}],["8b0e566d-f1dd-4701-97ab-53b51f27f850",{"pageContent":"### Session storage\n\nReusing authenticated state covers [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) based authentication. Rarely, [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) is used for storing information associated with the signed-in state. Session storage is specific to a particular domain and is not persisted across page loads. Playwright does not provide API to persist session storage, but the following snippet can be used to save/load session storage.\n\n```js\n// Get session storage and store as env variable\nconst sessionStorage = await page.evaluate(() => JSON.stringify(sessionStorage));\nfs.writeFileSync('playwright/.auth/session.json', sessionStorage, 'utf-8');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":589,"to":596}}}}],["223acfbb-2cd5-4cff-9134-1e7f6bd21c48",{"pageContent":"// Set session storage in a new context\nconst sessionStorage = JSON.parse(fs.readFileSync('playwright/.auth/session.json', 'utf-8'));\nawait context.addInitScript(storage => {\n  if (window.location.hostname === 'example.com') {\n    for (const [key, value] of Object.entries(storage))\n      window.sessionStorage.setItem(key, value);\n  }\n}, sessionStorage);\n```\n\n```java\n// Get session storage and store as env variable\nString sessionStorage = (String) page.evaluate(\"JSON.stringify(sessionStorage)\");\nSystem.getenv().put(\"SESSION_STORAGE\", sessionStorage);\n\n// Set session storage in a new context\nString sessionStorage = System.getenv(\"SESSION_STORAGE\");\ncontext.addInitScript(\"(storage => {\\n\" +\n  \"  if (window.location.hostname === 'example.com') {\\n\" +\n  \"    const entries = JSON.parse(storage);\\n\" +\n  \"     for (const [key, value] of Object.entries(entries)) {\\n\" +\n  \"      window.sessionStorage.setItem(key, value);\\n\" +\n  \"    };\\n\" +\n  \"  }\\n\" +\n  \"})('\" + sessionStorage + \"')\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":598,"to":623}}}}],["9a8233d5-b20b-46d6-9962-cf64c88e7a5d",{"pageContent":"```python async\nimport os\n# Get session storage and store as env variable\nsession_storage = await page.evaluate(\"() => JSON.stringify(sessionStorage)\")\nos.environ[\"SESSION_STORAGE\"] = session_storage\n\n# Set session storage in a new context\nsession_storage = os.environ[\"SESSION_STORAGE\"]\nawait context.add_init_script(\"\"\"(storage => {\n  if (window.location.hostname === 'example.com') {\n    const entries = JSON.parse(storage)\n    for (const [key, value] of Object.entries(entries)) {\n      window.sessionStorage.setItem(key, value)\n    }\n  }\n})('\"\"\" + session_storage + \"')\")\n```\n\n```python sync\nimport os\n# Get session storage and store as env variable\nsession_storage = page.evaluate(\"() => JSON.stringify(sessionStorage)\")\nos.environ[\"SESSION_STORAGE\"] = session_storage","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":625,"to":647}}}}],["49a260d5-3318-4137-81d0-108c317283a7",{"pageContent":"```python sync\nimport os\n# Get session storage and store as env variable\nsession_storage = page.evaluate(\"() => JSON.stringify(sessionStorage)\")\nos.environ[\"SESSION_STORAGE\"] = session_storage\n\n# Set session storage in a new context\nsession_storage = os.environ[\"SESSION_STORAGE\"]\ncontext.add_init_script(\"\"\"(storage => {\n  if (window.location.hostname === 'example.com') {\n    const entries = JSON.parse(storage)\n    for (const [key, value] of Object.entries(entries)) {\n      window.sessionStorage.setItem(key, value)\n    }\n  }\n})('\"\"\" + session_storage + \"')\")\n```\n\n```csharp\n// Get session storage and store as env variable\nvar sessionStorage = await page.EvaluateAsync<string>(\"() => JSON.stringify(sessionStorage)\");\nEnvironment.SetEnvironmentVariable(\"SESSION_STORAGE\", sessionStorage);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":643,"to":664}}}}],["654b066a-1104-491e-80fb-aa43ee0d7605",{"pageContent":"// Set session storage in a new context\nvar loadedSessionStorage = Environment.GetEnvironmentVariable(\"SESSION_STORAGE\");\nawait context.AddInitScriptAsync(@\"(storage => {\n    if (window.location.hostname === 'example.com') {\n      const entries = JSON.parse(storage);\n      for (const [key, value] of Object.entries(entries)) {\n        window.sessionStorage.setItem(key, value);\n      }\n    }\n  })('\" + loadedSessionStorage + \"')\");\n```\n\n### Avoid authentication in some tests\n* langs: js\n\nYou can reset storage state in a test file to avoid authentication that was set up for the whole project.\n\n```js title=\"not-signed-in.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Reset storage state for this file to avoid being authenticated\ntest.use({ storageState: { cookies: [], origins: [] } });\n\ntest('not signed in test', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-auth.md","title":"src-auth","url":"https://playwright.dev/docs/src-auth","loc":{"lines":{"from":666,"to":692}}}}],["909e69c8-72ca-4afb-8dca-123005ce64e4",{"pageContent":"---\nid: best-practices\ntitle: \"Best Practices\"\n---\n\n## Introduction\n\nThis guide should help you to make sure you are following our best practices and writing tests that are more resilient.\n\n## Testing philosophy\n\n### Test user-visible behavior\n\nAutomated tests should verify that the application code works for the end users, and avoid relying on implementation details such as things which users will not typically use, see, or even know about such as the name of a function, whether something is an array, or the CSS class of some element. The end user will see or interact with what is rendered on the page, so your test should typically only see/interact with the same rendered output.\n\n### Make tests as isolated as possible","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":1,"to":16}}}}],["358e292b-1989-4077-83d1-6e0a6d810248",{"pageContent":"### Make tests as isolated as possible\n\nEach test should be completely isolated from another test and should run independently with its own local storage, session storage, data, cookies etc. [Test isolation](./browser-contexts.md) improves reproducibility, makes debugging easier and prevents cascading test failures.\n\nIn order to avoid repetition for a particular part of your test you can use [before and after hooks](/api/class-test.md). Within your test file add a before hook to run a part of your test before each test such as going to a particular URL or logging in to a part of your app. This keeps your tests isolated as no test relies on another. However it is also ok to have a little duplication when tests are simple enough especially if it keeps your tests clearer and easier to read and maintain.\n\n```js\nimport { test } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":16,"to":23}}}}],["4c267fd8-0e81-492a-8542-754b9541c04d",{"pageContent":"```js\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  // Runs before each test and signs in each page.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n});\n\ntest('first', async ({ page }) => {\n  // page is signed in.\n});\n\ntest('second', async ({ page }) => {\n  // page is signed in.\n});\n```\n\nYou can also reuse the signed-in state in the tests with [setup project](./auth.md#basic-shared-account-in-all-tests). That way you can log in only once and then skip the log in step for all of the tests.\n\n### Avoid testing third-party dependencies","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":22,"to":44}}}}],["c89c0ec3-364d-4ba0-87c4-a7183f6ac5d0",{"pageContent":"### Avoid testing third-party dependencies\n\nOnly test what you control. Don't try to test links to external sites or third party servers that you do not control. Not only is it time consuming and can slow down your tests but also you cannot control the content of the page you are linking to, or if there are cookie banners or overlay pages or anything else that might cause your test to fail.\n\nInstead, use the [Playwright Network API](/network.md#handle-requests) and guarantee the response needed.\n\n```js\nawait page.route('**/api/fetch_data_third_party_dependency', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\n### Testing with a database\n\nIf working with a database then make sure you control the data. Test against a staging environment and make sure it doesn't change. For visual regression tests make sure the operating system and browser versions are the same.\n\n## Best Practices\n\n### Use locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":44,"to":64}}}}],["4a5c2fbd-8693-4acc-912e-1f96e0b92168",{"pageContent":"## Best Practices\n\n### Use locators\n\nIn order to write end to end tests we need to first find elements on the webpage. We can do this by using Playwright's built in [locators](./locators.md). Locators come with auto waiting and retry-ability. Auto waiting means that Playwright performs a range of actionability checks on the elements, such as ensuring the element is visible and enabled before it performs the click. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts.\n\n```js\n// 👍\npage.getByRole('button', { name: 'submit' });\n```\n\n#### Use chaining and filtering\n\nLocators can be [chained](./locators.md#matching-inside-a-locator) to narrow down the search to a particular part of the page.\n\n```js\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n```\n\nYou can also [filter locators](./locators.md#filtering-locators) by text or by another locator.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":62,"to":81}}}}],["2730c6e9-5c90-45e7-a089-fea977918236",{"pageContent":"```js\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n```\n\nYou can also [filter locators](./locators.md#filtering-locators) by text or by another locator.\n\n```js\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n#### Prefer user-facing attributes to XPath or CSS selectors\n\nYour DOM can easily change so having your tests depend on your DOM structure can lead to failing tests. For example consider selecting this button by its CSS classes. Should the designer change something then the class might change, thus breaking your test.\n\n\n```js\n// 👎\npage.locator('button.buttonIcon.episode-actions-later');\n```\n\nUse locators that are resilient to changes in the DOM.\n\n```js\n// 👍\npage.getByRole('button', { name: 'submit' });\n```\n### Generate locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":77,"to":107}}}}],["871cc982-88b8-4eca-b0be-27e618cf7218",{"pageContent":"Use locators that are resilient to changes in the DOM.\n\n```js\n// 👍\npage.getByRole('button', { name: 'submit' });\n```\n### Generate locators\n\nPlaywright has a [test generator](./codegen.md) that can generate tests and pick locators for you. It will look at your page and figure out the best locator, prioritizing role, text and test id locators. If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n#### Use `codegen` to generate locators\n\nTo pick a locator run the `codegen` command followed by the URL that you would like to pick a locator from.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright codegen playwright.dev\n```\n\n</TabItem>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":101,"to":130}}}}],["87593f51-68e7-4939-85f7-8a42fefcb4f1",{"pageContent":"```bash\nnpx playwright codegen playwright.dev\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright codegen playwright.dev\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright codegen playwright.dev\n```\n\n</TabItem>\n\n</Tabs>\n\nThis will open a new browser window as well as the Playwright inspector. To pick a locator first click on the 'Record' button to stop the recording. By default when you run the `codegen` command it will start a new recording. Once you stop the recording the 'Pick Locator' button will be available to click.\n\nYou can then hover over any element on your page in the browser window and see the locator highlighted below your cursor. Clicking on an element will add the locator into the Playwright inspector. You can either copy the locator and paste into your test file or continue to explore the locator by editing it in the Playwright Inspector, for example by modifying the text, and seeing the results in the browser window.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":126,"to":152}}}}],["733d1718-556b-495c-a93f-b70bbaa58231",{"pageContent":"<img width=\"1394\" alt=\"generating locators with codegen\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212103268-e7d8ee8b-d307-4cba-be13-831f3fbb1f40.png\" />\n\n#### Use the VS Code extension to generate locators\n\nYou can also use the [VS Code Extension](./getting-started-vscode.md) to generate locators as well as record a test. The VS Code extension also gives you a great developer experience when writing, running, and debugging tests.\n\n<img width=\"1394\" alt=\"generating locators in vs code with codegen\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212269873-aca04043-16ce-4627-906f-7351d09740ab.png\" />\n\n### Use web first assertions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":154,"to":162}}}}],["db54cc7d-8a4e-401a-a8f8-27550ff8d146",{"pageContent":"### Use web first assertions\n\nAssertions are a way to verify that the expected result and the actual result matched or not. By using [web first assertions](./test-assertions.md) Playwright will wait until the expected condition is met. For example, when testing an alert message, a test would click a button that makes a message appear and check that the alert message is there. If the alert message takes half a second to appear, assertions such as `toBeVisible()` will wait and retry if needed.\n\n```js\n// 👍\nawait expect(page.getByText('welcome')).toBeVisible();\n\n// 👎\nexpect(await page.getByText('welcome').isVisible()).toBe(true);\n```\n\n#### Don't use manual assertions\n\nDon't use manual assertions that are not awaiting the expect. In the code below the await is inside the expect rather than before it. When using assertions such as `isVisible()` the test won't wait a single second, it will just check the locator is there and return immediately.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":162,"to":176}}}}],["c49f38ed-dd12-4c81-bc82-d77a29bce3cd",{"pageContent":"```js\n// 👎\nexpect(await page.getByText('welcome').isVisible()).toBe(true);\n```\n\nUse web first assertions such as `toBeVisible()` instead.\n\n```js\n// 👍\nawait expect(page.getByText('welcome')).toBeVisible();\n```\n\n### Configure debugging\n\n#### Local debugging\n\nFor local debugging we recommend you [debug your tests live in VSCode.](/getting-started-vscode.md#live-debugging) by installing the [VS Code extension](./getting-started-vscode.md). You can run tests in debug mode by right clicking on the line next to the test you want to run which will open a browser window and pause at where the breakpoint is set.\n\n<img width=\"1338\" alt=\"debugging tests in vscode\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212274675-5c6e1647-2aab-40fd-9804-8680c1ac2d16.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":178,"to":196}}}}],["361b64b9-abe5-4318-a171-376fee31277f",{"pageContent":"<img width=\"1338\" alt=\"debugging tests in vscode\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212274675-5c6e1647-2aab-40fd-9804-8680c1ac2d16.png\" />\n\nYou can live debug your test by clicking or editing the locators in your test in VS Code which will highlight this locator in the browser window as well as show you any other matching locators found on the page.\n\n<img width=\"1394\" alt=\"live debugging locators in vscode\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212273189-da271dc4-0f59-4138-92a8-10e719066cbe.png\" />\n\nYou can also debug your tests with the Playwright inspector by running your tests with the `--debug` flag.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright test --debug\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":196,"to":221}}}}],["b061bc8d-1e86-48e8-bdba-b98cf1f6fb9f",{"pageContent":"```bash\nnpx playwright test --debug\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test --debug\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --debug\n```\n\n</TabItem>\n\n</Tabs>\n\nYou can then step through your test, view actionability logs and edit the locator live and see it highlighted in the browser window. This will show you which locators match, how many of them there are.\n\n<img width=\"1350\" alt=\"debugging with the playwright inspector\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212276296-4f5b18e7-2bd7-4766-9aa5-783517bd4aa2.png\" />\n\n\n\nTo debug a specific test add the name of the test file and the line number of the test followed by the `--debug` flag.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":215,"to":256}}}}],["19abba45-d3e4-4b02-b2ad-c0afd1cb8520",{"pageContent":"```bash\nnpx playwright test example.spec.ts:9 --debug\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test example.spec.ts:9 --debug\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test example.spec.ts:9 --debug\n```\n\n</TabItem>\n\n</Tabs>\n#### Debugging on CI\n\nFor CI failures, use the Playwright [trace viewer](./trace-viewer.md) instead of videos and screenshots. The trace viewer gives you a full trace of your tests as a local Progressive Web App (PWA) that can easily be shared. With the trace viewer you can view the timeline, inspect DOM snapshots for each action using dev tools, view network requests and more.\n\n<img width=\"1516\" alt=\"playwrights trace viewer\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212277895-c63d94c2-bd06-4881-864e-62790a072ca3.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":258,"to":285}}}}],["cdee7938-4ec5-43df-92f2-5c5eca07ddcd",{"pageContent":"<img width=\"1516\" alt=\"playwrights trace viewer\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212277895-c63d94c2-bd06-4881-864e-62790a072ca3.png\" />\n\nTraces are configured in the Playwright config file and are set to run on CI on the first retry of a failed test. We don't recommend setting this to `on` so that traces are run on every test as it's very performance heavy. However you can run a trace locally when developing with the `--trace` flag.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright test --trace on\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test --trace on\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --trace on\n```\n\n</TabItem>\n\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":285,"to":322}}}}],["3031a76f-1907-4f2b-81ea-447b468f12ea",{"pageContent":"</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test --trace on\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --trace on\n```\n\n</TabItem>\n\n</Tabs>\n\nOnce you run this command your traces will be recorded for each test and can be viewed directly from the HTML report.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright show-report\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright show-report\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright show-report\n```\n\n</TabItem>\n\n</Tabs>\n\n<img width=\"1516\" alt=\"Playwrights HTML report\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212279022-d929d4c0-2271-486a-a75f-166ac231d25f.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":304,"to":361}}}}],["f72c49ae-a39e-4362-aa23-520df0304925",{"pageContent":"</TabItem>\n\n</Tabs>\n\n<img width=\"1516\" alt=\"Playwrights HTML report\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212279022-d929d4c0-2271-486a-a75f-166ac231d25f.png\" />\n\nTraces can be opened by clicking on the icon next to the test file name or by opening each of the test reports and scrolling down to the traces section.\n\n<img width=\"1516\" alt=\"Screenshot 2023-01-13 at 09 58 34\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/212279699-c9eb134f-4f4e-4f19-805c-37596d3272a6.png\" />\n\n### Use Playwright's Tooling","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":357,"to":367}}}}],["6827acf1-4686-4fec-9762-ea73263f743e",{"pageContent":"Playwright comes with a range of tooling to help you write tests.\n- The [VS Code extension](./getting-started-vscode.md) gives you a great developer experience when writing, running, and debugging tests.\n- The [test generator](./codegen.md) can generate tests and pick locators for you.\n- The [trace viewer](./trace-viewer.md) gives you a full trace of your tests as a local PWA that can easily be shared. With the trace viewer you can view the timeline, inspect DOM snapshots for each action, view network requests and more.\n- The [UI Mode](./test-ui-mode) lets you explore, run and debug tests with a time travel experience complete with watch mode. All test files are loaded into the testing sidebar where you can expand each file and describe block to individually run, view, watch and debug each test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":369,"to":373}}}}],["613ca16e-72b6-491a-8dd8-28bcaec6caba",{"pageContent":"- [TypeScript](./test-typescript) in Playwright works out of the box and gives you better IDE integrations. Your IDE will show you everything you can do and highlight when you do something wrong. No TypeScript experience is needed and it is not necessary for your code to be in TypeScript, all you need to do is create your tests with a `.ts` extension.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":374,"to":374}}}}],["99cc4612-d852-4328-915a-ff01088e3193",{"pageContent":"### Test across all browsers\n\nPlaywright makes it easy to test your site across all [browsers](./test-projects.md#configure-projects-for-multiple-browsers) no matter what platform you are on. Testing across all browsers ensures your app works for all users. In your config file you can set up projects adding the name and which browser or device to use.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n});\n```\n\n### Keep your Playwright dependency up to date\n\nBy keeping your Playwright version up to date you will be able to test your app on the latest browser versions and catch failures before the latest browser version is released to the public.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":376,"to":403}}}}],["a1c4ff6c-617a-41fc-be0f-a171a9a89ae0",{"pageContent":"By keeping your Playwright version up to date you will be able to test your app on the latest browser versions and catch failures before the latest browser version is released to the public.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpm install -D @playwright/test@latest\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn add --dev @playwright/test@latest\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm install --save-dev @playwright/test@latest\n```\n\n</TabItem>\n\n</Tabs>\n\nCheck the [release notes](./release-notes.md) to see what the latest version is and what changes have been released.\n\nYou can see what version of Playwright you have by running the following command.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":403,"to":442}}}}],["3cd0521e-83df-43a9-aa04-13160c668869",{"pageContent":"You can see what version of Playwright you have by running the following command.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright --version\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright --version\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright --version\n```\n\n</TabItem>\n\n</Tabs>\n\n### Run tests on CI\n\nSetup CI/CD and run your tests frequently. The more often you run your tests the better. Ideally you should run your tests on each commit and pull request. Playwright comes with a [GitHub actions workflow](/ci-intro.md) so that tests will run on CI for you with no setup required. Playwright can also be setup on the [CI environment](/ci.md) of your choice.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":442,"to":481}}}}],["a208cd62-7ce4-405a-b86b-419f928736d8",{"pageContent":"Use Linux when running your tests on CI as it is cheaper. Developers can use whatever environment when running locally but use linux on CI. Consider setting up [Sharding](./test-sharding.md) to make CI faster.\n\n\n#### Optimize browser downloads on CI\n\nOnly install the browsers that you actually need, especially on CI. For example, if you're only testing with Chromium, install just Chromium.\n\n```bash title=\".github/workflows/playwright.yml\"\n# Instead of installing all browsers\nnpx playwright install --with-deps\n\n# Install only Chromium\nnpx playwright install chromium --with-deps\n```\n\nThis saves both download time and disk space on your CI machines.\n\n### Lint your tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":483,"to":500}}}}],["9ab69827-9d41-429b-a55b-854b3c1a5519",{"pageContent":"# Install only Chromium\nnpx playwright install chromium --with-deps\n```\n\nThis saves both download time and disk space on your CI machines.\n\n### Lint your tests\n\nWe recommend TypeScript and linting with ESLint for your tests to catch errors early. Use [`@typescript-eslint/no-floating-promises`](https://typescript-eslint.io/rules/no-floating-promises/) [ESLint](https://eslint.org) rule to make sure there are no missing awaits before the asynchronous calls to the Playwright API. On your CI you can run `tsc --noEmit` to ensure that functions are called with the right signature.\n\n### Use parallelism and sharding\n\nPlaywright runs tests in [parallel](./test-parallel.md) by default. Tests in a single file are run in order, in the same worker process. If you have many independent tests in a single file, you might want to run them in parallel\n\n```js\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":494,"to":511}}}}],["8fad24bd-deb1-44c9-8e7a-4be601fd2e4d",{"pageContent":"```js\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\nPlaywright can [shard](./test-parallel.md#shard-tests-between-multiple-machines) a test suite, so that it can be executed on multiple machines.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright test --shard=1/3\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test --shard=1/3\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --shard=1/3\n```\n\n</TabItem>\n\n</Tabs>\n\n## Productivity tips\n\n### Use Soft assertions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":508,"to":556}}}}],["efb6a74b-4a13-49ee-8937-76946e204aeb",{"pageContent":"</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --shard=1/3\n```\n\n</TabItem>\n\n</Tabs>\n\n## Productivity tips\n\n### Use Soft assertions\n\nIf your test fails, Playwright will give you an error message showing what part of the test failed which you can see either in VS Code, the terminal, the HTML report, or the trace viewer. However, you can also use [soft assertions](/test-assertions.md#soft-assertions). These do not immediately terminate the test execution, but rather compile and display a list of failed assertions once the test ended.\n\n```js\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-best-practices-js.md","title":"src-best-practices-js","url":"https://playwright.dev/docs/src-best-practices-js","loc":{"lines":{"from":542,"to":566}}}}],["da4fb87d-b540-4dcd-883a-f7cb4b7173a9",{"pageContent":"---\nid: browser-contexts\ntitle: \"Isolation\"\n---\n\n## Introduction\n\nTests written with Playwright execute in isolated clean-slate environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures. \n\n## What is Test Isolation? \n\nTest Isolation is when each test is completely isolated from another test. Every test runs independently from any other test. This means that each test has its own local storage, session storage, cookies etc. Playwright achieves this using [BrowserContext]s which are equivalent to incognito-like profiles. They are fast and cheap to create and are completely isolated, even when running in a single browser. Playwright creates a context for each test, and provides a default [Page] in that context.\n\n## Why is Test Isolation Important?","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":1,"to":14}}}}],["1134471a-3e4a-4d44-b36d-40463227c2da",{"pageContent":"## Why is Test Isolation Important? \n\n- No failure carry-over. If one test fails it doesn't affect the other test.\n- Easy to debug errors or flakiness, because you can run just a single test as many times as you'd like. \n- Don't have to think about the order when running in parallel, sharding, etc.\n\n## Two Ways of Test Isolation\n\nThere are two different strategies when it comes to Test Isolation: start from scratch or cleanup in between. The problem with cleaning up in between tests is that it can be easy to forget to clean up and some things are impossible to clean up such as \"visited links\". State from one test can leak into the next test which could cause your test to fail and make debugging harder as the problem comes from another test. Starting from scratch means everything is new, so if the test fails you only have to look within that test to debug.\n\n## How Playwright Achieves Test Isolation","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":14,"to":24}}}}],["6bf6f26e-d4b7-4815-b061-3f92d3679507",{"pageContent":"## How Playwright Achieves Test Isolation\n\nPlaywright uses browser contexts to achieve Test Isolation. Each test has its own Browser Context. Running the test creates a new browser context each time.  When using Playwright as a Test Runner, browser contexts are created by default. Otherwise, you can create browser contexts manually.\n\n```js tab=js-test\nimport { test } from '@playwright/test';\n\ntest('example test', async ({ page, context }) => {\n  // \"context\" is an isolated BrowserContext, created for this specific test.\n  // \"page\" belongs to this context.\n});\n\ntest('another test', async ({ page, context }) => {\n  // \"context\" and \"page\" in this second test are completely\n  // isolated from the first test.\n});\n```\n\n```js tab=js-library\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":24,"to":46}}}}],["63a3d2c3-abe2-4dbc-b119-11ad0b61c0f9",{"pageContent":"```js tab=js-library\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n```\n\n```java\nBrowser browser = chromium.launch();\nBrowserContext context = browser.newContext();\nPage page = context.newPage();\n```\n\n```python async\nbrowser = await playwright.chromium.launch()\ncontext = await browser.new_context()\npage = await context.new_page()\n```\n\n```python sync\nbrowser = playwright.chromium.launch()\ncontext = browser.new_context()\npage = context.new_page()\n```\n\n```csharp\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Chromium.LaunchAsync();\nvar context = await browser.NewContextAsync();\nvar page = await context.NewPageAsync();\n```\n\nBrowser contexts can also be used to emulate multi-page scenarios involving mobile devices, permissions, locale and color scheme. Check out our [Emulation](./emulation.md) guide for more details.\n\n## Multiple Contexts in a Single Test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":42,"to":75}}}}],["411e33ed-f58e-45ed-beeb-cb4397097f9c",{"pageContent":"## Multiple Contexts in a Single Test\n\nPlaywright can create multiple browser contexts within a single scenario. This is useful when you want to test for multi-user functionality, like a chat.\n\n```js tab=js-test\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  // Create two isolated browser contexts\n  const adminContext = await browser.newContext();\n  const userContext = await browser.newContext();\n\n  // Create pages and interact with contexts independently\n  const adminPage = await adminContext.newPage();\n  const userPage = await userContext.newPage();\n});\n```\n\n```js tab=js-library\nconst { chromium } = require('playwright');\n\n// Create a Chromium browser instance\nconst browser = await chromium.launch();\n\n// Create two isolated browser contexts\nconst userContext = await browser.newContext();\nconst adminContext = await browser.newContext();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":75,"to":101}}}}],["8c906b78-df48-4f72-852f-27a233949df3",{"pageContent":"// Create two isolated browser contexts\nconst userContext = await browser.newContext();\nconst adminContext = await browser.newContext();\n\n// Create pages and interact with contexts independently\nconst adminPage = await adminContext.newPage();\nconst userPage = await userContext.newPage();\n```\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      // Create a Chromium browser instance\n      Browser browser = chromium.launch();\n      // Create two isolated browser contexts\n      BrowserContext userContext = browser.newContext();\n      BrowserContext adminContext = browser.newContext();\n      // Create pages and interact with contexts independently\n    }\n  }\n}\n```\n\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":99,"to":128}}}}],["e8bfde14-013c-46e7-826f-4264f3e77600",{"pageContent":"```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    # create a chromium browser instance\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n\n    # create two isolated browser contexts\n    user_context = await browser.new_context()\n    admin_context = await browser.new_context()\n\n    # create pages and interact with contexts independently\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    # create a chromium browser instance\n    chromium = playwright.chromium\n    browser = chromium.launch()\n\n    # create two isolated browser contexts\n    user_context = browser.new_context()\n    admin_context = browser.new_context()\n\n    # create pages and interact with contexts independently","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":126,"to":159}}}}],["a9cc88a0-c9d3-4877-921c-335f47813494",{"pageContent":"# create two isolated browser contexts\n    user_context = browser.new_context()\n    admin_context = browser.new_context()\n\n    # create pages and interact with contexts independently\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n```csharp\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        // Create a Chromium browser instance\n        await using var browser = await playwright.Chromium.LaunchAsync();\n        await using var userContext = await browser.NewContextAsync();\n        await using var adminContext = await browser.NewContextAsync();\n        // Create pages and interact with contexts independently.\n    }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browser-contexts.md","title":"src-browser-contexts","url":"https://playwright.dev/docs/src-browser-contexts","loc":{"lines":{"from":155,"to":181}}}}],["ca1d72e3-198d-424c-b618-39493105af4c",{"pageContent":"---\nid: browsers\ntitle: \"Browsers\"\n---\n\n## Introduction\n\nEach version of Playwright needs specific versions of browser binaries to operate. You will need to use the Playwright CLI to install these browsers.\n\nWith every release, Playwright updates the versions of the browsers it supports, so that the latest Playwright would support the latest browsers at any moment. It means that every time you update Playwright, you might need to re-run the `install` CLI command.\n\n## Install browsers\n\nPlaywright can install supported browsers. Running the command without arguments will install the default browsers.\n\n```bash js\nnpx playwright install\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash python\nplaywright install\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nYou can also install specific browsers by providing an argument:\n\n```bash js\nnpx playwright install webkit\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":1,"to":36}}}}],["0e3d4119-6a25-467f-9b05-8878d856671f",{"pageContent":"```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nYou can also install specific browsers by providing an argument:\n\n```bash js\nnpx playwright install webkit\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install webkit\"\n```\n\n```bash python\nplaywright install webkit\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install webkit\n```\n\nSee all supported browsers:\n\n```bash js\nnpx playwright install --help\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --help\"\n```\n\n```bash python\nplaywright install --help\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install --help\n```\n\n### Install browsers via API\n* langs: csharp\n\nIt's possible to run Command line tools commands via the .NET API:\n\n```csharp\nvar exitCode = Microsoft.Playwright.Program.Main(new[] {\"install\"});\nif (exitCode != 0)\n{\n    throw new Exception($\"Playwright exited with code {exitCode}\");\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":28,"to":79}}}}],["8cc850c2-dcd2-4f31-a878-922b72c96ba0",{"pageContent":"```csharp\nvar exitCode = Microsoft.Playwright.Program.Main(new[] {\"install\"});\nif (exitCode != 0)\n{\n    throw new Exception($\"Playwright exited with code {exitCode}\");\n}\n```\n\n## Install system dependencies\n\nSystem dependencies can get installed automatically. This is useful for CI environments.\n\n```bash js\nnpx playwright install-deps\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps\"\n```\n\n```bash python\nplaywright install-deps\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install-deps\n```\n\nYou can also install the dependencies for a single browser by passing it as an argument:\n\n```bash js\nnpx playwright install-deps chromium\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps chromium\"\n```\n\n```bash python\nplaywright install-deps chromium\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install-deps chromium\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":73,"to":117}}}}],["60decc60-c9b0-4dd0-92ef-48632eff34ea",{"pageContent":"```bash python\nplaywright install-deps chromium\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install-deps chromium\n```\n\nIt's also possible to combine `install-deps` with `install` so that the browsers and OS dependencies are installed with a single command.\n\n```bash js\nnpx playwright install --with-deps chromium\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps chromium\"\n```\n\n```bash python\nplaywright install --with-deps chromium\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 install --with-deps chromium\n```\n\nSee [system requirements](./intro.md#system-requirements) for officially supported operating systems.\n\n## Update Playwright regularly\n* langs: js\n\nBy keeping your Playwright version up to date you will be able to use new features and test your app on the latest browser versions and catch failures before the latest browser version is released to the public.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":111,"to":142}}}}],["5dbbf0ab-0763-4aba-a427-b87b4f8b701c",{"pageContent":"```bash\n# Update playwright\nnpm install -D @playwright/test@latest\n\n# Install new browsers\nnpx playwright install\n```\nCheck the [release notes](./release-notes.md) to see what the latest version is and what changes have been released.\n\n```bash\n# See what version of Playwright you have by running the following command\nnpx playwright --version\n```\n\n## Configure Browsers\n\nPlaywright can run tests on Chromium, WebKit and Firefox browsers as well as branded browsers such as Google Chrome and Microsoft Edge. It can also run on emulated tablet and mobile devices. See the [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) for a complete list of selected desktop, tablet and mobile devices.\n\n### Run tests on different browsers\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":144,"to":163}}}}],["fe477ebd-cc06-4ebd-8afc-aaa33934b63f",{"pageContent":"### Run tests on different browsers\n* langs: js\n\nPlaywright can run your tests in multiple browsers and configurations by setting up **projects** in the config. You can also add [different options](./test-configuration) for each project.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":162,"to":168}}}}],["409d645a-c9ce-4877-8ddc-606b466750b0",{"pageContent":"```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against desktop browsers */\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n    {\n      name: 'Microsoft Edge',\n      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or 'msedge-dev'\n    },\n  ],\n});\n```\n\nPlaywright will run all projects by default.\n\n```bash\nnpx playwright test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":167,"to":210}}}}],["aa59eac6-e889-4864-ad46-c62364efde9c",{"pageContent":"Playwright will run all projects by default.\n\n```bash\nnpx playwright test\n\nRunning 7 tests using 5 workers\n\n  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)\n```\n\nUse the `--project` command line option to run a single project.\n\n```bash\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":207,"to":231}}}}],["89a16835-94fe-477d-ad9f-9946269fbca1",{"pageContent":"```bash\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```\n\nWith the VS Code extension you can run your tests on different browsers by checking the checkbox next to the browser name in the Playwright sidebar. These names are defined in your Playwright config file under the projects section. The default config when installing Playwright gives you 3 projects, Chromium, Firefox and WebKit. The first project is selected by default.\n\n![Projects section in VS Code extension](https://github.com/microsoft/playwright/assets/13063165/58fedea6-a2b9-4942-b2c7-2f3d482210cf)\n\nTo run tests on multiple projects(browsers), select each project by checking the checkboxes next to the project name.\n\n![Selecting projects to run tests on](https://github.com/microsoft/playwright/assets/13063165/6dc86ef4-6097-481c-9cab-b6e053ec7ea6)\n\n### Run tests on different browsers\n* langs: python\n\nRun tests on a specific browser:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":225,"to":244}}}}],["c5e77450-f489-4508-b6c7-9bff01480669",{"pageContent":"### Run tests on different browsers\n* langs: python\n\nRun tests on a specific browser:\n\n```bash\npytest test_login.py --browser webkit\n```\n\nRun tests on multiple browsers:\n\n```bash\npytest test_login.py --browser webkit --browser firefox\n```\n\nTest against mobile viewports:\n\n```bash\npytest test_login.py --device=\"iPhone 13\"\n```\nTest against branded browsers:\n\n```bash\npytest test_login.py --browser-channel msedge\n```\n\n### Run tests on different browsers\n* langs: java\n\nRun tests on a specific browser:\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      // Launch chromium, firefox or webkit.\n      Browser browser = playwright.chromium().launch();\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\nRun tests on multiple browsers and make it based on the environment variable `BROWSER`:\n\n```java\nimport com.microsoft.playwright.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":241,"to":290}}}}],["a423db1d-61f7-40b5-963e-8cf87e516021",{"pageContent":"Run tests on multiple browsers and make it based on the environment variable `BROWSER`:\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = null;\n      String browserName = System.getenv(\"BROWSER\");\n      if (browserName.equals(\"chromium\")) {\n        browser = playwright.chromium().launch();\n      } else if (browserName.equals(\"firefox\")) {\n        browser = playwright.firefox().launch();\n      } else if (browserName.equals(\"webkit\")) {\n        browser = playwright.webkit().launch();\n      }\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\n### Run tests on different browsers\n* langs: csharp\n\nRun tests on a specific browser:\n\n```bash\ndotnet test -- Playwright.BrowserName=webkit\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":287,"to":318}}}}],["9d1de86c-ba74-45c4-95a6-bd20db7e9b60",{"pageContent":"### Run tests on different browsers\n* langs: csharp\n\nRun tests on a specific browser:\n\n```bash\ndotnet test -- Playwright.BrowserName=webkit\n```\n\nTo run your test on multiple browsers or configurations you need to invoke the `dotnet test` command multiple times. You can either specify the `BROWSER` environment variable or set the `Playwright.BrowserName` via the runsettings file:\n\n```bash\ndotnet test --settings:chromium.runsettings\ndotnet test --settings:firefox.runsettings\ndotnet test --settings:webkit.runsettings\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <RunSettings>\n    <Playwright>\n      <BrowserName>chromium</BrowserName>\n    </Playwright>\n  </RunSettings>\n```\n\n### Chromium","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":311,"to":337}}}}],["c769102d-1051-4ae2-b9e8-89ce5c97966c",{"pageContent":"```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <RunSettings>\n    <Playwright>\n      <BrowserName>chromium</BrowserName>\n    </Playwright>\n  </RunSettings>\n```\n\n### Chromium\n\nFor Google Chrome, Microsoft Edge and other Chromium-based browsers, by default, Playwright uses open source Chromium builds. Since the Chromium project is ahead of the branded browsers, when the world is on Google Chrome N, Playwright already supports Chromium N+1 that will be released in Google Chrome and Microsoft Edge a few weeks later.\n\n### Chromium: headless shell\n\nPlaywright ships a regular Chromium build for headed operations and a separate [chromium headless shell](https://developer.chrome.com/blog/chrome-headless-shell) for headless mode.\n\nIf you are only running tests in headless shell (i.e. the `channel` option is **not** specified), for example on CI, you can avoid downloading the full Chromium browser by passing `--only-shell` during installation.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":328,"to":345}}}}],["1a46a351-b137-437e-8349-09264c07cf7b",{"pageContent":"```bash js\n# only running tests headlessly\nnpx playwright install --with-deps --only-shell\n```\n\n```bash java\n# only running tests headlessly\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps --only-shell\"\n```\n\n```bash python\n# only running tests headlessly\nplaywright install --with-deps --only-shell\n```\n\n```bash csharp\n# only running tests headlessly\npwsh bin/Debug/netX/playwright.ps1 install --with-deps --only-shell\n```\n\n### Chromium: new headless mode\n\nYou can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):\n\n> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.\n\nSee [issue #33566](https://github.com/microsoft/playwright/issues/33566) for details.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":347,"to":373}}}}],["6f46df0c-0a98-4cbe-a744-73c942f8c10a",{"pageContent":"See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for details.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'], channel: 'chromium' },\n    },\n  ],\n});\n```\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel(\"chromium\"));\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\n```bash python\npytest test_login.py --browser-channel chromium\n```\n\n```xml csharp\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Channel>chromium</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":373,"to":416}}}}],["4dd66cc4-49e2-4942-9e0d-48a4e35cc113",{"pageContent":"```bash csharp\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Channel=chromium\n```\n\nWith the new headless mode, you can skip downloading the headless shell during browser installation by using the `--no-shell` option:\n\n```bash js\n# only running tests headlessly\nnpx playwright install --with-deps --no-shell\n```\n\n```bash java\n# only running tests headlessly\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps --no-shell\"\n```\n\n```bash python\n# only running tests headlessly\nplaywright install --with-deps --no-shell\n```\n\n```bash csharp\n# only running tests headlessly\npwsh bin/Debug/netX/playwright.ps1 install --with-deps --no-shell\n```\n\n### Google Chrome & Microsoft Edge","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":418,"to":444}}}}],["fe353ac0-08cd-469b-9633-d05bd76514ac",{"pageContent":"```bash csharp\n# only running tests headlessly\npwsh bin/Debug/netX/playwright.ps1 install --with-deps --no-shell\n```\n\n### Google Chrome & Microsoft Edge\n\nWhile Playwright can download and use the recent Chromium build, it can operate against the branded Google Chrome and Microsoft Edge browsers available on the machine (note that Playwright doesn't install them by default). In particular, the current Playwright version will support Stable and Beta channels of these browsers.\n\nAvailable channels are `chrome`, `msedge`, `chrome-beta`, `msedge-beta`, `chrome-dev`, `msedge-dev`, `chrome-canary`, `msedge-canary`.\n\n:::warning\nCertain Enterprise Browser Policies may impact Playwright's ability to launch and control Google Chrome and Microsoft Edge. Running in an environment with browser policies is outside of the Playwright project's scope.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":439,"to":452}}}}],["aaa8dffd-4b22-4401-8833-51a9bd3ce7e8",{"pageContent":":::warning\nGoogle Chrome and Microsoft Edge have switched to a [new headless mode](https://developer.chrome.com/docs/chromium/headless) implementation that is closer to a regular headed mode. This differs from [chromium headless shell](https://developer.chrome.com/blog/chrome-headless-shell) that is used in Playwright by default when running headless, so expect different behavior in some cases. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for details.\n:::\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n    {\n      name: 'Microsoft Edge',\n      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or \"msedge-beta\" or 'msedge-dev'\n    },\n  ],\n});\n```\n\n```java\nimport com.microsoft.playwright.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":454,"to":477}}}}],["1ec17d91-7227-4f80-9b40-abfbea5294df",{"pageContent":"```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      // Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n      Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel(\"msedge\"));\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\n```bash python\npytest test_login.py --browser-channel msedge\n```\n\n```xml csharp\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n```bash csharp\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Channel=msedge\n```\n\n######\n* langs: python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":476,"to":512}}}}],["416e416d-58d7-4b1b-bc7b-09fb28ed6349",{"pageContent":"```bash csharp\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Channel=msedge\n```\n\n######\n* langs: python\n\nAlternatively when using the library directly, you can specify the browser [`option: BrowserType.launch.channel`] when launching the browser:\n\n```python\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n    browser = p.chromium.launch(channel=\"msedge\")\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev\")\n    print(page.title())\n    browser.close()\n```\n\n#### Installing Google Chrome & Microsoft Edge\n\nIf Google Chrome or Microsoft Edge is not available on your machine, you can install\nthem using the Playwright command line tool:\n\n```bash lang=js\nnpx playwright install msedge\n```\n\n```bash lang=python\nplaywright install msedge\n```\n\n```bash lang=csharp\npwsh bin/Debug/netX/playwright.ps1 install msedge\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":507,"to":543}}}}],["d184b39a-9793-4b82-b505-2aef565dd281",{"pageContent":"```bash lang=js\nnpx playwright install msedge\n```\n\n```bash lang=python\nplaywright install msedge\n```\n\n```bash lang=csharp\npwsh bin/Debug/netX/playwright.ps1 install msedge\n```\n\n```batch lang=java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install msedge\"\n```\n\n:::warning\nGoogle Chrome or Microsoft Edge installations will be installed at the\ndefault global location of your operating system overriding your current browser installation.\n:::\n\nRun with the `--help` option to see a full a list of browsers that can be installed.\n\n#### When to use Google Chrome & Microsoft Edge and when not to?\n\n##### Defaults","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":533,"to":558}}}}],["fc90e3c8-7b8d-4509-8836-88288f6e79b6",{"pageContent":"Run with the `--help` option to see a full a list of browsers that can be installed.\n\n#### When to use Google Chrome & Microsoft Edge and when not to?\n\n##### Defaults\n\nUsing the default Playwright configuration with the latest Chromium is a good idea most of the time.\nSince Playwright is ahead of Stable channels for the browsers, it gives peace of mind that the\nupcoming Google Chrome or Microsoft Edge releases won't break your site. You catch breakage\nearly and have a lot of time to fix it before the official Chrome update.\n\n##### Regression testing\n\nHaving said that, testing policies often require regression testing to be performed against\nthe current publicly available browsers. In this case, you can opt into one of the stable channels,\n`\"chrome\"` or `\"msedge\"`.\n\n##### Media codecs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":554,"to":571}}}}],["6f0c0175-390d-479c-a25e-c80deedd0580",{"pageContent":"##### Media codecs\n\nAnother reason for testing using official binaries is to test functionality related to media codecs.\nChromium does not have all the codecs that Google Chrome or Microsoft Edge are bundling due to\nvarious licensing considerations and agreements. If your site relies on this kind of codecs (which is\nrarely the case), you will also want to use the official channel.\n\n##### Enterprise policy\n\nGoogle Chrome and Microsoft Edge respect enterprise policies, which include limitations to the capabilities, network proxy, mandatory extensions that stand in the way of testing. So if you are part of the organization that uses such policies, it is easiest to use bundled Chromium for your local testing, you can still opt into stable channels on the bots that are typically free of such restrictions.\n\n### Firefox","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":571,"to":582}}}}],["66800d4c-8d3d-4ac3-b98f-05f480957a80",{"pageContent":"### Firefox\n\nPlaywright's Firefox version matches the recent [Firefox Stable](https://www.mozilla.org/en-US/firefox/new/) build. Playwright doesn't work with the branded version of Firefox since it relies on patches.\n\nNote that availability of certain features, which depend heavily on the underlying platform, may vary between operating systems. For example, available media codecs vary substantially between Linux, macOS and Windows.\n\n### WebKit\n\nPlaywright's WebKit is derived from the latest WebKit main branch sources, often before these updates are incorporated into Apple Safari and other WebKit-based browsers. This gives a lot of lead time to react on the potential browser update issues. Playwright doesn't work with the branded version of Safari since it relies on patches. Instead, you can test using the most recent WebKit build.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":582,"to":590}}}}],["af21dc6b-95f0-40bf-bbc8-c8b3aa53bef7",{"pageContent":"Note that availability of certain features, which depend heavily on the underlying platform, may vary between operating systems. For example, available media codecs vary substantially between Linux, macOS and Windows. While running WebKit on Linux CI is usually the most affordable option, for the closest-to-Safari experience you should run WebKit on mac, for example if you do video playback.\n\n## Install behind a firewall or a proxy\n\nBy default, Playwright downloads browsers from Microsoft's CDN.\n\nSometimes companies maintain an internal proxy that blocks direct access to the public\nresources. In this case, Playwright can be configured to download browsers via a proxy server.\n\n```bash tab=bash-bash lang=js\nHTTPS_PROXY=https://192.0.2.1 npx playwright install\n```\n\n```batch tab=bash-batch lang=js\nset HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nnpx playwright install\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":592,"to":613}}}}],["774f4e51-af9d-471c-b40e-7175e578192e",{"pageContent":"```powershell tab=bash-powershell lang=js\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nnpx playwright install\n```\n\n```bash tab=bash-bash lang=python\npip install playwright\nHTTPS_PROXY=https://192.0.2.1 playwright install\n```\n\n```batch tab=bash-batch lang=python\nset HTTPS_PROXY=https://192.0.2.1\npip install playwright\nplaywright install\n```\n\n```powershell tab=bash-powershell lang=python\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n```bash tab=bash-bash lang=java\nHTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```batch tab=bash-batch lang=java\nset HTTPS_PROXY=https://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":610,"to":644}}}}],["64132247-ebb4-4333-840c-9a32007a73c9",{"pageContent":"```powershell tab=bash-powershell lang=java\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash tab=bash-bash lang=csharp\nHTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```batch tab=bash-batch lang=csharp\nset HTTPS_PROXY=https://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nIf the requests of the proxy get intercepted with a custom untrusted certificate authority (CA) and it yields to `Error: self signed certificate in certificate chain` while downloading the browsers, you must set your custom root certificates via the [`NODE_EXTRA_CA_CERTS`](https://nodejs.org/api/cli.html#node_extra_ca_certsfile) environment variable before installing the browsers:\n\n```bash tab=bash-bash\nexport NODE_EXTRA_CA_CERTS=\"/path/to/cert.pem\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":641,"to":664}}}}],["73800fd5-0889-472c-b7d2-405c6e1f3629",{"pageContent":"```bash tab=bash-bash\nexport NODE_EXTRA_CA_CERTS=\"/path/to/cert.pem\"\n```\n\n```batch tab=bash-batch\nset NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\n```powershell tab=bash-powershell\n$Env:NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\nIf your network is slow to connect to Playwright browser archive, you can increase the connection timeout in milliseconds with `PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT` environment variable:\n\n```bash tab=bash-bash lang=js\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 npx playwright install\n```\n\n```batch tab=bash-batch lang=js\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\nnpx playwright install\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nnpx playwright install\n```\n\n```bash tab=bash-bash lang=python\npip install playwright\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 playwright install\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":662,"to":693}}}}],["878f19c9-98d8-401e-92e0-3c090d71ca68",{"pageContent":"```bash tab=bash-bash lang=python\npip install playwright\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 playwright install\n```\n\n```batch tab=bash-batch lang=python\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\npip install playwright\nplaywright install\n```\n\n```powershell tab=bash-powershell lang=python\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\npip install playwright\nplaywright install\n```\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":690,"to":719}}}}],["efdefc5b-384e-4b84-a481-5bd300b7cd6c",{"pageContent":"```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash tab=bash-bash lang=csharp\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```batch tab=bash-batch lang=csharp\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nIf you are [installing dependencies](#install-system-dependencies) and need to use a proxy on Linux, make sure to run the command as a root user. Otherwise, Playwright will attempt to become a root and will not pass environment variables like `HTTPS_PROXY` to the linux package manager.\n\n```bash js\nsudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":716,"to":739}}}}],["67bba72e-a3dd-4f6e-b2b5-165387359a79",{"pageContent":"```bash js\nsudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps\n```\n\n```bash java\nsudo HTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps\"\n```\n\n```bash python\nsudo HTTPS_PROXY=https://192.0.2.1 playwright install-deps\n```\n\n```bash csharp\nsudo HTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install-deps\n```\n\n## Download from artifact repository\n\nBy default, Playwright downloads browsers from Microsoft's CDN.\n\nSometimes companies maintain an internal artifact repository to host browser\nbinaries. In this case, Playwright can be configured to download from a custom\nlocation using the `PLAYWRIGHT_DOWNLOAD_HOST` env variable.\n\n```bash tab=bash-bash lang=js\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\n```batch tab=bash-batch lang=js\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":737,"to":768}}}}],["59c9daa3-849f-43ec-8c93-017f752b689a",{"pageContent":"```batch tab=bash-batch lang=js\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n```bash tab=bash-bash lang=python\npip install playwright\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install\n```\n\n```batch tab=bash-batch lang=python\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npip install playwright\nplaywright install\n```\n\n```powershell tab=bash-powershell lang=python\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":765,"to":799}}}}],["76cee8af-900b-4074-942b-6759117c830f",{"pageContent":"```batch tab=bash-batch lang=java\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash tab=bash-bash lang=csharp\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```batch tab=bash-batch lang=csharp\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nIt is also possible to use a per-browser download hosts using `PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST`, `PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST` and `PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST` env variables that\ntake precedence over `PLAYWRIGHT_DOWNLOAD_HOST`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":796,"to":821}}}}],["5e4bdb14-4712-473a-8815-bab46fbedfc7",{"pageContent":"```bash tab=bash-bash lang=js\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\n```batch tab=bash-batch lang=js\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n```bash tab=bash-bash lang=python\npip install playwright\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install\n```\n\n```batch tab=bash-batch lang=python\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npip install playwright\nplaywright install\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":823,"to":849}}}}],["17bffc95-af26-4de7-95b6-f45562c1c657",{"pageContent":"```batch tab=bash-batch lang=python\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npip install playwright\nplaywright install\n```\n\n```powershell tab=bash-powershell lang=python\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":844,"to":866}}}}],["2dc67264-b22f-4062-81c6-7a54172b3c4e",{"pageContent":"```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash tab=bash-bash lang=csharp\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```batch tab=bash-batch lang=csharp\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n## Managing browser binaries\n\nPlaywright downloads Chromium, WebKit and Firefox browsers into the OS-specific cache folders:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":868,"to":891}}}}],["c2a60430-a200-45ad-9895-3810bb62b34f",{"pageContent":"Playwright downloads Chromium, WebKit and Firefox browsers into the OS-specific cache folders:\n\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright` on Windows\n- `~/Library/Caches/ms-playwright` on macOS\n- `~/.cache/ms-playwright` on Linux\n\nThese browsers will take a few hundred megabytes of disk space when installed:\n\n```bash\ndu -hs ~/Library/Caches/ms-playwright/*\n281M  chromium-XXXXXX\n187M  firefox-XXXX\n180M  webkit-XXXX\n```\n\nYou can override default behavior using environment variables. When installing Playwright, ask it to download browsers into a specific location:\n\n```bash tab=bash-bash lang=js\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright install\n```\n\n```batch tab=bash-batch lang=js\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nnpx playwright install\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright install\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":891,"to":920}}}}],["3052caa3-ac50-4f4d-b3fb-b991beb5c99d",{"pageContent":"```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright install\n```\n\n```bash tab=bash-bash lang=python\npip install playwright\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers python -m playwright install\n```\n\n```batch tab=bash-batch lang=python\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\npip install playwright\nplaywright install\n```\n\n```powershell tab=bash-powershell lang=python\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\npip install playwright\nplaywright install\n```\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":917,"to":946}}}}],["88f99db7-62a6-4196-b1b9-a67afd4a97c2",{"pageContent":"```batch tab=bash-batch lang=java\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n```bash tab=bash-bash lang=csharp\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers pwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```batch tab=bash-batch lang=csharp\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nWhen running Playwright scripts, ask it to search for browsers in a shared location.\n\n```bash tab=bash-bash lang=js\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":943,"to":971}}}}],["1b34b662-10ea-4a87-9711-c010797502ae",{"pageContent":"When running Playwright scripts, ask it to search for browsers in a shared location.\n\n```bash tab=bash-bash lang=js\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright test\n```\n\n```batch tab=bash-batch lang=js\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nnpx playwright test\n```\n\n```powershell tab=bash-powershell lang=js\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright test\n```\n\n```bash tab=bash-bash lang=python\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers python playwright_script.py\n```\n\n```batch tab=bash-batch lang=python\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\npython playwright_script.py\n```\n\n```powershell tab=bash-powershell lang=python\n\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\npython playwright_script.py\n```\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers mvn test\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nmvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":967,"to":1005}}}}],["6bfaec87-430b-4378-b73f-70e25c81c19b",{"pageContent":"```bash tab=bash-bash lang=java\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers mvn test\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nmvn test\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nmvn test\n```\n\n```bash tab=bash-bash lang=csharp\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\ndotnet test\n```\n\nPlaywright keeps track of packages that need those browsers and will garbage collect them as you update Playwright to the newer versions.\n\n:::note\nDevelopers can opt-in in this mode via exporting `PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers` in their `.bashrc`.\n:::\n\n### Hermetic install\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":998,"to":1033}}}}],["4f7cb385-8498-4f4f-afd7-a6aaaaa3e8f0",{"pageContent":":::note\nDevelopers can opt-in in this mode via exporting `PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers` in their `.bashrc`.\n:::\n\n### Hermetic install\n* langs: js\n\nYou can opt into the hermetic install and place binaries in the local folder:\n\n\n```bash tab=bash-bash\n# Places binaries to node_modules/playwright-core/.local-browsers\nPLAYWRIGHT_BROWSERS_PATH=0 npx playwright install\n```\n\n```batch tab=bash-batch\n# Places binaries to node_modules\\playwright-core\\.local-browsers\nset PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\n```powershell tab=bash-powershell\n# Places binaries to node_modules\\playwright-core\\.local-browsers\n$Env:PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\n:::note\n`PLAYWRIGHT_BROWSERS_PATH` does not change installation path for Google Chrome and Microsoft Edge.\n:::\n\n### Skip browser downloads\n* langs: java\n\nIn certain cases, it is desired to avoid browser downloads altogether because\nbrowser binaries are managed separately.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":1028,"to":1063}}}}],["47b32318-9b8a-4ba7-9cbf-ecc69c7c14a1",{"pageContent":"### Skip browser downloads\n* langs: java\n\nIn certain cases, it is desired to avoid browser downloads altogether because\nbrowser binaries are managed separately.\n\nThis can be done by setting `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` variable before installation.\n\n```bash tab=bash-bash lang=java\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 mvn test\n```\n\n```batch tab=bash-batch lang=java\nset PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nmvn test\n```\n\n```powershell tab=bash-powershell lang=java\n$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nmvn test\n```\n\n### Stale browser removal\n\nPlaywright keeps track of the clients that use its browsers. When there are no more clients that require a particular version of the browser, that version is deleted from the system. That way you can safely use Playwright instances of different versions and at the same time, you don't waste disk space for the browsers that are no longer in use.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":1059,"to":1083}}}}],["4fced092-5cf4-4409-8c86-48946984a469",{"pageContent":"To opt-out from the unused browser removal, you can set the `PLAYWRIGHT_SKIP_BROWSER_GC=1` environment variable.\n\n### Uninstall browsers\n\nThis will remove the browsers (chromium, firefox, webkit) of the current Playwright installation:\n\n```bash js\nnpx playwright uninstall\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall\"\n```\n\n```bash python\nplaywright uninstall\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 uninstall\n```\n\nTo remove browsers of other Playwright installations as well, pass `--all` flag:\n\n```bash js\nnpx playwright uninstall --all\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall --all\"\n```\n\n```bash python\nplaywright uninstall --all\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 uninstall --all\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-browsers.md","title":"src-browsers","url":"https://playwright.dev/docs/src-browsers","loc":{"lines":{"from":1085,"to":1123}}}}],["3bde518b-9c3f-4f81-b29f-648380498569",{"pageContent":"---\nid: canary-releases\ntitle: \"Canary releases\"\n---\n\n## Introduction\n\nPlaywright for Node.js has a canary releases system.\n\nIt permits you to **test new unreleased features** instead of waiting for a full release. They get released daily on the `next` NPM tag of Playwright.\n\nIt is a good way to **give feedback to maintainers**, ensuring the newly implemented feature works as intended.\n\n:::note\n\nUsing a canary release in production might seem risky, but in practice, it's not.\n\nA canary release passes all automated tests and is used to test e.g. the HTML report, Trace Viewer, or Playwright Inspector with end-to-end tests.\n\n:::\n\n## Next npm Dist Tag\n\nFor any code-related commit on `main`, the continuous integration will publish a daily canary release under the `@next` npm dist tag.\n\nYou can see on [npm](https://www.npmjs.com/package/@playwright/test?activeTab=versions) the current dist tags:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-canary-releases-js.md","title":"src-canary-releases-js","url":"https://playwright.dev/docs/src-canary-releases-js","loc":{"lines":{"from":1,"to":26}}}}],["398d5e2c-4f6f-4241-bedf-357eb3f8fe52",{"pageContent":"You can see on [npm](https://www.npmjs.com/package/@playwright/test?activeTab=versions) the current dist tags:\n\n- `latest`: stable releases\n- `next`: next releases, published daily\n- `beta`: after a release-branch was cut, usually a week before a stable release each commit gets published under this tag\n\n## Using a Canary Release\n\n```bash\nnpm install -D @playwright/test@next\n```\n\n## Documentation\n\nThe stable and the `next` documentation is published on [playwright.dev](https://playwright.dev). To see the `next` documentation, press <kbd>Shift</kbd> on the keyboard `5` times.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-canary-releases-js.md","title":"src-canary-releases-js","url":"https://playwright.dev/docs/src-canary-releases-js","loc":{"lines":{"from":26,"to":40}}}}],["e2fbc736-04da-4f21-80a7-17aca1c32e68",{"pageContent":"---\nid: chrome-extensions\ntitle: \"Chrome extensions\"\n---\n\n## Introduction\n\n:::note\nExtensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.\n:::\n\nThe snippet below retrieves the [background page](https://developer.chrome.com/extensions/background_pages) of a [Manifest v2](https://developer.chrome.com/docs/extensions/mv2/) extension whose source is located in `./my-extension`.\n\nNote the use of the `chromium` channel that allows to run extensions in headless mode. Alternatively, you can launch the browser in headed mode.\n\n```js\nconst { chromium } = require('playwright');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":1,"to":17}}}}],["a14aa332-266d-4ea7-894b-558cd148e786",{"pageContent":"Note the use of the `chromium` channel that allows to run extensions in headless mode. Alternatively, you can launch the browser in headed mode.\n\n```js\nconst { chromium } = require('playwright');\n\n(async () => {\n  const pathToExtension = require('path').join(__dirname, 'my-extension');\n  const userDataDir = '/tmp/test-user-data-dir';\n  const browserContext = await chromium.launchPersistentContext(userDataDir, {\n    channel: 'chromium',\n    args: [\n      `--disable-extensions-except=${pathToExtension}`,\n      `--load-extension=${pathToExtension}`\n    ]\n  });\n  let [backgroundPage] = browserContext.backgroundPages();\n  if (!backgroundPage)\n    backgroundPage = await browserContext.waitForEvent('backgroundpage');\n\n  // Test the background page as you would any other page.\n  await browserContext.close();\n})();\n```\n\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\npath_to_extension = \"./my-extension\"\nuser_data_dir = \"/tmp/test-user-data-dir\"","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":14,"to":43}}}}],["74de9bd7-a958-4529-b3ca-747bf51d86c1",{"pageContent":"```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\npath_to_extension = \"./my-extension\"\nuser_data_dir = \"/tmp/test-user-data-dir\"\n\n\nasync def run(playwright: Playwright):\n    context = await playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n\n    if len(context.background_pages) == 0:\n        background_page = await context.wait_for_event('backgroundpage')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    await context.close()\n\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\n\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":38,"to":74}}}}],["d6c1e859-faa2-4ae7-a0ad-f7332bba5561",{"pageContent":"async def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\n\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright\n\npath_to_extension = \"./my-extension\"\nuser_data_dir = \"/tmp/test-user-data-dir\"\n\n\ndef run(playwright: Playwright):\n    context = playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n    if len(context.background_pages) == 0:\n        background_page = context.wait_for_event('backgroundpage')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    context.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n## Testing","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":65,"to":102}}}}],["e3cc6c34-e3d2-4c66-b6d4-30dd5c0aa221",{"pageContent":"# Test the background page as you would any other page.\n    context.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n## Testing\n\nTo have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it to load and test the popup page for example.\n\nNote the use of the `chromium` channel that allows to run extensions in headless mode. Alternatively, you can launch the browser in headed mode.\n\nFirst, add fixtures that will load the extension:\n\n```js title=\"fixtures.ts\"\nimport { test as base, chromium, type BrowserContext } from '@playwright/test';\nimport path from 'path';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":94,"to":112}}}}],["26e46d32-4496-4405-93c6-0c6638804406",{"pageContent":"First, add fixtures that will load the extension:\n\n```js title=\"fixtures.ts\"\nimport { test as base, chromium, type BrowserContext } from '@playwright/test';\nimport path from 'path';\n\nexport const test = base.extend<{\n  context: BrowserContext;\n  extensionId: string;\n}>({\n  context: async ({ }, use) => {\n    const pathToExtension = path.join(__dirname, 'my-extension');\n    const context = await chromium.launchPersistentContext('', {\n      channel: 'chromium',\n      args: [\n        `--disable-extensions-except=${pathToExtension}`,\n        `--load-extension=${pathToExtension}`,\n      ],\n    });\n    await use(context);\n    await context.close();\n  },\n  extensionId: async ({ context }, use) => {\n    /*\n    // for manifest v2:\n    let [background] = context.backgroundPages()\n    if (!background)\n      background = await context.waitForEvent('backgroundpage')\n    */","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":108,"to":136}}}}],["77ec0dac-992a-4e81-95ab-6ff914440785",{"pageContent":"// for manifest v3:\n    let [background] = context.serviceWorkers();\n    if (!background)\n      background = await context.waitForEvent('serviceworker');\n\n    const extensionId = background.url().split('/')[2];\n    await use(extensionId);\n  },\n});\nexport const expect = test.expect;\n```\n\n```python title=\"conftest.py\"\nfrom typing import Generator\nfrom pathlib import Path\nfrom playwright.sync_api import Playwright, BrowserContext\nimport pytest\n\n\n@pytest.fixture()\ndef context(playwright: Playwright) -> Generator[BrowserContext, None, None]:\n    path_to_extension = Path(__file__).parent.joinpath(\"my-extension\")\n    context = playwright.chromium.launch_persistent_context(\n        \"\",\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n    yield context\n    context.close()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":138,"to":169}}}}],["1b228676-a3a6-452b-86e0-7e078ac22cf7",{"pageContent":"@pytest.fixture()\ndef extension_id(context) -> Generator[str, None, None]:\n    # for manifest v2:\n    # background = context.background_pages[0]\n    # if not background:\n    #     background = context.wait_for_event(\"backgroundpage\")\n\n    # for manifest v3:\n    background = context.service_workers[0]\n    if not background:\n        background = context.wait_for_event(\"serviceworker\")\n\n    extension_id = background.url.split(\"/\")[2]\n    yield extension_id\n\n```\n\nThen use these fixtures in a test:\n\n```js\nimport { test, expect } from './fixtures';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://example.com');\n  await expect(page.locator('body')).toHaveText('Changed by my-extension');\n});\n\ntest('popup page', async ({ page, extensionId }) => {\n  await page.goto(`chrome-extension://${extensionId}/popup.html`);\n  await expect(page.locator('body')).toHaveText('my-extension popup');\n});\n```\n\n```python title=\"test_foo.py\"\nfrom playwright.sync_api import expect, Page","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":172,"to":206}}}}],["ba15ae62-5512-47e8-846d-37b987c73da0",{"pageContent":"```python title=\"test_foo.py\"\nfrom playwright.sync_api import expect, Page\n\n\ndef test_example_test(page: Page) -> None:\n    page.goto(\"https://example.com\")\n    expect(page.locator(\"body\")).to_contain_text(\"Changed by my-extension\")\n\n\ndef test_popup_page(page: Page, extension_id: str) -> None:\n    page.goto(f\"chrome-extension://{extension_id}/popup.html\")\n    expect(page.locator(\"body\")).to_have_text(\"my-extension popup\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-chrome-extensions-js-python.md","title":"src-chrome-extensions-js-python","url":"https://playwright.dev/docs/src-chrome-extensions-js-python","loc":{"lines":{"from":205,"to":217}}}}],["c83df59a-1d22-4b26-95a2-3110ae3959f6",{"pageContent":"---\nid: ci-intro\ntitle: \"Setting up CI\"\n---\n\n## Introduction\n* langs: js\n\nPlaywright tests can be run on any CI provider. This guide covers one way of running tests on GitHub using GitHub actions. If you would like to learn more, or how to configure other CI providers, check out our detailed [doc on Continuous Integration](./ci.md).\n\n#### You will learn\n* langs: js\n\n- [How to set up GitHub Actions](/ci-intro.md#setting-up-github-actions)\n- [How to view test logs](/ci-intro.md#viewing-test-logs)\n- [How to view the HTML report](/ci-intro.md#viewing-the-html-report)\n- [How to view the trace](/ci-intro.md#viewing-the-trace)\n- [How to publish report on the web](/ci-intro.md#publishing-report-on-the-web)\n\n\n## Introduction\n* langs: python, java, csharp\n\nPlaywright tests can be run on any CI provider. In this section we will cover running tests on GitHub using GitHub actions. If you would like to see how to configure other CI providers check out our detailed doc on Continuous Integration.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":1,"to":24}}}}],["995f95be-8f62-4a68-b607-d3702a5183cc",{"pageContent":"#### You will learn\n* langs: python, java, csharp\n\n- [How to set up GitHub Actions](/ci-intro.md#setting-up-github-actions)\n- [How to view test logs](/ci-intro.md#viewing-test-logs)\n- [How to view the trace](/ci-intro.md#viewing-the-trace)\n\n\n## Setting up GitHub Actions\n* langs: js\n\nWhen [installing Playwright](./intro.md) using the [VS Code extension](./getting-started-vscode.md) or with `npm init playwright@latest` you are given the option to add a [GitHub Actions](https://docs.github.com/en/actions) workflow. This creates a `playwright.yml` file inside a `.github/workflows` folder containing everything you need so that your tests run on each push and pull request into the main/master branch. Here's how that file looks:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":26,"to":37}}}}],["19ef81c6-929d-48e9-8136-f68f39acd802",{"pageContent":"```yml js title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```\n\nThe workflow performs these steps:\n\n1. Clone your repository\n1. Install Node.js\n1. Install NPM Dependencies\n1. Install Playwright Browsers\n1. Run Playwright tests\n1. Upload HTML report to the GitHub UI","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":39,"to":76}}}}],["6aac30c9-b0a7-4834-bd6a-df3e5129c4cf",{"pageContent":"1. Clone your repository\n1. Install Node.js\n1. Install NPM Dependencies\n1. Install Playwright Browsers\n1. Run Playwright tests\n1. Upload HTML report to the GitHub UI\n\nTo learn more about this, see [\"Understanding GitHub Actions\"](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions).\n\n## Setting up GitHub Actions\n* langs: python, java, csharp\n\nTo add a [GitHub Actions](https://docs.github.com/en/actions) file first create `.github/workflows` folder and inside it add a `playwright.yml` file containing the example code below so that your tests will run on each push and pull request for the main/master branch.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":71,"to":83}}}}],["5679cef3-3ab9-4fb9-b10c-48c2d7b5e54d",{"pageContent":"```yml python title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run your tests\n      run: pytest --tracing=retain-on-failure\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-traces\n        path: test-results/\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":85,"to":115}}}}],["91eeabd8-f648-4173-9879-e35a75cf2c17",{"pageContent":"```yml java title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Ensure browsers are installed\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":117,"to":140}}}}],["8c159782-53b9-4a50-b59c-ce06ed8a46d6",{"pageContent":"```yml csharp title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test\n```\n\nTo learn more about this, see [\"Understanding GitHub Actions\"](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions).\n\nLooking at the list of steps in `jobs.test.steps`, you can see that the workflow performs these steps:\n\n1. Clone your repository\n1. Install language dependencies\n1. Install project dependencies and build\n1. Install Playwright Browsers\n1. Run tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":142,"to":175}}}}],["46f4ccff-d222-4ae8-baa4-76b294f42921",{"pageContent":"1. Clone your repository\n1. Install language dependencies\n1. Install project dependencies and build\n1. Install Playwright Browsers\n1. Run tests\n\n## Create a Repo and Push to GitHub\n\nOnce you have your [GitHub actions workflow](#setting-up-github-actions) setup then all you need to do is [Create a repo on GitHub](https://docs.github.com/en/get-started/quickstart/create-a-repo) or push your code to an existing repository. Follow the instructions on GitHub and don't forget to [initialize a git repository](https://github.com/git-guides/git-init) using the `git init` command so you can [add](https://github.com/git-guides/git-add), [commit](https://github.com/git-guides/git-commit) and [push](https://github.com/git-guides/git-push) your code.\n\n######\n* langs: js, java, python\n\n<img width=\"861\" alt=\"Create a Repo and Push to GitHub\" src=\"https://user-images.githubusercontent.com/13063165/183423254-d2735278-a2ab-4d63-bb99-48d8e5e447bc.png\"/>\n\n\n######\n* langs: csharp","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":171,"to":188}}}}],["e17d5315-d3aa-4e6d-9e24-f983dcc2acad",{"pageContent":"<img width=\"861\" alt=\"Create a Repo and Push to GitHub\" src=\"https://user-images.githubusercontent.com/13063165/183423254-d2735278-a2ab-4d63-bb99-48d8e5e447bc.png\"/>\n\n\n######\n* langs: csharp\n\n![dotnet repo on github](https://github.com/microsoft/playwright/assets/13063165/4f1b4cc3-b850-4d60-a99e-24057eaf91ad)\n\n## Opening the Workflows\n\nClick on the **Actions** tab to see the workflows. Here you will see if your tests have passed or failed.\n\n######\n* langs: js, python, java\n\n![opening the workflow](https://user-images.githubusercontent.com/13063165/183423783-58bf2008-514e-4f96-9c12-c9a55703960c.png)\n\n######\n* langs: csharp\n\n![opening the workflow](https://github.com/microsoft/playwright/assets/13063165/71793c09-0815-4faa-866b-85684a1f87e5)\n\nOn Pull Requests you can also click on the **Details** link in the [PR status check](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":184,"to":206}}}}],["8230f301-3c00-4633-8123-98a2d63c07c8",{"pageContent":"<img width=\"645\" alt=\"pr status checked\" src=\"https://user-images.githubusercontent.com/13063165/183722462-17a985db-0e10-4205-b16c-8aaac36117b9.png\" />\n\n\n## Viewing Test Logs\n\nClicking on the workflow run will show you the all the actions that GitHub performed and clicking on **Run Playwright tests** will show the error messages, what was expected and what was received as well as the call log.\n\n######\n* langs: js, python, java\n\n![Viewing Test Logs](https://user-images.githubusercontent.com/13063165/183423783-58bf2008-514e-4f96-9c12-c9a55703960c.png)\n\n######\n* langs: csharp\n\n![viewing the test logs](https://github.com/microsoft/playwright/assets/13063165/ba2d8d7b-ffce-42de-95e0-bcb35c421975)\n\n\n## HTML Report\n* langs: js\n\nThe HTML Report shows you a full report of your tests. You can filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests.\n\n### Downloading the HTML Report\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":208,"to":232}}}}],["1f02d322-6bdf-49a8-b36b-00a5b94db0ac",{"pageContent":"The HTML Report shows you a full report of your tests. You can filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests.\n\n### Downloading the HTML Report\n* langs: js\n\nIn the Artifacts section click on the **playwright-report** to download your report in the format of a zip file.\n\n<img width=\"972\" alt=\"Downloading the HTML Report\" src=\"https://user-images.githubusercontent.com/13063165/183437023-524f1803-84e4-4862-9ce3-1d55af0e023e.png\" />\n\n### Viewing the HTML Report\n* langs: js\n\nLocally opening the report will not work as expected as you need a web server in order for everything to work correctly. First, extract the zip, preferably in a folder that already has Playwright installed. Using the command line change into the directory where the report is and use `npx playwright show-report` followed by the name of the extracted folder. This will serve up the report and enable you to view it in your browser.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":229,"to":241}}}}],["16b5d38f-1762-4f37-a369-356bb20263d0",{"pageContent":"```bash\nnpx playwright show-report name-of-my-extracted-playwright-report\n```\n\n![viewing the HTML report](https://github.com/microsoft/playwright/assets/13063165/c5f60e56-fb75-4a2d-a4b6-054b8c5d69c1)\n\nTo learn more about reports check out our detailed guide on [HTML Reporter](/test-reporters.md#html-reporter)\n\n## Viewing the Trace\n* langs: js\n\nOnce you have served the report using `npx playwright show-report`, click on the trace icon next to the test's file name as seen in the image above. You can then view the trace of your tests and inspect each action to try to find out why the tests are failing.\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/10fe3585-8401-4051-b1c2-b2e92ac4c274)\n\n## Viewing the Trace\n* langs: python, java\n\n[trace.playwright.dev](https://trace.playwright.dev) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":244,"to":262}}}}],["fed62de5-ecc5-4596-9ce8-4da4300c1cf0",{"pageContent":"## Viewing the Trace\n* langs: python, java\n\n[trace.playwright.dev](https://trace.playwright.dev) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/6d5885dc-d511-4c20-b728-040a7ef6cea4)\n\n## Viewing the Trace\n* langs: csharp\n\nYou can upload Traces which get created on your CI like GitHub Actions as artifacts. This requires [starting and stopping the trace](./trace-viewer-intro#recording-a-trace). We recommend only recording traces for failing tests. Once your traces have been uploaded to CI, they can then be downloaded and opened using [trace.playwright.dev](https://trace.playwright.dev), which is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.\n\n######\n* langs: csharp\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/84150084-5019-470a-8449-b61d206bfbb0)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":259,"to":274}}}}],["b8b5cf2b-2611-410b-8f5f-d3fbba4868fa",{"pageContent":"######\n* langs: csharp\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/84150084-5019-470a-8449-b61d206bfbb0)\n\n## Publishing report on the web\n* langs: js\n\nDownloading the HTML report as a zip file is not very convenient. However, we can utilize Azure Storage's static websites hosting capabilities to easily and efficiently serve HTML reports on the Internet, requiring minimal configuration.\n\n1. Create an [Azure Storage account](https://learn.microsoft.com/en-us/azure/storage/common/storage-account-create).\n1. Enable [Static website hosting](https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-how-to#enable-static-website-hosting) for the storage account.\n1. Create a Service Principal in Azure and grant it access to Azure Blob storage. Upon successful execution, the command will display the credentials which will be used in the next step.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":271,"to":283}}}}],["afb7a922-349a-4393-80e7-c79bb3bfa730",{"pageContent":"```bash\n    az ad sp create-for-rbac --name \"github-actions\" --role \"Storage Blob Data Contributor\" --scopes /subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP_NAME>/providers/Microsoft.Storage/storageAccounts/<STORAGE_ACCOUNT_NAME>\n    ```\n1. Use the credentials from the previous step to set up encrypted secrets in your GitHub repository. Go to your repository's settings, under [GitHub Actions secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository), and add the following secrets:\n\n    - `AZCOPY_SPA_APPLICATION_ID`\n    - `AZCOPY_SPA_CLIENT_SECRET`\n    - `AZCOPY_TENANT_ID`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":285,"to":292}}}}],["0f90f5d1-1ff4-4219-bb02-d6c557f01254",{"pageContent":"- `AZCOPY_SPA_APPLICATION_ID`\n    - `AZCOPY_SPA_CLIENT_SECRET`\n    - `AZCOPY_TENANT_ID`\n\n   For a detailed guide on how to authorize a service principal using a client secret, refer to [this Microsoft documentation](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-authorize-azure-active-directory#authorize-a-service-principal-by-using-a-client-secret).\n1. Add a step that uploads the HTML report to Azure Storage.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":290,"to":295}}}}],["4eb8df2a-4caf-40b9-b51f-0da2ab79c55a",{"pageContent":"```yaml title=\".github/workflows/playwright.yml\"\n    ...\n        - name: Upload HTML report to Azure\n          shell: bash\n          run: |\n            REPORT_DIR='run-${{ github.run_id }}-${{ github.run_attempt }}'\n            azcopy cp --recursive \"./playwright-report/*\" \"https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net/\\$web/$REPORT_DIR\"\n            echo \"::notice title=HTML report url::https://<STORAGE_ACCOUNT_NAME>.z1.web.core.windows.net/$REPORT_DIR/index.html\"\n          env:\n            AZCOPY_AUTO_LOGIN_TYPE: SPN\n            AZCOPY_SPA_APPLICATION_ID: '${{ secrets.AZCOPY_SPA_APPLICATION_ID }}'\n            AZCOPY_SPA_CLIENT_SECRET: '${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}'\n            AZCOPY_TENANT_ID: '${{ secrets.AZCOPY_TENANT_ID }}'\n    ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":297,"to":310}}}}],["9b5b3518-ed89-4a00-83a6-e53434f82d3e",{"pageContent":"The contents of the `$web` storage container can be accessed from a browser by using the [public URL](https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal#portal-find-url) of the website.\n\n:::note\nThis step will not work for pull requests created from a forked repository because such workflow [doesn't have access to the secrets](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#using-secrets-in-a-workflow).\n:::\n\n\n## What's Next\n\n- [Learn how to use Locators](./locators.md)\n- [Learn how to perform Actions](./input.md)\n- [Learn how to write Assertions](./test-assertions.md)\n- [Learn more about the Trace Viewer](/trace-viewer.md)\n- [Learn more ways of running tests on GitHub Actions](/ci.md#github-actions)\n- [Learn more about running tests on other CI providers](/ci.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci-intro.md","title":"src-ci-intro","url":"https://playwright.dev/docs/src-ci-intro","loc":{"lines":{"from":312,"to":326}}}}],["8af47a5a-18e0-464a-8f96-056d3a2c2db7",{"pageContent":"---\nid: ci\ntitle: \"Continuous Integration\"\n---\n## Introduction\n\nPlaywright tests can be executed in CI environments. We have created sample\nconfigurations for common CI providers.\n\n3 steps to get your tests running on CI:\n\n1. **Ensure CI agent can run browsers**: Use [our Docker image](./docker.md)\n   in Linux agents or install your dependencies using the [CLI](./browsers#install-system-dependencies).\n1. **Install Playwright**:\n   ```bash js\n   # Install NPM packages\n   npm ci\n\n   # Install Playwright browsers and dependencies\n   npx playwright install --with-deps\n   ```\n   ```bash python\n   pip install playwright\n   playwright install --with-deps\n   ```\n   ```bash java\n   mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n   ```\n   ```bash csharp\n   dotnet build\n   pwsh bin/Debug/netX/playwright.ps1 install --with-deps\n   ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":1,"to":32}}}}],["9e12482d-e1f3-4a9c-b628-8db2e49b7369",{"pageContent":"1. **Run your tests**:\n   ```bash js\n   npx playwright test\n   ```\n   ```bash python\n   pytest\n   ```\n   ```bash java\n   mvn test\n   ```\n   ```bash csharp\n   dotnet test\n   ```\n\n## Workers\n* langs: js\n\nWe recommend setting [workers](./api/class-testconfig.md#test-config-workers) to \"1\" in CI environments to prioritize stability and reproducibility. Running tests sequentially ensures each test gets the full system resources, avoiding potential conflicts. However, if you have a powerful self-hosted CI system, you may enable [parallel](./test-parallel.md) tests. For wider parallelization, consider [sharding](./test-parallel.md#shard-tests-between-multiple-machines) - distributing tests across multiple CI jobs.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n});\n```\n\n## CI configurations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":34,"to":62}}}}],["a908e518-e396-4ad9-b231-846f8f62332d",{"pageContent":"export default defineConfig({\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n});\n```\n\n## CI configurations\n\nThe [Command line tools](./browsers#install-system-dependencies) can be used to install all operating system dependencies in CI.\n\n### GitHub Actions\n\n#### On push/pull_request\n* langs: js\n\nTests will run on push or pull request on branches main/master. The [workflow](https://docs.github.com/en/actions/using-workflows/about-workflows) will install all dependencies, install Playwright and then run the tests. It will also create the HTML report.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":56,"to":71}}}}],["6ceee2cf-9660-42f9-b334-1aaf615216f5",{"pageContent":"```yml js title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```\n\n#### On push/pull_request\n* langs: python, java, csharp","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":73,"to":104}}}}],["5274e06f-68a5-47eb-8394-91059602abe8",{"pageContent":"#### On push/pull_request\n* langs: python, java, csharp\n\nTests will run on push or pull request on branches main/master. The [workflow](https://docs.github.com/en/actions/using-workflows/about-workflows) will install all dependencies, install Playwright and then run the tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":103,"to":106}}}}],["8c898fd6-65c3-4ee5-adb7-036d9aa013f4",{"pageContent":"```yml python title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run your tests\n      run: pytest --tracing=retain-on-failure\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-traces\n        path: test-results/\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":108,"to":138}}}}],["d0216fc0-457f-4d0e-88d0-7e0d7fac98d6",{"pageContent":"```yml java title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Ensure browsers are installed\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":140,"to":163}}}}],["ae4edffe-441e-4ccd-9338-ae2af151c98a",{"pageContent":"```yml csharp title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test\n```\n\n#### On push/pull_request (sharded)\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":165,"to":191}}}}],["ab1631a9-1ccf-4579-9d20-8201fa9e7a05",{"pageContent":"#### On push/pull_request (sharded)\n* langs: js\n\nGitHub Actions supports [sharding tests between multiple jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs). Check out our [sharding doc](./test-sharding) to learn more about sharding and to see a [GitHub actions example](./test-sharding.md#github-actions-example) of how to configure a job to run your tests on multiple machines as well as how to merge the HTML reports.\n\n#### Via Containers\n\nGitHub Actions support [running jobs in a container](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) by using the [`jobs.<job_id>.container`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontainer) option. This is useful to not pollute the host environment with dependencies and to have a consistent environment for e.g. screenshots/visual regression testing across different operating systems.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":190,"to":197}}}}],["814f09ff-3e43-4954-bbac-7e143a22d3fb",{"pageContent":"```yml js title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: lts/*\n      - name: Install dependencies\n        run: npm ci\n      - name: Run your tests\n        run: npx playwright test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":199,"to":222}}}}],["efa74e0c-cd01-43ec-aaf3-429c12060666",{"pageContent":"```yml python title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r local-requirements.txt\n          pip install -e .\n      - name: Run your tests\n        run: pytest\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":224,"to":251}}}}],["cf610959-58af-40f1-8014-534f5552ce8b",{"pageContent":"```yml java title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n      - name: Build & Install\n        run: mvn -B install -D skipTests --no-transfer-progress\n      - name: Run tests\n        run: mvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":253,"to":277}}}}],["b8bb2138-bd48-4d9d-b3b0-1ae5e73c7182",{"pageContent":"```yml csharp title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n      options: --user 1001\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup dotnet\n        uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: 8.0.x\n      - run: dotnet build\n      - name: Run your tests\n        run: dotnet test\n```\n\n#### On deployment\n\nThis will start the tests after a [GitHub Deployment](https://developer.github.com/v3/repos/deployments/) went into the `success` state.\nServices like Vercel use this pattern so you can run your end-to-end tests on their deployed environment.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":279,"to":307}}}}],["5ec4cf4e-1b54-4edd-9880-ac11dd49d866",{"pageContent":"```yml js title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n      env:\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":309,"to":331}}}}],["4ec3dbc2-6e75-4155-8bc6-63d7d71ae784",{"pageContent":"```yml python title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run tests\n      run: pytest\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":333,"to":358}}}}],["b853a05b-697c-44da-b4bd-7d51d3a644a1",{"pageContent":"```yml java title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Install Playwright\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":360,"to":384}}}}],["bfa7dedb-e7cf-4fd7-9fa5-372223d52bb3",{"pageContent":"```yml csharp title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run tests\n      run: dotnet test\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n#### Fail-Fast\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":386,"to":412}}}}],["9dc13d84-15c2-4776-bbea-a499f65d0844",{"pageContent":"#### Fail-Fast\n* langs: js\n\nLarge test suites can take very long to execute. By executing a preliminary test run with the `--only-changed` flag, you can run test files that are likely to fail first.\nThis will give you a faster feedback loop and slightly lower CI consumption while working on Pull Requests.\nTo detect test files affected by your changeset, `--only-changed` analyses your suites' dependency graph. This is a heuristic and might miss tests, so it's important that you always run the full test suite after the preliminary test run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":411,"to":416}}}}],["f5676154-c22a-494b-9da9-aa01e1a3f03c",{"pageContent":"```yml js title=\".github/workflows/playwright.yml\" {24-26}\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        # Force a non-shallow checkout, so that we can reference $GITHUB_BASE_REF.\n        # See https://github.com/actions/checkout for more details.\n        fetch-depth: 0\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run changed Playwright tests\n      run: npx playwright test --only-changed=$GITHUB_BASE_REF\n      if: github.event_name == 'pull_request'\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":418,"to":449}}}}],["0356371e-b0aa-42ac-bb2c-42f4fcc929e9",{"pageContent":"if: github.event_name == 'pull_request'\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":444,"to":453}}}}],["713ebf5e-1d8c-4436-af60-f9e9ecd11e68",{"pageContent":"### Docker\n\nWe have a [pre-built Docker image](./docker.md) which can either be used directly or as a reference to update your existing Docker definitions. Make sure to follow the [Recommended Docker Configuration](./docker.md#recommended-docker-configuration) to ensure the best performance.\n\n### Azure Pipelines\n\nFor Windows or macOS agents, no additional configuration is required, just install Playwright and run your tests.\n\nFor Linux agents, you can use [our Docker container](./docker.md) with Azure\nPipelines support [running containerized\njobs](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops).\nAlternatively, you can use [Command line tools](./browsers#install-system-dependencies) to install all necessary dependencies.\n\nFor running the Playwright tests use this pipeline task:\n\n```yml js\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":455,"to":475}}}}],["ca20121b-8221-48d4-a8d1-9948c62c32eb",{"pageContent":"For running the Playwright tests use this pipeline task:\n\n```yml js\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n```yml python\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.11'\n  displayName: 'Use Python'\n- script: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n- script: playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: pytest\n  displayName: 'Run Playwright tests'\n```\n\n```yml java\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":468,"to":519}}}}],["40b35ede-1a8d-49cd-8966-2eb4b4003680",{"pageContent":"```yml java\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: JavaToolInstaller@0\n  inputs:\n    versionSpec: '17'\n    jdkArchitectureOption: 'x64'\n    jdkSourceOption: AzureStorage\n- script: mvn -B install -D skipTests --no-transfer-progress\n  displayName: 'Build and install'\n- script: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n  displayName: 'Install Playwright browsers'\n- script: mvn test\n  displayName: 'Run tests'\n```\n\n```yml csharp\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: pwsh bin/Release/net8.0/playwright.ps1 install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":514,"to":554}}}}],["29d88c50-f461-48c5-8446-5f3c502041d8",{"pageContent":"#### Uploading playwright-report folder with Azure Pipelines\n* langs: js\n\nThis will make the pipeline run fail if any of the playwright tests fails.\nIf you also want to integrate the test results with Azure DevOps, use the task `PublishTestResults` task like so:\n\n```yml\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":556,"to":573}}}}],["0ad145f0-83e6-4350-a2f0-3e3917f01d18",{"pageContent":"```yml\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n- task: PublishTestResults@2\n  displayName: 'Publish test results'\n  inputs:\n    searchFolder: 'test-results'\n    testResultsFormat: 'JUnit'\n    testResultsFiles: 'e2e-junit-results.xml'\n    mergeTestResults: true\n    failTaskOnFailedTests: true\n    testRunTitle: 'My End-To-End Tests'\n  condition: succeededOrFailed()\n- task: PublishPipelineArtifact@1\n  inputs:\n    targetPath: playwright-report\n    artifact: playwright-report\n    publishLocation: 'pipeline'\n  condition: succeededOrFailed()\n\n```\nNote: The JUnit reporter needs to be configured accordingly via\n```js\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":562,"to":603}}}}],["39a3f86d-55b6-41e9-af7d-120268bf2895",{"pageContent":"```\nNote: The JUnit reporter needs to be configured accordingly via\n```js\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['junit', { outputFile: 'test-results/e2e-junit-results.xml' }]],\n});\n```\nin `playwright.config.ts`.\n\n#### Azure Pipelines (sharded)\n* langs: js\n\n```yaml\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nstrategy:\n  matrix:\n    chromium-1:\n      project: chromium\n      shard: 1/3\n    chromium-2:\n      project: chromium\n      shard: 2/3\n    chromium-3:\n      project: chromium\n      shard: 3/3\n    firefox-1:\n      project: firefox\n      shard: 1/3\n    firefox-2:\n      project: firefox\n      shard: 2/3\n    firefox-3:\n      project: firefox\n      shard: 3/3\n    webkit-1:\n      project: webkit\n      shard: 1/3\n    webkit-2:\n      project: webkit\n      shard: 2/3\n    webkit-3:\n      project: webkit\n      shard: 3/3\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":600,"to":654}}}}],["59cba928-e7a5-4817-bb46-13f0704dea45",{"pageContent":"- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test --project=$(project) --shard=$(shard)\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n\n#### Azure Pipelines (containerized)\n\n```yml js\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n```yml python\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.11'\n  displayName: 'Use Python'","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":656,"to":703}}}}],["81a29456-e547-4a46-bf09-86e920f1fe7e",{"pageContent":"pool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.11'\n  displayName: 'Use Python'\n\n- script: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n- script: pytest\n  displayName: 'Run tests'\n```\n\n```yml java\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n\nsteps:\n- task: JavaToolInstaller@0\n  inputs:\n    versionSpec: '17'\n    jdkArchitectureOption: 'x64'\n    jdkSourceOption: AzureStorage\n\n- script: mvn -B install -D skipTests --no-transfer-progress\n  displayName: 'Build and install'\n- script: mvn test\n  displayName: 'Run tests'\n```\n\n```yml csharp\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":695,"to":740}}}}],["0f23132f-ee84-40b0-9042-8f2e740c11a8",{"pageContent":"```yml csharp\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n```\n\n### CircleCI\n\nRunning Playwright on CircleCI is very similar to running on GitHub Actions. In order to specify the pre-built Playwright [Docker image](./docker.md), simply modify the agent definition with `docker:` in your config like so:\n\n```yml js\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\n```yml python\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":734,"to":771}}}}],["9b963174-7f76-442a-b91b-43757438b236",{"pageContent":"```yml python\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\n```yml java\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\n```yml csharp\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\nNote: When using the docker agent definition, you are specifying the resource class of where playwright runs to the 'medium' tier [here](https://circleci.com/docs/configuration-reference?#docker-execution-environment). The default behavior of Playwright is to set the number of workers to the detected core count (2 in the case of the medium tier). Overriding the number of workers to greater than this number will cause unnecessary timeouts and failures.\n\n#### Sharding in CircleCI\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":766,"to":790}}}}],["16ca4b27-f5a8-4c92-ba8b-e6a6c4891bab",{"pageContent":"#### Sharding in CircleCI\n* langs: js\n\nSharding in CircleCI is indexed with 0 which means that you will need to override the default parallelism ENV VARS. The following example demonstrates how to run Playwright with a CircleCI Parallelism of 4 by adding 1 to the `CIRCLE_NODE_INDEX` to pass into the `--shard` cli arg.\n\n  ```yml\n    playwright-job-name:\n      executor: pw-noble-development\n      parallelism: 4\n      steps:\n        - run: SHARD=\"$((${CIRCLE_NODE_INDEX}+1))\"; npx playwright test --shard=${SHARD}/${CIRCLE_NODE_TOTAL}\n  ```\n\n### Jenkins\n\nJenkins supports Docker agents for pipelines. Use the [Playwright Docker image](./docker.md)\nto run tests on Jenkins.\n\n```groovy js\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'npm ci'\n            sh 'npx playwright test'\n         }\n      }\n   }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":789,"to":819}}}}],["a5d4bd8e-861b-485d-bd9b-466523a2b189",{"pageContent":"```groovy python\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/python:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'pip install -r requirements.txt'\n            sh 'pytest'\n         }\n      }\n   }\n}\n```\n\n```groovy java\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/java:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'mvn -B install -D skipTests --no-transfer-progress'\n            sh 'mvn test'\n         }\n      }\n   }\n}\n```\n\n```groovy csharp\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'dotnet build'\n            sh 'dotnet test'\n         }\n      }\n   }\n}\n```\n\n### Bitbucket Pipelines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":821,"to":863}}}}],["7de0c6fc-0bc3-4d8b-902c-29c8e64dc082",{"pageContent":"### Bitbucket Pipelines\n\nBitbucket Pipelines can use public [Docker images as build environments](https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html). To run Playwright tests on Bitbucket, use our public Docker image ([see Dockerfile](./docker.md)).\n\n```yml js\nimage: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\n```yml python\nimage: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\n```yml java\nimage: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\n```yml csharp\nimage: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n### GitLab CI\n\nTo run Playwright tests on GitLab, use our public Docker image ([see Dockerfile](./docker.md)).\n\n```yml js\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  script:\n  ...\n```\n\n```yml python\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n  script:\n  ...\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":863,"to":907}}}}],["0f3f91fa-6024-443e-833e-4ab581b9ee08",{"pageContent":"```yml python\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n  script:\n  ...\n```\n\n```yml java\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n  script:\n  ...\n```\n\n```yml dotnet\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n  script:\n  ...\n```\n\n#### Sharding\n* langs: js\n\nGitLab CI supports [sharding tests between multiple jobs](https://docs.gitlab.com/ee/ci/jobs/job_control.html#parallelize-large-jobs) using the [parallel](https://docs.gitlab.com/ee/ci/yaml/index.html#parallel) keyword. The test job will be split into multiple smaller jobs that run in parallel. Parallel jobs are named sequentially from `job_name 1/N` to `job_name N/N`.\n\n```yml\nstages:\n  - test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":898,"to":938}}}}],["b98cecc3-bb54-4eae-adb3-a7b18449a484",{"pageContent":"```yml\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  parallel: 7\n  script:\n    - npm ci\n    - npx playwright test --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL\n```\n\nGitLab CI also supports sharding tests between multiple jobs using the [parallel:matrix](https://docs.gitlab.com/ee/ci/yaml/index.html#parallelmatrix) option. The test job will run multiple times in parallel in a single pipeline, but with different variable values for each instance of the job. In the example below, we have 2 `PROJECT` values and 10 `SHARD` values, resulting in a total of 20 jobs to be run.\n\n```yml\nstages:\n  - test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":936,"to":953}}}}],["f32d23ef-a527-41bb-9616-973b7cd363d6",{"pageContent":"```yml\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  parallel:\n    matrix:\n      - PROJECT: ['chromium', 'webkit']\n        SHARD: ['1/10', '2/10', '3/10', '4/10', '5/10', '6/10', '7/10', '8/10', '9/10', '10/10']\n  script:\n    - npm ci\n    - npx playwright test --project=$PROJECT --shard=$SHARD\n```\n### Google Cloud Build\n* langs: js\n\nTo run Playwright tests on Google Cloud Build, use our public Docker image ([see Dockerfile](./docker.md)).\n\n```yml\nsteps:\n- name: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  script: \n  ...\n  env:\n  - 'CI=true'\n```\n\n### Drone\n* langs: js\n\nTo run Playwright tests on Drone, use our public Docker image ([see Dockerfile](./docker.md)).\n\n```yml\nkind: pipeline\nname: default\ntype: docker\n\nsteps:\n  - name: test\n    image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n    commands:\n      - npx playwright test\n```\n\n## Caching browsers","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":951,"to":997}}}}],["cc473c19-4191-41e6-86cb-18e2b87fed4b",{"pageContent":"```yml\nkind: pipeline\nname: default\ntype: docker\n\nsteps:\n  - name: test\n    image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n    commands:\n      - npx playwright test\n```\n\n## Caching browsers\n\nCaching browser binaries is not recommended, since the amount of time it takes to restore the cache is comparable to the time it takes to download the binaries. Especially under Linux, [operating system dependencies](./browsers.md#install-system-dependencies) need to be installed, which are not cacheable.\n\nIf you still want to cache the browser binaries between CI runs, cache [these directories](./browsers.md#managing-browser-binaries) in your CI configuration, against a hash of the Playwright version.\n\n## Debugging browser launches\n\nPlaywright supports the `DEBUG` environment variable to output debug logs during execution. Setting it to `pw:browser` is helpful while debugging `Error: Failed to launch browser` errors.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":985,"to":1005}}}}],["efa1c153-a8e9-48dd-82de-ef359b1f6e2d",{"pageContent":"Playwright supports the `DEBUG` environment variable to output debug logs during execution. Setting it to `pw:browser` is helpful while debugging `Error: Failed to launch browser` errors.\n\n```bash js\nDEBUG=pw:browser npx playwright test\n```\n```bash python\nDEBUG=pw:browser pytest\n```\n\n```bash java\nDEBUG=pw:browser mvn test\n```\n\n```bash csharp\nDEBUG=pw:browser dotnet test\n```\n\n## Running headed\n\nBy default, Playwright launches browsers in headless mode. See in our [Running tests](./running-tests.md#run-tests-in-headed-mode) guide how to run tests in headed mode.\n\nOn Linux agents, headed execution requires [Xvfb](https://en.wikipedia.org/wiki/Xvfb) to be installed. Our [Docker image](./docker.md) and GitHub Action have Xvfb pre-installed. To run browsers in headed mode with Xvfb, add `xvfb-run` before the actual command.\n\n```bash js\nxvfb-run npx playwright test\n```\n```bash python\nxvfb-run pytest\n```\n```bash java\nxvfb-run mvn test\n```\n```bash csharp\nxvfb-run dotnet test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-ci.md","title":"src-ci","url":"https://playwright.dev/docs/src-ci","loc":{"lines":{"from":1005,"to":1039}}}}],["3570ad86-3829-4d72-a230-1a20f345d66e",{"pageContent":"---\nid: clock\ntitle: \"Clock\"\n---\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nAccurately simulating time-dependent behavior is essential for verifying the correctness of applications. Utilizing [Clock] functionality allows developers to manipulate and control time within tests, enabling the precise validation of features such as rendering time, timeouts, scheduled tasks without the delays and variability of real-time execution.\n\nThe [Clock] API provides the following methods to control time:\n- `setFixedTime`: Sets the fixed time for `Date.now()` and `new Date()`.\n- `install`: initializes the clock and allows you to:\n  - `pauseAt`: Pauses the time at a specific time.\n  - `fastForward`: Fast forwards the time.\n  - `runFor`: Runs the time for a specific duration.\n  - `resume`: Resumes the time.\n- `setSystemTime`: Sets the current system time.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":1,"to":18}}}}],["ba291a8d-0778-468b-961f-f4beb84d3b06",{"pageContent":"The recommended approach is to use `setFixedTime` to set the time to a specific value. If that doesn't work for your use case, you can use `install` which allows you to pause time later on, fast forward it, tick it, etc. `setSystemTime` is only recommended for advanced use cases.\n\n:::note\n[`property: Page.clock`] overrides native global classes and functions related to time allowing them to be manually controlled:\n  - `Date`\n  - `setTimeout`\n  - `clearTimeout`\n  - `setInterval`\n  - `clearInterval`\n  - `requestAnimationFrame`\n  - `cancelAnimationFrame`\n  - `requestIdleCallback`\n  - `cancelIdleCallback`\n  - `performance`\n  - `Event.timeStamp`\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":20,"to":35}}}}],["ab047cf0-0e30-4217-928f-e9b61bdf6094",{"pageContent":":::warning\nIf you call `install` at any point in your test, the call _MUST_ occur before any other clock related calls (see note above for list). Calling these methods out of order will result in undefined behavior. For example, you cannot call `setInterval`, followed by `install`, then `clearInterval`, as `install` overrides the native definition of the clock functions.\n:::\n\n## Test with predefined time\n\nOften you only need to fake `Date.now` while keeping the timers going.\nThat way the time flows naturally, but `Date.now` always returns a fixed value.\n\n```html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":37,"to":55}}}}],["be36fc8d-e538-4a93-803b-b97cec39588a",{"pageContent":"```js\nawait page.clock.setFixedTime(new Date('2024-02-02T10:00:00'));\nawait page.goto('http://localhost:3333');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\nawait page.clock.setFixedTime(new Date('2024-02-02T10:30:00'));\n// We know that the page has a timer that updates the time every second.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n## Consistent time and timers\n\nSometimes your timers depend on `Date.now` and are confused when the `Date.now` value does not change over time.\nIn this case, you can install the clock and fast forward to the time of interest when testing.\n\n```html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":57,"to":81}}}}],["3b2e62d1-8506-4f51-83e5-d132b2cec8ef",{"pageContent":"```js\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n```python async\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\nawait page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\nawait page.goto(\"http://localhost:3333\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":83,"to":105}}}}],["ad521d9d-f210-4d24-a649-5bafe6a408cd",{"pageContent":"# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\nawait page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nawait expect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\nawait page.clock.fast_forward(\"30:00\")\nawait expect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\n```python sync\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\npage.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\npage.goto(\"http://localhost:3333\")\n\n# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":107,"to":127}}}}],["158cb7b0-7801-4a8d-8eaa-ed1afeae3f2c",{"pageContent":"# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\npage.clock.fast_forward(\"30:00\")\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\n```java\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\nSimpleDateFormat format = new SimpleDateFormat(\"yyy-MM-dd'T'HH:mm:ss\");\npage.clock().install(new Clock.InstallOptions().setTime(format.parse(\"2024-02-02T08:00:00\")));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":125,"to":143}}}}],["806d65c0-efd5-475a-9dd6-f65f332ffdb0",{"pageContent":"// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\npage.clock().pauseAt(format.parse(\"2024-02-02T10:00:00\"));\n\n// Assert the page state.\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\npage.clock().fastForward(\"30:00\");\nassertThat(locator).hasText(\"2/2/2024, 10:30:00 AM\");\n```\n\n```csharp\n// Initialize clock with some time before the test time and let the page load naturally.\n// `Date.now` will progress as the timers fire.\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)\n});\nawait Page.GotoAsync(\"http://localhost:3333\");\n\n// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\n\n// Assert the page state.\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":145,"to":171}}}}],["488f5bef-8d1a-464a-91eb-fef0a96d6d23",{"pageContent":"// Assert the page state.\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\nawait Page.Clock.FastForwardAsync(\"30:00\");\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:30:00 AM\");\n```\n\n## Test inactivity monitoring\n\nInactivity monitoring is a common feature in web applications that logs out users after a period of inactivity.\nTesting this feature can be tricky because you need to wait for a long time to see the effect.\nWith the help of the clock, you can speed up time and test this feature quickly.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":170,"to":182}}}}],["ca60876d-232c-42bb-bab3-7c908478115c",{"pageContent":"```html\n<div id=\"remaining-time\" data-testid=\"remaining-time\"></div>\n<script>\n  const endTime = Date.now() + 5 * 60_000;\n  const renderTime = () => {\n    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);\n    if (diffInSeconds <= 0) {\n      document.getElementById('remaining-time').textContent =\n        'You have been logged out due to inactivity.';\n    } else {\n      document.getElementById('remaining-time').textContent =\n        `You will be logged out in ${diffInSeconds} seconds.`;\n    }\n    setTimeout(renderTime, 1000);\n  };\n  renderTime();\n</script>\n<button type=\"button\">Interaction</button>\n```\n\n```js\n// Initial time does not matter for the test, so we can pick current time.\nawait page.clock.install();\nawait page.goto('http://localhost:3333');\n// Interact with the page\nawait page.getByRole('button').click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":184,"to":209}}}}],["f8fb6577-7ace-4f74-aec8-43c9c3f488d3",{"pageContent":"// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\nawait page.clock.fastForward('05:00');\n\n// Check that the user was logged out automatically.\nawait expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();\n```\n\n```python async\n# Initial time does not matter for the test, so we can pick current time.\nawait page.clock.install()\nawait page.goto(\"http://localhost:3333\")\n# Interact with the page\nawait page.get_by_role(\"button\").click()\n\n# Fast forward time 5 minutes as if the user did not do anything.\n# Fast forward is like closing the laptop lid and opening it after 5 minutes.\n# All the timers due will fire once immediately, as in the real browser.\nawait page.clock.fast_forward(\"05:00\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":211,"to":230}}}}],["a151734c-9478-4832-89b9-ea66b74f7f84",{"pageContent":"# Check that the user was logged out automatically.\nawait expect(page.getByText(\"You have been logged out due to inactivity.\")).toBeVisible()\n```\n\n```python sync\n# Initial time does not matter for the test, so we can pick current time.\npage.clock.install()\npage.goto(\"http://localhost:3333\")\n# Interact with the page\npage.get_by_role(\"button\").click()\n\n# Fast forward time 5 minutes as if the user did not do anything.\n# Fast forward is like closing the laptop lid and opening it after 5 minutes.\n# All the timers due will fire once immediately, as in the real browser.\npage.clock.fast_forward(\"05:00\")\n\n# Check that the user was logged out automatically.\nexpect(page.get_by_text(\"You have been logged out due to inactivity.\")).to_be_visible()\n```\n\n```java\n// Initial time does not matter for the test, so we can pick current time.\npage.clock().install();\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByRole(\"button\");\n\n// Interact with the page\nlocator.click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":232,"to":259}}}}],["26744204-53c2-449d-a025-25fd60058e61",{"pageContent":"// Interact with the page\nlocator.click();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\npage.clock().fastForward(\"05:00\");\n\n// Check that the user was logged out automatically.\nassertThat(page.getByText(\"You have been logged out due to inactivity.\")).isVisible();\n```\n\n```csharp\n// Initial time does not matter for the test, so we can pick current time.\nawait Page.Clock.InstallAsync();\nawait page.GotoAsync(\"http://localhost:3333\");\n\n// Interact with the page\nawait page.GetByRole(\"button\").ClickAsync();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\nawait Page.Clock.FastForwardAsync(\"05:00\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":258,"to":281}}}}],["d544728f-0be1-4976-b061-32bfa4404015",{"pageContent":"// Check that the user was logged out automatically.\nawait Expect(Page.GetByText(\"You have been logged out due to inactivity.\")).ToBeVisibleAsync();\n```\n\n## Tick through time manually, firing all the timers consistently\n\nIn rare cases, you may want to tick through time manually, firing all timers and\nanimation frames in the process to achieve a fine-grained control over the passage of time.\n\n```html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```\n\n```js\n// Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":283,"to":306}}}}],["77aa416f-c127-44f6-b056-3746423e9157",{"pageContent":"```js\n// Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\nawait page.clock.runFor(2000);\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:02 AM');\n```\n\n```python async\n# Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install(time=\n    datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),\n)\nawait page.goto(\"http://localhost:3333\")\nlocator = page.get_by_test_id(\"current-time\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":303,"to":325}}}}],["4dd2b9d1-c185-4c3f-b787-732aa734e53c",{"pageContent":"# Pause the time flow, stop the timers, you now have manual control\n# over the page time.\nawait page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\nawait expect(locator).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Tick through time manually, firing all timers in the process.\n# In this case, time will be updated in the screen 2 times.\nawait page.clock.run_for(2000)\nawait expect(locator).to_have_text(\"2/2/2024, 10:00:02 AM\")\n```\n\n```python sync\n# Initialize clock with a specific time, let the page load naturally.\npage.clock.install(\n    time=datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),\n)\npage.goto(\"http://localhost:3333\")\nlocator = page.get_by_test_id(\"current-time\")\n\n# Pause the time flow, stop the timers, you now have manual control\n# over the page time.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\nexpect(locator).to_have_text(\"2/2/2024, 10:00:00 AM\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":327,"to":349}}}}],["f9270262-b5e9-42e3-9e2a-c0d99515203f",{"pageContent":"# Tick through time manually, firing all timers in the process.\n# In this case, time will be updated in the screen 2 times.\npage.clock.run_for(2000)\nexpect(locator).to_have_text(\"2/2/2024, 10:00:02 AM\")\n```\n\n```java\nSimpleDateFormat format = new SimpleDateFormat(\"yyy-MM-dd'T'HH:mm:ss\");\n// Initialize clock with a specific time, let the page load naturally.\npage.clock().install(new Clock.InstallOptions()\n    .setTime(format.parse(\"2024-02-02T08:00:00\")));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\npage.clock().pauseAt(format.parse(\"2024-02-02T10:00:00\"));\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\npage.clock().runFor(2000);\nassertThat(locator).hasText(\"2/2/2024, 10:00:02 AM\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":351,"to":374}}}}],["f4ded597-7fac-4a98-8b64-86de750f83d9",{"pageContent":"```csharp\n// Initialize clock with a specific time, let the page load naturally.\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0, DateTimeKind.Pst)\n});\nawait page.GotoAsync(\"http://localhost:3333\");\nvar locator = page.GetByTestId(\"current-time\");\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\nawait Expect(locator).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\nawait Page.Clock.RunForAsync(2000);\nawait Expect(locator).ToHaveTextAsync(\"2/2/2024, 10:00:02 AM\");\n```\n\n## Related Videos\n\n<LiteYouTube\n  id=\"54_aC-rVKHg\"\n  title=\"Playwright 1.45\"\n/>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-clock.md","title":"src-clock","url":"https://playwright.dev/docs/src-clock","loc":{"lines":{"from":376,"to":401}}}}],["19afba2c-e690-4292-8c45-44d839e51289",{"pageContent":"---\nid: codegen-intro\ntitle: \"Generating tests\"\n---\n\n## Introduction\n\nPlaywright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing. It will open two windows, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests, copy the tests, clear your tests as well as change the language of your tests.\n\n**You will learn**\n\n- [How to record a test](/codegen.md#recording-a-test)\n- [How to generate locators](/codegen.md#generating-locators)\n\n## Running Codegen\n\nUse the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.\n\n```bash js\nnpx playwright codegen demo.playwright.dev/todomvc\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":1,"to":21}}}}],["eb308002-a6a7-4fe5-8ae9-9dd337bb6626",{"pageContent":"```bash js\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen demo.playwright.dev/todomvc\"\n```\n\n```bash python\nplaywright codegen demo.playwright.dev/todomvc\n```\n\n```bash csharp\npwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n```\n\n### Recording a test\n\nRun `codegen` and perform actions in the browser. Playwright will generate the code for the user interactions. `Codegen` will look at the rendered page and figure out the recommended locator, prioritizing role, text and test id locators. If the generator identifies multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, therefore eliminating and reducing test(s) failing and flaking due to locators.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":19,"to":37}}}}],["6e4b8fa4-7c04-4ece-8050-6228b006a203",{"pageContent":"With the test generator you can record:\n* Actions like click or fill by simply interacting with the page\n* Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:\n  * `'assert visibility'` to assert that an element is visible\n  * `'assert text'` to assert that an element contains specific text\n  * `'assert value'` to assert that an element has a specific value\n\n######\n* langs: js\n\n![Recording a test](https://github.com/microsoft/playwright/assets/13063165/34a79ea1-639e-4cb3-8115-bfdc78e3d34d)\n\n######\n* langs: java\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/ec9c4071-4af8-4ae7-8b36-aebcc29bdbbb)\n\n######\n* langs: python\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/9751b609-6e4c-486b-a961-f86f177b1d58)\n\n######\n* langs: csharp\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/53bdfb6f-d462-4ce0-ab95-0619faaebf1e)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":39,"to":64}}}}],["8d7642cf-d336-4939-8e07-782776b20bcc",{"pageContent":"######\n* langs: csharp\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/53bdfb6f-d462-4ce0-ab95-0619faaebf1e)\n\n######\n* langs: js, java, python, csharp\n\nWhen you have finished interacting with the page, press the `'record'` button to stop the recording and use the `'copy'` button to copy the generated code to your editor.\n\nUse the `'clear'` button to clear the code to start recording again. Once finished close the Playwright inspector window or stop the terminal command.\n\nTo learn more about generating tests check out or detailed guide on [Codegen](./codegen.md).\n\n### Generating locators\n\nYou can generate [locators](/locators.md) with the test generator.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":61,"to":77}}}}],["533bf019-5a2a-45dc-a19e-dd1f1c5df492",{"pageContent":"To learn more about generating tests check out or detailed guide on [Codegen](./codegen.md).\n\n### Generating locators\n\nYou can generate [locators](/locators.md) with the test generator.\n\n* Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.\n* Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.\n* To choose a locator click on the element you would like to locate and the code for that locator will appear in the locator playground next to the Pick Locator button.\n* You can then edit the locator in the locator playground to fine tune it and see the matching element highlighted in the browser window. \n* Use the copy button to copy the locator and paste it into your code.\n\n######\n* langs: js\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/2c8a12e2-4e98-4fdd-af92-1d73ae696d86)\n\n######\n* langs: java","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":73,"to":91}}}}],["62c3ddc8-1896-4ddf-ab46-304492ca230b",{"pageContent":"######\n* langs: js\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/2c8a12e2-4e98-4fdd-af92-1d73ae696d86)\n\n######\n* langs: java\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/733b48fd-5edf-4150-93f0-018adc52b6ff)\n\n######\n* langs: python\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/95d11f48-96a4-46b9-9c2a-63c3aa4fdce7)\n\n######\n* langs: csharp\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/1478f56f-422f-4276-9696-0674041f11dc)\n\n### Emulation\n\nYou can also generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state. Check out the [Test Generator](./codegen.md#emulation) guide to learn more.\n\n## What's Next\n\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen-intro.md","title":"src-codegen-intro","url":"https://playwright.dev/docs/src-codegen-intro","loc":{"lines":{"from":85,"to":111}}}}],["14d8e86d-7228-475b-9de0-f82f41bdc83e",{"pageContent":"---\nid: codegen\ntitle: \"Test generator\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nPlaywright comes with the ability to generate tests for you as you perform actions in the browser and is a great way to quickly get started with testing. Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](./locators.md). If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient that uniquely identify the target element.\n\n## Generate tests in VS Code\n* langs: js\n\nInstall the VS Code extension and generate tests directly from VS Code. The extension is available on the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright). Check out our guide on [getting started with VS Code](./getting-started-vscode.md).\n\n<LiteYouTube\n    id=\"LM4yqrOzmFE\"\n    title=\"Generating Playwright tests in VS Code\"\n/>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":1,"to":20}}}}],["9c71785d-618d-4fef-8ef6-3a9102c22cdd",{"pageContent":"<LiteYouTube\n    id=\"LM4yqrOzmFE\"\n    title=\"Generating Playwright tests in VS Code\"\n/>\n\n### Record a New Test\n\nTo record a test click on the **Record new** button from the Testing sidebar. This will create a `test-1.spec.ts` file as well as open up a browser window.\n\n<img width=\"1385\" alt=\"record new in vs code\" src=\"https://user-images.githubusercontent.com/13063165/220961665-615d0ab8-3f0b-439c-ad0b-0424d9aa154b.png\" />\n\nIn the browser go to the URL you wish to test and start clicking around to record your user actions.\n\n![generating user actions](https://github.com/microsoft/playwright/assets/13063165/1d4c8f37-8325-4816-a665-d0e95e63f509)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":17,"to":30}}}}],["468cf8be-2460-4c3f-a963-a68f097ed469",{"pageContent":"![generating user actions](https://github.com/microsoft/playwright/assets/13063165/1d4c8f37-8325-4816-a665-d0e95e63f509)\n\nPlaywright will record your actions and generate the test code directly in VS Code. You can also generate assertions by choosing one of the icons in the toolbar and then clicking on an element on the page to assert against. The following assertions can be generated:\n  * `'assert visibility'` to assert that an element is visible\n  * `'assert text'` to assert that an element contains specific text\n  * `'assert value'` to assert that an element has a specific value\n\n![generating assertions](https://github.com/microsoft/playwright/assets/13063165/d131eb35-b2ca-4bf4-a8ac-88b6e40dcf07)\n\nOnce you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and manually improve it if needed.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":30,"to":39}}}}],["5d4eb10f-2c91-453c-b021-d5d81f7311d4",{"pageContent":"Once you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and manually improve it if needed.\n\n![code from a generated test](https://github.com/microsoft/playwright/assets/13063165/2ba4c212-4713-460a-b054-6dc6b67a9a7c)\n\n### Record at Cursor\n\nTo record from a specific point in your test move your cursor to where you want to record more actions and then click the **Record at cursor** button from the Testing sidebar. If your browser window is not already open then first run the test with 'Show browser' checked and then click the **Record at cursor** button.\n\n\n![record at cursor in vs code](https://github.com/microsoft/playwright/assets/13063165/77948ab8-92a2-435f-9833-0944da5ae664)\n\nIn the browser window start performing the actions you want to record.\n\n<img width=\"1394\" alt=\"add feed the dog to todo app\" src=\"https://user-images.githubusercontent.com/13063165/220960770-6435cec7-1723-42a8-8c1f-8244e2d800c7.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":39,"to":52}}}}],["53ebe62b-6a89-426c-a8f7-49dd694a7771",{"pageContent":"<img width=\"1394\" alt=\"add feed the dog to todo app\" src=\"https://user-images.githubusercontent.com/13063165/220960770-6435cec7-1723-42a8-8c1f-8244e2d800c7.png\" />\n\n\nIn the test file in VS Code you will see your new generated actions added to your test at the cursor position.\n\n![code from a generated test](https://github.com/microsoft/playwright/assets/13063165/4f4bb34e-9cda-41fe-bf65-8d8016d84c7f)\n\n### Generating locators\n\nYou can generate locators with the test generator.\n- Click on the **Pick locator** button form the testing sidebar and then hover over elements in the browser window to see the [locator](./locators.md) highlighted underneath each element.\n- Click the element you require and it will now show up in the **Pick locator** box in VS Code.\n- Press <kbd>Enter</kbd> on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":52,"to":64}}}}],["77481719-3e41-4e10-9a23-72785d8e970a",{"pageContent":"<img width=\"1641\" alt=\"Pick locators in VS code\" src=\"https://user-images.githubusercontent.com/13063165/220958368-95b03620-3c9b-40a8-be74-01c96ba03cad.png\" />\n\n## Generate tests with the Playwright Inspector\n\nWhen running the `codegen` command two windows will be opened, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests and then copy them into your editor.\n\n### Running Codegen\n\nUse the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.\n\n```bash js\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen demo.playwright.dev/todomvc\"\n```\n\n```bash python\nplaywright codegen demo.playwright.dev/todomvc\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":66,"to":86}}}}],["d244b3f1-6ebd-4f0b-909a-a9f1e59aff96",{"pageContent":"```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen demo.playwright.dev/todomvc\"\n```\n\n```bash python\nplaywright codegen demo.playwright.dev/todomvc\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen demo.playwright.dev/todomvc\n```\n\n### Recording a test\n\nRun the `codegen` command and perform actions in the browser window. Playwright will generate the code for the user interactions which you can see in the Playwright Inspector window. Once you have finished recording your test stop the recording and press the **copy** button to copy your generated test into your editor.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":80,"to":94}}}}],["f780847f-9312-4c4c-9764-29c155952386",{"pageContent":"With the test generator you can record:\n* Actions like click or fill by simply interacting with the page\n* Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:\n  * `'assert visibility'` to assert that an element is visible\n  * `'assert text'` to assert that an element contains specific text\n  * `'assert value'` to assert that an element has a specific value\n\n######\n* langs: js\n\n![Recording a test](https://github.com/microsoft/playwright/assets/13063165/34a79ea1-639e-4cb3-8115-bfdc78e3d34d)\n\n######\n* langs: java\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/ec9c4071-4af8-4ae7-8b36-aebcc29bdbbb)\n\n######\n* langs: python\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/9751b609-6e4c-486b-a961-f86f177b1d58)\n\n######\n* langs: csharp\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/53bdfb6f-d462-4ce0-ab95-0619faaebf1e)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":96,"to":121}}}}],["199a010a-e081-47b8-a342-d00207dddd9f",{"pageContent":"######\n* langs: csharp\n\n![recording a test](https://github.com/microsoft/playwright/assets/13063165/53bdfb6f-d462-4ce0-ab95-0619faaebf1e)\n\n######\n* langs: js, java, python, csharp\n\nWhen you have finished interacting with the page, press the **record** button to stop the recording and use the **copy** button to copy the generated code to your editor.\n\nUse the **clear** button to clear the code to start recording again. Once finished, close the Playwright inspector window or stop the terminal command.\n\n### Generating locators\nYou can generate [locators](/locators.md) with the test generator.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":118,"to":131}}}}],["495c87bc-837e-4809-828c-77ae7bd07e95",{"pageContent":"### Generating locators\nYou can generate [locators](/locators.md) with the test generator.\n\n* Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.\n* Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.\n* To choose a locator, click on the element you would like to locate and the code for that locator will appear in the field next to the Pick Locator button.\n* You can then edit the locator in this field to fine tune it or use the copy button to copy it and paste it into your code.\n\n######\n* langs: js\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/2c8a12e2-4e98-4fdd-af92-1d73ae696d86)\n\n######\n* langs: java\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/733b48fd-5edf-4150-93f0-018adc52b6ff)\n\n######\n* langs: python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":130,"to":149}}}}],["f1d603ad-0c76-4ffe-9ff7-fd1b3037d355",{"pageContent":"######\n* langs: java\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/733b48fd-5edf-4150-93f0-018adc52b6ff)\n\n######\n* langs: python\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/95d11f48-96a4-46b9-9c2a-63c3aa4fdce7)\n\n######\n* langs: csharp\n\n![picking a locator](https://github.com/microsoft/playwright/assets/13063165/1478f56f-422f-4276-9696-0674041f11dc)\n\n## Emulation\n\nYou can use the test generator to generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state.\n\n### Emulate viewport size\n\nPlaywright opens a browser window with its viewport set to a specific width and height and is not responsive as tests need to be run under the same conditions. Use the `--viewport` option to generate tests with a different viewport size.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":143,"to":164}}}}],["a8281a3f-1c34-485f-b3d4-3e917196b795",{"pageContent":"```bash js\nnpx playwright codegen --viewport-size=\"800,600\" playwright.dev\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --viewport-size='800,600' playwright.dev\"\n```\n\n```bash python\nplaywright codegen --viewport-size=\"800,600\" playwright.dev\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --viewport-size=\"800,600\" playwright.dev\n```\n######\n* langs: js\n\n<img width=\"870\" alt=\"Codegen generating code for tests for playwright.dev website with a specific viewport js\" src=\"https://user-images.githubusercontent.com/13063165/220402029-f90d1c9f-d740-4c0f-acc8-95235ee83f85.png\" />\n\n######\n* langs: java\n\n<img width=\"870\" alt=\"Codegen generating code for tests for playwright.dev website with a specific viewport java\" src=\"https://user-images.githubusercontent.com/13063165/220402748-12a856c2-b3ff-4155-b82d-64dad9c46886.png\" />\n\n######\n* langs: python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":166,"to":192}}}}],["4cfb8d59-e4d5-43c1-b763-e1e02f2794d4",{"pageContent":"######\n* langs: python\n\n<img width=\"870\" alt=\"Codegen generating code for tests for playwright.dev website with a specific viewport python\" src=\"https://user-images.githubusercontent.com/13063165/220403118-7704b708-dea3-44b3-97a4-04c2b9d1d0fa.png\" />\n\n######\n* langs: csharp\n\n<img width=\"870\" alt=\"Codegen generating code for tests for playwright.dev website with a specific viewport dotnet\" src=\"https://user-images.githubusercontent.com/13063165/220403496-4a46a9a1-4bc4-43e7-8f22-9cc760ceadaf.png\" />\n\n\n### Emulate devices\n\nRecord scripts and tests while emulating a mobile device using the `--device` option which sets the viewport size and user agent among others.\n\n```bash js\nnpx playwright codegen --device=\"iPhone 13\" playwright.dev\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --device=\"iPhone 13\" playwright.dev'\n```\n\n```bash python\nplaywright codegen --device=\"iPhone 13\" playwright.dev\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":191,"to":216}}}}],["cc36d1a9-ed60-4f9b-9656-0e2895bbf215",{"pageContent":"```bash python\nplaywright codegen --device=\"iPhone 13\" playwright.dev\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --device=\"iPhone 13\" playwright.dev\n```\n######\n* langs: js\n\n<img width=\"1300\" alt=\"Codegen generating code for tests for playwright.dev website emulated for iPhone 13 js\" src=\"https://user-images.githubusercontent.com/13063165/220921482-dc4f5532-9dce-40bd-8a28-e0d87d26a601.png\" />\n\n######\n* langs: java\n\n<img width=\"1300\" alt=\"Codegen generating code for tests for playwright.dev website emulated for iPhone 13 java\" src=\"https://user-images.githubusercontent.com/13063165/220922591-241e6a59-a920-4cb1-97a2-d46c33ea17c5.png\" />\n\n######\n* langs: python\n\n<img width=\"1300\" alt=\"Codegen generating code for tests for playwright.dev website emulated for iPhone 13 python\" src=\"https://user-images.githubusercontent.com/13063165/220922790-5c5a4d1a-e27d-4c9b-90ac-13cf9c925706.png\" />\n\n######\n* langs: csharp","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":214,"to":237}}}}],["57ce7f06-8747-45b8-8371-556d23095f12",{"pageContent":"######\n* langs: csharp\n\n<img width=\"1300\" alt=\"Codegen generating code for tests for playwright.dev website emulated for iPhone 13 csharp\" src=\"https://user-images.githubusercontent.com/13063165/220923048-f13583b1-ab08-4702-ab74-58691d50acfe.png\" />\n\n\n### Emulate color scheme\n\nRecord scripts and tests while emulating the color scheme with the `--color-scheme` option.\n\n```bash js\nnpx playwright codegen --color-scheme=dark playwright.dev\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --color-scheme=dark playwright.dev\"\n```\n\n```bash python\nplaywright codegen --color-scheme=dark playwright.dev\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --color-scheme=dark playwright.dev\n```\n\n######\n* langs: js\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for playwright.dev website in dark mode js\" src=\"https://user-images.githubusercontent.com/13063165/220930273-f3a25bae-64dd-4bbb-99ed-1e97c0cb1ebf.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":236,"to":265}}}}],["b900b7f7-62ab-49f9-a944-dea1c883d7a2",{"pageContent":"######\n* langs: java\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for playwright.dev website in dark mode java\" src=\"https://user-images.githubusercontent.com/13063165/220930514-3b105fab-c87e-4f58-affa-d11d570122a8.png\" />\n\n######\n* langs: python\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for playwright.dev website in dark mode python\" src=\"https://user-images.githubusercontent.com/13063165/220930714-737647fd-ae99-4dd3-b7a4-4f3eb4fe712d.png\" />\n\n######\n* langs: csharp\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for playwright.dev website in dark mode csharp\" src=\"https://user-images.githubusercontent.com/13063165/220930893-c1d0df65-c662-4b33-91eb-ea10552d7cc5.png\" />\n\n### Emulate geolocation, language and timezone\n\nRecord scripts and tests while emulating timezone, language & location using the `--timezone`, `--geolocation` and `--lang` options. Once the page opens:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":267,"to":284}}}}],["505bf92c-8a78-40a5-9db8-06ecdcc0a31a",{"pageContent":"Record scripts and tests while emulating timezone, language & location using the `--timezone`, `--geolocation` and `--lang` options. Once the page opens:\n\n1. Accept the cookies\n1. On the top right, click on the locate me button to see geolocation in action.\n\n```bash js\nnpx playwright codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps'\n```\n\n```bash python\nplaywright codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n######\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":284,"to":306}}}}],["63affc6a-e56a-4aff-a248-6f7227c0defd",{"pageContent":"```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n######\n* langs: js\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for bing maps showing timezone, geolocation as Rome, Italy and in Italian language\" src=\"https://user-images.githubusercontent.com/13063165/220931996-d3144421-8d3b-4f9f-896c-769c01566c01.png\" />\n\n######\n* langs: java\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for bing maps showing timezone, geolocation as Rome, Italy and in Italian language java\" src=\"https://user-images.githubusercontent.com/13063165/220932268-9012163f-7673-4072-aa91-13b3c8f57799.png\" />\n\n######\n* langs: python\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for bing maps showing timezone, geolocation as Rome, Italy and in Italian language python\" src=\"https://user-images.githubusercontent.com/13063165/220932413-f2943956-dd38-4560-94b9-51968076210d.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":301,"to":318}}}}],["ef098070-91d6-470c-9a87-5c7ebd0810a8",{"pageContent":"######\n* langs: csharp\n\n<img width=\"1394\" alt=\"Codegen generating code for tests for bing maps showing timezone, geolocation as Rome, Italy and in Italian language csharp\" src=\"https://user-images.githubusercontent.com/13063165/220932688-a47df2a8-332b-47a4-9580-7d351def9f50.png\" />\n\n### Preserve authenticated state\n\nRun `codegen` with `--save-storage` to save [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) data at the end of the session. This is useful to separately record an authentication step and reuse it later when recording more tests.\n\n```bash js\nnpx playwright codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen github.com/microsoft/playwright  --save-storage=auth.json\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":321,"to":336}}}}],["6c2e366b-1460-4114-a5bf-09e19424aa6d",{"pageContent":"```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen github.com/microsoft/playwright  --save-storage=auth.json\"\n```\n\n```bash python\nplaywright codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n######\n* langs: js\n\n<img width=\"1394\" alt=\"github page before logging in js\" src=\"https://user-images.githubusercontent.com/13063165/220929062-88dfe567-0c6d-4e49-b9f9-74ae241fb8c7.png\" />\n\n\n######\n* langs: java\n\n<img width=\"1394\" alt=\"github page before logging in java\" src=\"https://user-images.githubusercontent.com/13063165/220929236-08129e16-82a9-46a3-9f1c-3e59619c6289.png\" />\n\n\n######\n* langs: python\n\n<img width=\"1394\" alt=\"github page before logging in python\" src=\"https://user-images.githubusercontent.com/13063165/220929429-8756ec49-fbf2-46e0-8f41-d25f5f5a6623.png\" />\n\n######\n* langs: csharp","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":334,"to":364}}}}],["f5aedeae-9e5e-4f08-9d45-aeca77a54ba3",{"pageContent":"<img width=\"1394\" alt=\"github page before logging in python\" src=\"https://user-images.githubusercontent.com/13063165/220929429-8756ec49-fbf2-46e0-8f41-d25f5f5a6623.png\" />\n\n######\n* langs: csharp\n\n<img width=\"1394\" alt=\"github page before logging in csharp\" src=\"https://user-images.githubusercontent.com/13063165/220929619-28d4ed0c-d172-4cf1-b30b-bf5bed0e07bf.png\" />\n\n#### Login\n\nAfter performing authentication and closing the browser, `auth.json` will contain the storage state which you can then reuse in your tests.\n\n<img width=\"1394\" alt=\"login to GitHub screen\" src=\"https://user-images.githubusercontent.com/13063165/220561688-04b2b984-4ba6-4446-8b0a-8058876e2a02.png\" />\n\nMake sure you only use the `auth.json` locally as it contains sensitive information. Add it to your `.gitignore` or delete it once you have finished generating your tests.\n\n#### Load authenticated state","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":361,"to":376}}}}],["e8668193-25ae-49ac-91e1-530ee3bfed6f",{"pageContent":"#### Load authenticated state\n\nRun with `--load-storage` to consume the previously loaded storage from the `auth.json`. This way, all [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) data will be restored, bringing most web apps to the authenticated state without the need to login again. This means you can continue generating tests from the logged in state.\n\n```bash js\nnpx playwright codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --load-storage=auth.json github.com/microsoft/playwright\"\n```\n\n```bash python\nplaywright codegen --load-storage=auth.json github.com/microsoft/playwright\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":376,"to":390}}}}],["dcee3655-6866-48c0-8a5e-bfaf3e3706c4",{"pageContent":"```bash python\nplaywright codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n######\n* langs: js\n\n<img width=\"1394\" alt=\"github signed in showing use of load storage js\" src=\"https://user-images.githubusercontent.com/13063165/220927873-9e55fdda-2def-45c1-9a1b-bcc851885f96.png\" />\n\n\n######\n* langs: java\n\n<img width=\"1394\" alt=\"github signed in showing use of load storage java\" src=\"https://user-images.githubusercontent.com/13063165/220928075-1e38347b-9d0d-4d9e-9a67-506c717893df.png\" />\n\n######\n* langs: python\n\n<img width=\"1394\" alt=\"github signed in showing use of load storage python\" src=\"https://user-images.githubusercontent.com/13063165/220928211-ca1d4dc9-9966-414e-ab23-a3ef1d2d5ed9.png\" />\n\n######\n* langs: csharp","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":388,"to":413}}}}],["a275a0e7-06f3-40a4-ad21-4564c54558de",{"pageContent":"######\n* langs: csharp\n\n<img width=\"1394\" alt=\"github signed in showing use of load storage scharp\" src=\"https://user-images.githubusercontent.com/13063165/220928354-caa0e958-fe09-4125-9b54-67483064da51.png\" />\n\n## Record using custom setup\n\nIf you would like to use codegen in some non-standard setup (for example, use [`method: BrowserContext.route`]), it is possible to call [`method: Page.pause`] that will open a separate window with codegen controls.\n\n```js\nconst { chromium } = require('@playwright/test');\n\n(async () => {\n  // Make sure to run headed.\n  const browser = await chromium.launch({ headless: false });\n\n  // Setup context however you like.\n  const context = await browser.newContext({ /* pass any options */ });\n  await context.route('**/*', route => route.continue());\n\n  // Pause the page, and start recording manually.\n  const page = await context.newPage();\n  await page.pause();\n})();\n```\n\n```java\nimport com.microsoft.playwright.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":412,"to":439}}}}],["5151608e-9cea-459d-bf11-89495beaed98",{"pageContent":"// Pause the page, and start recording manually.\n  const page = await context.newPage();\n  await page.pause();\n})();\n```\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      // Make sure to run headed.\n      Browser browser = chromium.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      // Setup context however you like.\n      BrowserContext context = browser.newContext(/* pass any options */);\n      context.route(\"**/*\", route -> route.resume());\n      // Pause the page, and start recording manually.\n      Page page = context.newPage();\n      page.pause();\n    }\n  }\n}\n```\n\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":432,"to":460}}}}],["f3e3844a-c22a-4534-a24c-feec14bce067",{"pageContent":"```python async\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        # Make sure to run headed.\n        browser = await p.chromium.launch(headless=False)\n\n        # Setup context however you like.\n        context = await browser.new_context() # Pass any options\n        await context.route('**/*', lambda route: route.continue_())\n\n        # Pause the page, and start recording manually.\n        page = await context.new_page()\n        await page.pause()\n\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Make sure to run headed.\n    browser = p.chromium.launch(headless=False)\n\n    # Setup context however you like.\n    context = browser.new_context() # Pass any options\n    context.route('**/*', lambda route: route.continue_())\n\n    # Pause the page, and start recording manually.\n    page = context.new_page()\n    page.pause()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":458,"to":492}}}}],["d21f48d9-69be-4706-8331-885fe5429426",{"pageContent":"# Pause the page, and start recording manually.\n    page = context.new_page()\n    page.pause()\n```\n\n```csharp\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nvar chromium = playwright.Chromium;\n// Make sure to run headed.\nvar browser = await chromium.LaunchAsync(new() { Headless = false });\n\n// Setup context however you like.\nvar context = await browser.NewContextAsync(); // Pass any options\nawait context.RouteAsync(\"**/*\", route => route.ContinueAsync());\n\n// Pause the page, and start recording manually.\nvar page = await context.NewPageAsync();\nawait page.PauseAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-codegen.md","title":"src-codegen","url":"https://playwright.dev/docs/src-codegen","loc":{"lines":{"from":489,"to":509}}}}],["be6c9d7e-cf55-48b9-b91f-bff78edbc447",{"pageContent":"---\nid: debug\ntitle: \"Debugging Tests\"\n---\n\n## VS Code debugger\n* langs: js\n\nWe recommend using the [VS Code Extension](./getting-started-vscode.md) for debugging for a better developer experience. With the VS Code extension you can debug your tests right in VS Code, see error messages, set breakpoints and step through your tests.\n\n<img width=\"1269\" alt=\"running test in debug mode\" src=\"https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png\" />\n\n### Error Messages\n\nIf your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.\n\n<img width=\"1269\" alt=\"error messaging in vs code\" src=\"https://user-images.githubusercontent.com/13063165/212738654-b573b7c9-05be-476f-ab4c-201bf4265bc0.png\" />\n\n### Live Debugging","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":1,"to":19}}}}],["5cde2895-404f-4b32-8b65-f672d6dc4ba6",{"pageContent":"<img width=\"1269\" alt=\"error messaging in vs code\" src=\"https://user-images.githubusercontent.com/13063165/212738654-b573b7c9-05be-476f-ab4c-201bf4265bc0.png\" />\n\n### Live Debugging\n\nYou can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will also show you if there are multiple matches.\n\n<img width=\"1394\" alt=\"live debugging in VS Code\" src=\"https://user-images.githubusercontent.com/13063165/212884329-0755b007-0d69-4987-b084-38fd5bfb577d.png\" />\n\nYou can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.\n\n<img width=\"1394\" alt=\"live debugging in VS Code\" src=\"https://user-images.githubusercontent.com/13063165/212884772-5022d4b1-6fab-456f-88e3-506f2354e238.png\" />\n\n### Picking a Locator","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":17,"to":29}}}}],["4289a9c2-b224-412a-b37f-096e26adbe8c",{"pageContent":"<img width=\"1394\" alt=\"live debugging in VS Code\" src=\"https://user-images.githubusercontent.com/13063165/212884772-5022d4b1-6fab-456f-88e3-506f2354e238.png\" />\n\n### Picking a Locator\n\nPick a [locator](./locators.md) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.\n\n<img width=\"1394\" alt=\"Pick locators\" src=\"https://user-images.githubusercontent.com/13063165/212741666-6479a702-2517-44a3-9eca-e719e13b379c.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":27,"to":33}}}}],["965e4a34-073d-4165-b58d-11400fa22f5a",{"pageContent":"<img width=\"1394\" alt=\"Pick locators\" src=\"https://user-images.githubusercontent.com/13063165/212741666-6479a702-2517-44a3-9eca-e719e13b379c.png\" />\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](./locators.md). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n### Run in Debug Mode\n\nTo set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.\n\n<img width=\"1269\" alt=\"setting debug test mode\" src=\"https://user-images.githubusercontent.com/13063165/212739847-ecb7dcfe-8929-45f3-b24e-f9c4b592f430.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":33,"to":41}}}}],["804a854c-588b-485c-83ee-a9109e0c3d80",{"pageContent":"<img width=\"1269\" alt=\"setting debug test mode\" src=\"https://user-images.githubusercontent.com/13063165/212739847-ecb7dcfe-8929-45f3-b24e-f9c4b592f430.png\" />\n\nA browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.\n\n<img width=\"1269\" alt=\"running test in debug mode\" src=\"https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png\" />\n\n### Debug Tests Using Chrome DevTools\n\nInstead of using `Debug Test`, choose `Run Test` in VS Code. With `Show Browser` enabled, the browser session is reused, letting you open Chrome DevTools for continuous debugging of your tests and the web application.\n\n### Debug in different Browsers","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":41,"to":51}}}}],["3cc58c26-8e5c-4f5c-9edd-1f76872e56b5",{"pageContent":"### Debug in different Browsers\n\nBy default, debugging is done using the Chromium profile. You can debug your tests on different browsers by right clicking on the debug icon in the testing sidebar and clicking on the 'Select Default Profile' option from the dropdown.\n\n<img width=\"1312\" alt=\"debugging on specific profile\" src=\"https://user-images.githubusercontent.com/13063165/212879469-436f8130-c62a-49e1-9d67-c1903b478d5f.png\" />\n\nThen choose the test profile you would like to use for debugging your tests. Each time you run your test in debug mode it will use the profile you selected. You can run tests in debug mode by right clicking the line number where your test is and selecting 'Debug Test' from the menu.\n\n<img width=\"1312\" alt=\"choosing a profile for debugging\" src=\"https://user-images.githubusercontent.com/13063165/212880198-eac22c3e-68ce-47da-9163-d6b376ae7575.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":51,"to":59}}}}],["87e36c01-89ef-4687-97ca-bc4c66c85bb9",{"pageContent":"<img width=\"1312\" alt=\"choosing a profile for debugging\" src=\"https://user-images.githubusercontent.com/13063165/212880198-eac22c3e-68ce-47da-9163-d6b376ae7575.png\" />\n\nTo learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).\n\n\n## Playwright Inspector\n\nThe Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.\n\n<img width=\"864\" alt=\"Playwright Inspector\" src=\"https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png\" />\n\n### Run in debug mode\n* langs: js\n\nRun your tests with the `--debug` flag to open the inspector. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `--debug` is used:\n\n- Browsers launch in headed mode\n- Default timeout is set to 0 (= no timeout)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":59,"to":76}}}}],["bf85e96c-2ca1-4ae1-a52d-46006fd282cd",{"pageContent":"- Browsers launch in headed mode\n- Default timeout is set to 0 (= no timeout)\n\n#### Debug all tests on all browsers\n\nTo debug all tests run the test command with the `--debug` flag. This will run tests one by one, and open the inspector and a browser window for each test.\n\n```bash\nnpx playwright test --debug\n```\n#### Debug one test on all browsers\n\nTo debug one test on a specific line, run the test command followed by the name of the test file and the line number of the test you want to debug, followed by the `--debug` flag. This will run a single test in each browser configured in your [`playwright.config`](./test-projects.md#configure-projects-for-multiple-browsers) and open the inspector.\n\n```bash\nnpx playwright test example.spec.ts:10 --debug\n```\n#### Debug on a specific browser","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":75,"to":92}}}}],["7c38518c-a39c-4595-8f76-69fbfd043491",{"pageContent":"```bash\nnpx playwright test example.spec.ts:10 --debug\n```\n#### Debug on a specific browser\n\nIn Playwright you can configure projects in your [`playwright.config`](./test-projects.md#configure-projects-for-multiple-browsers). Once configured you can then debug your tests on a specific browser or mobile viewport using the `--project` flag followed by the name of the project configured in your `playwright.config`.\n\n```bash\nnpx playwright test --project=chromium --debug\nnpx playwright test --project=\"Mobile Safari\" --debug\nnpx playwright test --project=\"Microsoft Edge\" --debug\n```\n\n#### Debug one test on a specific browser\n\nTo run one test on a specific browser add the name of the test file and the line number of the test you want to debug as well as the `--project` flag followed by the name of the project.\n\n```bash\nnpx playwright test example.spec.ts:10 --project=webkit --debug\n```\n### Run in debug mode\n* langs: csharp, java, python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":89,"to":110}}}}],["ab0bf2a9-50b9-4121-be1e-f6b02e9dbc14",{"pageContent":"```bash\nnpx playwright test example.spec.ts:10 --project=webkit --debug\n```\n### Run in debug mode\n* langs: csharp, java, python\n\nSet the `PWDEBUG` environment variable to run your Playwright tests in debug mode. This\nconfigures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `PWDEBUG=1` is set:\n\n- Browsers launch in headed mode\n- Default timeout is set to 0 (= no timeout)\n\n```bash tab=bash-bash lang=python\nPWDEBUG=1 pytest -s\n```\n\n```batch tab=bash-batch lang=python\nset PWDEBUG=1\npytest -s\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=1\npytest -s\n```\n\n```bash tab=bash-bash lang=csharp\nPWDEBUG=1 dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset PWDEBUG=1\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:PWDEBUG=1\ndotnet test\n```\n\n#### Configure source location\n* langs: java","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":106,"to":147}}}}],["f21aebe7-acf4-4fe0-ba08-5ed34239809d",{"pageContent":"```batch tab=bash-batch lang=csharp\nset PWDEBUG=1\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:PWDEBUG=1\ndotnet test\n```\n\n#### Configure source location\n* langs: java\n\nTo tell Playwright where to look for the source code that you are debugging, pass\na list of the source directories via `PLAYWRIGHT_JAVA_SRC` environment variable. Paths in\nthe list should be separated by : on macOS and Linux, and by ; on Windows.\n\n```bash tab=bash-bash lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nPWDEBUG=1 PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test\n```\n\n```batch tab=bash-batch lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nset PLAYWRIGHT_JAVA_SRC=<java source dirs>\nset PWDEBUG=1\nmvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":136,"to":163}}}}],["2df28cc3-e68f-46aa-a5ad-a187996acc97",{"pageContent":"```batch tab=bash-batch lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nset PLAYWRIGHT_JAVA_SRC=<java source dirs>\nset PWDEBUG=1\nmvn test\n```\n\n```powershell tab=bash-powershell lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\n$env:PLAYWRIGHT_JAVA_SRC=\"<java source dirs>\"\n$env:PWDEBUG=1\nmvn test\n```\n\n### Stepping through your tests\n\nYou can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.\n\n<img width=\"1340\" alt=\"Playwright Inspector and browser\" src=\"https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png\" />\n\n### Run a test from a specific breakpoint","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":158,"to":178}}}}],["eb3ebca7-d05d-44c2-a355-53c82525f69c",{"pageContent":"### Run a test from a specific breakpoint\n\nTo speed up the debugging process you can add a [`method: Page.pause`] method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.\n\n```js\nawait page.pause();\n```\n\n```java\npage.pause();\n```\n\n```python async\nawait page.pause()\n```\n\n```python sync\npage.pause()\n```\n\n```csharp\nawait page.PauseAsync();\n```\n\nOnce you add a `page.pause()` call, run your tests in debug mode. Clicking the \"Resume\" button in the Inspector will run the test and only stop on the `page.pause()`.\n\n<img width=\"1350\" alt=\"test with page.pause\" src=\"https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png\" />\n\n### Live editing locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":178,"to":206}}}}],["019eff22-5bbc-47ad-8a80-4d6340030ef0",{"pageContent":"<img width=\"1350\" alt=\"test with page.pause\" src=\"https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png\" />\n\n### Live editing locators\n\nWhile running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](./locators.md) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.\n\n<img width=\"1348\" alt=\"live editing locators\" src=\"https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png\" />\n\n### Picking locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":204,"to":212}}}}],["5949c5f6-ebe4-4a21-a1b1-6d6d88058bda",{"pageContent":"<img width=\"1348\" alt=\"live editing locators\" src=\"https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png\" />\n\n### Picking locators\n\nWhile debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.\n\n<img width=\"1392\" alt=\"Picking locators\" src=\"https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":210,"to":216}}}}],["e0833baa-0431-48cf-8670-7e43248562bb",{"pageContent":"<img width=\"1392\" alt=\"Picking locators\" src=\"https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png\" />\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](./locators.md). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n### Actionability logs\n\nBy the time Playwright has paused on a click action, it has already performed [actionability checks](./actionability.md) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":216,"to":222}}}}],["bea5c833-00b5-4f09-904e-9f29b377aeb3",{"pageContent":"<img width=\"883\" alt=\"Actionability Logs\" src=\"https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png\" />\n\n## Trace Viewer\n\nPlaywright [Trace Viewer](/trace-viewer.md) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.\n\n<video width=\"100%\" height=\"100%\" controls muted>\n  <source src=\"https://user-images.githubusercontent.com/13063165/219132713-17b9d75b-71e3-42c4-a43f-3f9e2e15f834.mp4\" type=\"video/mp4\" />\n</video>\n\nTo learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](/trace-viewer.md) guide.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":224,"to":234}}}}],["05b73e85-1b59-4336-a3e0-52f0063481bb",{"pageContent":"To learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](/trace-viewer.md) guide.\n\n## Browser Developer Tools\n\nWhen running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:\n\n- Inspect the DOM tree and **find element selectors**\n- **See console logs** during execution (or learn how to [read logs via API](./api/class-page.md#page-event-console))\n- Check **network activity** and other developer tools features\n\nThis will also set the default timeouts of Playwright to 0 (= no timeout).\n\n<img width=\"1399\" alt=\"Browser Developer Tools with Playwright object\" src=\"https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png\" />\n\nTo debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [`method: Page.pause`] method.\n\n```js\nawait page.pause();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":234,"to":252}}}}],["639c3c3c-4f66-4bca-8f82-2fb0f5ae1fa8",{"pageContent":"To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [`method: Page.pause`] method.\n\n```js\nawait page.pause();\n```\n\n```java\npage.pause();\n```\n\n```python async\nawait page.pause()\n```\n\n```python sync\npage.pause()\n```\n\n```csharp\nawait page.PauseAsync();\n```\n\nOnce you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.\n\n```bash tab=bash-bash lang=js\nPWDEBUG=console npx playwright test\n```\n\n```batch tab=bash-batch lang=js\nset PWDEBUG=console\nnpx playwright test\n```\n\n```powershell tab=bash-powershell lang=js\n$env:PWDEBUG=\"console\"\nnpx playwright test\n```\n\n```bash tab=bash-bash lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nPWDEBUG=console PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":248,"to":289}}}}],["ee89dada-8f77-4904-b1be-91fd7d10f773",{"pageContent":"```bash tab=bash-bash lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nPWDEBUG=console PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test\n```\n\n```batch tab=bash-batch lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nset PLAYWRIGHT_JAVA_SRC=<java source dirs>\nset PWDEBUG=console\nmvn test\n```\n\n```powershell tab=bash-powershell lang=java\n# Source directories in the list are separated by : on macos and linux and by ; on win.\n$env:PLAYWRIGHT_JAVA_SRC=\"<java source dirs>\"\n$env:PWDEBUG=console\nmvn test\n```\n\n```bash tab=bash-bash lang=python\nPWDEBUG=console pytest -s\n```\n\n```batch tab=bash-batch lang=python\nset PWDEBUG=console\npytest -s\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=console\npytest -s\n```\n\n```bash tab=bash-bash lang=csharp\nPWDEBUG=console dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset PWDEBUG=console\ndotnet test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":286,"to":326}}}}],["49448a9d-95c8-46cd-bd88-37b98b30ae0b",{"pageContent":"```bash tab=bash-bash lang=csharp\nPWDEBUG=console dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset PWDEBUG=console\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:PWDEBUG=console\ndotnet test\n```\n\nOnce Playwright launches the browser window, you can open the developer tools.\nThe `playwright` object will be available in the console panel.\n\n#### playwright.$(selector)\n\nQuery the Playwright selector, using the actual Playwright query engine, for example:\n\n```bash\nplaywright.$('.auth-form >> text=Log in');\n\n<button>Log in</button>\n```\n\n#### playwright.$$(selector)\n\nSame as `playwright.$`, but returns all matching elements.\n\n```bash\nplaywright.$$('li >> text=John')\n\n[<li>, <li>, <li>, <li>]\n```\n\n#### playwright.inspect(selector)\n\nReveal element in the Elements panel.\n\n```bash\nplaywright.inspect('text=Log in')\n```\n\n#### playwright.locator(selector)\n\nCreate a locator and query matching elements, for example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":319,"to":366}}}}],["2564240e-3ded-47c9-ac83-75d2e3f7b8b0",{"pageContent":"Reveal element in the Elements panel.\n\n```bash\nplaywright.inspect('text=Log in')\n```\n\n#### playwright.locator(selector)\n\nCreate a locator and query matching elements, for example:\n\n```bash\nplaywright.locator('.auth-form', { hasText: 'Log in' });\n\nLocator ()\n  - element: button\n  - elements: [button]\n```\n\n#### playwright.selector(element)\n\nGenerates selector for the given element. For example, select an element in the Elements panel and pass `$0`:\n\n```bash\nplaywright.selector($0)\n\n\"div[id=\"glow-ingress-block\"] >> text=/.*Hello.*/\"\n```\n\n## Verbose API logs\n\nPlaywright supports verbose logging with the `DEBUG` environment variable.\n\n```bash tab=bash-bash lang=js\nDEBUG=pw:api npx playwright test\n```\n\n```batch tab=bash-batch lang=js\nset DEBUG=pw:api\nnpx playwright test\n```\n\n```powershell tab=bash-powershell lang=js\n$env:DEBUG=\"pw:api\"\nnpx playwright test\n```\n\n```bash tab=bash-bash lang=java\nDEBUG=pw:api mvn test\n```\n\n```batch tab=bash-batch lang=java\nset DEBUG=pw:api\nmvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":358,"to":411}}}}],["e47ff29d-7c0e-45d3-9e61-eb058ed7aa8f",{"pageContent":"```bash tab=bash-bash lang=java\nDEBUG=pw:api mvn test\n```\n\n```batch tab=bash-batch lang=java\nset DEBUG=pw:api\nmvn test\n```\n\n```powershell tab=bash-powershell lang=java\n$env:DEBUG=\"pw:api\"\nmvn test\n```\n\n```bash tab=bash-bash lang=python\nDEBUG=pw:api pytest -s\n```\n\n```batch tab=bash-batch lang=python\nset DEBUG=pw:api\npytest -s\n```\n\n```powershell tab=bash-powershell lang=python\n$env:DEBUG=\"pw:api\"\npytest -s\n```\n\n```bash tab=bash-bash lang=csharp\nDEBUG=pw:api dotnet run\n```\n\n```batch tab=bash-batch lang=csharp\nset DEBUG=pw:api\ndotnet run\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:DEBUG=\"pw:api\"\ndotnet run\n```\n\n:::note\n**For WebKit**: launching WebKit Inspector during the execution will\nprevent the Playwright script from executing any further and\nwill reset pre-configured user agent and device emulation.\n:::\n\n## Headed mode\n\nPlaywright runs browsers in headless mode by default. To change this behavior,\nuse `headless: false` as a launch option.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":404,"to":455}}}}],["ea883dce-d282-4824-b4b3-40a0165dc8d9",{"pageContent":"## Headed mode\n\nPlaywright runs browsers in headless mode by default. To change this behavior,\nuse `headless: false` as a launch option.\n\nYou can also use the [`option: BrowserType.launch.slowMo`] option\nto slow down execution (by N milliseconds per operation) and follow along while debugging.\n\n```js\n// Chromium, Firefox, or WebKit\nawait chromium.launch({ headless: false, slowMo: 100 });\n```\n\n```java\n// Chromium, Firefox, or WebKit\nchromium.launch(new BrowserType.LaunchOptions()\n  .setHeadless(false)\n  .setSlowMo(100));\n```\n\n```python async\n# Chromium, Firefox, or WebKit\nawait chromium.launch(headless=False, slow_mo=100)\n```\n\n```python sync\n# Chromium, Firefox, or WebKit\nchromium.launch(headless=False, slow_mo=100)\n```\n\n```csharp\n// Chromium, Firefox, or WebKit\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 100\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-debug.md","title":"src-debug","url":"https://playwright.dev/docs/src-debug","loc":{"lines":{"from":452,"to":489}}}}],["68f1e64b-497f-4b27-9be1-60493d2944fc",{"pageContent":"---\nid: dialogs\ntitle: \"Dialogs\"\n---\n\n## Introduction\n\nPlaywright can interact with the web page dialogs such as [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert), [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm), [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) as well as [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event) confirmation. For print dialogs, see [Print](#print-dialogs).\n\n## alert(), confirm(), prompt() dialogs\n\nBy default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [`method: Dialog.accept`] or [`method: Dialog.dismiss`] it.\n\n```js\npage.on('dialog', dialog => dialog.accept());\nawait page.getByRole('button').click();\n```\n\n```java\npage.onDialog(dialog -> dialog.accept());\npage.getByRole(AriaRole.BUTTON).click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":1,"to":22}}}}],["d0fa3b79-4cf1-496d-8872-aeae9c60a60a",{"pageContent":"```js\npage.on('dialog', dialog => dialog.accept());\nawait page.getByRole('button').click();\n```\n\n```java\npage.onDialog(dialog -> dialog.accept());\npage.getByRole(AriaRole.BUTTON).click();\n```\n\n```python async\npage.on(\"dialog\", lambda dialog: dialog.accept())\nawait page.get_by_role(\"button\".click())\n```\n\n```python sync\npage.on(\"dialog\", lambda dialog: dialog.accept())\npage.get_by_role(\"button\").click()\n```\n\n```csharp\nPage.Dialog += async (_, dialog) =>\n{\n    await dialog.AcceptAsync();\n};\nawait Page.GetByRole(AriaRole.Button).ClickAsync();\n```\n\n:::note\n[`event: Page.dialog`] listener **must handle** the dialog. Otherwise your action will stall, be it [`method: Locator.click`] or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled.\n:::\n\nAs a result, the following snippet will never resolve:\n\n:::warning\nWRONG!\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":14,"to":50}}}}],["3b244396-b9fc-49a6-b567-ab5a464a83e8",{"pageContent":"As a result, the following snippet will never resolve:\n\n:::warning\nWRONG!\n:::\n\n```js\npage.on('dialog', dialog => console.log(dialog.message()));\nawait page.getByRole('button').click(); // Will hang here\n```\n\n```java\npage.onDialog(dialog -> System.out.println(dialog.message()));\npage.getByRole(AriaRole.BUTTON).click(); // Will hang here\n```\n\n```python async\npage.on(\"dialog\", lambda dialog: print(dialog.message))\nawait page.get_by_role(\"button\").click() # Will hang here\n```\n\n```python sync\npage.on(\"dialog\", lambda dialog: print(dialog.message))\npage.get_by_role(\"button\").click() # Will hang here\n```\n\n```csharp\npage.Dialog += (_, dialog) => Console.WriteLine(dialog.Message);\nawait page.GetByRole(AriaRole.Button).ClickAsync(); // Will hang here\n```\n\n:::note\nIf there is no listener for [`event: Page.dialog`], all dialogs are automatically dismissed.\n:::\n\n## beforeunload dialog","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":46,"to":81}}}}],["23a1b8a8-3076-4b82-9af5-40f3c9761f37",{"pageContent":":::note\nIf there is no listener for [`event: Page.dialog`], all dialogs are automatically dismissed.\n:::\n\n## beforeunload dialog\n\nWhen [`method: Page.close`] is invoked with the truthy [`option: Page.close.runBeforeUnload`] value, the page runs its unload handlers. This is the only case when [`method: Page.close`] does not wait for the page to actually close, because it might be that the page stays open in the end of the operation.\n\nYou can register a dialog handler to handle the `beforeunload` dialog yourself:\n\n```js\npage.on('dialog', async dialog => {\n  assert(dialog.type() === 'beforeunload');\n  await dialog.dismiss();\n});\nawait page.close({ runBeforeUnload: true });\n```\n\n```java\npage.onDialog(dialog -> {\n  assertEquals(\"beforeunload\", dialog.type());\n  dialog.dismiss();\n});\npage.close(new Page.CloseOptions().setRunBeforeUnload(true));\n```\n\n```python async\nasync def handle_dialog(dialog):\n    assert dialog.type == 'beforeunload'\n    await dialog.dismiss()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":77,"to":106}}}}],["cd7c0794-57a7-4a4c-8d06-dba6664d09e6",{"pageContent":"```python async\nasync def handle_dialog(dialog):\n    assert dialog.type == 'beforeunload'\n    await dialog.dismiss()\n\npage.on('dialog', lambda: handle_dialog)\nawait page.close(run_before_unload=True)\n```\n\n```python sync\ndef handle_dialog(dialog):\n    assert dialog.type == 'beforeunload'\n    dialog.dismiss()\n\npage.on('dialog', lambda: handle_dialog)\npage.close(run_before_unload=True)\n```\n\n```csharp\nPage.Dialog += async (_, dialog) =>\n{\n    Assert.AreEqual(\"beforeunload\", dialog.Type);\n    await dialog.DismissAsync();\n};\nawait Page.CloseAsync(new() { RunBeforeUnload = true });\n```\n\n## Print dialogs\n\nIn order to assert that a print dialog via [`window.print`](https://developer.mozilla.org/en-US/docs/Web/API/Window/print) was triggered, you can use the following snippet:\n\n```js\nawait page.goto('<url>');\n\nawait page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');\nawait page.getByText('Print it!').click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":103,"to":138}}}}],["622ee92c-79a0-4e56-8dde-f34a06c3cb8b",{"pageContent":"```js\nawait page.goto('<url>');\n\nawait page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');\nawait page.getByText('Print it!').click();\n\nawait page.waitForFunction('window.waitForPrintDialog');\n```\n\n```java\npage.navigate(\"<url>\");\n\npage.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\");\npage.getByText(\"Print it!\").click();\n\npage.waitForFunction(\"window.waitForPrintDialog\");\n```\n\n```python async\nawait page.goto(\"<url>\")\n\nawait page.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\")\nawait page.get_by_text(\"Print it!\").click()\n\nawait page.wait_for_function(\"window.waitForPrintDialog\")\n```\n\n```python sync\npage.goto(\"<url>\")\n\npage.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\")\npage.get_by_text(\"Print it!\").click()\n\npage.wait_for_function(\"window.waitForPrintDialog\")\n```\n\n```csharp\nawait Page.GotoAsync(\"<url>\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":134,"to":171}}}}],["752c20d3-af98-474f-9420-8bc0b302ad5a",{"pageContent":"page.wait_for_function(\"window.waitForPrintDialog\")\n```\n\n```csharp\nawait Page.GotoAsync(\"<url>\");\n\nawait Page.EvaluateAsync(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\");\nawait Page.GetByText(\"Print it!\").ClickAsync();\n\nawait Page.WaitForFunctionAsync(\"window.waitForPrintDialog\");\n```\n\nThis will wait for the print dialog to be opened after the button is clicked.\nMake sure to evaluate the script before clicking the button / after the page is loaded.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-dialogs.md","title":"src-dialogs","url":"https://playwright.dev/docs/src-dialogs","loc":{"lines":{"from":167,"to":180}}}}],["6a79d4cc-9902-4a4e-83e5-ff2dc5bb72cd",{"pageContent":"---\nid: docker\ntitle: \"Docker\"\n---\n\n## Introduction\n\n[Dockerfile.noble] can be used to run Playwright scripts in Docker environment. This image includes the [Playwright browsers](./browsers.md#install-browsers) and [browser system dependencies](./browsers.md#install-system-dependencies). The Playwright package/dependency is not included in the image and should be installed separately.\n\n## Usage\n\nThis Docker image is published to [Microsoft Artifact Registry].\n\n:::info\nThis Docker image is intended to be used for testing and development purposes only. It is not recommended to use this Docker image to visit untrusted websites.\n:::\n\n### Pull the image\n\n```bash js\ndocker pull mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\n```bash python\ndocker pull mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\n```bash csharp\ndocker pull mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n```bash java\ndocker pull mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":1,"to":34}}}}],["78a0d95a-859b-4ef7-8a63-ac573a4517d8",{"pageContent":"```bash csharp\ndocker pull mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n```bash java\ndocker pull mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\n### Run the image\n\nBy default, the Docker image will use the `root` user to run the browsers. This will disable the Chromium sandbox which is not available with root. If you run trusted code (e.g. End-to-end tests) and want to avoid the hassle of managing separate user then the root user may be fine. For web scraping or crawling, we recommend to create a separate user inside the Docker container and use the seccomp profile.\n\n#### End-to-end tests\n\nOn trusted websites, you can avoid creating a separate user and use root for it since you trust the code which will run on the browsers.\n\n```bash js\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash\n```\n\n```bash python\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":28,"to":50}}}}],["9693eb9e-bada-4e9d-aab2-fe497265d5c8",{"pageContent":"```bash python\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```\n\n```bash csharp\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash\n```\n\n```bash java\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash\n```\n\n#### Crawling and scraping\n\nOn untrusted websites, it's recommended to use a separate user for launching the browsers in combination with the seccomp profile. Inside the container or if you are using the Docker image as a base image you have to use `adduser` for it.\n\n```bash js\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash\n```\n\n```bash python\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":48,"to":70}}}}],["cd7244b6-1501-4932-8ff7-75e333829acd",{"pageContent":"```bash python\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```\n\n```bash csharp\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash\n```\n\n```bash java\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash\n```\n\n[`seccomp_profile.json`](https://github.com/microsoft/playwright/blob/main/utils/docker/seccomp_profile.json) is needed to run Chromium with sandbox. This is a [default Docker seccomp profile](https://github.com/docker/engine/blob/d0d99b04cf6e00ed3fc27e81fc3d94e7eda70af3/profiles/seccomp/default.json) with extra user namespace cloning permissions:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":68,"to":80}}}}],["c995b1a7-c15f-41e6-bbc0-12b05555810a",{"pageContent":"```json\n{\n  \"comment\": \"Allow create user namespaces\",\n  \"names\": [\n    \"clone\",\n    \"setns\",\n    \"unshare\"\n  ],\n  \"action\": \"SCMP_ACT_ALLOW\",\n  \"args\": [],\n  \"includes\": {},\n  \"excludes\": {}\n}\n```\n\n### Recommended Docker Configuration\n\nWhen running Playwright in Docker, the following configuration is recommended:\n\n1. **Using [`--init`](https://docs.docker.com/reference/cli/docker/container/run/#init)** Docker flag is recommended to avoid special treatment for processes with PID=1. This is a common reason for zombie processes.\n\n1. **Using `--ipc=host`** is recommended when using Chromium. Without it, Chromium can run out of memory and crash. Learn more about this option in [Docker docs](https://docs.docker.com/reference/cli/docker/container/run/#ipc).\n\n1. **If seeing weird errors when launching Chromium**, try running your container with `docker run --cap-add=SYS_ADMIN` when developing locally.\n\n### Using on CI\n\nSee our [Continuous Integration guides](./ci.md) for sample configs.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":82,"to":109}}}}],["ba7fa75f-5fca-499a-9b91-c6dd3dc238e2",{"pageContent":"### Using on CI\n\nSee our [Continuous Integration guides](./ci.md) for sample configs.\n\n### Remote Connection\n\nYou can run Playwright Server in Docker while keeping your tests running on the host system or another machine. This is useful for running tests on unsupported Linux distributions or remote execution scenarios.\n\n#### Running the Playwright Server\n\nStart the Playwright Server in Docker:\n\n```bash\ndocker run -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c \"npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0\"\n```\n\n#### Connecting to the Server\n* langs: js\n\nThere are two ways to connect to the remote Playwright server:\n\n1. Using environment variable with `@playwright/test`:\n\n```bash\nPW_TEST_CONNECT_WS_ENDPOINT=ws://127.0.0.1:3000/ npx playwright test\n```\n\n2. Using the [`method: BrowserType.connect`] API for other applications:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":107,"to":134}}}}],["40e10d84-5bef-42af-a3b2-b373cb0d89ea",{"pageContent":"```bash\nPW_TEST_CONNECT_WS_ENDPOINT=ws://127.0.0.1:3000/ npx playwright test\n```\n\n2. Using the [`method: BrowserType.connect`] API for other applications:\n\n```js\nconst browser = await playwright['chromium'].connect('ws://127.0.0.1:3000/');\n```\n\n#### Connecting to the Server\n* langs: python, csharp, java\n\n```python sync\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.connect(\"ws://127.0.0.1:3000/\")\n```\n\n```python async\nfrom playwright.async_api import async_playwright\n\nasync with async_playwright() as p:\n    browser = await p.chromium.connect(\"ws://127.0.0.1:3000/\")\n```\n\n```csharp\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.ConnectAsync(\"ws://127.0.0.1:3000/\");\n```\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.*;\nimport java.nio.file.Paths;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":130,"to":168}}}}],["e5e2d4a1-5ed9-4b2e-9785-32d1db266379",{"pageContent":"```java\npackage org.example;\n\nimport com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class App {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().connect(\"ws://127.0.0.1:3000/\");\n    }\n  }\n}\n```\n\n#### Network Configuration\n\nIf you need to access local servers from within the Docker container:\n\n```bash\ndocker run --add-host=hostmachine:host-gateway -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c \"npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0\"\n```\n\nThis makes `hostmachine` point to the host's localhost. Your tests should use `hostmachine` instead of `localhost` when accessing local servers.\n\n:::note\nWhen running tests remotely, ensure the Playwright version in your tests matches the version running in the Docker container.\n:::\n\n## Image tags\n\nSee [all available image tags].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":164,"to":195}}}}],["568f7e52-f746-47b4-8a41-8a72615dddb5",{"pageContent":":::note\nWhen running tests remotely, ensure the Playwright version in your tests matches the version running in the Docker container.\n:::\n\n## Image tags\n\nSee [all available image tags].\n\nWe currently publish images with the following tags:\n- `:v%%VERSION%%` - Playwright v%%VERSION%% release docker image based on Ubuntu 24.04 LTS (Noble Numbat).\n- `:v%%VERSION%%-noble` - Playwright v%%VERSION%% release docker image based on Ubuntu 24.04 LTS (Noble Numbat).\n- `:v%%VERSION%%-jammy` - Playwright v%%VERSION%% release docker image based on Ubuntu 22.04 LTS (Jammy Jellyfish).\n\n:::note\nIt is recommended to always pin your Docker image to a specific version if possible. If the Playwright version in your Docker image does not match the version in your project/tests, Playwright will be unable to locate browser executables.\n:::\n\n### Base images","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":189,"to":206}}}}],["3df94a9d-8526-4887-88de-8965046669d1",{"pageContent":"### Base images\n\nWe currently publish images based on the following [Ubuntu](https://hub.docker.com/_/ubuntu) versions:\n- **Ubuntu 24.04 LTS** (Noble Numbat), image tags include `noble`\n- **Ubuntu 22.04 LTS** (Jammy Jellyfish), image tags include `jammy`\n\n#### Alpine\n\nBrowser builds for Firefox and WebKit are built for the [glibc](https://en.wikipedia.org/wiki/Glibc) library. Alpine Linux and other distributions that are based on the [musl](https://en.wikipedia.org/wiki/Musl) standard library are not supported.\n\n## Using a different .NET version\n* langs: csharp\n\nYou can use the [.NET install script](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script) in order to install different SDK versions:\n\n```bash\ncurl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir /usr/share/dotnet --channel 9.0\n```\n\n## Build your own image\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":206,"to":226}}}}],["65ecca58-2f6f-46d7-8806-9a48701424c8",{"pageContent":"```bash\ncurl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir /usr/share/dotnet --channel 9.0\n```\n\n## Build your own image\n* langs: js\n\nTo run Playwright inside Docker, you need to have Node.js, [Playwright browsers](./browsers.md#install-browsers) and [browser system dependencies](./browsers.md#install-system-dependencies) installed. See the following Dockerfile:\n\n```Dockerfile\nFROM node:20-bookworm\n\nRUN npx -y playwright@%%VERSION%% install --with-deps\n```\n\n## Build your own image\n* langs: python\n\nTo run Playwright inside Docker, you need to have Python, [Playwright browsers](./browsers.md#install-browsers) and [browser system dependencies](./browsers.md#install-system-dependencies) installed. See the following Dockerfile:\n\n```Dockerfile\nFROM python:3.12-bookworm\n\nRUN pip install playwright==@%%VERSION%% && \\\n    playwright install --with-deps\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-docker.md","title":"src-docker","url":"https://playwright.dev/docs/src-docker","loc":{"lines":{"from":221,"to":246}}}}],["b3f61c13-905b-4e5a-b119-f6629163aab9",{"pageContent":"---\nid: downloads\ntitle: \"Downloads\"\n---\n\n## Introduction\n\nFor every attachment downloaded by the page, [`event: Page.download`] event is emitted. All these attachments are downloaded into a temporary folder. You can obtain the download url, file name and payload stream using the [Download] object from the event.\n\nYou can specify where to persist downloaded files using the [`option: BrowserType.launch.downloadsPath`] option in [`method: BrowserType.launch`].\n\n:::note\nDownloaded files are deleted when the browser context that produced them is closed.\n:::\n\nHere is the simplest way to handle the file download:\n\n```js\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n\n// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-downloads.md","title":"src-downloads","url":"https://playwright.dev/docs/src-downloads","loc":{"lines":{"from":1,"to":26}}}}],["0ee2a0bf-67a6-444d-b7b6-232a68a8132e",{"pageContent":"// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n```java\n// Wait for the download to start\nDownload download = page.waitForDownload(() -> {\n    // Perform the action that initiates download\n    page.getByText(\"Download file\").click();\n});\n\n// Wait for the download process to complete and save the downloaded file somewhere\ndownload.saveAs(Paths.get(\"/path/to/save/at/\", download.suggestedFilename()));\n```\n\n```python async\n# Start waiting for the download\nasync with page.expect_download() as download_info:\n    # Perform the action that initiates download\n    await page.get_by_text(\"Download file\").click()\ndownload = await download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\nawait download.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-downloads.md","title":"src-downloads","url":"https://playwright.dev/docs/src-downloads","loc":{"lines":{"from":24,"to":48}}}}],["2ef054a0-f288-4503-87cf-6703a3c407e4",{"pageContent":"# Wait for the download process to complete and save the downloaded file somewhere\nawait download.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n```python sync\n# Start waiting for the download\nwith page.expect_download() as download_info:\n    # Perform the action that initiates download\n    page.get_by_text(\"Download file\").click()\ndownload = download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\ndownload.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n```csharp\n// Start the task of waiting for the download before clicking\nvar waitForDownloadTask = page.WaitForDownloadAsync();\nawait page.GetByText(\"Download file\").ClickAsync();\nvar download = await waitForDownloadTask;\n\n// Wait for the download process to complete and save the downloaded file somewhere\nawait download.SaveAsAsync(\"/path/to/save/at/\" + download.SuggestedFilename);\n```\n\n#### Variations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-downloads.md","title":"src-downloads","url":"https://playwright.dev/docs/src-downloads","loc":{"lines":{"from":46,"to":71}}}}],["91290edd-0b07-41a9-aeaa-8738653cb179",{"pageContent":"// Wait for the download process to complete and save the downloaded file somewhere\nawait download.SaveAsAsync(\"/path/to/save/at/\" + download.SuggestedFilename);\n```\n\n#### Variations\n\nIf you have no idea what initiates the download, you can still handle the event:\n\n```js\npage.on('download', download => download.path().then(console.log));\n```\n\n```java\npage.onDownload(download -> System.out.println(download.path()));\n```\n\n```python async\nasync def handle_download(download):\n    print(await download.path())\npage.on(\"download\", handle_download)\n```\n\n```python sync\npage.on(\"download\", lambda download: print(download.path()))\n```\n\n```csharp\npage.Download += (sender, download) => Console.WriteLine(download.Url);\n```\n\nNote that handling the event forks the control flow and makes the script harder to follow. Your scenario might end while you are downloading a file since your main control flow is not awaiting for this operation to resolve.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-downloads.md","title":"src-downloads","url":"https://playwright.dev/docs/src-downloads","loc":{"lines":{"from":67,"to":97}}}}],["922c45a0-b413-423b-9455-3535c700517b",{"pageContent":":::note\nFor uploading files, see the [uploading files](./input.md#upload-files) section.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-downloads.md","title":"src-downloads","url":"https://playwright.dev/docs/src-downloads","loc":{"lines":{"from":99,"to":101}}}}],["e231a93f-d738-45d6-8d88-0ed03f9f5842",{"pageContent":"---\nid: emulation\ntitle: \"Emulation\"\n---\n\n## Introduction\n\nWith Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as `\"userAgent\"`, `\"screenSize\"`, `\"viewport\"` and if it `\"hasTouch\"` enabled. You can also emulate the `\"geolocation\"`, `\"locale\"` and `\"timezone\"` for all tests or for a specific test as well as set the `\"permissions\"` to show notifications or change the `\"colorScheme\"`.\n\n## Devices\n* langs: js, csharp, python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":1,"to":11}}}}],["028628cc-8be2-4f4a-9a0d-c50640b8b015",{"pageContent":"## Devices\n* langs: js, csharp, python\n\nPlaywright comes with a [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) using [`property: Playwright.devices`] for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters.\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test'; // import devices\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n      },\n    },\n    {\n      name: 'Mobile Safari',\n      use: {\n        ...devices['iPhone 13'],\n      },\n    },\n  ],\n});\n```\n\n```js tab=js-library\nconst { chromium, devices } = require('playwright');\nconst browser = await chromium.launch();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":10,"to":38}}}}],["e2a35e29-bd0f-437e-aae3-216dab8e8041",{"pageContent":"```js tab=js-library\nconst { chromium, devices } = require('playwright');\nconst browser = await chromium.launch();\n\nconst iphone13 = devices['iPhone 13'];\nconst context = await browser.newContext({\n  ...iphone13,\n});\n```\n\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    iphone_13 = playwright.devices['iPhone 13']\n    browser = await playwright.webkit.launch(headless=False)\n    context = await browser.new_context(\n        **iphone_13,\n    )\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    iphone_13 = playwright.devices['iPhone 13']\n    browser = playwright.webkit.launch(headless=False)\n    context = browser.new_context(\n        **iphone_13,\n    )\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":36,"to":75}}}}],["328fbd8e-cfe5-4d1e-bd46-1f99e7df16ed",{"pageContent":"with sync_playwright() as playwright:\n    run(playwright)\n```\n\n```csharp\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false\n});\nvar iphone13 = playwright.Devices[\"iPhone 13\"];\nawait using var context = await browser.NewContextAsync(iphone13);\n```\n\n\n<img width=\"458\" alt=\"playwright.dev website emulated for iPhone 13\" src=\"https://user-images.githubusercontent.com/13063165/220411073-76fe59f9-9a2d-463d-8e30-c19a7deca133.png\" />\n\n\n## Devices\n* langs: java\n\nPlaywright can emulate various devices by specifying `setDeviceScaleFactor`, `setHasTouch`, `setIsMobile`, `setScreenSize`, `setUserAgent` and `setViewportSize` options when creating a context with [`method: Browser.newContext`].\n\n## Viewport\n\nThe viewport is included in the device but you can override it for some tests with [`method: Page.setViewportSize`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":73,"to":101}}}}],["be872196-7f58-44fb-81b1-5eacefa621cc",{"pageContent":"## Viewport\n\nThe viewport is included in the device but you can override it for some tests with [`method: Page.setViewportSize`].\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `viewport` property after destructuring `devices`,\n        // since devices also define the `viewport` for that device.\n        viewport: { width: 1280, height: 720 },\n      },\n    },\n  ]\n});\n```\n\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n```\n\nTest file:\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  viewport: { width: 1600, height: 1200 },\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":99,"to":140}}}}],["a3027183-4578-4bee-a4d3-a4070bad1c7e",{"pageContent":"test.use({\n  viewport: { width: 1600, height: 1200 },\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n\n// Resize viewport for individual page\nawait page.setViewportSize({ width: 1600, height: 1200 });\n\n// Emulate high-DPI\nconst context = await browser.newContext({\n  viewport: { width: 2560, height: 1440 },\n  deviceScaleFactor: 2,\n});\n```\n\nThe same works inside a test file.\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.describe('specific viewport block', () => {\n  test.use({ viewport: { width: 1600, height: 1200 } });\n\n  test('my test', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1600, height: 1200 }\n});\nconst page = await context.newPage();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":133,"to":178}}}}],["31b2b009-9383-4cb4-a680-52c307c50ceb",{"pageContent":"```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1600, height: 1200 }\n});\nconst page = await context.newPage();\n```\n\n```java\n// Create context with given viewport\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(1280, 1024));\n\n// Resize viewport for individual page\npage.setViewportSize(1600, 1200);\n\n// Emulate high-DPI\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(2560, 1440)\n  .setDeviceScaleFactor(2));\n```\n\n```python async\n# Create context with given viewport\ncontext = await browser.new_context(\n  viewport={ 'width': 1280, 'height': 1024 }\n)\n\n# Resize viewport for individual page\nawait page.set_viewport_size({\"width\": 1600, \"height\": 1200})\n\n# Emulate high-DPI\ncontext = await browser.new_context(\n  viewport={ 'width': 2560, 'height': 1440 },\n  device_scale_factor=2,\n)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":172,"to":208}}}}],["1f8491ad-841a-40ed-a5cf-04b047431970",{"pageContent":"# Emulate high-DPI\ncontext = await browser.new_context(\n  viewport={ 'width': 2560, 'height': 1440 },\n  device_scale_factor=2,\n)\n```\n\n```python sync\n# Create context with given viewport\ncontext = browser.new_context(\n  viewport={ 'width': 1280, 'height': 1024 }\n)\n\n# Resize viewport for individual page\npage.set_viewport_size({\"width\": 1600, \"height\": 1200})\n\n# Emulate high-DPI\ncontext = browser.new_context(\n  viewport={ 'width': 2560, 'height': 1440 },\n  device_scale_factor=2,\n)\n```\n\n```csharp\n// Create context with given viewport\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 1280, Height = 1024 }\n});\n\n// Resize viewport for individual page\nawait page.SetViewportSizeAsync(1600, 1200);\n\n// Emulate high-DPI\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 2560, Height = 1440 },\n    DeviceScaleFactor = 2\n});\n```\n\n## isMobile","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":203,"to":244}}}}],["e80b9615-bc76-4170-9d64-e574e81fa86c",{"pageContent":"## isMobile\n\nWhether the meta viewport tag is taken into account and touch events are enabled.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `isMobile` property after destructuring `devices`,\n        // since devices also define the `isMobile` for that device.\n        isMobile: false,\n      },\n    },\n  ]\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .isMobile(false));\n```\n\n```python async\ncontext = await browser.new_context(\n  isMobile=false\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  isMobile=false\n)\n```\n\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    IsMobile = false\n});\n```\n\n## Locale & Timezone","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":244,"to":290}}}}],["1b2e73ad-55be-4ac7-80df-13c66da59252",{"pageContent":"```python sync\ncontext = browser.new_context(\n  isMobile=false\n)\n```\n\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    IsMobile = false\n});\n```\n\n## Locale & Timezone\n\nEmulate the browser Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates the browser locale.\n    locale: 'en-GB',\n\n    // Emulates the browser timezone.\n    timezoneId: 'Europe/Paris',\n  },\n});\n```\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n\ntest('my test for de lang in Berlin timezone', async ({ page }) => {\n  await page.goto('https://www.bing.com');\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":277,"to":320}}}}],["062b11d2-05cb-491b-a969-bab20712d6a1",{"pageContent":"test.use({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n\ntest('my test for de lang in Berlin timezone', async ({ page }) => {\n  await page.goto('https://www.bing.com');\n  // ...\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setLocale(\"de-DE\")\n  .setTimezoneId(\"Europe/Berlin\"));\n```\n\n```python async\ncontext = await browser.new_context(\n  locale='de-DE',\n  timezone_id='Europe/Berlin',\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  locale='de-DE',\n  timezone_id='Europe/Berlin',\n)\n```\n\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    Locale = \"de-DE\",\n    TimezoneId = \"Europe/Berlin\"\n});\n```\n\n<img width=\"1394\" alt=\"Bing in german lang and timezone\" src=\"https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png\" />","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":311,"to":357}}}}],["6294102b-d205-4bd5-971a-5658df7f953a",{"pageContent":"<img width=\"1394\" alt=\"Bing in german lang and timezone\" src=\"https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png\" />\n\n######\n* langs: js\n\nNote that this only affects the browser timezone and locale, not the test runner timezone.\nTo set the test runner timezone, you can use the [`TZ` environment variable](https://nodejs.org/api/cli.html#tz).\n\n## Permissions\n\nAllow app to show system notifications.\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Grants specified permissions to the browser context.\n    permissions: ['notifications'],\n  },\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  permissions: ['notifications'],\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setPermissions(Arrays.asList(\"notifications\")));\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":357,"to":389}}}}],["fab07d62-c86f-4396-bef6-4a10a7619eb9",{"pageContent":"```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setPermissions(Arrays.asList(\"notifications\")));\n```\n\n```python async\ncontext = await browser.new_context(\n  permissions=['notifications'],\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  permissions=['notifications'],\n)\n```\n\nAllow notifications for a specific domain.\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Runs before each test and signs in each page.\n  await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n});\n\ntest('first', async ({ page }) => {\n  // page has notifications permission for https://skype.com.\n});\n```\n\n```js tab=js-library\nawait context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":386,"to":420}}}}],["4a3351a2-32c7-411f-9815-cae4cae07160",{"pageContent":"```js tab=js-library\nawait context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n```\n\n```java\ncontext.grantPermissions(Arrays.asList(\"notifications\"),\n  new BrowserContext.GrantPermissionsOptions().setOrigin(\"https://skype.com\"));\n```\n\n```python async\nawait context.grant_permissions(['notifications'], origin='https://skype.com')\n```\n\n```python sync\ncontext.grant_permissions(['notifications'], origin='https://skype.com')\n```\n\n```csharp\nawait context.GrantPermissionsAsync(new[] { \"notifications\" }, origin: \"https://skype.com\");\n```\n\nRevoke all permissions with [`method: BrowserContext.clearPermissions`].\n\n```js\n// Library\nawait context.clearPermissions();\n```\n\n```java\ncontext.clearPermissions();\n```\n\n```python async\nawait context.clear_permissions()\n```\n\n```python sync\ncontext.clear_permissions()\n```\n\n```csharp\nawait context.ClearPermissionsAsync();\n```\n\n## Geolocation\n\nGrant `\"geolocation\"` permissions and set geolocation to a specific area.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":418,"to":464}}}}],["05b24aea-ad17-4b45-bd8b-f652aa6dcdee",{"pageContent":"```python sync\ncontext.clear_permissions()\n```\n\n```csharp\nawait context.ClearPermissionsAsync();\n```\n\n## Geolocation\n\nGrant `\"geolocation\"` permissions and set geolocation to a specific area.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Context geolocation\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n    permissions: ['geolocation'],\n  },\n});\n```\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page }) => {\n  // ...\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation']\n});\n\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":454,"to":497}}}}],["bde3fab9-a7af-4eda-914c-1cc8a1746b94",{"pageContent":"```js tab=js-library\nconst context = await browser.newContext({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation']\n});\n\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setGeolocation(41.890221, 12.492348)\n  .setPermissions(Arrays.asList(\"geolocation\")));\n```\n\n```python async\ncontext = await browser.new_context(\n  geolocation={\"longitude\": 41.890221, \"latitude\": 12.492348},\n  permissions=[\"geolocation\"]\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  geolocation={\"longitude\": 41.890221, \"latitude\": 12.492348},\n  permissions=[\"geolocation\"]\n)\n```\n\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    Permissions = new[] { \"geolocation\" },\n    Geolocation = new Geolocation() { Longitude = 41.890221, Latitude = 12.492348 }\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":491,"to":525}}}}],["871ad0d5-751d-400c-b4fa-8e50b040dc92",{"pageContent":"<img width=\"1394\" alt=\"geolocation for italy on bing maps\" src=\"https://user-images.githubusercontent.com/13063165/220417670-bb22d815-f5cd-47c4-8562-0b88165eac27.png\" />\n\nChange the location later:\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page, context }) => {\n  // overwrite the location for this test\n  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n});\n```\n\n```js tab=js-library\nawait context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n```\n\n```java\ncontext.setGeolocation(new Geolocation(48.858455, 2.294474));\n```\n\n```python async\nawait context.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```\n\n```python sync\ncontext.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":527,"to":559}}}}],["ee775a70-0103-48cc-85fd-8407e8d42086",{"pageContent":"```python async\nawait context.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```\n\n```python sync\ncontext.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```\n\n```csharp\nawait context.SetGeolocationAsync(new Geolocation() { Longitude = 48.858455, Latitude = 2.294474 });\n```\n\n**Note** you can only change geolocation for all pages in the context.\n## Color Scheme and Media\n\nEmulate the users `\"colorScheme\"`. Supported values are 'light' and 'dark'. You can also emulate the media type with [`method: Page.emulateMedia`].\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  colorScheme: 'dark' // or 'light'\n});\n\ntest('my test with dark mode', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":553,"to":590}}}}],["fc309475-39d4-4ecd-a2d6-b9012f8053ea",{"pageContent":"test.use({\n  colorScheme: 'dark' // or 'light'\n});\n\ntest('my test with dark mode', async ({ page }) => {\n  // ...\n});\n```\n\n```js tab=js-library\n// Create context with dark mode\nconst context = await browser.newContext({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Create page with dark mode\nconst page = await browser.newPage({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Change color scheme for the page\nawait page.emulateMedia({ colorScheme: 'dark' });\n\n// Change media for page\nawait page.emulateMedia({ media: 'print' });\n```\n\n```java\n// Create context with dark mode\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setColorScheme(ColorScheme.DARK)); // or \"light\"\n\n// Create page with dark mode\nPage page = browser.newPage(new Browser.NewPageOptions()\n  .setColorScheme(ColorScheme.DARK)); // or \"light\"\n\n// Change color scheme for the page\npage.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":583,"to":620}}}}],["05d71cc5-242d-4855-8ec2-205594474b7c",{"pageContent":"// Change color scheme for the page\npage.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));\n\n// Change media for page\npage.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));\n```\n\n```python async\n# Create context with dark mode\ncontext = await browser.new_context(\n  color_scheme='dark' # or 'light'\n)\n\n# Create page with dark mode\npage = await browser.new_page(\n  color_scheme='dark' # or 'light'\n)\n\n# Change color scheme for the page\nawait page.emulate_media(color_scheme='dark')\n\n# Change media for page\nawait page.emulate_media(media='print')\n```\n\n```python sync\n# Create context with dark mode\ncontext = browser.new_context(\n  color_scheme='dark' # or 'light'\n)\n\n# Create page with dark mode\npage = browser.new_page(\n  color_scheme='dark' # or 'light'\n)\n\n# Change color scheme for the page\npage.emulate_media(color_scheme='dark')\n\n# Change media for page\npage.emulate_media(media='print')\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":619,"to":660}}}}],["0ae51fd6-5945-41be-b77c-8f3948b21ca2",{"pageContent":"# Change color scheme for the page\npage.emulate_media(color_scheme='dark')\n\n# Change media for page\npage.emulate_media(media='print')\n```\n\n```csharp\n// Create context with dark mode\nawait using var context = await browser.NewContextAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Create page with dark mode\nvar page = await browser.NewPageAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change color scheme for the page\nawait page.EmulateMediaAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change media for page\nawait page.EmulateMediaAsync(new()\n{\n    Media = Media.Print\n});\n```\n\n<img width=\"1394\" alt=\"playwright web in dark mode\" src=\"https://user-images.githubusercontent.com/13063165/220411638-55d2b051-4678-4da7-9f0b-ed22f5a3c47c.png\" />\n## User Agent\n\nThe User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the `userAgent` property.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":655,"to":691}}}}],["088e0b9e-beda-4aa1-bda4-db86af4ae9d7",{"pageContent":"The User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the `userAgent` property.\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({ userAgent: 'My user agent' });\n\ntest('my user agent test', async ({ page }) => {\n  // ...\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  userAgent: 'My user agent'\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setUserAgent(\"My user agent\"));\n```\n\n```python async\ncontext = await browser.new_context(\n  user_agent='My user agent'\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  user_agent='My user agent'\n)\n```\n\n```csharp\nvar context = await browser.NewContextAsync(new() { UserAgent = \"My User Agent\" });\n```\n\n## Offline\n\nEmulate the network being offline.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":691,"to":732}}}}],["51e4d639-a6ea-40a2-9efd-4896154da965",{"pageContent":"```csharp\nvar context = await browser.NewContextAsync(new() { UserAgent = \"My User Agent\" });\n```\n\n## Offline\n\nEmulate the network being offline.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setOffline(true));\n```\n\n```python async\ncontext = await browser.new_context(\n  offline=True\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  offline=True\n)\n```\n\n```csharp\nvar context = await browser.NewContextAsync(new() { Offline = true });\n```\n## JavaScript Enabled\n\nEmulate a user scenario where JavaScript is disabled.\n\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({ javaScriptEnabled: false });\n\ntest('test with no JavaScript', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":726,"to":776}}}}],["eb27dff2-e26e-467d-a1d7-23171cb411a1",{"pageContent":"test.use({ javaScriptEnabled: false });\n\ntest('test with no JavaScript', async ({ page }) => {\n  // ...\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  javaScriptEnabled: false\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .javaScriptEnabled(false));\n```\n\n```python async\ncontext = await browser.new_context(\n  java_script_enabled=False\n)\n```\n\n```python sync\ncontext = browser.new_context(\n  java_script_enabled=False\n)\n```\n\n```csharp\nvar context = await browser.NewContextAsync(new() { JavaScriptEnabled = false });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-emulation.md","title":"src-emulation","url":"https://playwright.dev/docs/src-emulation","loc":{"lines":{"from":771,"to":803}}}}],["c41de1de-42b7-4054-8f94-fb2cc0c7123c",{"pageContent":"---\nid: evaluating\ntitle: \"Evaluating JavaScript\"\n---\n\n## Introduction\n\nPlaywright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don't intersect, they are running in different virtual machines in different processes and even potentially on different computers.\n\nThe [`method: Page.evaluate`] API can run a JavaScript function in the context\nof the web page and bring results back to the Playwright environment. Browser globals like\n`window` and `document` can be used in `evaluate`.\n\n```js\nconst href = await page.evaluate(() => document.location.href);\n```\n\n```java\nString href = (String) page.evaluate(\"document.location.href\");\n```\n\n```python async\nhref = await page.evaluate('() => document.location.href')\n```\n\n```python sync\nhref = page.evaluate('() => document.location.href')\n```\n\n```csharp\nvar href = await page.EvaluateAsync<string>(\"document.location.href\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":1,"to":32}}}}],["30224b28-902d-40d2-b733-824a45985ce9",{"pageContent":"```python sync\nhref = page.evaluate('() => document.location.href')\n```\n\n```csharp\nvar href = await page.EvaluateAsync<string>(\"document.location.href\");\n```\n\nIf the result is a Promise or if the function is asynchronous evaluate will automatically wait until it's resolved:\n\n```js\nconst status = await page.evaluate(async () => {\n  const response = await fetch(location.href);\n  return response.status;\n});\n```\n\n```java\nint status = (int) page.evaluate(\"async () => {\\n\" +\n  \"  const response = await fetch(location.href);\\n\" +\n  \"  return response.status;\\n\" +\n  \"}\");\n```\n\n```python async\nstatus = await page.evaluate(\"\"\"async () => {\n  response = await fetch(location.href)\n  return response.status\n}\"\"\")\n```\n\n```python sync\nstatus = page.evaluate(\"\"\"async () => {\n  response = await fetch(location.href)\n  return response.status\n}\"\"\")\n```\n\n```csharp\nint status = await page.EvaluateAsync<int>(@\"async () => {\n  const response = await fetch(location.href);\n  return response.status;\n}\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":26,"to":69}}}}],["722e8e8b-f0f4-4112-be4f-f76859a46da3",{"pageContent":"```csharp\nint status = await page.EvaluateAsync<int>(@\"async () => {\n  const response = await fetch(location.href);\n  return response.status;\n}\");\n```\n\n## Different environments\n\nEvaluated scripts run in the browser environment, while your test runs in a testing environments. This means you cannot use variables from your test in the page and vice versa. Instead, you should pass them explicitly as an argument.\n\nThe following snippet is **WRONG** because it uses the variable directly:\n\n```js\nconst data = 'some data';\nconst result = await page.evaluate(() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data);\n});\n```\n\n```java\nString data = \"some data\";\nObject result = page.evaluate(\"() => {\\n\" +\n  \"  // WRONG: there is no 'data' in the web page.\\n\" +\n  \"  window.myApp.use(data);\\n\" +\n  \"}\");\n```\n\n```python async\ndata = \"some data\"\nresult = await page.evaluate(\"\"\"() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data)\n}\"\"\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":64,"to":99}}}}],["fb754f91-5273-4bba-b6c6-ec47b93c2dcc",{"pageContent":"```python async\ndata = \"some data\"\nresult = await page.evaluate(\"\"\"() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data)\n}\"\"\")\n```\n\n```python sync\ndata = \"some data\"\nresult = page.evaluate(\"\"\"() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data)\n}\"\"\")\n```\n\n```csharp\nvar data = \"some data\";\nvar result = await page.EvaluateAsync(@\"() => {\n  // WRONG: there is no 'data' in the web page.\n  window.myApp.use(data);\n}\");\n```\n\nThe following snippet is **CORRECT** because it passes the value explicitly as an argument:\n\n```js\nconst data = 'some data';\n// Pass |data| as a parameter.\nconst result = await page.evaluate(data => {\n  window.myApp.use(data);\n}, data);\n```\n\n```java\nString data = \"some data\";\n// Pass |data| as a parameter.\nObject result = page.evaluate(\"data => {\\n\" +\n  \"  window.myApp.use(data);\\n\" +\n  \"}\", data);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":93,"to":133}}}}],["cbad130e-b5a1-48ee-9d94-fda7b7d38f6b",{"pageContent":"```java\nString data = \"some data\";\n// Pass |data| as a parameter.\nObject result = page.evaluate(\"data => {\\n\" +\n  \"  window.myApp.use(data);\\n\" +\n  \"}\", data);\n```\n\n```python async\ndata = \"some data\"\n# Pass |data| as a parameter.\nresult = await page.evaluate(\"\"\"data => {\n  window.myApp.use(data)\n}\"\"\", data)\n```\n\n```python sync\ndata = \"some data\"\n# Pass |data| as a parameter.\nresult = page.evaluate(\"\"\"data => {\n  window.myApp.use(data)\n}\"\"\", data)\n```\n\n```csharp\nvar data = \"some data\";\n// Pass |data| as a parameter.\nvar result = await page.EvaluateAsync(\"data => { window.myApp.use(data); }\", data);\n```\n\n## Evaluation Argument\n\nPlaywright evaluation methods like [`method: Page.evaluate`] take a single optional argument. This argument can be a mix of [Serializable] values and [JSHandle] instances. Handles are automatically converted to the value they represent.\n\n```js\n// A primitive value.\nawait page.evaluate(num => num, 42);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":127,"to":163}}}}],["4dabe110-d271-4935-b267-1c2e194a1f37",{"pageContent":"```js\n// A primitive value.\nawait page.evaluate(num => num, 42);\n\n// An array.\nawait page.evaluate(array => array.length, [1, 2, 3]);\n\n// An object.\nawait page.evaluate(object => object.foo, { foo: 'bar' });\n\n// A single handle.\nconst button = await page.evaluateHandle('window.button');\nawait page.evaluate(button => button.textContent, button);\n\n// Alternative notation using JSHandle.evaluate.\nawait button.evaluate((button, from) => button.textContent.substring(from), 5);\n\n// Object with multiple handles.\nconst button1 = await page.evaluateHandle('window.button1');\nconst button2 = await page.evaluateHandle('window.button2');\nawait page.evaluate(\n    o => o.button1.textContent + o.button2.textContent,\n    { button1, button2 });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":161,"to":183}}}}],["e254ab37-61d1-4b61-a253-42d94ce5aec3",{"pageContent":"// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nawait page.evaluate(\n    ({ button1, button2 }) => button1.textContent + button2.textContent,\n    { button1, button2 });\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\nawait page.evaluate(\n    ([b1, b2]) => b1.textContent + b2.textContent,\n    [button1, button2]);\n\n// Any mix of serializables and handles works.\nawait page.evaluate(\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo),\n    { button1, list: [button2], foo: null });\n```\n\n```java\n// A primitive value.\npage.evaluate(\"num => num\", 42);\n\n// An array.\npage.evaluate(\"array => array.length\", Arrays.asList(1, 2, 3));\n\n// An object.\nMap<String, Object> obj = new HashMap<>();\nobj.put(\"foo\", \"bar\");\npage.evaluate(\"object => object.foo\", obj);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":185,"to":214}}}}],["478f938e-b3b1-4540-813c-df1270f91b18",{"pageContent":"// An object.\nMap<String, Object> obj = new HashMap<>();\nobj.put(\"foo\", \"bar\");\npage.evaluate(\"object => object.foo\", obj);\n\n// A single handle.\nElementHandle button = page.evaluateHandle(\"window.button\");\npage.evaluate(\"button => button.textContent\", button);\n\n// Alternative notation using JSHandle.evaluate.\nbutton.evaluate(\"(button, from) => button.textContent.substring(from)\", 5);\n\n// Object with multiple handles.\nElementHandle button1 = page.evaluateHandle(\"window.button1\");\nElementHandle button2 = page.evaluateHandle(\"window.button2\");\nMap<String, ElementHandle> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"button2\", button2);\npage.evaluate(\"o => o.button1.textContent + o.button2.textContent\", arg);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":211,"to":229}}}}],["7c1a0a68-9cc6-4ceb-a506-5c1ab05bcae5",{"pageContent":"// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nMap<String, ElementHandle> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"button2\", button2);\npage.evaluate(\"({ button1, button2 }) => button1.textContent + button2.textContent\", arg);\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\npage.evaluate(\n  \"([b1, b2]) => b1.textContent + b2.textContent\",\n  Arrays.asList(button1, button2));\n\n// Any mix of serializables and handles works.\nMap<String, Object> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"list\", Arrays.asList(button2));\narg.put(\"foo\", 0);\npage.evaluate(\n  \"x => x.button1.textContent + x.list[0].textContent + String(x.foo)\",\n  arg);\n```\n\n```python async\n# A primitive value.\nawait page.evaluate('num => num', 42)\n\n# An array.\nawait page.evaluate('array => array.length', [1, 2, 3])","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":231,"to":260}}}}],["2d4b34e0-7085-432c-9ccb-1e0820deaba6",{"pageContent":"```python async\n# A primitive value.\nawait page.evaluate('num => num', 42)\n\n# An array.\nawait page.evaluate('array => array.length', [1, 2, 3])\n\n# An object.\nawait page.evaluate('object => object.foo', { 'foo': 'bar' })\n\n# A single handle.\nbutton = await page.evaluate_handle('button')\nawait page.evaluate('button => button.textContent', button)\n\n# Alternative notation using JSHandle.evaluate.\nawait button.evaluate('(button, from) => button.textContent.substring(from)', 5)\n\n# Object with multiple handles.\nbutton1 = await page.evaluate_handle('window.button1')\nbutton2 = await page.evaluate_handle('window.button2')\nawait page.evaluate(\"\"\"\n    o => o.button1.textContent + o.button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":255,"to":277}}}}],["4621ebb3-11e4-4607-a5ef-f5aba02f2f69",{"pageContent":"# Object destructuring works. Note that property names must match\n# between the destructured object and the argument.\n# Also note the required parenthesis.\nawait page.evaluate(\"\"\"\n    ({ button1, button2 }) => button1.textContent + button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })\n\n# Array works as well. Arbitrary names can be used for destructuring.\n# Note the required parenthesis.\nawait page.evaluate(\"\"\"\n    ([b1, b2]) => b1.textContent + b2.textContent\"\"\",\n    [button1, button2])\n\n# Any mix of serializables and handles works.\nawait page.evaluate(\"\"\"\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo)\"\"\",\n    { 'button1': button1, 'list': [button2], 'foo': None })\n```\n\n```python sync\n# A primitive value.\npage.evaluate('num => num', 42)\n\n# An array.\npage.evaluate('array => array.length', [1, 2, 3])\n\n# An object.\npage.evaluate('object => object.foo', { 'foo': 'bar' })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":279,"to":306}}}}],["35b03521-9116-483a-9072-5933653c1cc2",{"pageContent":"# An array.\npage.evaluate('array => array.length', [1, 2, 3])\n\n# An object.\npage.evaluate('object => object.foo', { 'foo': 'bar' })\n\n# A single handle.\nbutton = page.evaluate_handle('window.button')\npage.evaluate('button => button.textContent', button)\n\n# Alternative notation using JSHandle.evaluate.\nbutton.evaluate('(button, from) => button.textContent.substring(from)', 5)\n\n# Object with multiple handles.\nbutton1 = page.evaluate_handle('window.button1')\nbutton2 = page.evaluate_handle('.button2')\npage.evaluate(\"\"\"o => o.button1.textContent + o.button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })\n\n# Object destructuring works. Note that property names must match\n# between the destructured object and the argument.\n# Also note the required parenthesis.\npage.evaluate(\"\"\"\n    ({ button1, button2 }) => button1.textContent + button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":302,"to":326}}}}],["115f7f76-034a-4a24-9ad8-61a6b5a7b160",{"pageContent":"# Array works as well. Arbitrary names can be used for destructuring.\n# Note the required parenthesis.\npage.evaluate(\"\"\"\n    ([b1, b2]) => b1.textContent + b2.textContent\"\"\",\n    [button1, button2])\n\n# Any mix of serializables and handles works.\npage.evaluate(\"\"\"\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo)\"\"\",\n    { 'button1': button1, 'list': [button2], 'foo': None })\n```\n\n```csharp\n// A primitive value.\nawait page.EvaluateAsync<int>(\"num => num\", 42);\n\n// An array.\nawait page.EvaluateAsync<int[]>(\"array => array.length\", new[] { 1, 2, 3 });\n\n// An object.\nawait page.EvaluateAsync<object>(\"object => object.foo\", new { foo = \"bar\" });\n\n// A single handle.\nvar button = await page.EvaluateHandleAsync(\"window.button\");\nawait page.EvaluateAsync<IJSHandle>(\"button => button.textContent\", button);\n\n// Alternative notation using JSHandle.EvaluateAsync.\nawait button.EvaluateAsync<string>(\"(button, from) => button.textContent.substring(from)\", 5);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":328,"to":355}}}}],["fc8218ca-57f4-4c0e-8419-be0f1dd12db6",{"pageContent":"// Alternative notation using JSHandle.EvaluateAsync.\nawait button.EvaluateAsync<string>(\"(button, from) => button.textContent.substring(from)\", 5);\n\n// Object with multiple handles.\nvar button1 = await page.EvaluateHandleAsync(\"window.button1\");\nvar button2 = await page.EvaluateHandleAsync(\"window.button2\");\nawait page.EvaluateAsync(\"o => o.button1.textContent + o.button2.textContent\", new { button1, button2 });\n\n// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nawait page.EvaluateAsync(\"({ button1, button2 }) => button1.textContent + button2.textContent\", new { button1, button2 });\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\nawait page.EvaluateAsync(\"([b1, b2]) => b1.textContent + b2.textContent\", new[] { button1, button2 });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":354,"to":369}}}}],["210ade29-50d1-4248-8096-744b84510a96",{"pageContent":"// Any mix of serializables and handles works.\nawait page.EvaluateAsync(\"x => x.button1.textContent + x.list[0].textContent + String(x.foo)\", new { button1, list = new[] { button2 }, foo = null as object });\n```\n\n## Init scripts\n\nSometimes it is convenient to evaluate something in the page before it starts loading. For example, you might want to setup some mocks or test data.\n\nIn this case, use [`method: Page.addInitScript`] or [`method: BrowserContext.addInitScript`]. In the example below, we will replace `Math.random()` with a constant value.\n\nFirst, create a `preload.js` file that contains the mock.\n\n```js browser\n// preload.js\nMath.random = () => 42;\n```\n\nNext, add init script to the page.\n\n```js\nimport { test, expect } from '@playwright/test';\nimport path from 'path';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":371,"to":392}}}}],["76c9d047-e5ac-4cc1-a24f-479f82bab47f",{"pageContent":"```js browser\n// preload.js\nMath.random = () => 42;\n```\n\nNext, add init script to the page.\n\n```js\nimport { test, expect } from '@playwright/test';\nimport path from 'path';\n\ntest.beforeEach(async ({ page }) => {\n  // Add script for every test in the beforeEach hook.\n  // Make sure to correctly resolve the script path.\n  await page.addInitScript({ path: path.resolve(__dirname, '../mocks/preload.js') });\n});\n```\n\n```java\n// In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\npage.addInitScript(Paths.get(\"mocks/preload.js\"));\n```\n\n```python async\n# In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\nawait page.add_init_script(path=\"mocks/preload.js\")\n```\n\n```python sync\n# In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\npage.add_init_script(path=\"mocks/preload.js\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":383,"to":414}}}}],["f66428d0-8796-49f2-bce4-47d54be67919",{"pageContent":"```python sync\n# In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\npage.add_init_script(path=\"mocks/preload.js\")\n```\n\n```csharp\n// In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\nawait Page.AddInitScriptAsync(scriptPath: \"mocks/preload.js\");\n```\n\n######\n* langs: js\n\nAlternatively, you can pass a function instead of creating a preload script file. This is more convenient for short or one-off scripts. You can also pass an argument this way.\n\n```js\nimport { test, expect } from '@playwright/test';\n\n// Add script for every test in the beforeEach hook.\ntest.beforeEach(async ({ page }) => {\n  const value = 42;\n  await page.addInitScript(value => {\n    Math.random = () => value;\n  }, value);\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-evaluating.md","title":"src-evaluating","url":"https://playwright.dev/docs/src-evaluating","loc":{"lines":{"from":411,"to":436}}}}],["84dc926c-5b91-4973-8965-bff57c84695a",{"pageContent":"---\nid: events\ntitle: \"Events\"\n---\n\n## Introduction\n\nPlaywright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events, such as waiting for events or adding or removing event listeners.\n\n## Waiting for event\n\nMost of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns.\n\nWait for a request with the specified url using [`method: Page.waitForRequest`]:\n\n```js\n// Start waiting for request before goto. Note no await.\nconst requestPromise = page.waitForRequest('**/*logo*.png');\nawait page.goto('https://wikipedia.org');\nconst request = await requestPromise;\nconsole.log(request.url());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":1,"to":22}}}}],["77b3598f-2ba8-4da0-9500-a1c5c9f7d95b",{"pageContent":"```java\n// The callback lambda defines scope of the code that is expected to\n// trigger request.\nRequest request = page.waitForRequest(\"**/*logo*.png\", () -> {\n  page.navigate(\"https://wikipedia.org\");\n});\nSystem.out.println(request.url());\n```\n\n```python async\nasync with page.expect_request(\"**/*logo*.png\") as first:\n  await page.goto(\"https://wikipedia.org\")\nfirst_request = await first.value\nprint(first_request.url)\n```\n\n```python sync\nwith page.expect_request(\"**/*logo*.png\") as first:\n  page.goto(\"https://wikipedia.org\")\nprint(first.value.url)\n```\n\n```csharp\nvar waitForRequestTask = page.WaitForRequestAsync(\"**/*logo*.png\");\nawait page.GotoAsync(\"https://wikipedia.org\");\nvar request = await waitForRequestTask;\nConsole.WriteLine(request.Url);\n```\n\nWait for popup window:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":24,"to":53}}}}],["d1032fe9-8ff2-46b2-bd95-080a5ceaae64",{"pageContent":"Wait for popup window:\n\n```js\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\nawait popup.goto('https://wikipedia.org');\n```\n\n```java\n// The callback lambda defines scope of the code that is expected to\n// create popup window.\nPage popup = page.waitForPopup(() -> {\n  page.getByText(\"open the popup\").click();\n});\npopup.navigate(\"https://wikipedia.org\");\n```\n\n```python async\nasync with page.expect_popup() as popup:\n  await page.get_by_text(\"open the popup\").click()\nchild_page = await popup.value\nawait child_page.goto(\"https://wikipedia.org\")\n```\n\n```python sync\nwith page.expect_popup() as popup:\n  page.get_by_text(\"open the popup\").click()\npopup.value.goto(\"https://wikipedia.org\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":53,"to":83}}}}],["1b17055f-5023-4580-91fb-d7540f49c600",{"pageContent":"```python sync\nwith page.expect_popup() as popup:\n  page.get_by_text(\"open the popup\").click()\npopup.value.goto(\"https://wikipedia.org\")\n```\n\n```csharp\nvar popup = await page.RunAndWaitForPopupAsync(async =>\n{\n    await page.GetByText(\"open the popup\").ClickAsync();\n});\nawait popup.GotoAsync(\"https://wikipedia.org\");\n```\n\n## Adding/removing event listener\n\nSometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:\n\n```js\npage.on('request', request => console.log(`Request sent: ${request.url()}`));\nconst listener = request => console.log(`Request finished: ${request.url()}`);\npage.on('requestfinished', listener);\nawait page.goto('https://wikipedia.org');\n\npage.off('requestfinished', listener);\nawait page.goto('https://www.openstreetmap.org/');\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":79,"to":105}}}}],["cc8fb27d-451b-49b3-ab99-30c8b266a40a",{"pageContent":"page.off('requestfinished', listener);\nawait page.goto('https://www.openstreetmap.org/');\n```\n\n```java\npage.onRequest(request -> System.out.println(\"Request sent: \" + request.url()));\nConsumer<Request> listener = request -> System.out.println(\"Request finished: \" + request.url());\npage.onRequestFinished(listener);\npage.navigate(\"https://wikipedia.org\");\n\n// Remove previously added listener, each on* method has corresponding off*\npage.offRequestFinished(listener);\npage.navigate(\"https://www.openstreetmap.org/\");\n```\n\n```python async\ndef print_request_sent(request):\n  print(\"Request sent: \" + request.url)\n\ndef print_request_finished(request):\n  print(\"Request finished: \" + request.url)\n\npage.on(\"request\", print_request_sent)\npage.on(\"requestfinished\", print_request_finished)\nawait page.goto(\"https://wikipedia.org\")\n\npage.remove_listener(\"requestfinished\", print_request_finished)\nawait page.goto(\"https://www.openstreetmap.org/\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":103,"to":131}}}}],["65747c83-b562-4eab-897f-486036ef66da",{"pageContent":"page.remove_listener(\"requestfinished\", print_request_finished)\nawait page.goto(\"https://www.openstreetmap.org/\")\n```\n\n```python sync\ndef print_request_sent(request):\n  print(\"Request sent: \" + request.url)\n\ndef print_request_finished(request):\n  print(\"Request finished: \" + request.url)\n\npage.on(\"request\", print_request_sent)\npage.on(\"requestfinished\", print_request_finished)\npage.goto(\"https://wikipedia.org\")\n\npage.remove_listener(\"requestfinished\", print_request_finished)\npage.goto(\"https://www.openstreetmap.org/\")\n```\n\n```csharp\npage.Request += (_, request) => Console.WriteLine(\"Request sent: \" + request.Url);\nvoid listener(object sender, IRequest request)\n{\n    Console.WriteLine(\"Request finished: \" + request.Url);\n};\npage.RequestFinished += listener;\nawait page.GotoAsync(\"https://wikipedia.org\");\n\n// Remove previously added listener.\npage.RequestFinished -= listener;\nawait page.GotoAsync(\"https://www.openstreetmap.org/\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":129,"to":160}}}}],["b874b3fe-1dbc-49a6-9c7a-1fac8f2b0268",{"pageContent":"// Remove previously added listener.\npage.RequestFinished -= listener;\nawait page.GotoAsync(\"https://www.openstreetmap.org/\");\n```\n\n## Adding one-off listeners\n* langs: js, python, java\n\nIf a certain event needs to be handled once, there is a convenience API for that:\n\n```js\npage.once('dialog', dialog => dialog.accept('2021'));\nawait page.evaluate(\"prompt('Enter a number:')\");\n```\n\n```java\npage.onceDialog(dialog -> dialog.accept(\"2021\"));\npage.evaluate(\"prompt('Enter a number:')\");\n```\n\n```python async\npage.once(\"dialog\", lambda dialog: dialog.accept(\"2021\"))\nawait page.evaluate(\"prompt('Enter a number:')\")\n```\n\n```python sync\npage.once(\"dialog\", lambda dialog: dialog.accept(\"2021\"))\npage.evaluate(\"prompt('Enter a number:')\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-events.md","title":"src-events","url":"https://playwright.dev/docs/src-events","loc":{"lines":{"from":157,"to":185}}}}],["081314db-2353-4b78-9d73-a5905b0196bf",{"pageContent":"---\nid: extensibility\ntitle: \"Extensibility\"\n---\n## Custom selector engines\n\nPlaywright supports custom selector engines, registered with [`method: Selectors.register`].\n\nSelector engine should have the following properties:\n- `query` function to query first element matching `selector` relative to the `root`.\n- `queryAll` function to query all elements matching `selector` relative to the `root`.\n\nBy default the engine is run directly in the frame's JavaScript context and, for example, can call an\napplication-defined function. To isolate the engine from any JavaScript in the frame, but leave access to the DOM,\nregister the engine with `{contentScript: true}` option. Content script engine is safer because it is protected from any\ntampering with the global objects, for example altering `Node.prototype` methods. All built-in selector engines run as\ncontent scripts. Note that running as a content script is not guaranteed when the engine is used together with other\ncustom engines.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":1,"to":18}}}}],["51fe952a-512a-4a5e-943c-4879db90470f",{"pageContent":"Selectors must be registered before creating the page.\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n\n```js title=\"baseTest.ts\"\nimport { test as base } from '@playwright/test';\n\nexport { expect } from '@playwright/test';\n\n// Must be a function that evaluates to a selector engine instance.\nconst createTagNameEngine = () => ({\n  // Returns the first element matching given selector in the root's subtree.\n  query(root, selector) {\n    return root.querySelector(selector);\n  },\n\n  // Returns all elements matching given selector in the root's subtree.\n  queryAll(root, selector) {\n    return Array.from(root.querySelectorAll(selector));\n  }\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":20,"to":41}}}}],["55ef2575-54df-4aaa-93cf-cc0c49ab3ea5",{"pageContent":"// Returns all elements matching given selector in the root's subtree.\n  queryAll(root, selector) {\n    return Array.from(root.querySelectorAll(selector));\n  }\n});\n\nexport const test = base.extend<{}, { selectorRegistration: void }>({\n  // Register selectors once per worker.\n  selectorRegistration: [async ({ playwright }, use) => {\n    // Register the engine. Selectors will be prefixed with \"tag=\".\n    await playwright.selectors.register('tag', createTagNameEngine);\n    await use();\n  }, { scope: 'worker', auto: true }],\n});\n```\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from './baseTest';\n\ntest('selector engine test', async ({ page }) => {\n  // Now we can use 'tag=' selectors.\n  const button = page.locator('tag=button');\n  await button.click();\n\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":37,"to":62}}}}],["c0b63add-92c5-4c0c-afde-e0b89bbda1c9",{"pageContent":"// We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n\n  // We can use it in any methods supporting selectors.\n  await expect(page.locator('tag=button')).toHaveCount(3);\n});\n```\n\n```java\n// Must be a script that evaluates to a selector engine instance.  The script is evaluated in the page context.\nString createTagNameEngine = \"{\\n\" +\n  \"  // Returns the first element matching given selector in the root's subtree.\\n\" +\n  \"  query(root, selector) {\\n\" +\n  \"    return root.querySelector(selector);\\n\" +\n  \"  },\\n\" +\n  \"\\n\" +\n  \"  // Returns all elements matching given selector in the root's subtree.\\n\" +\n  \"  queryAll(root, selector) {\\n\" +\n  \"    return Array.from(root.querySelectorAll(selector));\\n\" +\n  \"  }\\n\" +\n  \"}\";\n\n// Register the engine. Selectors will be prefixed with \"tag=\".\nplaywright.selectors().register(\"tag\", createTagNameEngine);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":61,"to":84}}}}],["9740bf20-4571-4792-8d61-b1ecf40517ae",{"pageContent":"// Register the engine. Selectors will be prefixed with \"tag=\".\nplaywright.selectors().register(\"tag\", createTagNameEngine);\n\n// Now we can use \"tag=\" selectors.\nLocator button = page.locator(\"tag=button\");\nbutton.click();\n\n// We can combine it with built-in locators.\npage.locator(\"tag=div\").getByText(\"Click me\").click();\n\n// We can use it in any methods supporting selectors.\nint buttonCount = (int) page.locator(\"tag=button\").count();\n```\n\n```python async\ntag_selector = \"\"\"\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root's subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },\n\n      // Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\"\"","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":83,"to":110}}}}],["cc01300a-4642-4935-9642-632a354a015f",{"pageContent":"// Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\"\"\n\n# register the engine. selectors will be prefixed with \"tag=\".\nawait playwright.selectors.register(\"tag\", tag_selector)\n\n# now we can use \"tag=\" selectors.\nbutton = page.locator(\"tag=button\")\nawait button.click()\n\n# we can combine it with built-in locators.\nawait page.locator(\"tag=div\").get_by_text(\"click me\").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = await page.locator(\"tag=button\").count()\n```\n\n```python sync\ntag_selector = \"\"\"\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root's subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":106,"to":133}}}}],["cc37c16f-b7b1-4946-a1e9-365de6866718",{"pageContent":"// Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\"\"\n\n# register the engine. selectors will be prefixed with \"tag=\".\nplaywright.selectors.register(\"tag\", tag_selector)\n\n# now we can use \"tag=\" selectors.\nbutton = page.locator(\"tag=button\")\nbutton.click()\n\n# we can combine it with built-in locators.\npage.locator(\"tag=div\").get_by_text(\"click me\").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = page.locator(\"tag=button\").count()\n```\n\n```csharp\n// Register the engine. Selectors will be prefixed with \"tag=\".\n// The script is evaluated in the page context.\nawait playwright.Selectors.Register(\"tag\", new() {\n  Script = @\"\n  // Must evaluate to a selector engine instance.\n  {\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":135,"to":165}}}}],["776f3968-aca1-44ef-ab8a-bf8d89d5a774",{"pageContent":"// Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  }\"\n});\n\n// Now we can use \"tag=\" selectors.\nawait page.Locator(\"tag=button\").ClickAsync();\n\n// We can combine it with built-in locators.\nawait page.Locator(\"tag=div\").GetByText(\"Click me\").ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-extensibility.md","title":"src-extensibility","url":"https://playwright.dev/docs/src-extensibility","loc":{"lines":{"from":167,"to":179}}}}],["827326ef-0c12-43c4-851b-808b820c63a0",{"pageContent":"---\nid: frames\ntitle: \"Frames\"\n---\n\n## Introduction\n\nA [Page] can have one or more [Frame] objects attached to it. Each page has a main frame and page-level interactions\n(like `click`) are assumed to operate in the main frame.\n\nA page can have additional frames attached with the `iframe` HTML tag. These frames can be accessed for interactions\ninside the frame.\n\n```js\n// Locate element inside frame\nconst username = await page.frameLocator('.frame-class').getByLabel('User Name');\nawait username.fill('John');\n```\n\n```java\n// Locate element inside frame\nLocator username = page.frameLocator(\".frame-class\").getByLabel(\"User Name\");\nusername.fill(\"John\");\n```\n\n```python async\n# Locate element inside frame\nusername = await page.frame_locator('.frame-class').get_by_label('User Name')\nawait username.fill('John')\n```\n\n```python sync\n# Locate element inside frame\n# Get frame using any other selector\nusername = page.frame_locator('.frame-class').get_by_label('User Name')\nusername.fill('John')\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-frames.md","title":"src-frames","url":"https://playwright.dev/docs/src-frames","loc":{"lines":{"from":1,"to":37}}}}],["e0eef975-f74f-4822-9e9d-eda307a76b6f",{"pageContent":"```python sync\n# Locate element inside frame\n# Get frame using any other selector\nusername = page.frame_locator('.frame-class').get_by_label('User Name')\nusername.fill('John')\n```\n\n```csharp\n// Locate element inside frame\nvar username = await page.FrameLocator(\".frame-class\").GetByLabel(\"User Name\");\nawait username.FillAsync(\"John\");\n```\n\n## Frame objects\n\nOne can access frame objects using the [`method: Page.frame`] API:\n\n```js\n// Get frame using the frame's name attribute\nconst frame = page.frame('frame-login');\n\n// Get frame using frame's URL\nconst frame = page.frame({ url: /.*domain.*/ });\n\n// Interact with the frame\nawait frame.fill('#username-input', 'John');\n```\n\n```java\n// Get frame using the frame\"s name attribute\nFrame frame = page.frame(\"frame-login\");\n\n// Get frame using frame\"s URL\nFrame frame = page.frameByUrl(Pattern.compile(\".*domain.*\"));\n\n// Interact with the frame\nframe.fill(\"#username-input\", \"John\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-frames.md","title":"src-frames","url":"https://playwright.dev/docs/src-frames","loc":{"lines":{"from":32,"to":69}}}}],["b3930da1-eb60-4780-a183-cbcad2f5558c",{"pageContent":"// Get frame using frame\"s URL\nFrame frame = page.frameByUrl(Pattern.compile(\".*domain.*\"));\n\n// Interact with the frame\nframe.fill(\"#username-input\", \"John\");\n```\n\n```python async\n# Get frame using the frame's name attribute\nframe = page.frame('frame-login')\n\n# Get frame using frame's URL\nframe = page.frame(url=r'.*domain.*')\n\n# Interact with the frame\nawait frame.fill('#username-input', 'John')\n```\n\n```python sync\n# Get frame using the frame's name attribute\nframe = page.frame('frame-login')\n\n# Get frame using frame's URL\nframe = page.frame(url=r'.*domain.*')\n\n# Interact with the frame\nframe.fill('#username-input', 'John')\n```\n\n```csharp\n// Create a page.\nvar page = await context.NewPageAsync();\n\n// Get frame using the frame's name attribute\nvar frame = page.Frame(\"frame-login\");\n\n// Get frame using frame's URL\nvar frame = page.FrameByUrl(\"*domain.\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-frames.md","title":"src-frames","url":"https://playwright.dev/docs/src-frames","loc":{"lines":{"from":64,"to":101}}}}],["e970f4cb-7732-4f7e-857d-64042700ee9f",{"pageContent":"// Get frame using the frame's name attribute\nvar frame = page.Frame(\"frame-login\");\n\n// Get frame using frame's URL\nvar frame = page.FrameByUrl(\"*domain.\");\n\n// Get frame using any other selector\nvar frameElementHandle = await page.EvaluateAsync(\"window.frames[1]\");\nvar frame = await frameElementHandle.ContentFrameAsync();\n\n// Interact with the frame\nawait frame.FillAsync(\"#username-input\", \"John\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-frames.md","title":"src-frames","url":"https://playwright.dev/docs/src-frames","loc":{"lines":{"from":97,"to":109}}}}],["a9ab23a8-1ac7-4bdf-a7f4-bfa01c75978d",{"pageContent":"---\nid: getting-started-vscode\ntitle: \"Getting started - VS Code\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nPlaywright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari. \n\nGet started by installing Playwright and generating a test to see it in action. Alternatively you can also get started and run your tests using the [CLI](./intro.md).\n\n<LiteYouTube\n    id=\"Xz6lhEzgI5I\"\n    title=\"Getting Started with Playwright in VS Code\"\n/>\n\n## Installation\n\nPlaywright has a VS Code extension which is available when testing with Node.js. Install [it from the VS Code marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright) or from the extensions tab in VS Code.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":1,"to":21}}}}],["0db3fb2d-ebeb-40ab-80c0-c602bc17a339",{"pageContent":"![VS Code extension for Playwright](https://github.com/microsoft/playwright/assets/13063165/cab54568-3168-4b3f-bf3d-854976594903)\n\nOnce installed, open the command panel and type:\n\n```bash\nInstall Playwright\n```\n\n![install playwright](https://github.com/microsoft/playwright/assets/13063165/14e91050-24ab-4ff1-a37b-57d7c15e5c35)\n\n\nSelect **Test: Install Playwright** and Choose the browsers you would like to run your tests on. These can be later configured in the [playwright.config](./test-configuration.md) file. You can also choose if you would like to have a GitHub Actions setup to [run your tests on CI](./ci-intro.md).\n\n![choose browsers](https://github.com/microsoft/playwright/assets/13063165/c9e8a25a-e9e8-4419-aeb5-1b8ba58bd71d)\n\n### Opening the testing sidebar","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":23,"to":38}}}}],["9d49cae3-3565-4d54-9932-ab33e12908d1",{"pageContent":"![choose browsers](https://github.com/microsoft/playwright/assets/13063165/c9e8a25a-e9e8-4419-aeb5-1b8ba58bd71d)\n\n### Opening the testing sidebar\n\nThe testing sidebar can be opened by clicking on the testing icon in the activity bar. This will give you access to the test explorer, which will show you all the tests in your project as well as the Playwright sidebar which includes projects, settings, tools and setup.\n\n![Testing Sidebar](https://github.com/microsoft/playwright/assets/13063165/d203fe83-6015-4e7a-b816-35d373906b24)\n\n## Running tests\n\nYou can run a single test by clicking the green triangle next to your test block to run your test. Playwright will run through each line of the test and when it finishes you will see a green tick next to your test block as well as the time it took to run the test.\n\n<LiteYouTube\n    id=\"mQmcIBMsc38\"\n    title=\"Getting Started with Playwright in VS Code\"\n/>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":36,"to":51}}}}],["82dba786-0c7a-471b-a960-d5d422825f3a",{"pageContent":"<LiteYouTube\n    id=\"mQmcIBMsc38\"\n    title=\"Getting Started with Playwright in VS Code\"\n/>\n\n![run a single test](https://github.com/microsoft/playwright/assets/13063165/69dbccfc-4e9f-40e7-bcdf-7d5c5a11f988)\n\n\n### Run tests and show browsers\n\nYou can also run your tests and show the browsers by selecting the option **Show Browsers** in the testing sidebar. Then when you click the green triangle to run your test the browser will open and you will visually see it run through your test. Leave this selected if you want browsers open for all your tests or uncheck it if you prefer your tests to run in headless mode with no browser open.\n\n![show browsers while running tests](https://github.com/microsoft/playwright/assets/13063165/9f231530-0c43-466a-b944-8cf5102f714a)\n\nUse the **Close all browsers** button to close all browsers.\n\n### View and run all tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":48,"to":64}}}}],["08cfdb29-1a33-49ab-989a-11b3d8756375",{"pageContent":"Use the **Close all browsers** button to close all browsers.\n\n### View and run all tests\n\nView all tests in the testing sidebar and extend the tests by clicking on each test. Tests that have not been run will not have the green check next to them. Run all tests by clicking on the white triangle as you hover over the tests in the testing sidebar.\n\n![run all tests](https://github.com/microsoft/playwright/assets/13063165/348e18ff-f819-4caa-8f7e-f16c20724f56)\n\n### Running tests on multiple browsers\n\nThe first section in the Playwright sidebar is the projects section. Here you can see all your projects as defined in your Playwright config file. The default config when installing Playwright gives you 3 projects, Chromium, Firefox and WebKit. The first project is selected by default.\n\n![Projects section in VS Code extension](https://github.com/microsoft/playwright/assets/13063165/58fedea6-a2b9-4942-b2c7-2f3d482210cf)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":62,"to":74}}}}],["91929e69-1413-4005-8bd1-708c0a702bfa",{"pageContent":"![Projects section in VS Code extension](https://github.com/microsoft/playwright/assets/13063165/58fedea6-a2b9-4942-b2c7-2f3d482210cf)\n\nTo run tests on multiple projects, select each project by checking the checkboxes next to the project name. Then when you run your tests from the sidebar or by pressing the play button next to the test name, the tests will run on all the selected projects.\n\n![Selecting projects to run tests on](https://github.com/microsoft/playwright/assets/13063165/6dc86ef4-6097-481c-9cab-b6e053ec7ea6)\n\nYou can also individually run a test on a specific project by clicking the grey play button next to the project name of the test.\n\n![Running a test on a specific project](https://github.com/microsoft/playwright/assets/13063165/d29a27ab-07b5-4ca6-b4d7-1ad6d44bf222)\n\n### Run tests with trace viewer\n\nFor a better developer experience you can run your tests with the **Show Trace Viewer** option.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":74,"to":86}}}}],["c466bf6b-7619-47a1-b51c-242cbd7faafd",{"pageContent":"### Run tests with trace viewer\n\nFor a better developer experience you can run your tests with the **Show Trace Viewer** option.\n\n![run tests with trace viewer](https://github.com/microsoft/playwright/assets/13063165/fab8efa6-d5ef-496d-876d-c99e94e6a6b3)\n\nThis will open up a full trace of your test where you can step through each action of your tests, explore the timeline, source code and more.\n\n![trace viewer](https://github.com/microsoft/playwright/assets/13063165/ee31a4fe-c786-4d4b-887e-2dcecacfba2c)\n\nTo learn more about the trace viewer see our [Trace Viewer guide](./trace-viewer.md).\n\n\n\n## Debugging tests\n\nWith the VS Code extension you can debug your tests right in VS Code see error messages, create breakpoints and live debug your tests.\n\n<LiteYouTube\n    id=\"tJF7UhA59Gc\"\n    title=\"Debugging Playwright tests in VS Code\"\n/>\n\n### Error messages","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":84,"to":107}}}}],["d3f15265-7eb0-4a5a-b358-d5d4bf889651",{"pageContent":"<LiteYouTube\n    id=\"tJF7UhA59Gc\"\n    title=\"Debugging Playwright tests in VS Code\"\n/>\n\n### Error messages\n\nIf your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.\n\n![error messaging in vs code](https://github.com/microsoft/playwright/assets/13063165/3b8af12a-4805-4573-9d38-92055a0a7e75)\n\n### Live debugging\n\nYou can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will highlight it if it exists and show you if there is more than one result\n\n![live debugging in vs code](https://github.com/microsoft/playwright/assets/13063165/7d236ebb-3d2d-4384-b73d-32a2b4e33b9e)\n\nYou can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.\n\n### Run in debug mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":102,"to":121}}}}],["b380309e-f543-4489-8f6c-7e6a77565eac",{"pageContent":"You can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.\n\n### Run in debug mode\n\nTo set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run. \n\n![setting debug mode](https://github.com/microsoft/playwright/assets/13063165/31640629-efac-4cc7-b8b0-80ae18a3af83)\n\nA browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.\n\n![running in debug mode](https://github.com/microsoft/playwright/assets/13063165/b96a9f50-0f4d-49f9-a3d8-f093980a5673)\n\n![choosing a profile for debugging](https://github.com/microsoft/playwright/assets/13063165/48c1b428-8dd2-4229-9eb5-24f7168db834)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":119,"to":131}}}}],["82cee8f3-9906-49f6-85b5-9741202520ac",{"pageContent":"![choosing a profile for debugging](https://github.com/microsoft/playwright/assets/13063165/48c1b428-8dd2-4229-9eb5-24f7168db834)\n\nTo learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).\n\n### Debug with trace viewer\n\nFor a better developer experience you can debug your tests with the **Show Trace Viewer** option.\n\n![run tests with trace viewer](https://github.com/microsoft/playwright/assets/13063165/fab8efa6-d5ef-496d-876d-c99e94e6a6b3)\n\nThis will open up a full trace of your test where you can step through each action and see what happened before and after the action. You can also inspect the DOM snapshot, see console logs, network requests, the source code and more.\n\n![trace viewer](https://github.com/microsoft/playwright/assets/13063165/ee31a4fe-c786-4d4b-887e-2dcecacfba2c)\n\nTo learn more about the trace viewer see our [Trace Viewer guide](./trace-viewer.md).\n\n## Generating tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":131,"to":147}}}}],["9a20c809-e08f-404e-bbd1-ce1fc8a60bc2",{"pageContent":"To learn more about the trace viewer see our [Trace Viewer guide](./trace-viewer.md).\n\n## Generating tests\n\nCodeGen will auto generate your tests for you as you perform actions in the browser and is a great way to quickly get started. The viewport for the browser window is set to a specific width and height. See the [configuration guide](./test-configuration.md) to change the viewport or emulate different environments.\n\n<LiteYouTube\n    id=\"5XIZPqKkdBA\"\n    title=\"Generating Playwright tests in VS Code\"\n/>\n\n### Record a new test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":145,"to":156}}}}],["6066613f-6616-42e3-b9ca-1293f8af7830",{"pageContent":"<LiteYouTube\n    id=\"5XIZPqKkdBA\"\n    title=\"Generating Playwright tests in VS Code\"\n/>\n\n### Record a new test\n\nTo record a test click on the **Record new** button from the Testing sidebar. This will create a `test-1.spec.ts` file as well as open up a browser window. In the browser go to the URL you wish to test and start clicking around. Playwright will record your actions and generate the test code directly in VS Code. You can also generate assertions by choosing one of the icons in the toolbar and then clicking on an element on the page to assert against. The following assertions can be generated:\n  * `'assert visibility'` to assert that an element is visible\n  * `'assert text'` to assert that an element contains specific text\n  * `'assert value'` to assert that an element has a specific value\n\nOnce you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and see your generated test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":151,"to":163}}}}],["3f5c6b56-402c-41ec-a851-d412bc11c0c9",{"pageContent":"Once you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and see your generated test.\n\n\n![record a new test](https://github.com/microsoft/playwright/assets/13063165/0407f112-e1cd-41e7-a05d-ae64e24d27ed)\n\n### Record at cursor\n\nTo record from a specific point in your test file click the **Record at cursor** button from the Testing sidebar. This generates actions into the existing test at the current cursor position. You can run the test, position the cursor at the end of the test and continue generating the test.\n\n![record at cursor](https://github.com/microsoft/playwright/assets/13063165/96933ea1-4c84-453a-acd7-22b4d3bde185)\n\n### Picking a locator","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":163,"to":174}}}}],["e4896ff2-4932-4a5c-b49d-40ca1eaff521",{"pageContent":"![record at cursor](https://github.com/microsoft/playwright/assets/13063165/96933ea1-4c84-453a-acd7-22b4d3bde185)\n\n### Picking a locator\n\nPick a [locator](./locators.md) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.\n\n\n![pick locators](https://github.com/microsoft/playwright/assets/13063165/9a1b2da9-9ac7-4def-a9e0-f94770364fc2)\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](./locators.md). If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":172,"to":181}}}}],["396d550b-07d8-467b-bfb7-b06012d9d3fc",{"pageContent":"## Project Dependencies\n\nYou can use [project dependencies](./test-projects.md) to run tests that depend on other tests. This is useful for **setup** tests such as logging in to a website. \n\n### Running setup tests\n\nTo run your setup tests select the **setup** project, as defined in your configuration file, from the project section in the Playwright sidebar. This will give you access to the **setup** tests in the test explorer.\n\n![setup tests in vscode](https://github.com/microsoft/playwright/assets/13063165/7a9eccd5-a5b3-431f-9eff-9b2971501e07)\n\nWhen you run a test that depends on the **setup** tests, the **setup** test will run first. Each time you run the test, the **setup** test will run again. \n\n![running setup tests in vscode](https://github.com/microsoft/playwright/assets/13063165/a54b3868-3f9f-4e74-8d42-a93443f099fc)\n\n### Running setup tests only once","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":183,"to":197}}}}],["5c530d0d-af1e-4951-99b1-7b375683e715",{"pageContent":"![running setup tests in vscode](https://github.com/microsoft/playwright/assets/13063165/a54b3868-3f9f-4e74-8d42-a93443f099fc)\n\n### Running setup tests only once\n\nTo run the **setup** test only once, deselect it from the projects section in the Playwright sidebar. The **setup** test is now removed from the test explorer. When you run a test that depends on the **setup** test, it will no longer run the **setup** test, making it much faster and therefore a much better developer experience.\n\n![deselecting setup tests in vscode](https://github.com/microsoft/playwright/assets/13063165/ebc50e38-c98d-4538-82fe-ec08491f8487)\n\n## Global Setup","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":195,"to":203}}}}],["15313d44-d643-4399-b2de-156bac2d2a58",{"pageContent":"![deselecting setup tests in vscode](https://github.com/microsoft/playwright/assets/13063165/ebc50e38-c98d-4538-82fe-ec08491f8487)\n\n## Global Setup\n\n**Global setup** runs when you execute your first test. It runs only once and is useful for setting up a database or starting a server. You can manually run **global setup** by clicking the `Run global setup` option from the **Setup** section in the Playwright sidebar. **Global teardown** does not run by default; you need to manually initiate it by clicking the `Run global teardown` option.\n\nGlobal setup will re-run when you debug tests as this ensures an isolated environment and dedicated setup for the test.\n\n![running global setup](https://github.com/microsoft/playwright/assets/13063165/bcf5fec7-2d7d-4cb9-a277-5f41e19b8d52)\n\n## Multiple configurations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":201,"to":211}}}}],["22232e99-9dbf-4ce9-b20f-f70b4b3c6a2f",{"pageContent":"![running global setup](https://github.com/microsoft/playwright/assets/13063165/bcf5fec7-2d7d-4cb9-a277-5f41e19b8d52)\n\n## Multiple configurations\n\nIf your project contains more than one playwright configuration file, you can switch between them by first clicking on the gear icon in the top right corner of the Playwright sidebar. This will show you all the configuration files in your project. Select the configuration files you want to use by checking the checkbox next to each one and clicking on the 'ok' button.\n\n![Selecting a configuration file](https://github.com/microsoft/playwright/assets/13063165/ff9ff838-d27a-403d-b939-94e6c295e1d7)\n\nYou will now have access to all your tests in the test explorer. To run a test click on the grey triangle next to the file or project name. \n\n![Switching between configuration files](https://github.com/microsoft/playwright/assets/13063165/70930de5-0a0c-45e0-a6ee-b51f727f0e35)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":209,"to":219}}}}],["d351be3f-afe3-4f94-997f-cecdca24a082",{"pageContent":"![Switching between configuration files](https://github.com/microsoft/playwright/assets/13063165/70930de5-0a0c-45e0-a6ee-b51f727f0e35)\n\nTo run all tests from all configurations click on the grey triangle at the top of the test explorer.\n\n![Running all tests from all configurations](https://github.com/microsoft/playwright/assets/13063165/b3de4ce1-d311-4527-b2c7-b3e2f179a685)\n\nTo choose a configuration file to work with simply toggle between them by clicking on the configuration file name in the Playwright sidebar. Now when you use the tools, such as Record a test, it will record a test for the selected configuration file. \n\n![Recording a test for a specific configuration file](https://github.com/microsoft/playwright/assets/13063165/a8ecbcd1-fab8-4012-bdaa-428951f233a2)\n\nYou can easily toggle back and forth between configurations by clicking on the configuration file name in the Playwright sidebar.\n\n## What's next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":219,"to":231}}}}],["e0c031d4-3054-4234-97b3-7ac456e95c75",{"pageContent":"You can easily toggle back and forth between configurations by clicking on the configuration file name in the Playwright sidebar.\n\n## What's next\n\n- [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)\n- [Run your tests on CI](./ci-intro.md)\n- [Learn more about the Trace Viewer](./trace-viewer.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-getting-started-vscode-js.md","title":"src-getting-started-vscode-js","url":"https://playwright.dev/docs/src-getting-started-vscode-js","loc":{"lines":{"from":229,"to":235}}}}],["d4c8cbd6-d7c2-430a-ab79-24a5b95a2954",{"pageContent":"---\nid: handles\ntitle: \"Handles\"\n---\n\n## Introduction\n\nPlaywright can create handles to the page DOM elements or any other objects inside the\npage. These handles live in the Playwright process, whereas the actual objects live\nin the browser. There are two types of handles:\n- [JSHandle] to reference any JavaScript objects in the page\n- [ElementHandle] to reference DOM elements in the page, it has extra methods that allow\nperforming actions on the elements and asserting their properties.\n\nSince any DOM element in the page is also a JavaScript object, any [ElementHandle] is\na [JSHandle] as well.\n\nHandles are used to perform operations on those actual objects in the page. You can evaluate\non a handle, get handle properties, pass handle as an evaluation parameter, serialize page\nobject into JSON etc. See the [JSHandle] class API for these and methods.\n\n### API reference\n- [JSHandle]\n- [ElementHandle]\n\nHere is the easiest way to obtain a [JSHandle].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":1,"to":26}}}}],["02090f0b-7fe2-416b-9ed3-9d0c2cb3ea7a",{"pageContent":"### API reference\n- [JSHandle]\n- [ElementHandle]\n\nHere is the easiest way to obtain a [JSHandle].\n\n```js\nconst jsHandle = await page.evaluateHandle('window');\n//  Use jsHandle for evaluations.\n```\n\n```java\nJSHandle jsHandle = page.evaluateHandle(\"window\");\n//  Use jsHandle for evaluations.\n```\n\n```python async\njs_handle = await page.evaluate_handle('window')\n#  Use jsHandle for evaluations.\n```\n\n```python sync\njs_handle = page.evaluate_handle('window')\n#  Use jsHandle for evaluations.\n```\n\n```csharp\nvar jsHandle = await page.EvaluateHandleAsync(\"window\");\n//  Use jsHandle for evaluations.\n```\n\n## Element Handles\n\n:::warning[Discouraged]\nThe use of [ElementHandle] is discouraged, use [Locator] objects and web-first assertions instead.\n:::\n\nWhen [ElementHandle] is required, it is recommended to fetch it with the\n[`method: Page.waitForSelector`] or [`method: Frame.waitForSelector`] methods. These\nAPIs wait for the element to be attached and visible.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":22,"to":61}}}}],["7a20a453-5e66-4a76-82d6-ee43be16889e",{"pageContent":"```js\n// Get the element handle\nconst elementHandle = page.waitForSelector('#box');\n\n// Assert bounding box for the element\nconst boundingBox = await elementHandle.boundingBox();\nexpect(boundingBox.width).toBe(100);\n\n// Assert attribute for the element\nconst classNames = await elementHandle.getAttribute('class');\nexpect(classNames.includes('highlighted')).toBeTruthy();\n```\n\n```java\n// Get the element handle\nJSHandle jsHandle = page.waitForSelector(\"#box\");\nElementHandle elementHandle = jsHandle.asElement();\n\n// Assert bounding box for the element\nBoundingBox boundingBox = elementHandle.boundingBox();\nassertEquals(100, boundingBox.width);\n\n// Assert attribute for the element\nString classNames = elementHandle.getAttribute(\"class\");\nassertTrue(classNames.contains(\"highlighted\"));\n```\n\n```python async\n# Get the element handle\nelement_handle = page.wait_for_selector('#box')","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":63,"to":92}}}}],["a8729e27-aa33-413d-bebc-be01fbaa39c3",{"pageContent":"```python async\n# Get the element handle\nelement_handle = page.wait_for_selector('#box')\n\n# Assert bounding box for the element\nbounding_box = await element_handle.bounding_box()\nassert bounding_box.width == 100\n\n# Assert attribute for the element\nclass_names = await element_handle.get_attribute('class')\nassert 'highlighted' in class_names\n```\n\n```python sync\n# Get the element handle\nelement_handle = page.wait_for_selector('#box')\n\n# Assert bounding box for the element\nbounding_box = element_handle.bounding_box()\nassert bounding_box.width == 100\n\n# Assert attribute for the element\nclass_names = element_handle.get_attribute('class')\nassert 'highlighted' in class_names\n```\n\n```csharp\n// Get the element handle\nvar jsHandle = await page.WaitForSelectorAsync(\"#box\");\nvar elementHandle = jsHandle as ElementHandle;\n\n// Assert bounding box for the element\nvar boundingBox = await elementHandle.BoundingBoxAsync();\nAssert.AreEqual(100, boundingBox.Width);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":90,"to":123}}}}],["2b11a6a7-f85e-4d21-a5fe-92d86fbc8a16",{"pageContent":"// Assert bounding box for the element\nvar boundingBox = await elementHandle.BoundingBoxAsync();\nAssert.AreEqual(100, boundingBox.Width);\n\n// Assert attribute for the element\nvar classNames = await elementHandle.GetAttributeAsync(\"class\");\nAssert.True(classNames.Contains(\"highlighted\"));\n```\n\n## Handles as parameters\n\nHandles can be passed into the [`method: Page.evaluate`] and similar methods.\nThe following snippet creates a new array in the page, initializes it with data\nand returns a handle to this array into Playwright. It then uses the handle\nin subsequent evaluations:\n\n```js\n// Create new array in page.\nconst myArrayHandle = await page.evaluateHandle(() => {\n  window.myArray = [1];\n  return myArray;\n});\n\n// Get the length of the array.\nconst length = await page.evaluate(a => a.length, myArrayHandle);\n\n// Add one more element to the array using the handle\nawait page.evaluate(arg => arg.myArray.push(arg.newElement), {\n  myArray: myArrayHandle,\n  newElement: 2\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":121,"to":151}}}}],["7181e77c-28f5-473e-9e94-8b29c543631c",{"pageContent":"// Add one more element to the array using the handle\nawait page.evaluate(arg => arg.myArray.push(arg.newElement), {\n  myArray: myArrayHandle,\n  newElement: 2\n});\n\n// Release the object when it's no longer needed.\nawait myArrayHandle.dispose();\n```\n\n```java\n// Create new array in page.\nJSHandle myArrayHandle = page.evaluateHandle(\"() => {\\n\" +\n  \"  window.myArray = [1];\\n\" +\n  \"  return myArray;\\n\" +\n  \"}\");\n\n// Get the length of the array.\nint length = (int) page.evaluate(\"a => a.length\", myArrayHandle);\n\n// Add one more element to the array using the handle\nMap<String, Object> arg = new HashMap<>();\narg.put(\"myArray\", myArrayHandle);\narg.put(\"newElement\", 2);\npage.evaluate(\"arg => arg.myArray.add(arg.newElement)\", arg);\n\n// Release the object when it is no longer needed.\nmyArrayHandle.dispose();\n```\n\n```python async\n# Create new array in page.\nmy_array_handle = await page.evaluate_handle(\"\"\"() => {\n  window.myArray = [1];\n  return myArray;\n}\"\"\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":147,"to":182}}}}],["eef8e852-cec7-4d72-a0e7-a766e3b53e88",{"pageContent":"```python async\n# Create new array in page.\nmy_array_handle = await page.evaluate_handle(\"\"\"() => {\n  window.myArray = [1];\n  return myArray;\n}\"\"\")\n\n# Get current length of the array.\nlength = await page.evaluate(\"a => a.length\", my_array_handle)\n\n# Add one more element to the array using the handle\nawait page.evaluate(\"(arg) => arg.myArray.push(arg.newElement)\", {\n  'myArray': my_array_handle,\n  'newElement': 2\n})\n\n# Release the object when it's no longer needed.\nawait my_array_handle.dispose()\n```\n\n```python sync\n# Create new array in page.\nmy_array_handle = page.evaluate_handle(\"\"\"() => {\n  window.myArray = [1];\n  return myArray;\n}\"\"\")\n\n# Get current length of the array.\nlength = page.evaluate(\"a => a.length\", my_array_handle)\n\n# Add one more element to the array using the handle\npage.evaluate(\"(arg) => arg.myArray.push(arg.newElement)\", {\n  'myArray': my_array_handle,\n  'newElement': 2\n})\n\n# Release the object when it's no longer needed.\nmy_array_handle.dispose()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":177,"to":215}}}}],["51e88b63-60d5-493f-aada-bfa56e014280",{"pageContent":"# Release the object when it's no longer needed.\nmy_array_handle.dispose()\n```\n\n```csharp\n// Create new array in page.\nvar myArrayHandle = await page.EvaluateHandleAsync(@\"() => {\n    window.myArray = [1];\n    return myArray;\n}\");\n\n// Get the length of the array.\nvar length = await page.EvaluateAsync<int>(\"a => a.length\", myArrayHandle);\n\n// Add one more element to the array using the handle\nawait page.EvaluateAsync(\"arg => arg.myArray.add(arg.newElement)\",\n    new { myArray = myArrayHandle, newElement = 2 });\n\n// Release the object when it is no longer needed.\nawait myArrayHandle.DisposeAsync();\n```\n\n\n## Handle Lifecycle","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":213,"to":236}}}}],["e8f772e5-02f4-4276-a112-b5e18400fbde",{"pageContent":"// Release the object when it is no longer needed.\nawait myArrayHandle.DisposeAsync();\n```\n\n\n## Handle Lifecycle\n\nHandles can be acquired using the page methods such as [`method: Page.evaluateHandle`],\n[`method: Page.querySelector`] or [`method: Page.querySelectorAll`] or their frame counterparts\n[`method: Frame.evaluateHandle`], [`method: Frame.querySelector`] or [`method: Frame.querySelectorAll`]. Once\ncreated, handles will retain object from\n[garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\nunless page navigates or the handle is manually disposed via the [`method: JSHandle.dispose`] method.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":231,"to":243}}}}],["7fa1a7e9-bf80-44dc-aad4-278dcd1ddec2",{"pageContent":"### API reference\n- [JSHandle]\n- [ElementHandle]\n- [`method: ElementHandle.boundingBox`]\n- [`method: ElementHandle.getAttribute`]\n- [`method: ElementHandle.innerText`]\n- [`method: ElementHandle.innerHTML`]\n- [`method: ElementHandle.textContent`]\n- [`method: JSHandle.evaluate`]\n- [`method: Page.evaluateHandle`]\n- [`method: Page.querySelector`]\n- [`method: Page.querySelectorAll`]\n\n\n## Locator vs ElementHandle\n\n:::caution\nWe only recommend using [ElementHandle] in the rare cases when you need to perform extensive DOM traversal\non a static page. For all user actions and assertions use locator instead.\n:::\n\nThe difference between the [Locator] and [ElementHandle] is that the latter points to a particular element, while Locator captures the logic of how to retrieve that element.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":246,"to":267}}}}],["84047fe4-039d-4b4f-b84a-23b196ef43a7",{"pageContent":"The difference between the [Locator] and [ElementHandle] is that the latter points to a particular element, while Locator captures the logic of how to retrieve that element.\n\nIn the example below, handle points to a particular DOM element on page. If that element changes text or is used by React to render an entirely different component, handle is still pointing to that very stale DOM element. This can lead to unexpected behaviors.\n\n```js\nconst handle = await page.$('text=Submit');\n// ...\nawait handle.hover();\nawait handle.click();\n```\n\n```java\nElementHandle handle = page.querySelector(\"text=Submit\");\nhandle.hover();\nhandle.click();\n```\n\n```python async\nhandle = await page.query_selector(\"text=Submit\")\nawait handle.hover()\nawait handle.click()\n```\n\n```python sync\nhandle = page.query_selector(\"text=Submit\")\nhandle.hover()\nhandle.click()\n```\n\n```csharp\nvar handle = await page.QuerySelectorAsync(\"text=Submit\");\nawait handle.HoverAsync();\nawait handle.ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":267,"to":300}}}}],["99b769b4-caa0-492d-a326-c00bbec76b91",{"pageContent":"```csharp\nvar handle = await page.QuerySelectorAsync(\"text=Submit\");\nawait handle.HoverAsync();\nawait handle.ClickAsync();\n```\n\nWith the locator, every time the locator is used, up-to-date DOM element is located in the page using the selector. So in the snippet below, underlying DOM element is going to be located twice.\n\n```js\nconst locator = page.getByText('Submit');\n// ...\nawait locator.hover();\nawait locator.click();\n```\n\n```java\nLocator locator = page.getByText(\"Submit\");\nlocator.hover();\nlocator.click();\n```\n\n```python async\nlocator = page.get_by_text(\"Submit\")\nawait locator.hover()\nawait locator.click()\n```\n\n```python sync\nlocator = page.get_by_text(\"Submit\")\nlocator.hover()\nlocator.click()\n```\n\n```csharp\nvar locator = page.GetByText(\"Submit\");\nawait locator.HoverAsync();\nawait locator.ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-handles.md","title":"src-handles","url":"https://playwright.dev/docs/src-handles","loc":{"lines":{"from":296,"to":333}}}}],["9451e578-76d7-4c06-a8ec-f955140c47d5",{"pageContent":"---\nid: input\ntitle: \"Actions\"\n---\n\n## Introduction\n\nPlaywright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements.\n\n## Text input\n\nUsing [`method: Locator.fill`] is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>` and `[contenteditable]` elements.\n\n```js\n// Text input\nawait page.getByRole('textbox').fill('Peter');\n\n// Date input\nawait page.getByLabel('Birth date').fill('2020-02-02');\n\n// Time input\nawait page.getByLabel('Appointment time').fill('13:15');\n\n// Local datetime input\nawait page.getByLabel('Local time').fill('2020-03-02T05:15');\n```\n\n```java\n// Text input\npage.getByRole(AriaRole.TEXTBOX).fill(\"Peter\");\n\n// Date input\npage.getByLabel(\"Birth date\").fill(\"2020-02-02\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":1,"to":33}}}}],["09389794-7c93-4ca1-b1d4-a35763fb4646",{"pageContent":"```java\n// Text input\npage.getByRole(AriaRole.TEXTBOX).fill(\"Peter\");\n\n// Date input\npage.getByLabel(\"Birth date\").fill(\"2020-02-02\");\n\n// Time input\npage.getByLabel(\"Appointment time\").fill(\"13-15\");\n\n// Local datetime input\npage.getByLabel(\"Local time\").fill(\"2020-03-02T05:15\");\n```\n\n```python async\n# Text input\nawait page.get_by_role(\"textbox\").fill(\"Peter\")\n\n# Date input\nawait page.get_by_label(\"Birth date\").fill(\"2020-02-02\")\n\n# Time input\nawait page.get_by_label(\"Appointment time\").fill(\"13:15\")\n\n# Local datetime input\nawait page.get_by_label(\"Local time\").fill(\"2020-03-02T05:15\")\n```\n\n```python sync\n# Text input\npage.get_by_role(\"textbox\").fill(\"Peter\")\n\n# Date input\npage.get_by_label(\"Birth date\").fill(\"2020-02-02\")\n\n# Time input\npage.get_by_label(\"Appointment time\").fill(\"13:15\")\n\n# Local datetime input\npage.get_by_label(\"Local time\").fill(\"2020-03-02T05:15\")\n```\n\n```csharp\n// Text input\nawait page.GetByRole(AriaRole.Textbox).FillAsync(\"Peter\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":28,"to":72}}}}],["7988aefc-7209-4ff7-8674-0fb1b943e701",{"pageContent":"# Local datetime input\npage.get_by_label(\"Local time\").fill(\"2020-03-02T05:15\")\n```\n\n```csharp\n// Text input\nawait page.GetByRole(AriaRole.Textbox).FillAsync(\"Peter\");\n\n// Date input\nawait page.GetByLabel(\"Birth date\").FillAsync(\"2020-02-02\");\n\n// Time input\nawait page.GetByLabel(\"Appointment time\").FillAsync(\"13-15\");\n\n// Local datetime input\nawait page.GetByLabel(\"Local time\").FillAsync(\"2020-03-02T05:15\");\n```\n\n## Checkboxes and radio buttons\n\nUsing [`method: Locator.setChecked`] is the easiest way to check and uncheck a checkbox or a radio button. This method can be used with `input[type=checkbox]`, `input[type=radio]` and `[role=checkbox]` elements.\n\n```js\n// Check the checkbox\nawait page.getByLabel('I agree to the terms above').check();\n\n// Assert the checked state\nexpect(page.getByLabel('Subscribe to newsletter')).toBeChecked();\n\n// Select the radio button\nawait page.getByLabel('XL').check();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":66,"to":97}}}}],["89a7dc45-5bde-40a2-913c-d402beeba554",{"pageContent":"// Assert the checked state\nexpect(page.getByLabel('Subscribe to newsletter')).toBeChecked();\n\n// Select the radio button\nawait page.getByLabel('XL').check();\n```\n\n```java\n// Check the checkbox\npage.getByLabel(\"I agree to the terms above\").check();\n\n// Assert the checked state\nassertTrue(page.getByLabel(\"Subscribe to newsletter\")).isChecked();\n\n// Select the radio button\npage.getByLabel(\"XL\").check();\n```\n\n```python async\n# Check the checkbox\nawait page.get_by_label('I agree to the terms above').check()\n\n# Assert the checked state\nawait expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()\n\n# Select the radio button\nawait page.get_by_label('XL').check()\n```\n\n```python sync\n# Check the checkbox\npage.get_by_label('I agree to the terms above').check()\n\n# Assert the checked state\nexpect(page.get_by_label('Subscribe to newsletter')).to_be_checked()\n\n# Select the radio button\npage.get_by_label('XL').check()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":92,"to":130}}}}],["953067cf-58f8-4c9f-8f4e-e1829e9ee996",{"pageContent":"# Assert the checked state\nexpect(page.get_by_label('Subscribe to newsletter')).to_be_checked()\n\n# Select the radio button\npage.get_by_label('XL').check()\n```\n\n```csharp\n// Check the checkbox\nawait page.GetByLabel(\"I agree to the terms above\").CheckAsync();\n\n// Assert the checked state\nawait Expect(page.GetByLabel(\"Subscribe to newsletter\")).ToBeCheckedAsync();\n\n// Select the radio button\nawait page.GetByLabel(\"XL\").CheckAsync();\n```\n\n## Select options\n\nSelects one or multiple options in the `<select>` element with [`method: Locator.selectOption`].\nYou can specify option `value`, or `label` to select. Multiple options can be selected.\n\n```js\n// Single selection matching the value or label\nawait page.getByLabel('Choose a color').selectOption('blue');\n\n// Single selection matching the label\nawait page.getByLabel('Choose a color').selectOption({ label: 'Blue' });\n\n// Multiple selected items\nawait page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":125,"to":157}}}}],["67e272ec-8678-4e0c-bcd2-cac9c6435533",{"pageContent":"// Multiple selected items\nawait page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);\n```\n\n```java\n// Single selection matching the value or label\npage.getByLabel(\"Choose a color\").selectOption(\"blue\");\n\n// Single selection matching the label\npage.getByLabel(\"Choose a color\").selectOption(new SelectOption().setLabel(\"Blue\"));\n\n// Multiple selected items\npage.getByLabel(\"Choose multiple colors\").selectOption(new String[] {\"red\", \"green\", \"blue\"});\n```\n\n```python async\n# Single selection matching the value or label\nawait page.get_by_label('Choose a color').select_option('blue')\n\n# Single selection matching the label\nawait page.get_by_label('Choose a color').select_option(label='Blue')\n\n# Multiple selected items\nawait page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])\n```\n\n```python sync\n# Single selection matching the value or label\npage.get_by_label('Choose a color').select_option('blue')","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":155,"to":183}}}}],["58545fa0-ab9a-4749-943c-c8357ca844f6",{"pageContent":"```python sync\n# Single selection matching the value or label\npage.get_by_label('Choose a color').select_option('blue')\n\n# Single selection matching the label\npage.get_by_label('Choose a color').select_option(label='Blue')\n\n# Multiple selected items\npage.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])\n```\n\n```csharp\n// Single selection matching the value or label\nawait page.GetByLabel(\"Choose a color\").SelectOptionAsync(\"blue\");\n\n// Single selection matching the label\nawait page.GetByLabel(\"Choose a color\").SelectOptionAsync(new SelectOptionValue { Label = \"blue\" });\n\n// Multiple selected items\nawait page.GetByLabel(\"Choose multiple colors\").SelectOptionAsync(new[] { \"blue\", \"green\", \"red\" });\n```\n\n## Mouse click\n\nPerforms a simple human click.\n\n```js\n// Generic click\nawait page.getByRole('button').click();\n\n// Double click\nawait page.getByText('Item').dblclick();\n\n// Right click\nawait page.getByText('Item').click({ button: 'right' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":181,"to":215}}}}],["65d13a95-e5e3-45aa-9853-77d930eea31d",{"pageContent":"```js\n// Generic click\nawait page.getByRole('button').click();\n\n// Double click\nawait page.getByText('Item').dblclick();\n\n// Right click\nawait page.getByText('Item').click({ button: 'right' });\n\n// Shift + click\nawait page.getByText('Item').click({ modifiers: ['Shift'] });\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\nawait page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });\n\n// Hover over element\nawait page.getByText('Item').hover();\n\n// Click the top left corner\nawait page.getByText('Item').click({ position: { x: 0, y: 0 } });\n```\n\n```java\n// Generic click\npage.getByRole(AriaRole.BUTTON).click();\n\n// Double click\npage.getByText(\"Item\").dblclick();\n\n// Right click\npage.getByText(\"Item\").click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n\n// Shift + click\npage.getByText(\"Item\").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.SHIFT)));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":207,"to":242}}}}],["6bbaa57c-e145-45c4-9aba-20b3fdc5cc23",{"pageContent":"// Shift + click\npage.getByText(\"Item\").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.SHIFT)));\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\npage.getByText(\"Item\").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.CONTROL_OR_META)));\n\n// Hover over element\npage.getByText(\"Item\").hover();\n\n// Click the top left corner\npage.getByText(\"Item\").click(new Locator.ClickOptions().setPosition(0, 0));\n```\n\n```python async\n# Generic click\nawait page.get_by_role(\"button\").click()\n\n# Double click\nawait page.get_by_text(\"Item\").dblclick()\n\n# Right click\nawait page.get_by_text(\"Item\").click(button=\"right\")\n\n# Shift + click\nawait page.get_by_text(\"Item\").click(modifiers=[\"Shift\"])\n\n# Ctrl + click on Windows and Linux\n# Meta + click on macOS\nawait page.get_by_text(\"Item\").click(modifiers=[\"ControlOrMeta\"])\n\n# Hover over element\nawait page.get_by_text(\"Item\").hover()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":241,"to":273}}}}],["d309c1c4-250f-4514-986e-39c9fcf7e2b3",{"pageContent":"# Ctrl + click on Windows and Linux\n# Meta + click on macOS\nawait page.get_by_text(\"Item\").click(modifiers=[\"ControlOrMeta\"])\n\n# Hover over element\nawait page.get_by_text(\"Item\").hover()\n\n# Click the top left corner\nawait page.get_by_text(\"Item\").click(position={ \"x\": 0, \"y\": 0})\n```\n\n```python sync\n# Generic click\npage.get_by_role(\"button\").click()\n\n# Double click\npage.get_by_text(\"Item\").dblclick()\n\n# Right click\npage.get_by_text(\"Item\").click(button=\"right\")\n\n# Shift + click\npage.get_by_text(\"Item\").click(modifiers=[\"Shift\"])\n\n# Hover over element\npage.get_by_text(\"Item\").hover()\n\n# Click the top left corner\npage.get_by_text(\"Item\").click(position={ \"x\": 0, \"y\": 0})\n```\n\n```csharp\n// Generic click\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n\n// Double click\nawait page.GetByText(\"Item\").DblClickAsync();\n\n// Right click\nawait page.GetByText(\"Item\").ClickAsync(new() { Button = MouseButton.Right });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":268,"to":307}}}}],["3505191d-6045-4470-a51c-2372e5040d55",{"pageContent":"// Double click\nawait page.GetByText(\"Item\").DblClickAsync();\n\n// Right click\nawait page.GetByText(\"Item\").ClickAsync(new() { Button = MouseButton.Right });\n\n// Shift + click\nawait page.GetByText(\"Item\").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.Shift } });\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\nawait page.GetByText(\"Item\").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.ControlOrMeta } });\n\n// Hover over element\nawait page.GetByText(\"Item\").HoverAsync();\n\n// Click the top left corner\nawait page.GetByText(\"Item\").ClickAsync(new() { position = new Position { X = 0, Y = 0 } });\n```\n\nUnder the hood, this and other pointer-related methods:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":303,"to":323}}}}],["575ec4cd-3fd0-404a-9cb5-2e91ed846a57",{"pageContent":"// Click the top left corner\nawait page.GetByText(\"Item\").ClickAsync(new() { position = new Position { X = 0, Y = 0 } });\n```\n\nUnder the hood, this and other pointer-related methods:\n\n- wait for element with given selector to be in DOM\n- wait for it to become displayed, i.e. not empty, no `display:none`, no `visibility:hidden`\n- wait for it to stop moving, for example, until css transition finishes\n- scroll the element into view\n- wait for it to receive pointer events at the action point, for example, waits until element becomes non-obscured by other elements\n- retry if the element is detached during any of the above checks\n\n#### Forcing the click","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":319,"to":332}}}}],["a8d568b2-519a-4ac6-91ed-b1b371fd081f",{"pageContent":"#### Forcing the click\n\nSometimes, apps use non-trivial logic where hovering the element overlays it with another element that intercepts the click. This behavior is indistinguishable from a bug where element gets covered and the click is dispatched elsewhere. If you know this is taking place, you can bypass the [actionability](./actionability.md) checks and force the click:\n\n```js\nawait page.getByRole('button').click({ force: true });\n```\n\n```java\npage.getByRole(AriaRole.BUTTON).click(new Locator.ClickOptions().setForce(true));\n```\n\n```python async\nawait page.get_by_role(\"button\").click(force=True)\n```\n\n```python sync\npage.get_by_role(\"button\").click(force=True)\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).ClickAsync(new() { Force = true });\n```\n\n#### Programmatic click","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":332,"to":356}}}}],["6abc7614-338c-47bb-b171-afc80b69d7a7",{"pageContent":"```python sync\npage.get_by_role(\"button\").click(force=True)\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).ClickAsync(new() { Force = true });\n```\n\n#### Programmatic click\n\nIf you are not interested in testing your app under the real conditions and want to simulate the click by any means possible, you can trigger the [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click) behavior via simply dispatching a click event on the element with [`method: Locator.dispatchEvent`]:\n\n```js\nawait page.getByRole('button').dispatchEvent('click');\n```\n\n```java\npage.getByRole(AriaRole.BUTTON).dispatchEvent(\"click\");\n```\n\n```python async\nawait page.get_by_role(\"button\").dispatch_event('click')\n```\n\n```python sync\npage.get_by_role(\"button\").dispatch_event('click')\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).DispatchEventAsync(\"click\");\n```\n\n## Type characters","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":348,"to":380}}}}],["6913b1cb-e5b3-4a30-805b-5d83c1ae4ef8",{"pageContent":"```python sync\npage.get_by_role(\"button\").dispatch_event('click')\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).DispatchEventAsync(\"click\");\n```\n\n## Type characters\n\n:::caution\nMost of the time, you should input text with [`method: Locator.fill`]. See the [Text input](#text-input) section above. You only need to type characters if there is special keyboard handling on the page.\n:::\n\nType into the field character by character, as if it was a user with a real keyboard with [`method: Locator.pressSequentially`].\n\n```js\n// Press keys one by one\nawait page.locator('#area').pressSequentially('Hello World!');\n```\n\n```java\n// Press keys one by one\npage.locator(\"#area\").pressSequentially(\"Hello World!\");\n```\n\n```python async\n# Press keys one by one\nawait page.locator('#area').press_sequentially('Hello World!')\n```\n\n```python sync\n# Press keys one by one\npage.locator('#area').press_sequentially('Hello World!')\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":372,"to":406}}}}],["09f925b2-fe6d-458c-a079-df8461971569",{"pageContent":"```python sync\n# Press keys one by one\npage.locator('#area').press_sequentially('Hello World!')\n```\n\n```csharp\n// Press keys one by one\nawait Page.Locator(\"#area\").PressSequentiallyAsync(\"Hello World!\");\n```\n\nThis method will emit all the necessary keyboard events, with all the `keydown`, `keyup`, `keypress` events in place. You can even specify the optional `delay` between the key presses to simulate real user behavior.\n\n## Keys and shortcuts\n\n```js\n// Hit Enter\nawait page.getByText('Submit').press('Enter');\n\n// Dispatch Control+Right\nawait page.getByRole('textbox').press('Control+ArrowRight');\n\n// Press $ sign on keyboard\nawait page.getByRole('textbox').press('$');\n```\n\n```java\n// Hit Enter\npage.getByText(\"Submit\").press(\"Enter\");\n\n// Dispatch Control+Right\npage.getByRole(AriaRole.TEXTBOX).press(\"Control+ArrowRight\");\n\n// Press $ sign on keyboard\npage.getByRole(AriaRole.TEXTBOX).press(\"$\");\n```\n\n```python async\n# Hit Enter\nawait page.get_by_text(\"Submit\").press(\"Enter\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":403,"to":441}}}}],["2db7bc90-16ce-447f-b15c-e93a9d0a251d",{"pageContent":"// Press $ sign on keyboard\npage.getByRole(AriaRole.TEXTBOX).press(\"$\");\n```\n\n```python async\n# Hit Enter\nawait page.get_by_text(\"Submit\").press(\"Enter\")\n\n# Dispatch Control+Right\nawait page.get_by_role(\"textbox\").press(\"Control+ArrowRight\")\n\n# Press $ sign on keyboard\nawait page.get_by_role(\"textbox\").press(\"$\")\n```\n\n```python sync\n# Hit Enter\npage.get_by_text(\"Submit\").press(\"Enter\")\n\n# Dispatch Control+Right\npage.get_by_role(\"textbox\").press(\"Control+ArrowRight\")\n\n# Press $ sign on keyboard\npage.get_by_role(\"textbox\").press(\"$\")\n```\n\n```csharp\n// Hit Enter\nawait page.GetByText(\"Submit\").PressAsync(\"Enter\");\n\n// Dispatch Control+Right\nawait page.GetByRole(AriaRole.Textbox).PressAsync(\"Control+ArrowRight\");\n\n// Press $ sign on keyboard\nawait page.GetByRole(AriaRole.Textbox).PressAsync(\"$\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":435,"to":470}}}}],["e92a4cdd-77d8-4093-89e8-84cbc24b8d23",{"pageContent":"// Dispatch Control+Right\nawait page.GetByRole(AriaRole.Textbox).PressAsync(\"Control+ArrowRight\");\n\n// Press $ sign on keyboard\nawait page.GetByRole(AriaRole.Textbox).PressAsync(\"$\");\n```\n\nThe [`method: Locator.press`] method focuses the selected element and produces a single keystroke. It accepts the logical key names that are emitted in the [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) property of the keyboard events:\n\n```txt\nBackquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape,\nArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight,\nArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc.\n```\n\n- You can alternatively specify a single character you'd like to produce such as `\"a\"` or `\"#\"`.\n\n- Following modification shortcuts are also supported: `Shift, Control, Alt, Meta`.\n\nSimple version produces a single character. This character is case-sensitive, so `\"a\"` and `\"A\"` will produce different results.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":465,"to":484}}}}],["8b7ec079-b4be-48cf-a5d4-c4f2b67b3a9a",{"pageContent":"Simple version produces a single character. This character is case-sensitive, so `\"a\"` and `\"A\"` will produce different results.\n\n\n```js\n// <input id=name>\nawait page.locator('#name').press('Shift+A');\n\n// <input id=name>\nawait page.locator('#name').press('Shift+ArrowLeft');\n```\n\n```java\n// <input id=name>\npage.locator(\"#name\").press(\"Shift+A\");\n\n// <input id=name>\npage.locator(\"#name\").press(\"Shift+ArrowLeft\");\n```\n\n```python async\n# <input id=name>\nawait page.locator('#name').press('Shift+A')\n\n# <input id=name>\nawait page.locator('#name').press('Shift+ArrowLeft')\n```\n\n```python sync\n# <input id=name>\npage.locator('#name').press('Shift+A')\n\n# <input id=name>\npage.locator('#name').press('Shift+ArrowLeft')\n```\n\n```csharp\n// <input id=name>\nawait page.Locator(\"#name\").PressAsync(\"Shift+A\");\n\n// <input id=name>\nawait page.Locator(\"#name\").PressAsync(\"Shift+ArrowLeft\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":484,"to":525}}}}],["02a048f4-b627-4a06-a501-d33c99a57ab3",{"pageContent":"```csharp\n// <input id=name>\nawait page.Locator(\"#name\").PressAsync(\"Shift+A\");\n\n// <input id=name>\nawait page.Locator(\"#name\").PressAsync(\"Shift+ArrowLeft\");\n```\n\nShortcuts such as `\"Control+o\"` or `\"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\nNote that you still need to specify the capital `A` in `Shift-A` to produce the capital character. `Shift-a` produces a lower-case one as if you had the `CapsLock` toggled.\n\n## Upload files\n\nYou can select input files for upload using the [`method: Locator.setInputFiles`] method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `\"file\"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":519,"to":533}}}}],["8628a7e0-7821-4466-97bb-9cbaf84a1536",{"pageContent":"```js\n// Select one file\nawait page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));\n\n// Select multiple files\nawait page.getByLabel('Upload files').setInputFiles([\n  path.join(__dirname, 'file1.txt'),\n  path.join(__dirname, 'file2.txt'),\n]);\n\n// Select a directory\nawait page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n\n// Remove all the selected files\nawait page.getByLabel('Upload file').setInputFiles([]);\n\n// Upload buffer from memory\nawait page.getByLabel('Upload file').setInputFiles({\n  name: 'file.txt',\n  mimeType: 'text/plain',\n  buffer: Buffer.from('this is test')\n});\n```\n\n```java\n// Select one file\npage.getByLabel(\"Upload file\").setInputFiles(Paths.get(\"myfile.pdf\"));\n\n// Select multiple files\npage.getByLabel(\"Upload files\").setInputFiles(new Path[] {Paths.get(\"file1.txt\"), Paths.get(\"file2.txt\")});\n\n// Select a directory\npage.getByLabel(\"Upload directory\").setInputFiles(Paths.get(\"mydir\"));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":535,"to":567}}}}],["03336cf6-c46e-49d0-9efc-8faac2edcac8",{"pageContent":"// Select a directory\npage.getByLabel(\"Upload directory\").setInputFiles(Paths.get(\"mydir\"));\n\n// Remove all the selected files\npage.getByLabel(\"Upload file\").setInputFiles(new Path[0]);\n\n// Upload buffer from memory\npage.getByLabel(\"Upload file\").setInputFiles(new FilePayload(\n  \"file.txt\", \"text/plain\", \"this is test\".getBytes(StandardCharsets.UTF_8)));\n```\n\n```python async\n# Select one file\nawait page.get_by_label(\"Upload file\").set_input_files('myfile.pdf')\n\n# Select multiple files\nawait page.get_by_label(\"Upload files\").set_input_files(['file1.txt', 'file2.txt'])\n\n# Select a directory\nawait page.get_by_label(\"Upload directory\").set_input_files('mydir')\n\n# Remove all the selected files\nawait page.get_by_label(\"Upload file\").set_input_files([])\n\n# Upload buffer from memory\nawait page.get_by_label(\"Upload file\").set_input_files(\n    files=[\n        {\"name\": \"test.txt\", \"mimeType\": \"text/plain\", \"buffer\": b\"this is a test\"}\n    ],\n)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":566,"to":596}}}}],["a41c83d2-255d-433f-8ead-637484c900ce",{"pageContent":"# Upload buffer from memory\nawait page.get_by_label(\"Upload file\").set_input_files(\n    files=[\n        {\"name\": \"test.txt\", \"mimeType\": \"text/plain\", \"buffer\": b\"this is a test\"}\n    ],\n)\n```\n\n```python sync\n# Select one file\npage.get_by_label(\"Upload file\").set_input_files('myfile.pdf')\n\n# Select multiple files\npage.get_by_label(\"Upload files\").set_input_files(['file1.txt', 'file2.txt'])\n\n# Select a directory\npage.get_by_label(\"Upload directory\").set_input_files('mydir')\n\n# Remove all the selected files\npage.get_by_label(\"Upload file\").set_input_files([])\n\n# Upload buffer from memory\npage.get_by_label(\"Upload file\").set_input_files(\n    files=[\n        {\"name\": \"test.txt\", \"mimeType\": \"text/plain\", \"buffer\": b\"this is a test\"}\n    ],\n)\n```\n\n```csharp\n// Select one file\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(\"myfile.pdf\");\n\n// Select multiple files\nawait page.GetByLabel(\"Upload files\").SetInputFilesAsync(new[] { \"file1.txt\", \"file12.txt\" });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":590,"to":624}}}}],["f16df397-e135-4b05-a01a-3c8505aacc5e",{"pageContent":"// Select multiple files\nawait page.GetByLabel(\"Upload files\").SetInputFilesAsync(new[] { \"file1.txt\", \"file12.txt\" });\n\n// Select a directory\nawait page.GetByLabel(\"Upload directory\").SetInputFilesAsync(\"mydir\");\n\n// Remove all the selected files\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(new[] {});\n\n// Upload buffer from memory\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(new FilePayload\n{\n    Name = \"file.txt\",\n    MimeType = \"text/plain\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"this is a test\"),\n});\n```\n\nIf you don't have input element in hand (it is created dynamically), you can handle the [`event: Page.fileChooser`] event\nor use a corresponding waiting method upon your action:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":623,"to":642}}}}],["cd85573e-9fa9-4cc3-92cf-aa4b567e3e10",{"pageContent":"If you don't have input element in hand (it is created dynamically), you can handle the [`event: Page.fileChooser`] event\nor use a corresponding waiting method upon your action:\n\n```js\n// Start waiting for file chooser before clicking. Note no await.\nconst fileChooserPromise = page.waitForEvent('filechooser');\nawait page.getByLabel('Upload file').click();\nconst fileChooser = await fileChooserPromise;\nawait fileChooser.setFiles(path.join(__dirname, 'myfile.pdf'));\n```\n\n```java\nFileChooser fileChooser = page.waitForFileChooser(() -> {\n  page.getByLabel(\"Upload file\").click();\n});\nfileChooser.setFiles(Paths.get(\"myfile.pdf\"));\n```\n\n```python async\nasync with page.expect_file_chooser() as fc_info:\n    await page.get_by_label(\"Upload file\").click()\nfile_chooser = await fc_info.value\nawait file_chooser.set_files(\"myfile.pdf\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":641,"to":664}}}}],["86fb0c96-2627-4da9-949b-b786cfa43ecc",{"pageContent":"```python async\nasync with page.expect_file_chooser() as fc_info:\n    await page.get_by_label(\"Upload file\").click()\nfile_chooser = await fc_info.value\nawait file_chooser.set_files(\"myfile.pdf\")\n```\n\n```python sync\nwith page.expect_file_chooser() as fc_info:\n    page.get_by_label(\"Upload file\").click()\nfile_chooser = fc_info.value\nfile_chooser.set_files(\"myfile.pdf\")\n```\n\n```csharp\nvar fileChooser = page.RunAndWaitForFileChooserAsync(async () =>\n{\n    await page.GetByLabel(\"Upload file\").ClickAsync();\n});\nawait fileChooser.SetFilesAsync(\"myfile.pdf\");\n```\n\n## Focus element\n\nFor the dynamic pages that handle focus events, you can focus the given element with [`method: Locator.focus`].\n\n```js\nawait page.getByLabel('Password').focus();\n```\n\n```java\npage.getByLabel(\"Password\").focus();\n```\n\n```python async\nawait page.get_by_label('password').focus()\n```\n\n```python sync\npage.get_by_label('password').focus()\n```\n\n```csharp\nawait page.GetByLabel(\"Password\").FocusAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":659,"to":703}}}}],["1a1800e1-858a-44e4-a3d7-78e5f0dd308e",{"pageContent":"```python async\nawait page.get_by_label('password').focus()\n```\n\n```python sync\npage.get_by_label('password').focus()\n```\n\n```csharp\nawait page.GetByLabel(\"Password\").FocusAsync();\n```\n\n## Drag and Drop\n\nYou can perform drag&drop operation with [`method: Locator.dragTo`]. This method will:\n- Hover the element that will be dragged.\n- Press left mouse button.\n- Move mouse to the element that will receive the drop.\n- Release left mouse button.\n\n```js\nawait page.locator('#item-to-be-dragged').dragTo(page.locator('#item-to-drop-at'));\n```\n\n```java\npage.locator(\"#item-to-be-dragged\").dragTo(page.locator(\"#item-to-drop-at\"));\n```\n\n```python async\nawait page.locator(\"#item-to-be-dragged\").drag_to(page.locator(\"#item-to-drop-at\"))\n```\n\n```python sync\npage.locator(\"#item-to-be-dragged\").drag_to(page.locator(\"#item-to-drop-at\"))\n```\n\n```csharp\nawait page.Locator(\"#item-to-be-dragged\").DragToAsync(page.Locator(\"#item-to-drop-at\"));\n```\n\n### Dragging manually","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":693,"to":733}}}}],["d9553bf0-b985-461b-a91c-41e2908ca0df",{"pageContent":"```csharp\nawait page.Locator(\"#item-to-be-dragged\").DragToAsync(page.Locator(\"#item-to-drop-at\"));\n```\n\n### Dragging manually\n\nIf you want precise control over the drag operation, use lower-level methods like [`method: Locator.hover`], [`method: Mouse.down`], [`method: Mouse.move`] and [`method: Mouse.up`].\n\n```js\nawait page.locator('#item-to-be-dragged').hover();\nawait page.mouse.down();\nawait page.locator('#item-to-drop-at').hover();\nawait page.mouse.up();\n```\n\n```java\npage.locator(\"#item-to-be-dragged\").hover();\npage.mouse().down();\npage.locator(\"#item-to-drop-at\").hover();\npage.mouse().up();\n```\n\n```python async\nawait page.locator(\"#item-to-be-dragged\").hover()\nawait page.mouse.down()\nawait page.locator(\"#item-to-drop-at\").hover()\nawait page.mouse.up()\n```\n\n```python sync\npage.locator(\"#item-to-be-dragged\").hover()\npage.mouse.down()\npage.locator(\"#item-to-drop-at\").hover()\npage.mouse.up()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":729,"to":763}}}}],["a633518c-b752-42af-849c-0c405232c935",{"pageContent":"```python sync\npage.locator(\"#item-to-be-dragged\").hover()\npage.mouse.down()\npage.locator(\"#item-to-drop-at\").hover()\npage.mouse.up()\n```\n\n```csharp\nawait page.Locator(\"#item-to-be-dragged\").HoverAsync();\nawait page.Mouse.DownAsync();\nawait page.Locator(\"#item-to-drop-at\").HoverAsync();\nawait page.Mouse.UpAsync();\n```\n\n:::note\nIf your page relies on the `dragover` event being dispatched, you need at least two mouse moves to trigger it in all browsers. To reliably issue the second mouse move, repeat your [`method: Mouse.move`] or [`method: Locator.hover`] twice. The sequence of operations would be: hover the drag element, mouse down, hover the drop element, hover the drop element second time, mouse up.\n:::\n\n## Scrolling\n\nMost of the time, Playwright will automatically scroll for you before doing any actions. Therefore, you do not need to scroll explicitly.\n\n```js\n// Scrolls automatically so that button is visible\nawait page.getByRole('button').click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":758,"to":783}}}}],["aa4b7a08-cc1f-480b-baee-07e96f2cffd2",{"pageContent":"```js\n// Scrolls automatically so that button is visible\nawait page.getByRole('button').click();\n```\n\n```java\n// Scrolls automatically so that button is visible\npage.getByRole(AriaRole.BUTTON).click();\n```\n\n```python async\n# Scrolls automatically so that button is visible\nawait page.get_by_role(\"button\").click()\n```\n\n```python sync\n# Scrolls automatically so that button is visible\npage.get_by_role(\"button\").click()\n```\n\n```csharp\n// Scrolls automatically so that button is visible\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n```\n\nHowever, in rare cases you might need to manually scroll. For example, you might want to force an \"infinite list\" to load more elements, or position the page for a specific screenshot. In such a case, the most reliable way is to find an element that you want to make visible at the bottom, and scroll it into view.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":780,"to":805}}}}],["cc361ed5-4f73-4fb3-8295-52ad4abba5c5",{"pageContent":"```js\n// Scroll the footer into view, forcing an \"infinite list\" to load more content\nawait page.getByText('Footer text').scrollIntoViewIfNeeded();\n```\n\n```java\n// Scroll the footer into view, forcing an \"infinite list\" to load more content\npage.getByText(\"Footer text\").scrollIntoViewIfNeeded();\n```\n\n```python async\n# Scroll the footer into view, forcing an \"infinite list\" to load more content\nawait page.get_by_text(\"Footer text\").scroll_into_view_if_needed()\n```\n\n```python sync\n# Scroll the footer into view, forcing an \"infinite list\" to load more content\npage.get_by_text(\"Footer text\").scroll_into_view_if_needed()\n```\n\n```csharp\n// Scroll the footer into view, forcing an \"infinite list\" to load more content\nawait page.GetByText(\"Footer text\").ScrollIntoViewIfNeededAsync();\n```\n\nIf you would like to control the scrolling more precisely, use [`method: Mouse.wheel`] or [`method: Locator.evaluate`]:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":807,"to":832}}}}],["87edcbce-77e1-40ae-931a-46d44d7bf637",{"pageContent":"If you would like to control the scrolling more precisely, use [`method: Mouse.wheel`] or [`method: Locator.evaluate`]:\n\n```js\n// Position the mouse and scroll with the mouse wheel\nawait page.getByTestId('scrolling-container').hover();\nawait page.mouse.wheel(0, 10);\n\n// Alternatively, programmatically scroll a specific element\nawait page.getByTestId('scrolling-container').evaluate(e => e.scrollTop += 100);\n```\n\n```java\n// Position the mouse and scroll with the mouse wheel\npage.getByTestId(\"scrolling-container\").hover();\npage.mouse.wheel(0, 10);\n\n// Alternatively, programmatically scroll a specific element\npage.getByTestId(\"scrolling-container\").evaluate(\"e => e.scrollTop += 100\");\n```\n\n```python async\n# Position the mouse and scroll with the mouse wheel\nawait page.get_by_test_id(\"scrolling-container\").hover()\nawait page.mouse.wheel(0, 10)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":832,"to":855}}}}],["a02be2ae-0d31-4ab4-acc1-8840ce177510",{"pageContent":"```python async\n# Position the mouse and scroll with the mouse wheel\nawait page.get_by_test_id(\"scrolling-container\").hover()\nawait page.mouse.wheel(0, 10)\n\n# Alternatively, programmatically scroll a specific element\nawait page.get_by_test_id(\"scrolling-container\").evaluate(\"e => e.scrollTop += 100\")\n```\n\n```python sync\n# Position the mouse and scroll with the mouse wheel\npage.get_by_test_id(\"scrolling-container\").hover()\npage.mouse.wheel(0, 10)\n\n# Alternatively, programmatically scroll a specific element\npage.get_by_test_id(\"scrolling-container\").evaluate(\"e => e.scrollTop += 100\")\n```\n\n```csharp\n// Position the mouse and scroll with the mouse wheel\nawait page.GetByTestId(\"scrolling-container\").HoverAsync();\nawait page.Mouse.WheelAsync(0, 10);\n\n// Alternatively, programmatically scroll a specific element\nawait page.GetByTestId(\"scrolling-container\").EvaluateAsync(\"e => e.scrollTop += 100\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-input.md","title":"src-input","url":"https://playwright.dev/docs/src-input","loc":{"lines":{"from":852,"to":877}}}}],["d4f623a7-4f99-47df-a9af-c02eba32c0c7",{"pageContent":"---\nid: intro\ntitle: \"Installation\"\n---\n\n## Introduction\n\nPlaywright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.\n\nYou can choose to use MSTest, NUnit, or xUnit [base classes](./test-runners.md) that Playwright provides to write end-to-end tests. These classes support running tests on multiple browser engines, parallelizing tests, adjusting launch/context options and getting a [Page]/[BrowserContext] instance per test out of the box. Alternatively you can use the [library](./library.md) to manually write the testing infrastructure.\n\n1. Start by creating a new project with `dotnet new`. This will create the `PlaywrightTests` directory which includes a `UnitTest1.cs` file:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":1,"to":12}}}}],["3731f689-fd6a-44d1-a7db-f49a6dce6f44",{"pageContent":"1. Start by creating a new project with `dotnet new`. This will create the `PlaywrightTests` directory which includes a `UnitTest1.cs` file:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```bash\ndotnet new nunit -n PlaywrightTests\ncd PlaywrightTests\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```bash\ndotnet new mstest -n PlaywrightTests\ncd PlaywrightTests\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```bash\ndotnet new xunit -n PlaywrightTests\ncd PlaywrightTests\n```\n\n</TabItem>\n</Tabs>\n\n2. Install the necessary Playwright dependencies:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```bash\ndotnet add package Microsoft.Playwright.NUnit\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":12,"to":64}}}}],["4d2481ff-ffd6-47fe-bb9e-a60e5ffbb8e4",{"pageContent":"```bash\ndotnet add package Microsoft.Playwright.NUnit\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```bash\ndotnet add package Microsoft.Playwright.MSTest\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```bash\ndotnet add package Microsoft.Playwright.Xunit\n```\n\n</TabItem>\n</Tabs>\n\n3. Build the project so the `playwright.ps1` is available inside the `bin` directory:\n\n```bash\ndotnet build\n```\n\n1. Install required browsers. This example uses `net8.0`, if you are using a different version of .NET you will need to adjust the command and change `net8.0` to your version.\n\n```bash\npwsh bin/Debug/net8.0/playwright.ps1 install\n```\n\nIf `pwsh` is not available, you will have to [install PowerShell](https://docs.microsoft.com/powershell/scripting/install/installing-powershell).\n\n## Add Example Tests\n\nEdit the `UnitTest1.cs` file with the code below to create an example end-to-end test:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":62,"to":99}}}}],["1554da21-c510-4d3e-bc71-a16acb328657",{"pageContent":"## Add Example Tests\n\nEdit the `UnitTest1.cs` file with the code below to create an example end-to-end test:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":97,"to":137}}}}],["68854aa0-3453-4437-b9b2-b310dc2754a9",{"pageContent":"[Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":134,"to":168}}}}],["88482fe7-6e24-4d25-abbb-e494638f430d",{"pageContent":"// Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":166,"to":199}}}}],["2b74ef35-a61c-422d-a828-289e8a252199",{"pageContent":"namespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n</TabItem>\n\n</Tabs>\n\n## Running the Example Tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":192,"to":222}}}}],["6eefa6c4-4cfe-430e-a719-f6bfd329760d",{"pageContent":"</Tabs>\n\n## Running the Example Tests\n\nBy default tests will be run on Chromium. This can be configured via the `BROWSER` environment variable, or by adjusting the [launch configuration options](./running-tests.md). Tests are run in headless mode meaning no browser will open up when running the tests. Results of the tests and test logs will be shown in the terminal.\n\n```bash\ndotnet test\n```\n\nSee our doc on [Running and Debugging Tests](./running-tests.md) to learn more about running tests in headed mode, running multiple tests, running specific configurations etc.\n\n## System requirements\n\n- Playwright is distributed as a .NET Standard 2.0 library. We recommend .NET 8.\n- Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL).\n- macOS 14 Ventura, or later.\n- Debian 12, Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture.\n\n## What's next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":220,"to":239}}}}],["83331dc4-0d99-4755-8a9a-e9a71891e695",{"pageContent":"## What's next\n\n- [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Run tests on CI](./ci-intro.md)\n- [Learn more about the MSTest, NUnit, and xUnit base classes](./test-runners.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-csharp.md","title":"src-intro-csharp","url":"https://playwright.dev/docs/src-intro-csharp","loc":{"lines":{"from":239,"to":246}}}}],["18a2095e-e9ee-49ec-b303-7b496779df32",{"pageContent":"---\nid: intro\ntitle: \"Installation\"\n---\n\n## Introduction\n\nPlaywright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.\n\nPlaywright is distributed as a set of [Maven](https://maven.apache.org/what-is-maven.html) modules. The easiest way to use it is to add one dependency to your project's `pom.xml` as described below. If you're not familiar with Maven please refer to its [documentation](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html).\n\n## Usage\n\nGet started by installing Playwright and running the example file to see it in action.\n\n<Tabs\n  defaultValue=\"java\"\n  values={[\n    {label: 'App.java', value: 'java'},\n    {label: 'pom.xml', value: 'pom'}\n  ]\n}>\n<TabItem value=\"java\">\n\n```java title=\"src/main/java/org/example/App.java\"\npackage org.example;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":1,"to":26}}}}],["fa3666ed-32d4-4412-88c5-a306f6842d7e",{"pageContent":"```java title=\"src/main/java/org/example/App.java\"\npackage org.example;\n\nimport com.microsoft.playwright.*;\n\npublic class App {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            Page page = browser.newPage();\n            page.navigate(\"https://playwright.dev\");\n            System.out.println(page.title());\n        }\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"pom\">\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":25,"to":49}}}}],["9f385f1b-8ee8-496c-8b7c-9e2005bd762a",{"pageContent":"<groupId>org.example</groupId>\n  <artifactId>examples</artifactId>\n  <version>0.1-SNAPSHOT</version>\n  <name>Playwright Client Examples</name>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>com.microsoft.playwright</groupId>\n      <artifactId>playwright</artifactId>\n      <version>%%VERSION%%</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.10.1</version>\n        <!-- References to interface static methods are allowed only at source level 1.8 or above -->\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n</TabItem>\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":51,"to":83}}}}],["1acfc595-0c62-4edf-a2ca-a979dacd6dcc",{"pageContent":"</TabItem>\n</Tabs>\n\nWith the Example.java and pom.xml above, compile and execute your new program as follows:\n\n```bash\nmvn compile exec:java -D exec.mainClass=\"org.example.App\"\n```\n\nRunning it downloads the Playwright package and installs browser binaries for Chromium, Firefox and WebKit. To modify this behavior see [installation parameters](./browsers.md#install-browsers).\n\n## First script\n\nIn our first script, we will navigate to `playwright.dev` and take a screenshot in WebKit.\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class App {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.webkit().launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://playwright.dev/\");\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"example.png\")));\n    }\n  }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":82,"to":113}}}}],["785bc559-c1f3-4c83-b048-45357ee8b11b",{"pageContent":"By default, Playwright runs the browsers in headless mode. To see the browser UI, [`option: BrowserType.launch.headless`] option to `false`. You can also use [`option: BrowserType.launch.slowMo`] to slow down execution. Learn more in the debugging tools [section](./debug.md).\n\n```java\nplaywright.firefox().launch(new BrowserType.LaunchOptions().setHeadless(false).setSlowMo(50));\n```\n\n## Running the Example script\n\n```bash\nmvn compile exec:java -D exec.mainClass=\"org.example.App\"\n```\n\nBy default browsers launched with Playwright run headless, meaning no browser UI will open up when running the script. To change that you can pass `new BrowserType.LaunchOptions().setHeadless(false)` when launching the browser.\n\n## System requirements\n\n- Java 8 or higher.\n- Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL).\n- macOS 14 Ventura, or later.\n- Debian 12, Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture.\n\n## What's next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":115,"to":136}}}}],["7799d0c9-7120-4016-8017-232ccf48d062",{"pageContent":"## What's next\n\n- [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen.md)\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-java.md","title":"src-intro-java","url":"https://playwright.dev/docs/src-intro-java","loc":{"lines":{"from":136,"to":141}}}}],["c917e777-0284-455e-897d-e3ea24cd5de7",{"pageContent":"---\nid: intro\ntitle: \"Installation\"\n---\n\n## Introduction\n\nPlaywright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.\n\n**You will learn**\n\n- [How to install Playwright](/intro.md#installing-playwright)\n- [What's Installed](/intro.md#whats-installed)\n- [How to run the example test](/intro.md#running-the-example-test)\n- [How to open the HTML test report](/intro.md#html-test-reports)\n\n\n## Installing Playwright\n\nGet started by installing Playwright using npm, yarn or pnpm. Alternatively you can also get started and run your tests using the [VS Code Extension](./getting-started-vscode.md).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":1,"to":20}}}}],["c7925367-180a-4f65-8592-bab8e903d60a",{"pageContent":"Get started by installing Playwright using npm, yarn or pnpm. Alternatively you can also get started and run your tests using the [VS Code Extension](./getting-started-vscode.md).\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpm init playwright@latest\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn create playwright\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm create playwright\n```\n\n</TabItem>\n\n</Tabs>\n\n\nRun the install command and select the following to get started:\n - Choose between TypeScript or JavaScript (default is TypeScript)\n - Name of your Tests folder (default is tests or e2e if you already have a tests folder in your project)\n - Add a GitHub Actions workflow to easily run tests on CI\n - Install Playwright browsers (default is true)\n\n## What's Installed","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":20,"to":64}}}}],["f04b7ad5-e69b-4473-bcb6-d53711647939",{"pageContent":"## What's Installed\n\nPlaywright will download the browsers needed as well as create the following files.\n\n```bash\nplaywright.config.ts\npackage.json\npackage-lock.json\ntests/\n  example.spec.ts\ntests-examples/\n  demo-todo-app.spec.ts\n```\n\nThe [playwright.config](./test-configuration.md) is where you can add configuration for Playwright including modifying which browsers you would like to run Playwright on. If you are running tests inside an already existing project then dependencies will be added directly to your `package.json`.\n\nThe `tests` folder contains a basic example test to help you get started with testing. For a more detailed example check out the `tests-examples` folder which contains tests written to test a todo app.\n\n## Running the Example Test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":64,"to":82}}}}],["d2a5a178-5952-40b6-b214-b6b546b915a9",{"pageContent":"## Running the Example Test\n\nBy default tests will be run on all 3 browsers, Chromium, Firefox and WebKit using several workers. This can be configured in the [playwright.config file](./test-configuration.md). Tests are run in headless mode meaning no browser will open up when running the tests. Results of the tests and test logs will be shown in the terminal.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright test\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test\n```\n\n</TabItem>\n\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":82,"to":119}}}}],["bc703277-2e60-4bc4-8d83-38ae3fad789a",{"pageContent":"```bash\nnpx playwright test\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test\n```\n\n</TabItem>\n\n</Tabs>\n\n![tests running in command line](https://github.com/microsoft/playwright/assets/13063165/981c1b2b-dc7e-4b85-b241-272b44da6628)\nSee our doc on [Running Tests](./running-tests.md) to learn more about running tests in headed mode, running multiple tests, running specific tests etc.\n\n## HTML Test Reports\n\nAfter your test completes, an [HTML Reporter](./test-reporters.md#html-reporter) will be generated, which shows you a full report of your tests allowing you to filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests. You can click on each test and explore the test's errors as well as each step of the test. By default, the HTML report is opened automatically if some of the tests failed.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":97,"to":126}}}}],["d94e6112-fdc5-402d-947c-88d4e57ea5e1",{"pageContent":"<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright show-report\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright show-report\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright show-report\n```\n\n</TabItem>\n\n</Tabs>\n\n![HTML Report](https://github.com/microsoft/playwright/assets/13063165/38ec17a7-9e61-4002-b137-a93812765501)\n\n## Running the Example Test in UI Mode\n\nRun your tests with [UI Mode](./test-ui-mode.md) for a better developer experience with time travel debugging, watch mode and more.\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright test --ui\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":128,"to":187}}}}],["916ac027-8410-413e-965d-09d17ff3df3a",{"pageContent":"<TabItem value=\"npm\">\n\n```bash\nnpx playwright test --ui\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright test --ui\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright test --ui\n```\n\n</TabItem>\n\n</Tabs>\n\n![UI Mode](https://github.com/microsoft/playwright/assets/13063165/c5b501cc-4f5d-485a-87cc-66044c651786)\n\nCheck out or [detailed guide on UI Mode](./test-ui-mode.md) to learn more about its features.\n\n## Updating Playwright\n\nTo update Playwright to the latest version run the following command:\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n\n<TabItem value=\"npm\">\n\n```bash\nnpm install -D @playwright/test@latest\n# Also download new browser binaries and their dependencies:\nnpx playwright install --with-deps\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":179,"to":233}}}}],["39e881f6-d5ca-4f0f-8973-7b6708259945",{"pageContent":"```bash\nnpm install -D @playwright/test@latest\n# Also download new browser binaries and their dependencies:\nnpx playwright install --with-deps\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn add --dev @playwright/test@latest\n# Also download new browser binaries and their dependencies:\nyarn playwright install --with-deps\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm install --save-dev @playwright/test@latest\n# Also download new browser binaries and their dependencies:\npnpm exec playwright install --with-deps\n```\n\n</TabItem>\n\n</Tabs>\n\nYou can always check which version of Playwright you have by running the following command:\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'}\n  ]\n}>\n\n<TabItem value=\"npm\">\n\n```bash\nnpx playwright --version\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright --version\n```\n\n</TabItem>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":225,"to":281}}}}],["cb881169-bd68-4242-a995-2746c961f17f",{"pageContent":"<TabItem value=\"npm\">\n\n```bash\nnpx playwright --version\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn playwright --version\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm exec playwright --version\n```\n\n</TabItem>\n\n</Tabs>\n\n## System requirements\n\n- Latest version of Node.js 18, 20 or 22.\n- Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL).\n- macOS 14 Ventura, or later.\n- Debian 12, Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture.\n\n## What's next\n\n- [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-js.md","title":"src-intro-js","url":"https://playwright.dev/docs/src-intro-js","loc":{"lines":{"from":267,"to":305}}}}],["6f5599e2-563d-4304-99fa-ed581bdbcea9",{"pageContent":"---\nid: intro\ntitle: \"Installation\"\n---\n## Introduction\n\nPlaywright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.\n\nThe [Playwright library](./library.md) can be used as a general purpose browser automation tool, providing a powerful set of APIs to automate web applications, for both sync and async Python.\n\nThis introduction describes the Playwright Pytest plugin, which is the recommended way to write end-to-end tests.\n\n**You will learn**\n\n- [How to install Playwright Pytest](/intro.md#installing-playwright-pytest)\n- [How to run the example test](/intro.md#running-the-example-test)\n\n## Installing Playwright Pytest","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-python.md","title":"src-intro-python","url":"https://playwright.dev/docs/src-intro-python","loc":{"lines":{"from":1,"to":18}}}}],["f30a8dfe-5a82-4f12-98e9-020385e45ce1",{"pageContent":"**You will learn**\n\n- [How to install Playwright Pytest](/intro.md#installing-playwright-pytest)\n- [How to run the example test](/intro.md#running-the-example-test)\n\n## Installing Playwright Pytest\n\nPlaywright recommends using the official [Playwright Pytest plugin](./test-runners.md) to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box.\n\nGet started by installing Playwright and running the example test to see it in action.\n\n<Tabs\n  groupId=\"package-managers\"\n  defaultValue=\"pypi\"\n  values={[\n    {label: 'PyPI', value: 'pypi'},\n    {label: 'Anaconda', value: 'anaconda'}\n  ]\n}>\n<TabItem value=\"pypi\">\n\nInstall the [Pytest plugin](https://pypi.org/project/pytest-playwright/):\n\n```bash\npip install pytest-playwright\n```\n\n</TabItem>\n<TabItem value=\"anaconda\">\n\nInstall the [Pytest plugin](https://anaconda.org/Microsoft/pytest-playwright):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-python.md","title":"src-intro-python","url":"https://playwright.dev/docs/src-intro-python","loc":{"lines":{"from":13,"to":43}}}}],["ca1cf691-24df-40f3-88c8-649d38a0f39d",{"pageContent":"```bash\npip install pytest-playwright\n```\n\n</TabItem>\n<TabItem value=\"anaconda\">\n\nInstall the [Pytest plugin](https://anaconda.org/Microsoft/pytest-playwright):\n\n```bash\nconda config --add channels conda-forge\nconda config --add channels microsoft\nconda install pytest-playwright\n```\n\n</TabItem>\n</Tabs>\n\nInstall the required browsers:\n\n```bash\nplaywright install\n```\n\n## Add Example Test\n\nCreate a file that follows the `test_` prefix convention, such as `test_example.py`, inside the current working directory or in a sub-directory with the code below. Make sure your test name also follows the `test_` prefix convention.\n\n```py title=\"test_example.py\"\nimport re\nfrom playwright.sync_api import Page, expect\n\ndef test_has_title(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-python.md","title":"src-intro-python","url":"https://playwright.dev/docs/src-intro-python","loc":{"lines":{"from":36,"to":75}}}}],["661311bf-dd6a-45fa-bea0-ef185b9af317",{"pageContent":"# Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Click the get started link.\n    page.get_by_role(\"link\", name=\"Get started\").click()\n\n    # Expects page to have a heading with the name of Installation.\n    expect(page.get_by_role(\"heading\", name=\"Installation\")).to_be_visible()\n```\n\n## Running the Example Test\n\nBy default tests will be run on chromium. This can be configured via the [CLI options](./running-tests.md). Tests are run in headless mode meaning no browser UI will open up when running the tests. Results of the tests and test logs will be shown in the terminal.\n\n```bash\npytest\n```\n\n## Updating Playwright\n\nTo update Playwright to the latest version run the following command:\n\n```bash\npip install pytest-playwright playwright -U\n```\n\n## System requirements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-python.md","title":"src-intro-python","url":"https://playwright.dev/docs/src-intro-python","loc":{"lines":{"from":71,"to":100}}}}],["cff7ea3a-1bdc-44c6-8d54-ae6f285d5324",{"pageContent":"```bash\npytest\n```\n\n## Updating Playwright\n\nTo update Playwright to the latest version run the following command:\n\n```bash\npip install pytest-playwright playwright -U\n```\n\n## System requirements\n\n- Python 3.8 or higher.\n- Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL).\n- macOS 14 Ventura, or later.\n- Debian 12, Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture.\n\n## What's next\n\n- [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen.md)\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-intro-python.md","title":"src-intro-python","url":"https://playwright.dev/docs/src-intro-python","loc":{"lines":{"from":88,"to":112}}}}],["e987867b-d375-4665-a938-70640ce2e1ac",{"pageContent":"---\nid: junit\ntitle: \"JUnit (experimental)\"\n---\n\n## Introduction\n\nWith a few lines of code, you can hook up Playwright to your favorite Java test runner.\n\nIn [JUnit](https://junit.org/junit5/), you can use Playwright [fixtures](./junit.md#fixtures) to automatically initialize [Playwright], [Browser], [BrowserContext] or [Page]. In the example below, all three test methods use the same\n[Browser]. Each test uses its own [BrowserContext] and [Page].\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.junit.UsePlaywright;\nimport org.junit.jupiter.api.Test;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":1,"to":21}}}}],["91f5f8ce-3e5d-4a70-b08a-a6692196ab6f",{"pageContent":"import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@UsePlaywright\npublic class TestExample {\n  @Test\n  void shouldClickButton(Page page) {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":20,"to":37}}}}],["03faee40-4a67-4dd5-b5dd-77ab9b12c88d",{"pageContent":"@Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}\n```\n\n## Fixtures\n\nSimply add JUnit annotation `@UsePlaywright` to your test classes to enable Playwright fixtures. Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else.\n\n```java\n@UsePlaywright\npublic class TestExample {\n\n  @Test\n  void basicTest(Page page) {\n    page.navigate(\"https://playwright.dev/\");\n\n    assertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n  }\n}\n```\n\nThe `Page page` argument tells JUnit to setup the `page` fixture and provide it to your test method.\n\nHere is a list of the pre-defined fixtures:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":39,"to":69}}}}],["aff0e1ed-c400-4013-bd6c-e5f69b9df1e6",{"pageContent":"The `Page page` argument tells JUnit to setup the `page` fixture and provide it to your test method.\n\nHere is a list of the pre-defined fixtures:\n\n|Fixture       |Type               |Description                      |\n|:-------------|:------------------|:--------------------------------|\n|page          |[Page]             |Isolated page for this test run.|\n|browserContext|[BrowserContext]   |Isolated context for this test run. The `page` fixture belongs to this context as well.|\n|browser       |[Browser]          |Browsers are shared across tests to optimize resources.|\n|playwright    |[Playwright]       |Playwright instance is shared between tests running on the same thread.|\n|request       |[APIRequestContext]|Isolated APIRequestContext for this test run. Learn how to do [API testing](./api-testing).|\n\n## Customizing options\n\nTo customize fixture options, you should implement an `OptionsFactory` and specify the class in the `@UsePlaywright()` annotation.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":67,"to":81}}}}],["74c4a06a-f82f-4c7c-bff1-3d192a462d8b",{"pageContent":"## Customizing options\n\nTo customize fixture options, you should implement an `OptionsFactory` and specify the class in the `@UsePlaywright()` annotation.\n\nYou can easily override launch options for [`method: BrowserType.launch`], or context options for [`method: Browser.newContext`] and [`method: APIRequest.newContext`]. See the following example:\n\n```java\nimport com.microsoft.playwright.junit.Options;\nimport com.microsoft.playwright.junit.OptionsFactory;\nimport com.microsoft.playwright.junit.UsePlaywright;\n\n@UsePlaywright(MyTest.CustomOptions.class)\npublic class MyTest {\n\n  public static class CustomOptions implements OptionsFactory {\n    @Override\n    public Options getOptions() {\n      return new Options()\n          .setHeadless(false)\n          .setContextOption(new Browser.NewContextOptions()\n              .setBaseURL(\"https://github.com\"))\n          .setApiRequestOptions(new APIRequest.NewContextOptions()\n              .setBaseURL(\"https://playwright.dev\"));\n    }\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":79,"to":103}}}}],["35f19220-7573-4c1d-9020-5ffef2b76904",{"pageContent":"@Test\n  public void testWithCustomOptions(Page page, APIRequestContext request) {\n    page.navigate(\"/\");\n    assertThat(page).hasURL(Pattern.compile(\"github\"));\n\n    APIResponse response = request.get(\"/\");\n    assertTrue(response.text().contains(\"Playwright\"));\n  }\n}\n```\n\n## Running Tests in Parallel\n\nBy default JUnit will run all tests sequentially on a single thread. Since JUnit 5.3 you can change this behavior to run tests in parallel\nto speed up execution (see [this page](https://junit.org/junit5/docs/snapshot/user-guide/index.html#writing-tests-parallel-execution)).\nSince it is not safe to use same Playwright objects from multiple threads without extra synchronization we recommend you create Playwright\ninstance per thread and use it on that thread exclusively. Here is an example how to run multiple test classes in parallel.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":105,"to":121}}}}],["0cd26492-db1e-42d8-aa1a-e88e65bd9968",{"pageContent":"```java\n@UsePlaywright\nclass Test1 {\n  @Test\n  void shouldClickButton(Page page) {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":123,"to":148}}}}],["05ffa2aa-77b6-4258-8e83-3efe7e2e1dc8",{"pageContent":"@UsePlaywright\nclass Test2 {\n  @Test\n  void shouldReturnInnerHTML(Page page) {\n    page.setContent(\"<div>hello</div>\");\n    assertEquals(\"hello\", page.innerHTML(\"css=div\"));\n  }\n\n  @Test\n  void shouldClickButton(Page page) {\n    Page popup = page.waitForPopup(() -> {\n      page.evaluate(\"window.open('about:blank');\");\n    });\n    assertEquals(\"about:blank\", popup.url());\n  }\n}\n```\n\n\nConfigure JUnit to run tests in each class sequentially and run multiple classes on parallel threads (with max\nnumber of thread equal to 1/2 of the number of CPU cores):\n\n```bash\njunit.jupiter.execution.parallel.enabled = true\njunit.jupiter.execution.parallel.mode.default = same_thread\njunit.jupiter.execution.parallel.mode.classes.default = concurrent\njunit.jupiter.execution.parallel.config.strategy=dynamic\njunit.jupiter.execution.parallel.config.dynamic.factor=0.5\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-junit-java.md","title":"src-junit-java","url":"https://playwright.dev/docs/src-junit-java","loc":{"lines":{"from":150,"to":178}}}}],["c0a8f388-058b-49fd-9888-39319567fdf2",{"pageContent":"---\nid: languages\ntitle: \"Supported languages\"\n---\n\n## Introduction\n\nPlaywright is available in multiple languages that share the same underlying implementation. All core features for automating the browser are supported in all languages, while testing ecosystem integration is different. Pick the language based on your experience, familiarity with its testing ecosystem and your project constraints. For the best experience pick the test runner that we recommend for each language.\n\n## JavaScript and TypeScript\n\nPlaywright for Node.js comes with its own [test runner](https://playwright.dev/docs/running-tests) that provides great parallelization mechanism, screenshot assertions, html reporter, automatic tracing etc.\n\n* [Documentation](https://playwright.dev/docs/intro)\n* [GitHub repo](https://github.com/microsoft/playwright)\n\n## Python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-languages.md","title":"src-languages","url":"https://playwright.dev/docs/src-languages","loc":{"lines":{"from":1,"to":17}}}}],["d1163ad8-f318-4a4e-abdb-37bc2e640c13",{"pageContent":"* [Documentation](https://playwright.dev/docs/intro)\n* [GitHub repo](https://github.com/microsoft/playwright)\n\n## Python\n\nPlaywright [Pytest plugin](https://playwright.dev/python/docs/test-runners) is the recommended way to run end-to-end tests. It provides context isolation, running it on multiple browser configurations and more out of the box.\n\n* [Documentation](https://playwright.dev/python/docs/intro)\n* [GitHub repo](https://github.com/microsoft/playwright-python)\n\n## Java\n\nYou can choose any testing framework such as JUnit or TestNG based on your project requirements.\n\n* [Documentation](https://playwright.dev/java/docs/intro)\n* [GitHub repo](https://github.com/microsoft/playwright-java)\n\n## .NET\n\nPlaywright for .NET comes with MSTest, NUnit, and xUnit [base classes](https://playwright.dev/dotnet/docs/test-runners) for writing end-to-end tests.\n\n* [Documentation](https://playwright.dev/dotnet/docs/intro)\n* [GitHub repo](https://github.com/microsoft/playwright-dotnet)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-languages.md","title":"src-languages","url":"https://playwright.dev/docs/src-languages","loc":{"lines":{"from":14,"to":36}}}}],["9aaa6492-d6ee-4b65-a85a-890a92b9ecb7",{"pageContent":"---\nid: library\ntitle: \"Getting started - Library\"\n---\n\n## Introduction\n\nPlaywright can either be used with the [MSTest, NUnit, or xUnit base classes](./test-runners.md) or as a Playwright Library (this guide). If you are working on an application that utilizes Playwright capabilities or you are using Playwright with another test runner, read on.\n\n## Usage\n\nCreate a console project and add the Playwright dependency.\n\n```bash\n# Create project\ndotnet new console -n PlaywrightDemo\ncd PlaywrightDemo\n\n# Add project dependency\ndotnet add package Microsoft.Playwright\n# Build the project\ndotnet build\n# Install required browsers - replace netX with actual output folder name, e.g. net8.0.\npwsh bin/Debug/netX/playwright.ps1 install\n\n# If the pwsh command does not work (throws TypeNotFound), make sure to use an up-to-date version of PowerShell.\ndotnet tool update --global PowerShell\n```\n\nCreate a `Program.cs` that will navigate to `https://playwright.dev/dotnet` and take a screenshot in Chromium.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-csharp.md","title":"src-library-csharp","url":"https://playwright.dev/docs/src-library-csharp","loc":{"lines":{"from":1,"to":30}}}}],["4fe6b710-1416-44b9-8917-7fb3230c4399",{"pageContent":"Create a `Program.cs` that will navigate to `https://playwright.dev/dotnet` and take a screenshot in Chromium.\n\n```csharp\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev/dotnet\");\nawait page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\"\n});\n```\n\nNow run it.\n\n```bash\ndotnet run\n```\n\nBy default, Playwright runs the browsers in headless mode. To see the browser UI, set [`option: BrowserType.launch.headless`] option to `false`. You can also use [`option: BrowserType.launch.slowMo`] to slow down execution. Learn more in the debugging tools [section](./debug.md).\n\n```csharp\nawait using var browser = await playwright.Firefox.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 50,\n});\n```\n\n## Using Assertions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-csharp.md","title":"src-library-csharp","url":"https://playwright.dev/docs/src-library-csharp","loc":{"lines":{"from":30,"to":61}}}}],["1ad2724c-e5c7-42cf-9e51-5b57b447c1bb",{"pageContent":"```csharp\nawait using var browser = await playwright.Firefox.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 50,\n});\n```\n\n## Using Assertions\n\nYou can do the following to leverage Playwright's web-first assertions when you are using your own test framework. These will automatically retry until the condition is met, e.g. an element has a certain text or the timeout is reached:\n\n```csharp\nusing Microsoft.Playwright;\nusing static Microsoft.Playwright.Assertions;\n\n// Change the default 5 seconds timeout if you'd like.\nSetDefaultExpectTimeout(10_000);\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev/dotnet\");\nawait Expect(page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" })).ToBeVisibleAsync();\n```\n\n## Bundle drivers for different platforms","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-csharp.md","title":"src-library-csharp","url":"https://playwright.dev/docs/src-library-csharp","loc":{"lines":{"from":53,"to":79}}}}],["3e8ad52b-92e9-4525-96a7-d4444bb09bd1",{"pageContent":"## Bundle drivers for different platforms\n\nPlaywright by default does bundle only the driver for the .NET publish target runtime. If you want to bundle for additional platforms, you can\noverride this behavior by using either `all`, `none` or `linux`, `win`, `osx` in your project file.\n\n```xml\n<PropertyGroup>\n  <PlaywrightPlatform>all</PlaywrightPlatform>\n</PropertyGroup>\n```\n\nor:\n\n```xml\n<PropertyGroup>\n  <PlaywrightPlatform>osx;linux</PlaywrightPlatform>\n</PropertyGroup>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-csharp.md","title":"src-library-csharp","url":"https://playwright.dev/docs/src-library-csharp","loc":{"lines":{"from":79,"to":96}}}}],["d8083f10-80b1-4a4f-b5f7-18155a0ef635",{"pageContent":"---\nid: library\ntitle: \"Library\"\n---\n\n## Introduction\n\nPlaywright Library provides unified APIs for launching and interacting with browsers, while Playwright Test provides all this plus a fully managed end-to-end Test Runner and experience.\n\nUnder most circumstances, for end-to-end testing, you'll want to use `@playwright/test` (Playwright Test), and not `playwright` (Playwright Library) directly. To get started with Playwright Test, follow the [Getting Started Guide](./intro.md).\n\n## Differences when using library\n\n### Library Example\n\nThe following is an example of using the Playwright Library directly to launch Chromium, go to a page, and check its title:\n\n\n```js tab=js-ts\nimport { chromium, devices } from 'playwright';\nimport assert from 'node:assert';\n\n(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":1,"to":27}}}}],["823dab51-ba51-4c88-b657-41492ed63c37",{"pageContent":"(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();\n\n  // The actual interesting bit\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion\n\n  // Teardown\n  await context.close();\n  await browser.close();\n})();\n```\n\n```js tab=js-js\nconst assert = require('node:assert');\nconst { chromium, devices } = require('playwright');\n\n(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();\n\n  // The actual interesting bit\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":23,"to":55}}}}],["82c0fe1b-581b-4d96-8269-fd75afc54dca",{"pageContent":"assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion\n\n  // Teardown\n  await context.close();\n  await browser.close();\n})();\n```\n\nRun it with `node my-script.js`.\n\n### Test Example\n\nA test to achieve similar behavior, would look like:\n\n```js tab=js-ts\nimport { expect, test, devices } from '@playwright/test';\n\ntest.use(devices['iPhone 11']);\n\ntest('should be titled', async ({ page, context }) => {\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  await expect(page).toHaveTitle('Example');\n});\n```\n\n```js tab=js-js\nconst { expect, test, devices } = require('@playwright/test');\n\ntest.use(devices['iPhone 11']);\n\ntest('should be titled', async ({ page, context }) => {\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  await expect(page).toHaveTitle('Example');\n});\n```\n\nRun it with `npx playwright test`.\n\n### Key Differences","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":55,"to":97}}}}],["bf97f4f5-8ad8-4ef0-8c24-070bc0fd487b",{"pageContent":"await expect(page).toHaveTitle('Example');\n});\n```\n\nRun it with `npx playwright test`.\n\n### Key Differences\n\nThe key differences to note are as follows:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":91,"to":99}}}}],["d76bab6f-4549-474c-9fea-9d0ad39f8000",{"pageContent":"| | Library | Test |\n| - | - | - |\n| Installation | `npm install playwright` | `npm init playwright@latest` - note `install` vs. `init` |\n| Install browsers | Install `@playwright/browser-chromium`, `@playwright/browser-firefox` and/or `@playwright/browser-webkit` | `npx playwright install` or `npx playwright install chromium` for a single one |\n| `import` from | `playwright` | `@playwright/test` |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":101,"to":105}}}}],["e68efed6-4a8a-4fea-b906-b4116d7e0727",{"pageContent":"| `import` from | `playwright` | `@playwright/test` |\n| Initialization | Explicitly need to: <ol><li>Pick a browser to use, e.g. `chromium`</li><li>Launch browser with [`method: BrowserType.launch`]</li><li>Create a context with [`method: Browser.newContext`], <em>and</em> pass any context options explicitly, e.g. `devices['iPhone 11']`</li><li>Create a page with [`method: BrowserContext.newPage`]</li></ol> | An isolated `page` and `context` are provided to each test out-of the box, along with other [built-in fixtures](./test-fixtures.md#built-in-fixtures). No explicit creation. If referenced by the test in its arguments, the Test Runner will create them for the test. (i.e. lazy-initialization) |\n| Assertions | No built-in Web-First Assertions | [Web-First assertions](./test-assertions.md) like: <ul><li>[`method: PageAssertions.toHaveTitle`]</li><li>[`method: PageAssertions.toHaveScreenshot#1`]</li></ul> which auto-wait and retry for the condition to be met.|","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":105,"to":107}}}}],["5a9efd1a-cac9-4f7f-a6a7-0b274d6767f1",{"pageContent":"| Timeouts | Defaults to 30s for most operations. | Most operations don't time out, but every test has a timeout that makes it fail (30s by default). |\n| Cleanup | Explicitly need to: <ol><li>Close context with [`method: BrowserContext.close`]</li><li>Close browser with [`method: Browser.close`]</li></ol> | No explicit close of [built-in fixtures](./test-fixtures.md#built-in-fixtures); the Test Runner will take care of it.\n| Running | When using the Library, you run the code as a node script, possibly with some compilation first. | When using the Test Runner, you use the `npx playwright test` command. Along with your [config](./test-configuration.md), the Test Runner handles any compilation and choosing what to run and how to run it. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":108,"to":110}}}}],["1f730fb7-5b13-4a11-a3a7-8d008d5fbd49",{"pageContent":"In addition to the above, Playwright Test, as a full-featured Test Runner, includes:\n\n- [Configuration Matrix and Projects](./test-configuration.md): In the above example, in the Playwright Library version, if we wanted to run with a different device or browser, we'd have to modify the script and plumb the information through. With Playwright Test, we can just specify the [matrix of configurations](./test-configuration.md) in one place, and it will create run the one test under each of these configurations.\n- [Parallelization](./test-parallel.md)\n- [Web-First Assertions](./test-assertions.md)\n- [Reporting](./test-reporters.md)\n- [Retries](./test-retries.md)\n- [Easily Enabled Tracing](./trace-viewer-intro.md)\n- and more…\n\n## Usage\n\nUse npm or Yarn to install Playwright library in your Node.js project. See [system requirements](./intro.md#system-requirements).\n\n```bash\nnpm i -D playwright\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":112,"to":128}}}}],["d471fef3-72dc-49aa-8948-9581bfc36053",{"pageContent":"## Usage\n\nUse npm or Yarn to install Playwright library in your Node.js project. See [system requirements](./intro.md#system-requirements).\n\n```bash\nnpm i -D playwright\n```\n\nYou will also need to install browsers - either manually or by adding a package that will do it for you automatically.\n\n```bash\n# Download the Chromium, Firefox and WebKit browser\nnpx playwright install chromium firefox webkit\n\n# Alternatively, add packages that will download a browser upon npm install\nnpm i -D @playwright/browser-chromium @playwright/browser-firefox @playwright/browser-webkit\n```\n\nSee [managing browsers](./browsers.md#managing-browser-binaries) for more options.\n\nOnce installed, you can import Playwright in a Node.js script, and launch any of the 3 browsers (`chromium`, `firefox` and `webkit`).\n\n```js\nconst { chromium } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();\n  // Create pages, interact with UI elements, assert values\n  await browser.close();\n})();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":122,"to":152}}}}],["08b12942-9039-417d-9989-900627175338",{"pageContent":"(async () => {\n  const browser = await chromium.launch();\n  // Create pages, interact with UI elements, assert values\n  await browser.close();\n})();\n```\n\nPlaywright APIs are asynchronous and return Promise objects. Our code examples use [the async/await pattern](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await) to ease readability. The code is wrapped in an unnamed async arrow function which is invoking itself.\n\n```js\n(async () => { // Start of async arrow function\n  // Function code\n  // ...\n})(); // End of the function and () to invoke itself\n```\n\n## First script\n\nIn our first script, we will navigate to `https://playwright.dev/` and take a screenshot in WebKit.\n\n```js\nconst { webkit } = require('playwright');\n\n(async () => {\n  const browser = await webkit.launch();\n  const page = await browser.newPage();\n  await page.goto('https://playwright.dev/');\n  await page.screenshot({ path: `example.png` });\n  await browser.close();\n})();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":147,"to":177}}}}],["72ff955d-ea1e-4f12-bcfd-0b36bc11e5cd",{"pageContent":"By default, Playwright runs the browsers in headless mode. To see the browser UI, pass the `headless: false` flag while launching the browser. You can also use `slowMo` to slow down execution. Learn more in the debugging tools [section](./debug.md).\n\n```js\nfirefox.launch({ headless: false, slowMo: 50 });\n```\n\n## Record scripts\n\n[Command line tools](./test-cli.md) can be used to record user interactions and generate JavaScript code.\n\n```bash\nnpx playwright codegen wikipedia.org\n```\n\n## Browser downloads\n\nTo download Playwright browsers run:\n\n```bash\n# Explicitly download browsers\nnpx playwright install\n```\n\nAlternatively, you can add `@playwright/browser-chromium`, `@playwright/browser-firefox` and `@playwright/browser-webkit` packages to automatically download the respective browser during the package installation.\n\n```bash\n# Use a helper package that downloads a browser on npm install\nnpm install @playwright/browser-chromium\n```\n\n**Download behind a firewall or a proxy**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":179,"to":209}}}}],["a7309c09-7ab2-4af1-b5ba-bd33ba4c59e3",{"pageContent":"```bash\n# Use a helper package that downloads a browser on npm install\nnpm install @playwright/browser-chromium\n```\n\n**Download behind a firewall or a proxy**\n\nPass `HTTPS_PROXY` environment variable to download through a proxy.\n\n```bash tab=bash-bash lang=js\n# Manual\nHTTPS_PROXY=https://192.0.2.1 npx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nHTTPS_PROXY=https://192.0.2.1 npm install\n```\n\n```batch tab=bash-batch lang=js\n# Manual\nset HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset HTTPS_PROXY=https://192.0.2.1\nnpm install\n```\n\n```powershell tab=bash-powershell lang=js\n# Manual\n$Env:HTTPS_PROXY=https://192.0.2.1\nnpx playwright install","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":204,"to":236}}}}],["80fd7e7f-cd1b-4cae-9931-7a02fd85e36f",{"pageContent":"```powershell tab=bash-powershell lang=js\n# Manual\n$Env:HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:HTTPS_PROXY=https://192.0.2.1\nnpm install\n```\n\n**Download from artifact repository**\n\nBy default, Playwright downloads browsers from Microsoft's CDN. Pass `PLAYWRIGHT_DOWNLOAD_HOST` environment variable to download from an internal artifacts repository instead.\n\n```bash tab=bash-bash lang=js\n# Manual\nPLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1 npx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nPLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1 npm install\n```\n\n```batch tab=bash-batch lang=js\n# Manual\nset PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":233,"to":260}}}}],["93a10f49-7ecd-4a0f-9596-acfdd4243772",{"pageContent":"```batch tab=bash-batch lang=js\n# Manual\nset PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpm install\n```\n\n```powershell tab=bash-powershell lang=js\n# Manual\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpm install\n```\n\n**Skip browser download**\n\nIn certain cases, it is desired to avoid browser downloads altogether because browser binaries are managed separately. This can be done by setting `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` variable before installing packages.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":257,"to":281}}}}],["26a11961-4da7-4ff8-9993-280010ab4f77",{"pageContent":"```bash tab=bash-bash lang=js\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm install\n```\n\n```batch tab=bash-batch lang=js\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n```powershell tab=bash-powershell lang=js\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n## TypeScript support\n\nPlaywright includes built-in support for TypeScript. Type definitions will be imported automatically. It is recommended to use type-checking to improve the IDE experience.\n\n### In JavaScript\nAdd the following to the top of your JavaScript file to get type-checking in VS Code or WebStorm.\n\n```js\n// @ts-check\n// ...\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":283,"to":313}}}}],["1f06f9c3-d4ed-42a6-9691-06b7cdf8312d",{"pageContent":"### In JavaScript\nAdd the following to the top of your JavaScript file to get type-checking in VS Code or WebStorm.\n\n```js\n// @ts-check\n// ...\n```\n\nAlternatively, you can use JSDoc to set types for variables.\n\n```js\n/** @type {import('playwright').Page} */\nlet page;\n```\n\n### In TypeScript\nTypeScript support will work out-of-the-box. Types can also be imported explicitly.\n\n```js\nlet page: import('playwright').Page;\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-js.md","title":"src-library-js","url":"https://playwright.dev/docs/src-library-js","loc":{"lines":{"from":307,"to":327}}}}],["056a3adc-bb67-438d-a7d2-b55eefe6ceb8",{"pageContent":"---\nid: library\ntitle: \"Getting started - Library\"\n---\n\n## Installation\n\n### Pip\n\n[![PyPI version](https://badge.fury.io/py/playwright.svg)](https://pypi.python.org/pypi/playwright/)\n\n```bash\npip install --upgrade pip\npip install playwright\nplaywright install\n```\n\n### Conda\n\n[![Anaconda version](https://img.shields.io/conda/v/microsoft/playwright)](https://anaconda.org/Microsoft/playwright)\n\n```bash\nconda config --add channels conda-forge\nconda config --add channels microsoft\nconda install playwright\nplaywright install\n```\n\nThese commands download the Playwright package and install browser binaries for Chromium, Firefox and WebKit. To modify this behavior see [installation parameters](./browsers.md#install-browsers).\n\n## Usage\n\nOnce installed, you can `import` Playwright in a Python script, and launch any of the 3 browsers (`chromium`, `firefox` and `webkit`).\n\n```py\nfrom playwright.sync_api import sync_playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":1,"to":36}}}}],["9ee8b484-8d86-4b5f-952e-f0576d5c1850",{"pageContent":"Once installed, you can `import` Playwright in a Python script, and launch any of the 3 browsers (`chromium`, `firefox` and `webkit`).\n\n```py\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev\")\n    print(page.title())\n    browser.close()\n```\n\nPlaywright supports two variations of the API: synchronous and asynchronous. If your modern project uses [asyncio](https://docs.python.org/3/library/asyncio.html), you should use async API:\n\n```py\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n        await page.goto(\"https://playwright.dev\")\n        print(await page.title())\n        await browser.close()\n\nasyncio.run(main())\n```\n\n## First script","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":33,"to":63}}}}],["dd262392-ea15-48e0-813c-80072d546fa5",{"pageContent":"asyncio.run(main())\n```\n\n## First script\n\nIn our first script, we will navigate to `https://playwright.dev/` and take a screenshot in WebKit.\n\n```py\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.webkit.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev/\")\n    page.screenshot(path=\"example.png\")\n    browser.close()\n```\n\nBy default, Playwright runs the browsers in headless mode. To see the browser UI, set [`option: BrowserType.launch.headless`] option to `False`. You can also use [`option: BrowserType.launch.slowMo`] to slow down execution. Learn more in the debugging tools [section](./debug.md).\n\n```py\nfirefox.launch(headless=False, slow_mo=50)\n```\n\n## Interactive mode (REPL)\n\nYou can launch the interactive python REPL:\n\n```bash\npython\n```\n\nand then launch Playwright within it for quick experimentation:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":60,"to":92}}}}],["1fd209dd-c637-4385-b1a6-11da7f5cc241",{"pageContent":"## Interactive mode (REPL)\n\nYou can launch the interactive python REPL:\n\n```bash\npython\n```\n\nand then launch Playwright within it for quick experimentation:\n\n```py\nfrom playwright.sync_api import sync_playwright\nplaywright = sync_playwright().start()\n# Use playwright.chromium, playwright.firefox or playwright.webkit\n# Pass headless=False to launch() to see the browser UI\nbrowser = playwright.chromium.launch()\npage = browser.new_page()\npage.goto(\"https://playwright.dev/\")\npage.screenshot(path=\"example.png\")\nbrowser.close()\nplaywright.stop()\n```\n\nAsync REPL such as `asyncio` REPL:\n\n```bash\npython -m asyncio\n```\n\n```py\nfrom playwright.async_api import async_playwright\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch()\npage = await browser.new_page()\nawait page.goto(\"https://playwright.dev/\")\nawait page.screenshot(path=\"example.png\")\nawait browser.close()\nawait playwright.stop()\n```\n\n## Pyinstaller","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":84,"to":124}}}}],["b1eea9a0-384c-44bb-a164-ac623e2484a0",{"pageContent":"## Pyinstaller\n\nYou can use Playwright with [Pyinstaller](https://www.pyinstaller.org/) to create standalone executables.\n\n```py title=\"main.py\"\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev/\")\n    page.screenshot(path=\"example.png\")\n    browser.close()\n```\n\nIf you want to bundle browsers with the executables:\n\n```bash tab=bash-bash\nPLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium\npyinstaller -F main.py\n```\n\n```batch tab=bash-batch\nset PLAYWRIGHT_BROWSERS_PATH=0\nplaywright install chromium\npyinstaller -F main.py\n```\n\n```powershell tab=bash-powershell\n$env:PLAYWRIGHT_BROWSERS_PATH=\"0\"\nplaywright install chromium\npyinstaller -F main.py\n```\n\n:::note\nBundling the browsers with the executables will generate bigger binaries.\nIt is recommended to only bundle the browsers you use.\n:::\n\n## Known issues\n\n### `time.sleep()` leads to outdated state","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":124,"to":165}}}}],["2ee746f6-14c9-4d72-b791-cc2455883bcd",{"pageContent":"## Known issues\n\n### `time.sleep()` leads to outdated state\n\nMost likely you don't need to wait manually, since Playwright has [auto-waiting](./actionability.md). If you still rely on it, you should use `page.wait_for_timeout(5000)` instead of `time.sleep(5)` and it is better to not wait for a timeout at all, but sometimes it is useful for debugging. In these cases, use our wait (`wait_for_timeout`) method instead of the `time` module. This is because we internally rely on asynchronous operations and when using `time.sleep(5)` they can't get processed correctly.\n\n\n### incompatible with `SelectorEventLoop` of `asyncio` on Windows\n\nPlaywright runs the driver in a subprocess, so it requires `ProactorEventLoop` of `asyncio` on Windows because `SelectorEventLoop` does not supports async subprocesses.\n\nOn Windows Python 3.7, Playwright sets the default event loop to `ProactorEventLoop` as it is default on Python 3.8+.\n\n### Threading","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":163,"to":176}}}}],["29ba2d73-5d87-4572-b7d2-db272c68fc96",{"pageContent":"On Windows Python 3.7, Playwright sets the default event loop to `ProactorEventLoop` as it is default on Python 3.8+.\n\n### Threading\n\nPlaywright's API is not thread-safe. If you are using Playwright in a multi-threaded environment, you should create a playwright instance per thread. See [threading issue](https://github.com/microsoft/playwright-python/issues/623) for more details.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-library-python.md","title":"src-library-python","url":"https://playwright.dev/docs/src-library-python","loc":{"lines":{"from":174,"to":178}}}}],["e76cc128-e637-4c33-966a-eea0e715b321",{"pageContent":"---\nid: locators\ntitle: \"Locators\"\n---\n\n## Introduction\n\n[Locator]s are the central piece of Playwright's auto-waiting and retry-ability. In a nutshell, locators represent\na way to find element(s) on the page at any moment.\n\n### Quick Guide\n\nThese are the recommended built-in locators.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1,"to":13}}}}],["6dc7f2dd-70a5-491c-81a5-080476222351",{"pageContent":"### Quick Guide\n\nThese are the recommended built-in locators.\n\n- [`method: Page.getByRole`](#locate-by-role) to locate by explicit and implicit accessibility attributes.\n- [`method: Page.getByText`](#locate-by-text) to locate by text content.\n- [`method: Page.getByLabel`](#locate-by-label) to locate a form control by associated label's text.\n- [`method: Page.getByPlaceholder`](#locate-by-placeholder) to locate an input by placeholder.\n- [`method: Page.getByAltText`](#locate-by-alt-text) to locate an element, usually image, by its text alternative.\n- [`method: Page.getByTitle`](#locate-by-title) to locate an element by its title attribute.\n- [`method: Page.getByTestId`](#locate-by-test-id) to locate an element based on its `data-testid` attribute (other attributes can be configured).\n\n```js\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":11,"to":28}}}}],["85177a6a-9058-435e-837f-51f8c0bec26f",{"pageContent":"```js\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();\n\nawait expect(page.getByText('Welcome, John!')).toBeVisible();\n```\n\n```java\npage.getByLabel(\"User Name\").fill(\"John\");\n\npage.getByLabel(\"Password\").fill(\"secret-password\");\n\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n\nassertThat(page.getByText(\"Welcome, John!\")).isVisible();\n```\n\n```python async\nawait page.get_by_label(\"User Name\").fill(\"John\")\n\nawait page.get_by_label(\"Password\").fill(\"secret-password\")\n\nawait page.get_by_role(\"button\", name=\"Sign in\").click()\n\nawait expect(page.get_by_text(\"Welcome, John!\")).to_be_visible()\n```\n\n```python sync\npage.get_by_label(\"User Name\").fill(\"John\")\n\npage.get_by_label(\"Password\").fill(\"secret-password\")\n\npage.get_by_role(\"button\", name=\"Sign in\").click()\n\nexpect(page.get_by_text(\"Welcome, John!\")).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":23,"to":62}}}}],["443e8cc3-32a3-4099-8e60-2f321a145b28",{"pageContent":"page.get_by_label(\"Password\").fill(\"secret-password\")\n\npage.get_by_role(\"button\", name=\"Sign in\").click()\n\nexpect(page.get_by_text(\"Welcome, John!\")).to_be_visible()\n```\n\n```csharp\nawait Page.GetByLabel(\"User Name\").FillAsync(\"John\");\n\nawait Page.GetByLabel(\"Password\").FillAsync(\"secret-password\");\n\nawait Page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" }).ClickAsync();\n\nawait Expect(Page.GetByText(\"Welcome, John!\")).ToBeVisibleAsync();\n```\n\n## Locating elements\n\nPlaywright comes with multiple built-in locators. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts such as [`method: Page.getByRole`].\n\nFor example, consider the following DOM structure.\n\n```html card\n<button>Sign in</button>\n```\n\nLocate the element by its role of `button` with name \"Sign in\".\n\n```js\nawait page.getByRole('button', { name: 'Sign in' }).click();\n```\n\n```java\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":57,"to":93}}}}],["4f3f3634-6f57-4843-a369-4bd3ef35d3d4",{"pageContent":"```js\nawait page.getByRole('button', { name: 'Sign in' }).click();\n```\n\n```java\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n```\n\n```python async\nawait page.get_by_role(\"button\", name=\"Sign in\").click()\n```\n\n```python sync\npage.get_by_role(\"button\", name=\"Sign in\").click()\n```\n\n```csharp\nawait Page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" }).ClickAsync();\n```\n\n:::note\nUse the [code generator](./codegen.md) to generate a locator, and then edit it as you'd like.\n:::\n\nEvery time a locator is used for an action, an up-to-date DOM element is located in the page. In the snippet\nbelow, the underlying DOM element will be located twice, once prior to every action. This means that if the\nDOM changes in between the calls due to re-render, the new element corresponding to the\nlocator will be used.\n\n```js\nconst locator = page.getByRole('button', { name: 'Sign in' });\n\nawait locator.hover();\nawait locator.click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":86,"to":121}}}}],["440f48dc-14a2-45ab-a2d4-a3355bd9f488",{"pageContent":"```js\nconst locator = page.getByRole('button', { name: 'Sign in' });\n\nawait locator.hover();\nawait locator.click();\n```\n\n```java\nLocator locator = page.getByRole(AriaRole.BUTTON,\n                                 new Page.GetByRoleOptions().setName(\"Sign in\"));\n\nlocator.hover();\nlocator.click();\n```\n\n```python async\nlocator = page.get_by_role(\"button\", name=\"Sign in\")\n\nawait locator.hover()\nawait locator.click()\n```\n\n```python sync\nlocator = page.get_by_role(\"button\", name=\"Sign in\")\n\nlocator.hover()\nlocator.click()\n```\n\n```csharp\nvar locator = Page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" });\n\nawait locator.HoverAsync();\nawait locator.ClickAsync();\n```\n\nNote that all methods that create a locator, such as [`method: Page.getByLabel`], are also available on the [Locator] and [FrameLocator] classes, so you can chain them and iteratively narrow down your locator.\n\n```js\nconst locator = page\n    .frameLocator('#my-frame')\n    .getByRole('button', { name: 'Sign in' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":116,"to":157}}}}],["fdea9770-bcbe-4491-84ba-9b298b30d597",{"pageContent":"```js\nconst locator = page\n    .frameLocator('#my-frame')\n    .getByRole('button', { name: 'Sign in' });\n\nawait locator.click();\n```\n\n```java\nLocator locator = page\n    .frameLocator(\"#my-frame\")\n    .getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"));\n\nlocator.click();\n```\n\n```python async\nlocator = page.frame_locator(\"#my-frame\").get_by_role(\"button\", name=\"Sign in\")\n\nawait locator.click()\n```\n\n```python sync\nlocator = page.frame_locator(\"my-frame\").get_by_role(\"button\", name=\"Sign in\")\n\nlocator.click()\n```\n\n```csharp\nvar locator = Page\n    .FrameLocator(\"#my-frame\")\n    .GetByRole(AriaRole.Button, new() { Name = \"Sign in\" });\n\nawait locator.ClickAsync();\n```\n\n### Locate by role","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":154,"to":190}}}}],["af056807-6a96-4770-929d-237913e4e834",{"pageContent":"locator.click()\n```\n\n```csharp\nvar locator = Page\n    .FrameLocator(\"#my-frame\")\n    .GetByRole(AriaRole.Button, new() { Name = \"Sign in\" });\n\nawait locator.ClickAsync();\n```\n\n### Locate by role\n\nThe [`method: Page.getByRole`] locator reflects how users and assistive technology perceive the page, for example whether some element is a button or a checkbox. When locating by role, you should usually pass the accessible name as well, so that the locator pinpoints the exact element.\n\nFor example, consider the following DOM structure.\n\n```html card\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by its implicit role:\n\n```js\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":179,"to":213}}}}],["d80cefd6-5a4b-4f3e-9d70-55b4a3af3f63",{"pageContent":"await page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n```python async\nawait expect(page.get_by_role(\"heading\", name=\"Sign up\")).to_be_visible()\n\nawait page.get_by_role(\"checkbox\", name=\"Subscribe\").check()\n\nawait page.get_by_role(\"button\", name=re.compile(\"submit\", re.IGNORECASE)).click()\n```\n\n```python sync\nexpect(page.get_by_role(\"heading\", name=\"Sign up\")).to_be_visible()\n\npage.get_by_role(\"checkbox\", name=\"Subscribe\").check()\n\npage.get_by_role(\"button\", name=re.compile(\"submit\", re.IGNORECASE)).click()\n```\n\n```java\nassertThat(page\n    .getByRole(AriaRole.HEADING,\n               new Page.GetByRoleOptions().setName(\"Sign up\")))\n    .isVisible();\n\npage.getByRole(AriaRole.CHECKBOX,\n               new Page.GetByRoleOptions().setName(\"Subscribe\"))\n    .check();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":210,"to":239}}}}],["24d5f6cf-865a-48ad-b5ac-c846f585488f",{"pageContent":"page.getByRole(AriaRole.CHECKBOX,\n               new Page.GetByRoleOptions().setName(\"Subscribe\"))\n    .check();\n\npage.getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\n                   Pattern.compile(\"submit\", Pattern.CASE_INSENSITIVE)))\n    .click();\n```\n\n```csharp\nawait Expect(Page\n    .GetByRole(AriaRole.Heading, new() { Name = \"Sign up\" }))\n    .ToBeVisibleAsync();\n\nawait Page\n    .GetByRole(AriaRole.Checkbox, new() { Name = \"Subscribe\" })\n    .CheckAsync();\n\nawait Page\n    .GetByRole(AriaRole.Button, new() {\n        NameRegex = new Regex(\"submit\", RegexOptions.IgnoreCase)\n    })\n    .ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":237,"to":261}}}}],["46f09a4b-8ef0-4bc4-b02d-b0ceaaf5d9c9",{"pageContent":"await Page\n    .GetByRole(AriaRole.Button, new() {\n        NameRegex = new Regex(\"submit\", RegexOptions.IgnoreCase)\n    })\n    .ClickAsync();\n```\n\nRole locators include [buttons, checkboxes, headings, links, lists, tables, and many more](https://www.w3.org/TR/html-aria/#docconformance) and follow W3C specifications for [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). Note that many html elements like `<button>` have an [implicitly defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role locator.\n\nNote that role locators **do not replace** accessibility audits and conformance tests, but rather give early feedback about the ARIA guidelines.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":256,"to":265}}}}],["b559c9d7-d067-437e-8bf2-596998e1dd39",{"pageContent":"Note that role locators **do not replace** accessibility audits and conformance tests, but rather give early feedback about the ARIA guidelines.\n\n:::note[When to use role locators]\nWe recommend prioritizing role locators to locate elements, as it is the closest way to how users and assistive technology perceive the page.\n:::\n\n### Locate by label\n\nMost form controls usually have dedicated labels that could be conveniently used to interact with the form. In this case, you can locate the control by its associated label using [`method: Page.getByLabel`].\n\nFor example, consider the following DOM structure.\n\n```html card\n<label>Password <input type=\"password\" /></label>\n\n```\n\nYou can fill the input after locating it by the label text:\n\n```js\nawait page.getByLabel('Password').fill('secret');\n```\n\n```java\npage.getByLabel(\"Password\").fill(\"secret\");\n```\n\n```python async\nawait page.get_by_label(\"Password\").fill(\"secret\")\n```\n\n```python sync\npage.get_by_label(\"Password\").fill(\"secret\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":265,"to":298}}}}],["88d24f14-b4ef-402c-bbb9-5dbb86721ee5",{"pageContent":"```java\npage.getByLabel(\"Password\").fill(\"secret\");\n```\n\n```python async\nawait page.get_by_label(\"Password\").fill(\"secret\")\n```\n\n```python sync\npage.get_by_label(\"Password\").fill(\"secret\")\n```\n\n```csharp\nawait Page.GetByLabel(\"Password\").FillAsync(\"secret\");\n```\n\n:::note[When to use label locators]\nUse this locator when locating form fields.\n:::\n### Locate by placeholder\n\nInputs may have a placeholder attribute to hint to the user what value should be entered. You can locate such an input using [`method: Page.getByPlaceholder`].\n\nFor example, consider the following DOM structure.\n\n```html card\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n```js\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n```java\npage.getByPlaceholder(\"name@example.com\").fill(\"playwright@microsoft.com\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":288,"to":327}}}}],["54622c8b-0cad-448d-8a8a-e8149e031760",{"pageContent":"```js\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n```java\npage.getByPlaceholder(\"name@example.com\").fill(\"playwright@microsoft.com\");\n```\n\n```python async\nawait page.get_by_placeholder(\"name@example.com\").fill(\"playwright@microsoft.com\")\n```\n\n```python sync\npage.get_by_placeholder(\"name@example.com\").fill(\"playwright@microsoft.com\")\n```\n\n```csharp\nawait Page\n    .GetByPlaceholder(\"name@example.com\")\n    .FillAsync(\"playwright@microsoft.com\");\n```\n\n:::note[When to use placeholder locators]\nUse this locator when locating form elements that do not have labels but do have placeholder texts.\n:::\n\n### Locate by text\n\nFind an element by the text it contains. You can match by a substring, exact string, or a regular expression when using [`method: Page.getByText`].\n\nFor example, consider the following DOM structure.\n\n```html card\n<span>Welcome, John</span>\n```\n\nYou can locate the element by the text it contains:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":319,"to":357}}}}],["0a786526-c858-47c9-9b5e-32fd6b1b9e7d",{"pageContent":"For example, consider the following DOM structure.\n\n```html card\n<span>Welcome, John</span>\n```\n\nYou can locate the element by the text it contains:\n\n```js\nawait expect(page.getByText('Welcome, John')).toBeVisible();\n```\n\n```java\nassertThat(page.getByText(\"Welcome, John\")).isVisible();\n```\n\n```python async\nawait expect(page.get_by_text(\"Welcome, John\")).to_be_visible()\n```\n\n```python sync\nexpect(page.get_by_text(\"Welcome, John\")).to_be_visible()\n```\n\n```csharp\nawait Expect(Page.GetByText(\"Welcome, John\")).ToBeVisibleAsync();\n```\n\nSet an exact match:\n```js\nawait expect(page.getByText('Welcome, John', { exact: true })).toBeVisible();\n```\n\n```java\nassertThat(page\n    .getByText(\"Welcome, John\", new Page.GetByTextOptions().setExact(true)))\n    .isVisible();\n```\n\n```python async\nawait expect(page.get_by_text(\"Welcome, John\", exact=True)).to_be_visible()\n```\n\n```python sync\nexpect(page.get_by_text(\"Welcome, John\", exact=True)).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":351,"to":396}}}}],["ac00a952-69b6-4db5-8875-b95517cdc803",{"pageContent":"```python async\nawait expect(page.get_by_text(\"Welcome, John\", exact=True)).to_be_visible()\n```\n\n```python sync\nexpect(page.get_by_text(\"Welcome, John\", exact=True)).to_be_visible()\n```\n\n```csharp\nawait Expect(Page\n    .GetByText(\"Welcome, John\", new() { Exact = true }))\n    .ToBeVisibleAsync();\n```\n\nMatch with a regular expression:\n\n```js\nawait expect(page.getByText(/welcome, [A-Za-z]+$/i)).toBeVisible();\n```\n\n```java\nassertThat(page\n    .getByText(Pattern.compile(\"welcome, john$\", Pattern.CASE_INSENSITIVE)))\n    .isVisible();\n```\n\n```python async\nawait expect(\n    page.get_by_text(re.compile(\"welcome, john\", re.IGNORECASE))\n).to_be_visible()\n```\n\n```python sync\nexpect(page.get_by_text(re.compile(\"welcome, john\", re.IGNORECASE))).to_be_visible()\n```\n\n```csharp\nawait Expect(Page\n    .GetByText(new Regex(\"welcome, john\", RegexOptions.IgnoreCase)))\n    .ToBeVisibleAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":390,"to":430}}}}],["902fb8ad-65e7-488e-8b74-10e9c6699944",{"pageContent":"```csharp\nawait Expect(Page\n    .GetByText(new Regex(\"welcome, john\", RegexOptions.IgnoreCase)))\n    .ToBeVisibleAsync();\n```\n\n:::note\nMatching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n:::\n\n:::note[When to use text locators]\nWe recommend using text locators to find non interactive elements like `div`, `span`, `p`, etc. For interactive elements like `button`, `a`, `input`, etc. use [role locators](#locate-by-role).\n:::\n\nYou can also [filter by text](#filter-by-text) which can be useful when trying to find a particular item in a list.\n\n### Locate by alt text\n\nAll images should have an `alt` attribute that describes the image. You can locate an image based on the text alternative using [`method: Page.getByAltText`].\n\nFor example, consider the following DOM structure.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":426,"to":446}}}}],["3801e1aa-0559-485c-9d27-16ed4219dab9",{"pageContent":"For example, consider the following DOM structure.\n\n```html card\n<img alt=\"playwright logo\" src=\"/img/playwright-logo.svg\" width=\"100\" />\n```\n\nYou can click on the image after locating it by the text alternative:\n\n```js\nawait page.getByAltText('playwright logo').click();\n```\n\n```java\npage.getByAltText(\"playwright logo\").click();\n```\n\n```python async\nawait page.get_by_alt_text(\"playwright logo\").click()\n```\n\n```python sync\npage.get_by_alt_text(\"playwright logo\").click()\n```\n\n```csharp\nawait Page.GetByAltText(\"playwright logo\").ClickAsync();\n```\n\n:::note[When to use alt locators]\nUse this locator when your element supports alt text such as `img` and `area` elements.\n:::\n\n### Locate by title\n\nLocate an element with a matching title attribute using [`method: Page.getByTitle`].\n\nFor example, consider the following DOM structure.\n\n```html card\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":446,"to":488}}}}],["c3fe9734-c5ca-48df-a161-cb18af42bc02",{"pageContent":"For example, consider the following DOM structure.\n\n```html card\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:\n\n```js\nawait expect(page.getByTitle('Issues count')).toHaveText('25 issues');\n```\n\n```java\nassertThat(page.getByTitle(\"Issues count\")).hasText(\"25 issues\");\n```\n\n```python async\nawait expect(page.get_by_title(\"Issues count\")).to_have_text(\"25 issues\")\n```\n\n```python sync\nexpect(page.get_by_title(\"Issues count\")).to_have_text(\"25 issues\")\n```\n\n```csharp\nawait Expect(Page.GetByTitle(\"Issues count\")).toHaveText(\"25 issues\");\n```\n\n:::note[When to use title locators]\nUse this locator when your element has the `title` attribute.\n:::\n\n### Locate by test id","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":482,"to":514}}}}],["81403abf-86ef-4c83-a4b7-6d6e5a050e69",{"pageContent":":::note[When to use title locators]\nUse this locator when your element has the `title` attribute.\n:::\n\n### Locate by test id\n\nTesting by test ids is the most resilient way of testing as even if your text or role of the attribute changes, the test will still pass. QA's and developers should define explicit test ids and query them with [`method: Page.getByTestId`]. However testing by test ids is not user facing. If the role or text value is important to you then consider using user facing locators such as [role](#locate-by-role) and [text locators](#locate-by-text).\n\nFor example, consider the following DOM structure.\n\n```html card\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by its test id:\n\n```js\nawait page.getByTestId('directions').click();\n```\n\n```java\npage.getByTestId(\"directions\").click();\n```\n\n```python async\nawait page.get_by_test_id(\"directions\").click()\n```\n\n```python sync\npage.get_by_test_id(\"directions\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":510,"to":540}}}}],["a7266043-48d0-4596-9ad6-839d8208220e",{"pageContent":"```java\npage.getByTestId(\"directions\").click();\n```\n\n```python async\nawait page.get_by_test_id(\"directions\").click()\n```\n\n```python sync\npage.get_by_test_id(\"directions\").click()\n```\n\n```csharp\nawait Page.GetByTestId(\"directions\").ClickAsync();\n```\n\n:::note[When to use testid locators]\nYou can also use test ids when you choose to use the test id methodology or when you can't locate by [role](#locate-by-role) or [text](#locate-by-text).\n:::\n\n#### Set a custom test id attribute\n\nBy default, [`method: Page.getByTestId`] will locate elements based on the `data-testid` attribute, but you can configure it in your test config or by calling [`method: Selectors.setTestIdAttribute`].\n\nSet the test id to use a custom data attribute for your tests.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  }\n});\n```\n\n```java\nplaywright.selectors().setTestIdAttribute(\"data-pw\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":530,"to":568}}}}],["86321d63-bdfe-44c2-aee4-d567d86abe0b",{"pageContent":"export default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  }\n});\n```\n\n```java\nplaywright.selectors().setTestIdAttribute(\"data-pw\");\n```\n\n```python async\nplaywright.selectors.set_test_id_attribute(\"data-pw\")\n```\n\n```python sync\nplaywright.selectors.set_test_id_attribute(\"data-pw\")\n```\n\n```csharp\nplaywright.Selectors.SetTestIdAttribute(\"data-pw\");\n```\n\nIn your html you can now use `data-pw` as your test id instead of the default `data-testid`.\n\n```html card\n<button data-pw=\"directions\">Itinéraire</button>\n```\n\nAnd then locate the element as you would normally do:\n\n```js\nawait page.getByTestId('directions').click();\n```\n\n```java\npage.getByTestId(\"directions\").click();\n```\n\n```python async\nawait page.get_by_test_id(\"directions\").click()\n```\n\n```python sync\npage.get_by_test_id(\"directions\").click()\n```\n\n```csharp\nawait Page.GetByTestId(\"directions\").ClickAsync();\n```\n\n### Locate by CSS or XPath","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":559,"to":610}}}}],["59acaf28-1356-4e89-aea0-c4ab25325f82",{"pageContent":"```python sync\npage.get_by_test_id(\"directions\").click()\n```\n\n```csharp\nawait Page.GetByTestId(\"directions\").ClickAsync();\n```\n\n### Locate by CSS or XPath\n\nIf you absolutely must use CSS or XPath locators, you can use [`method: Page.locator`] to create a locator that takes a selector describing how to find an element in the page. Playwright supports CSS and XPath selectors, and auto-detects them if you omit `css=` or `xpath=` prefix.\n\n```js\nawait page.locator('css=button').click();\nawait page.locator('xpath=//button').click();\n\nawait page.locator('button').click();\nawait page.locator('//button').click();\n```\n\n```java\npage.locator(\"css=button\").click();\npage.locator(\"xpath=//button\").click();\n\npage.locator(\"button\").click();\npage.locator(\"//button\").click();\n```\n\n```python async\nawait page.locator(\"css=button\").click()\nawait page.locator(\"xpath=//button\").click()\n\nawait page.locator(\"button\").click()\nawait page.locator(\"//button\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":602,"to":636}}}}],["3eee67b1-e51e-40e8-b401-a1f2457ee1d0",{"pageContent":"```python async\nawait page.locator(\"css=button\").click()\nawait page.locator(\"xpath=//button\").click()\n\nawait page.locator(\"button\").click()\nawait page.locator(\"//button\").click()\n```\n\n```python sync\npage.locator(\"css=button\").click()\npage.locator(\"xpath=//button\").click()\n\npage.locator(\"button\").click()\npage.locator(\"//button\").click()\n```\n\n```csharp\nawait Page.Locator(\"css=button\").ClickAsync();\nawait Page.Locator(\"xpath=//button\").ClickAsync();\n\nawait Page.Locator(\"button\").ClickAsync();\nawait Page.Locator(\"//button\").ClickAsync();\n```\n\nXPath and CSS selectors can be tied to the DOM structure or implementation. These selectors can break when the DOM structure changes. Long CSS or XPath chains below are an example of a **bad practice** that leads to unstable tests:\n\n```js\nawait page.locator(\n    '#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input'\n).click();\n\nawait page\n    .locator('//*[@id=\"tsf\"]/div[2]/div[1]/div[1]/div/div[2]/input')\n    .click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":630,"to":664}}}}],["1b801420-8379-42b1-a9c3-85732766bb17",{"pageContent":"await page\n    .locator('//*[@id=\"tsf\"]/div[2]/div[1]/div[1]/div/div[2]/input')\n    .click();\n```\n\n```java\npage.locator(\n    \"#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input\"\n).click();\n\npage.locator(\"//*[@id='tsf']/div[2]/div[1]/div[1]/div/div[2]/input\").click();\n```\n\n```python async\nawait page.locator(\n    \"#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input\"\n).click()\n\nawait page.locator('//*[@id=\"tsf\"]/div[2]/div[1]/div[1]/div/div[2]/input').click()\n```\n\n```python sync\npage.locator(\n    \"#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input\"\n).click()\n\npage.locator('//*[@id=\"tsf\"]/div[2]/div[1]/div[1]/div/div[2]/input').click()\n```\n\n```csharp\nawait Page.Locator(\"#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input\").ClickAsync();\n\nawait Page.Locator(\"//*[@id='tsf']/div[2]/div[1]/div[1]/div/div[2]/input\").ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":661,"to":694}}}}],["087a038b-5530-4b9c-883c-3cc212c5370b",{"pageContent":"await Page.Locator(\"//*[@id='tsf']/div[2]/div[1]/div[1]/div/div[2]/input\").ClickAsync();\n```\n\n:::note[When to use this]\nCSS and XPath are not recommended as the DOM can often change leading to non resilient tests. Instead, try to come up with a locator that is close to how the user perceives the page such as [role locators](#locate-by-role) or [define an explicit testing contract](#locate-by-test-id) using test ids.\n:::\n\n## Locate in Shadow DOM\n\nAll locators in Playwright **by default** work with elements in Shadow DOM. The exceptions are:\n- Locating by XPath does not pierce shadow roots.\n- [Closed-mode shadow roots](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow#parameters) are not supported.\n\nConsider the following example with a custom web component:\n\n```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":693,"to":714}}}}],["dfbab6ef-e4d6-408d-9260-f59806ef809e",{"pageContent":"```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nYou can locate in the same way as if the shadow root was not present at all.\n\nTo click `<div>Details</div>`:\n\n```js\nawait page.getByText('Details').click();\n```\n```java\npage.getByText(\"Details\").click();\n```\n```python async\nawait page.get_by_text(\"Details\").click()\n```\n```python sync\npage.get_by_text(\"Details\").click()\n```\n```csharp\nawait page.GetByText(\"Details\").ClickAsync();\n```\n\n```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nTo click `<x-details>`:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":708,"to":744}}}}],["3d33cd17-f566-4126-8113-0aee0cadc2a5",{"pageContent":"```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nTo click `<x-details>`:\n\n```js\nawait page.locator('x-details', { hasText: 'Details' }).click();\n```\n```java\npage.locator(\"x-details\", new Page.LocatorOptions().setHasText(\"Details\"))\n    .click();\n```\n```python async\nawait page.locator(\"x-details\", has_text=\"Details\").click()\n```\n```python sync\npage.locator(\"x-details\", has_text=\"Details\").click()\n```\n```csharp\nawait page\n    .Locator(\"x-details\", new() { HasText = \"Details\" })\n    .ClickAsync();\n```\n\n```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":736,"to":771}}}}],["0220fee6-81a6-46a0-90ca-c93abb3777b9",{"pageContent":"```html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nTo ensure that `<x-details>` contains the text \"Details\":\n```js\nawait expect(page.locator('x-details')).toContainText('Details');\n```\n```java\nassertThat(page.locator(\"x-details\")).containsText(\"Details\");\n```\n```python async\nawait expect(page.locator(\"x-details\")).to_contain_text(\"Details\")\n```\n```python sync\nexpect(page.locator(\"x-details\")).to_contain_text(\"Details\")\n```\n```csharp\nawait Expect(Page.Locator(\"x-details\")).ToContainTextAsync(\"Details\");\n```\n## Filtering Locators\n\nConsider the following DOM structure where we want to click on the buy button of the second product card. We have a few options in order to filter the locators to get the right one.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":765,"to":791}}}}],["52c99d8d-96fd-4812-ada7-c2668c53f819",{"pageContent":"Consider the following DOM structure where we want to click on the buy button of the second product card. We have a few options in order to filter the locators to get the right one.\n\n```html card\n<ul>\n  <li>\n    <h3>Product 1</h3>\n    <button>Add to cart</button>\n  </li>\n  <li>\n    <h3>Product 2</h3>\n    <button>Add to cart</button>\n  </li>\n</ul>\n```\n\n### Filter by text\n\nLocators can be filtered by text with the [`method: Locator.filter`] method. It will search for a particular string somewhere inside the element, possibly in a descendant element, case-insensitively. You can also pass a regular expression.\n\n```js\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n```java\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"Product 2\"))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":791,"to":824}}}}],["bfa2b84f-3214-4175-a933-db768c8b606c",{"pageContent":"```python async\nawait page.get_by_role(\"listitem\").filter(has_text=\"Product 2\").get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\n```python sync\npage.get_by_role(\"listitem\").filter(has_text=\"Product 2\").get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\n```csharp\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"Product 2\" })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\nUse a regular expression:\n\n```js\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: /Product 2/ })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n```java\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHasText(Pattern.compile(\"Product 2\")))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":826,"to":863}}}}],["b41c9ff8-7f41-46be-b646-f69eab3bd8c8",{"pageContent":"```python async\nawait page.get_by_role(\"listitem\").filter(has_text=re.compile(\"Product 2\")).get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\n```python sync\npage.get_by_role(\"listitem\").filter(has_text=re.compile(\"Product 2\")).get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\n```csharp\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasTextRegex = new Regex(\"Product 2\") })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\n### Filter by not having text\n\nAlternatively, filter by **not having** text:\n\n```js\n// 5 in-stock items\nawait expect(page.getByRole('listitem').filter({ hasNotText: 'Out of stock' })).toHaveCount(5);\n```\n\n```java\n// 5 in-stock items\nassertThat(page.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasNotText(\"Out of stock\")))\n    .hasCount(5);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":865,"to":899}}}}],["332f2fd2-7c00-4c3e-a0c4-399f265a98dc",{"pageContent":"```java\n// 5 in-stock items\nassertThat(page.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasNotText(\"Out of stock\")))\n    .hasCount(5);\n```\n\n```python async\n# 5 in-stock items\nawait expect(page.get_by_role(\"listitem\").filter(has_not_text=\"Out of stock\")).to_have_count(5)\n```\n\n```python sync\n# 5 in-stock items\nexpect(page.get_by_role(\"listitem\").filter(has_not_text=\"Out of stock\")).to_have_count(5)\n```\n\n```csharp\n// 5 in-stock items\nawait Expect(Page.getByRole(AriaRole.Listitem).Filter(new() { HasNotText = \"Out of stock\" }))\n    .ToHaveCountAsync(5);\n```\n\n### Filter by child/descendant\n\nLocators support an option to only select elements that have or have not a descendant matching another locator. You can therefore filter by any other locator such as a [`method: Locator.getByRole`], [`method: Locator.getByTestId`], [`method: Locator.getByText`] etc.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":894,"to":919}}}}],["9d307ce4-5b4a-44d1-9ded-70ab1d9b4d15",{"pageContent":"```html card\n<ul>\n  <li>\n    <h3>Product 1</h3>\n    <button>Add to cart</button>\n  </li>\n  <li>\n    <h3>Product 2</h3>\n    <button>Add to cart</button>\n  </li>\n</ul>\n```\n\n```js\nawait page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n```java\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHas(page.GetByRole(AriaRole.HEADING, new Page.GetByRoleOptions()\n        .setName(\"Product 2\"))))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\n```python async\nawait page.get_by_role(\"listitem\").filter(\n    has=page.get_by_role(\"heading\", name=\"Product 2\")\n).get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\n```python sync\npage.get_by_role(\"listitem\").filter(\n    has=page.get_by_role(\"heading\", name=\"Product 2\")\n).get_by_role(\"button\", name=\"Add to cart\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":921,"to":962}}}}],["7fb381c0-d4bf-4df9-bb5d-9363751c934f",{"pageContent":"```python sync\npage.get_by_role(\"listitem\").filter(\n    has=page.get_by_role(\"heading\", name=\"Product 2\")\n).get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\n```csharp\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Heading, new() {\n            Name = \"Product 2\"\n        })\n    })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\nWe can also assert the product card to make sure there is only one:\n\n```js\nawait expect(page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) }))\n    .toHaveCount(1);\n```\n\n```java\nassertThat(page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHas(page.GetByRole(AriaRole.HEADING,\n                               new Page.GetByRoleOptions().setName(\"Product 2\")))))\n    .hasCount(1);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":958,"to":992}}}}],["154eb93e-aad6-412d-8dea-037382eff1c4",{"pageContent":"```python async\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```python sync\nexpect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```csharp\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Heading, new() { Name = \"Product 2\" })\n    }))\n    .ToHaveCountAsync(1);\n```\n\nThe filtering locator **must be relative** to the original locator and is queried starting with the original locator match, not the document root. Therefore, the following will not work, because the filtering locator starts matching from the `<ul>` list element that is outside of the `<li>` list item matched by the original locator:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":994,"to":1019}}}}],["9afd036a-52a3-44cf-ae77-a48236e00f10",{"pageContent":"```js\n// ✖ WRONG\nawait expect(page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('list').getByText('Product 2') }))\n    .toHaveCount(1);\n```\n\n```java\n// ✖ WRONG\nassertThat(page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHas(page.GetByRole(AriaRole.LIST)\n                    .GetByRole(AriaRole.HEADING,\n                               new Page.GetByRoleOptions().setName(\"Product 2\")))))\n    .hasCount(1);\n```\n\n```python async\n# ✖ WRONG\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"list\").get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```python sync\n# ✖ WRONG\nexpect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"list\").get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1021,"to":1056}}}}],["bf8682dd-bf8b-469e-b5c4-b5855519bf34",{"pageContent":"```python sync\n# ✖ WRONG\nexpect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"list\").get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```csharp\n// ✖ WRONG\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.List).GetByRole(AriaRole.Heading, new() { Name = \"Product 2\" })\n    }))\n    .ToHaveCountAsync(1);\n```\n\n### Filter by not having child/descendant\n\nWe can also filter by **not having** a matching element inside.\n\n```js\nawait expect(page\n    .getByRole('listitem')\n    .filter({ hasNot: page.getByText('Product 2') }))\n    .toHaveCount(1);\n```\n\n```java\nassertThat(page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasNot(page.getByText(\"Product 2\"))))\n    .hasCount(1);\n```\n\n```python async\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has_not=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1049,"to":1092}}}}],["96b06b87-a943-49b6-8a2e-933a1081f815",{"pageContent":"```python async\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has_not=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```python sync\nexpect(\n    page.get_by_role(\"listitem\").filter(\n        has_not=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\n```csharp\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        HasNot = page.GetByRole(AriaRole.Heading, new() { Name = \"Product 2\" })\n    }))\n    .ToHaveCountAsync(1);\n```\n\nNote that the inner locator is matched starting from the outer one, not from the document root.\n\n## Locator operators\n\n### Matching inside a locator\n\nYou can chain methods that create a locator, like [`method: Page.getByText`] or [`method: Locator.getByRole`], to narrow down the search to a particular part of the page.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1086,"to":1117}}}}],["6c492d06-1d5e-4836-87b9-c17b319b0a56",{"pageContent":"You can chain methods that create a locator, like [`method: Page.getByText`] or [`method: Locator.getByRole`], to narrow down the search to a particular part of the page.\n\nIn this example we first create a locator called product by locating its role of `listitem`. We then filter by text. We can use the product locator again to get by role of button and click it and then use an assertion to make sure there is only one product with the text \"Product 2\".\n\n```js\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n\nawait product.getByRole('button', { name: 'Add to cart' }).click();\n\nawait expect(product).toHaveCount(1);\n```\n\n```python async\nproduct = page.get_by_role(\"listitem\").filter(has_text=\"Product 2\")\n\nawait product.get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\n```python sync\nproduct = page.get_by_role(\"listitem\").filter(has_text=\"Product 2\")\n\nproduct.get_by_role(\"button\", name=\"Add to cart\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1117,"to":1139}}}}],["3f405185-79c4-49f3-8826-620cee628055",{"pageContent":"```python sync\nproduct = page.get_by_role(\"listitem\").filter(has_text=\"Product 2\")\n\nproduct.get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\n```java\nLocator product = page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"Product 2\"));\n\nproduct\n    .getByRole(AriaRole.BUTTON,\n               new Locator.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\n```csharp\nvar product = page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"Product 2\" });\n\nawait product\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\nYou can also chain two locators together, for example to find a \"Save\" button inside a particular dialog:\n\n```js\nconst saveButton = page.getByRole('button', { name: 'Save' });\n// ...\nconst dialog = page.getByTestId('settings-dialog');\nawait dialog.locator(saveButton).click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1135,"to":1169}}}}],["f5d5299d-0654-4162-b997-47398e774bf7",{"pageContent":"```js\nconst saveButton = page.getByRole('button', { name: 'Save' });\n// ...\nconst dialog = page.getByTestId('settings-dialog');\nawait dialog.locator(saveButton).click();\n```\n\n```python async\nsave_button = page.get_by_role(\"button\", name=\"Save\")\n# ...\ndialog = page.get_by_test_id(\"settings-dialog\")\nawait dialog.locator(save_button).click()\n```\n\n```python sync\nsave_button = page.get_by_role(\"button\", name=\"Save\")\n# ...\ndialog = page.get_by_test_id(\"settings-dialog\")\ndialog.locator(save_button).click()\n```\n\n```java\nLocator saveButton = page.getByRole(AriaRole.BUTTON,\n                                    new Page.GetByRoleOptions().setName(\"Save\"));\n// ...\nLocator dialog = page.getByTestId(\"settings-dialog\");\ndialog.locator(saveButton).click();\n```\n\n```csharp\nvar saveButton = page.GetByRole(AriaRole.Button, new() { Name = \"Save\" });\n// ...\nvar dialog = page.GetByTestId(\"settings-dialog\");\nawait dialog.Locator(saveButton).ClickAsync();\n```\n\n### Matching two locators simultaneously","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1164,"to":1200}}}}],["9d309ec0-3241-4eab-bedb-5e17fc8e38f6",{"pageContent":"### Matching two locators simultaneously\n\nMethod [`method: Locator.and`] narrows down an existing locator by matching an additional locator. For example, you can combine [`method: Page.getByRole`] and [`method: Page.getByTitle`] to match by both role and title.\n```js\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n```java\nLocator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle(\"Subscribe\"));\n```\n```python async\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n```python sync\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n```csharp\nvar button = page.GetByRole(AriaRole.Button).And(page.GetByTitle(\"Subscribe\"));\n```\n\n### Matching one of the two alternative locators\n\nIf you'd like to target one of the two or more elements, and you don't know which one it will be, use [`method: Locator.or`] to create a locator that matches any one or both of the alternatives.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1200,"to":1221}}}}],["b8bafa82-efa2-4983-94a2-e1d4f00919b2",{"pageContent":"If you'd like to target one of the two or more elements, and you don't know which one it will be, use [`method: Locator.or`] to create a locator that matches any one or both of the alternatives.\n\nFor example, consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly.\n\n:::note\nIf both \"New email\" button and security dialog appear on screen, the \"or\" locator will match both of them,\npossibly throwing the [\"strict mode violation\" error](#strictness). In this case, you can use [`method: Locator.first`] to only match one of them.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1221,"to":1228}}}}],["a842b3fe-b02f-4a2f-80df-687c5ebe6f8f",{"pageContent":"```js\nconst newEmail = page.getByRole('button', { name: 'New' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog).first()).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\n```java\nLocator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"New\"));\nLocator dialog = page.getByText(\"Confirm security settings\");\nassertThat(newEmail.or(dialog).first()).isVisible();\nif (dialog.isVisible())\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Dismiss\")).click();\nnewEmail.click();\n```\n\n```python async\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nawait expect(new_email.or_(dialog).first).to_be_visible()\nif (await dialog.is_visible()):\n  await page.get_by_role(\"button\", name=\"Dismiss\").click()\nawait new_email.click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1230,"to":1255}}}}],["da93ef06-f7f0-425c-9941-d6e42dd5f1bb",{"pageContent":"```python sync\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nexpect(new_email.or_(dialog).first).to_be_visible()\nif (dialog.is_visible()):\n  page.get_by_role(\"button\", name=\"Dismiss\").click()\nnew_email.click()\n```\n\n```csharp\nvar newEmail = page.GetByRole(AriaRole.Button, new() { Name = \"New\" });\nvar dialog = page.GetByText(\"Confirm security settings\");\nawait Expect(newEmail.Or(dialog).First).ToBeVisibleAsync();\nif (await dialog.IsVisibleAsync())\n  await page.GetByRole(AriaRole.Button, new() { Name = \"Dismiss\" }).ClickAsync();\nawait newEmail.ClickAsync();\n```\n\n### Matching only visible elements\n\n:::note\nIt's usually better to find a [more reliable way](./locators.md#quick-guide) to uniquely identify the element instead of checking the visibility.\n:::\n\nConsider a page with two buttons, the first invisible and the second [visible](./actionability.md#visible).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1257,"to":1281}}}}],["4e4c1131-60fa-43a6-88eb-e30421103341",{"pageContent":"Consider a page with two buttons, the first invisible and the second [visible](./actionability.md#visible).\n\n```html\n<button style='display: none'>Invisible</button>\n<button>Visible</button>\n```\n\n* This will find both buttons and throw a [strictness](./locators.md#strictness) violation error:\n\n  ```js\n  await page.locator('button').click();\n  ```\n\n  ```java\n  page.locator(\"button\").click();\n  ```\n\n  ```python async\n  await page.locator(\"button\").click()\n  ```\n\n  ```python sync\n  page.locator(\"button\").click()\n  ```\n\n  ```csharp\n  await page.Locator(\"button\").ClickAsync();\n  ```\n\n* This will only find a second button, because it is visible, and then click it.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1281,"to":1310}}}}],["288fe820-0b52-4729-a879-c67a338c9572",{"pageContent":"```csharp\n  await page.Locator(\"button\").ClickAsync();\n  ```\n\n* This will only find a second button, because it is visible, and then click it.\n\n  ```js\n  await page.locator('button').filter({ visible: true }).click();\n  ```\n  ```java\n  page.locator(\"button\").filter(new Locator.FilterOptions.setVisible(true)).click();\n  ```\n  ```python async\n  await page.locator(\"button\").filter(visible=True).click()\n  ```\n  ```python sync\n  page.locator(\"button\").filter(visible=True).click()\n  ```\n  ```csharp\n  await page.Locator(\"button\").Filter(new() { Visible = true }).ClickAsync();\n  ```\n\n## Lists\n\n### Count items in a list\n\nYou can assert locators in order to count the items in a list.\n\nFor example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nUse the count assertion to ensure that the list has 3 items.\n\n```js\nawait expect(page.getByRole('listitem')).toHaveCount(3);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1306,"to":1348}}}}],["aebcf289-56b8-4046-83d0-18a0654858ed",{"pageContent":"Use the count assertion to ensure that the list has 3 items.\n\n```js\nawait expect(page.getByRole('listitem')).toHaveCount(3);\n```\n\n```python async\nawait expect(page.get_by_role(\"listitem\")).to_have_count(3)\n```\n\n```python sync\nexpect(page.get_by_role(\"listitem\")).to_have_count(3)\n```\n\n```java\nassertThat(page.getByRole(AriaRole.LISTITEM)).hasCount(3);\n```\n\n```csharp\nawait Expect(Page.GetByRole(AriaRole.Listitem)).ToHaveCountAsync(3);\n```\n\n### Assert all text in a list\n\nYou can assert locators in order to find all the text in a list.\n\nFor example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nUse [`method: LocatorAssertions.toHaveText`] to ensure that the list has the text \"apple\", \"banana\" and \"orange\".\n\n```js\nawait expect(page\n    .getByRole('listitem'))\n    .toHaveText(['apple', 'banana', 'orange']);\n```\n\n```python async\nawait expect(page.get_by_role(\"listitem\")).to_have_text([\"apple\", \"banana\", \"orange\"])\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1344,"to":1390}}}}],["da5f5643-95cb-45f0-ad3e-6d9bb0974776",{"pageContent":"```python async\nawait expect(page.get_by_role(\"listitem\")).to_have_text([\"apple\", \"banana\", \"orange\"])\n```\n\n```python sync\nexpect(page.get_by_role(\"listitem\")).to_have_text([\"apple\", \"banana\", \"orange\"])\n```\n\n```java\nassertThat(page\n    .getByRole(AriaRole.LISTITEM))\n    .hasText(new String[] { \"apple\", \"banana\", \"orange\" });\n```\n\n```csharp\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem))\n    .ToHaveTextAsync(new string[] {\"apple\", \"banana\", \"orange\"});\n```\n\n### Get a specific item\n\nThere are many ways to get a specific item in a list.\n#### Get by text\n\nUse the [`method: Page.getByText`] method to locate an element in a list by its text content and then click on it.\n\nFor example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nLocate an item by its text content and click it.\n\n```js\nawait page.getByText('orange').click();\n```\n\n```python async\nawait page.get_by_text(\"orange\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1388,"to":1433}}}}],["5306ef25-d1c7-46ff-80ee-c1f936969231",{"pageContent":"Locate an item by its text content and click it.\n\n```js\nawait page.getByText('orange').click();\n```\n\n```python async\nawait page.get_by_text(\"orange\").click()\n```\n\n```python sync\npage.get_by_text(\"orange\").click()\n```\n\n```java\npage.getByText(\"orange\").click();\n```\n\n```csharp\nawait page.GetByText(\"orange\").ClickAsync();\n```\n\n#### Filter by text\nUse the [`method: Locator.filter`] to locate a specific item in a list.\n\nFor example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nLocate an item by the role of \"listitem\" and then filter by the text of \"orange\" and then click it.\n\n```js\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'orange' })\n    .click();\n```\n\n```python async\nawait page.get_by_role(\"listitem\").filter(has_text=\"orange\").click()\n```\n\n```python sync\npage.get_by_role(\"listitem\").filter(has_text=\"orange\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1425,"to":1475}}}}],["0f1f0f30-a029-4ada-9c82-696e19aa566f",{"pageContent":"```python async\nawait page.get_by_role(\"listitem\").filter(has_text=\"orange\").click()\n```\n\n```python sync\npage.get_by_role(\"listitem\").filter(has_text=\"orange\").click()\n```\n\n```java\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"orange\"))\n    .click();\n```\n\n```csharp\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"orange\" })\n    .ClickAsync();\n```\n\n#### Get by test id\n\nUse the [`method: Page.getByTestId`] method to locate an element in a list. You may need to modify the html and add a test id if you don't already have a test id.\n\nFor example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li data-testid='apple'>apple</li>\n  <li data-testid='banana'>banana</li>\n  <li data-testid='orange'>orange</li>\n</ul>\n```\n\nLocate an item by its test id of \"orange\" and then click it.\n\n```js\nawait page.getByTestId('orange').click();\n```\n\n```python async\nawait page.get_by_test_id(\"orange\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1469,"to":1512}}}}],["39f6b619-676c-415d-909b-f094c39504b6",{"pageContent":"Locate an item by its test id of \"orange\" and then click it.\n\n```js\nawait page.getByTestId('orange').click();\n```\n\n```python async\nawait page.get_by_test_id(\"orange\").click()\n```\n\n```python sync\npage.get_by_test_id(\"orange\").click()\n```\n\n```java\npage.getByTestId(\"orange\").click();\n```\n\n```csharp\nawait page.GetByTestId(\"orange\").ClickAsync();\n```\n\n#### Get by nth item\n\nIf you have a list of identical elements, and the only way to distinguish between them is the order, you can choose a specific element from a list with [`method: Locator.first`], [`method: Locator.last`] or [`method: Locator.nth`].\n\n```js\nconst banana = await page.getByRole('listitem').nth(1);\n```\n\n```python async\nbanana = await page.get_by_role(\"listitem\").nth(1)\n```\n\n```python sync\nbanana = page.get_by_role(\"listitem\").nth(1)\n```\n\n```java\nLocator banana = page.getByRole(AriaRole.LISTITEM).nth(1);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1504,"to":1544}}}}],["3d098627-b915-47c1-befe-ff6d11279d91",{"pageContent":"```python sync\nbanana = page.get_by_role(\"listitem\").nth(1)\n```\n\n```java\nLocator banana = page.getByRole(AriaRole.LISTITEM).nth(1);\n```\n\n```csharp\nvar banana = await page.GetByRole(AriaRole.Listitem).Nth(1);\n```\nHowever, use this method with caution. Often times, the page might change, and the locator will point to a completely different element from the one you expected. Instead, try to come up with a unique locator that will pass the [strictness criteria](#strictness).\n\n### Chaining filters\n\nWhen you have elements with various similarities, you can use the [`method: Locator.filter`] method to select the right one. You can also chain multiple filters to narrow down the selection.\n\nFor example, consider the following DOM structure:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1538,"to":1555}}}}],["e62193ca-0362-4bb9-8836-0076ddf3a4f7",{"pageContent":"For example, consider the following DOM structure:\n\n```html card\n<ul>\n  <li>\n    <div>John</div>\n    <div><button>Say hello</button></div>\n  </li>\n  <li>\n    <div>Mary</div>\n    <div><button>Say hello</button></div>\n  </li>\n  <li>\n    <div>John</div>\n    <div><button>Say goodbye</button></div>\n  </li>\n  <li>\n    <div>Mary</div>\n    <div><button>Say goodbye</button></div>\n  </li>\n</ul>\n```\n\nTo take a screenshot of the row with \"Mary\" and \"Say goodbye\":\n\n```js\nconst rowLocator = page.getByRole('listitem');\n\nawait rowLocator\n    .filter({ hasText: 'Mary' })\n    .filter({ has: page.getByRole('button', { name: 'Say goodbye' }) })\n    .screenshot({ path: 'screenshot.png' });\n```\n\n```python async\nrow_locator = page.get_by_role(\"listitem\")\n\nawait row_locator.filter(has_text=\"Mary\").filter(\n    has=page.get_by_role(\"button\", name=\"Say goodbye\")\n).screenshot(path=\"screenshot.png\")\n```\n\n```python sync\nrow_locator = page.get_by_role(\"listitem\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1555,"to":1598}}}}],["64927f9c-4497-4087-ac13-3464b690eb32",{"pageContent":"```python sync\nrow_locator = page.get_by_role(\"listitem\")\n\nrow_locator.filter(has_text=\"Mary\").filter(\n    has=page.get_by_role(\"button\", name=\"Say goodbye\")\n).screenshot(path=\"screenshot.png\")\n```\n\n```java\nLocator rowLocator = page.getByRole(AriaRole.LISTITEM);\n\nrowLocator\n    .filter(new Locator.FilterOptions().setHasText(\"Mary\"))\n    .filter(new Locator.FilterOptions()\n        .setHas(page.getByRole(\n            AriaRole.BUTTON,\n            new Page.GetByRoleOptions().setName(\"Say goodbye\"))))\n    .screenshot(new Page.ScreenshotOptions().setPath(\"screenshot.png\"));\n```\n\n```csharp\nvar rowLocator = page.GetByRole(AriaRole.Listitem);\n\nawait rowLocator\n    .Filter(new() { HasText = \"Mary\" })\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Button, new() { Name = \"Say goodbye\" })\n    })\n    .ScreenshotAsync(new() { Path = \"screenshot.png\" });\n```\n\nYou should now have a \"screenshot.png\" file in your project's root directory.\n\n### Rare use cases","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1597,"to":1630}}}}],["ceb9f28d-7775-494e-910f-87403f606a50",{"pageContent":"You should now have a \"screenshot.png\" file in your project's root directory.\n\n### Rare use cases\n\n#### Do something with each element in the list\n\nIterate elements:\n\n```js\nfor (const row of await page.getByRole('listitem').all())\n  console.log(await row.textContent());\n```\n\n```python async\nfor row in await page.get_by_role(\"listitem\").all():\n    print(await row.text_content())\n```\n\n```python sync\nfor row in page.get_by_role(\"listitem\").all():\n    print(row.text_content())\n```\n\n```java\nfor (Locator row : page.getByRole(AriaRole.LISTITEM).all())\n  System.out.println(row.textContent());\n```\n\n```csharp\nforeach (var row in await page.GetByRole(AriaRole.Listitem).AllAsync())\n  Console.WriteLine(await row.TextContentAsync());\n```\n\nIterate using regular for loop:\n\n```js\nconst rows = page.getByRole('listitem');\nconst count = await rows.count();\nfor (let i = 0; i < count; ++i)\n  console.log(await rows.nth(i).textContent());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1628,"to":1668}}}}],["49a455dd-180c-4f74-822d-d307df69ab37",{"pageContent":"Iterate using regular for loop:\n\n```js\nconst rows = page.getByRole('listitem');\nconst count = await rows.count();\nfor (let i = 0; i < count; ++i)\n  console.log(await rows.nth(i).textContent());\n```\n\n```python async\nrows = page.get_by_role(\"listitem\")\ncount = await rows.count()\nfor i in range(count):\n    print(await rows.nth(i).text_content())\n```\n\n```python sync\nrows = page.get_by_role(\"listitem\")\ncount = rows.count()\nfor i in range(count):\n    print(rows.nth(i).text_content())\n```\n\n```java\nLocator rows = page.getByRole(AriaRole.LISTITEM);\nint count = rows.count();\nfor (int i = 0; i < count; ++i)\n  System.out.println(rows.nth(i).textContent());\n```\n\n```csharp\nvar rows = page.GetByRole(AriaRole.Listitem);\nvar count = await rows.CountAsync();\nfor (int i = 0; i < count; ++i)\n  Console.WriteLine(await rows.Nth(i).TextContentAsync());\n```\n\n#### Evaluate in the page\n\nThe code inside [`method: Locator.evaluateAll`] runs in the page, you can call any DOM apis there.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1661,"to":1700}}}}],["7b2083f1-8a8f-4a68-9872-67f529bb6410",{"pageContent":"#### Evaluate in the page\n\nThe code inside [`method: Locator.evaluateAll`] runs in the page, you can call any DOM apis there.\n\n```js\nconst rows = page.getByRole('listitem');\nconst texts = await rows.evaluateAll(\n    list => list.map(element => element.textContent));\n```\n\n```python async\nrows = page.get_by_role(\"listitem\")\ntexts = await rows.evaluate_all(\"list => list.map(element => element.textContent)\")\n```\n\n```python sync\nrows = page.get_by_role(\"listitem\")\ntexts = rows.evaluate_all(\"list => list.map(element => element.textContent)\")\n```\n\n```java\nLocator rows = page.getByRole(AriaRole.LISTITEM);\nObject texts = rows.evaluateAll(\n    \"list => list.map(element => element.textContent)\");\n```\n```csharp\nvar rows = page.GetByRole(AriaRole.Listitem);\nvar texts = await rows.EvaluateAllAsync(\n    \"list => list.map(element => element.textContent)\");\n```\n## Strictness","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1698,"to":1728}}}}],["d50a290a-6c66-4a74-8412-29f073bae039",{"pageContent":"Locators are strict. This means that all operations on locators that imply\nsome target DOM element will throw an exception if more than one element matches. For example, the following call throws if there are several buttons in the DOM:\n\n#### Throws an error if more than one\n```js\nawait page.getByRole('button').click();\n```\n\n```python async\nawait page.get_by_role(\"button\").click()\n```\n\n```python sync\npage.get_by_role(\"button\").click()\n```\n\n```java\npage.getByRole(AriaRole.BUTTON).click();\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n```\n\nOn the other hand, Playwright understands when you perform a multiple-element operation,\nso the following call works perfectly fine when the locator resolves to multiple elements.\n\n#### Works fine with multiple elements\n\n```js\nawait page.getByRole('button').count();\n```\n\n```python async\nawait page.get_by_role(\"button\").count()\n```\n\n```python sync\npage.get_by_role(\"button\").count()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1730,"to":1769}}}}],["8491e6ba-fa10-4466-a9e0-dd2c3810ca0a",{"pageContent":"```js\nawait page.getByRole('button').count();\n```\n\n```python async\nawait page.get_by_role(\"button\").count()\n```\n\n```python sync\npage.get_by_role(\"button\").count()\n```\n\n```java\npage.getByRole(AriaRole.BUTTON).count();\n```\n\n```csharp\nawait page.GetByRole(AriaRole.Button).CountAsync();\n```\n\nYou can explicitly opt-out from strictness check by telling Playwright which element to use when multiple elements match, through [`method: Locator.first`], [`method: Locator.last`], and [`method: Locator.nth`]. These methods are **not recommended** because when your page changes, Playwright may click on an element you did not intend. Instead, follow best practices above to create a locator that uniquely identifies the target element.\n\n## More Locators\n\nFor less commonly used locators, look at the [other locators](./other-locators.md) guide.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-locators.md","title":"src-locators","url":"https://playwright.dev/docs/src-locators","loc":{"lines":{"from":1759,"to":1783}}}}],["370a3157-eda7-4bc7-89a8-96493a6fd264",{"pageContent":"---\nid: mock-browser-apis\ntitle: \"Mock browser APIs\"\n---\n\n## Introduction\n\nPlaywright provides native support for most of the browser features. However, there are some experimental APIs\nand APIs which are not (yet) fully supported by all browsers. Playwright usually doesn't provide dedicated\nautomation APIs in such cases. You can use mocks to test the behavior of your application in such cases. This guide gives a few examples.\n\nLet's consider a web app that uses [battery API](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery)\nto show your device's battery status. We'll mock the battery API and check that the page correctly displays the\nbattery status.\n\n## Creating mocks\n\nSince the page may be calling the API very early while loading it's important to setup all the mocks before the page started loading. The easiest way to achieve that is to call [`method: Page.addInitScript`]:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":1,"to":18}}}}],["6cd01763-481a-4964-a8f5-dfb02c08f251",{"pageContent":"```js\nawait page.addInitScript(() => {\n  const mockBattery = {\n    level: 0.75,\n    charging: true,\n    chargingTime: 1800,\n    dischargingTime: Infinity,\n    addEventListener: () => { }\n  };\n  // Override the method to always return mock battery info.\n  window.navigator.getBattery = async () => mockBattery;\n});\n```\n\nOnce this is done you can navigate the page and check its UI state:\n\n```js\n// Configure mock API before each test.\ntest.beforeEach(async ({ page }) => {\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.90,\n      charging: true,\n      chargingTime: 1800, // seconds\n      dischargingTime: Infinity,\n      addEventListener: () => { }\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n  });\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":20,"to":50}}}}],["4a1269de-34f8-45c1-9608-71b3cf242cb5",{"pageContent":"test('show battery status', async ({ page }) => {\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('90%');\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n\n```\n\n## Mocking read-only APIs\n\nSome APIs are read-only so you won't be able to assign to a navigator property. For example,\n\n```js\n// Following line will have no effect.\nnavigator.cookieEnabled = true;\n```\n\nHowever, if the property is [configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#configurable), you can still override it using the plain JavaScript:\n\n```js\nawait page.addInitScript(() => {\n  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });\n});\n```\n\n## Verifying API calls","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":52,"to":78}}}}],["2459c746-505c-48d1-bb2f-bb7480a1d351",{"pageContent":"```js\nawait page.addInitScript(() => {\n  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });\n});\n```\n\n## Verifying API calls\n\nSometimes it is useful to check if the page made all expected APIs calls. You can\nrecord all API method invocations and then compare them with golden result.\n[`method: Page.exposeFunction`] may come in handy for passing message from\nthe page back to the test code:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":72,"to":83}}}}],["f9fedf42-87f3-4881-b199-e40c0608dad5",{"pageContent":"```js\ntest('log battery calls', async ({ page }) => {\n  const log = [];\n  // Expose function for pushing messages to the Node.js script.\n  await page.exposeFunction('logCall', msg => log.push(msg));\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.75,\n      charging: true,\n      chargingTime: 1800,\n      dischargingTime: Infinity,\n      // Log addEventListener calls.\n      addEventListener: (name, cb) => logCall(`addEventListener:${name}`)\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => {\n      logCall('getBattery');\n      return mockBattery;\n    };\n  });\n\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('75%');\n\n  // Compare actual calls with golden.\n  expect(log).toEqual([\n    'getBattery',\n    'addEventListener:chargingchange',\n    'addEventListener:levelchange'\n  ]);\n});\n```\n\n## Updating mock","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":85,"to":118}}}}],["2a163997-db09-4d77-8054-18a30e7a1b36",{"pageContent":"// Compare actual calls with golden.\n  expect(log).toEqual([\n    'getBattery',\n    'addEventListener:chargingchange',\n    'addEventListener:levelchange'\n  ]);\n});\n```\n\n## Updating mock\n\nTo test that the app correctly reflects battery status updates it's important to\nmake sure that the mock battery object fires same events that the browser implementation\nwould. The following test demonstrates how to achieve that:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":109,"to":122}}}}],["95280bd1-54a6-4fe5-8f41-589f7d5464bb",{"pageContent":"```js\ntest('update battery status (no golden)', async ({ page }) => {\n  await page.addInitScript(() => {\n    // Mock class that will notify corresponding listeners when battery status changes.\n    class BatteryMock {\n      level = 0.10;\n      charging = false;\n      chargingTime = 1800;\n      dischargingTime = Infinity;\n      _chargingListeners = [];\n      _levelListeners = [];\n      addEventListener(eventName, listener) {\n        if (eventName === 'chargingchange')\n          this._chargingListeners.push(listener);\n        if (eventName === 'levelchange')\n          this._levelListeners.push(listener);\n      }\n      // Will be called by the test.\n      _setLevel(value) {\n        this.level = value;\n        this._levelListeners.forEach(cb => cb());\n      }\n      _setCharging(value) {\n        this.charging = value;\n        this._chargingListeners.forEach(cb => cb());\n      }\n    }\n    const mockBattery = new BatteryMock();\n    // Override the method to always return mock battery info.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":124,"to":152}}}}],["9cad3006-5d6b-4362-bf18-f090a0f183f1",{"pageContent":"this._chargingListeners.forEach(cb => cb());\n      }\n    }\n    const mockBattery = new BatteryMock();\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n    // Save the mock object on window for easier access.\n    window.mockBattery = mockBattery;\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":148,"to":156}}}}],["2f749b45-e1e9-4f00-9259-ea9feff903ff",{"pageContent":"await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('10%');\n\n  // Update level to 27.5%\n  await page.evaluate(() => window.mockBattery._setLevel(0.275));\n  await expect(page.locator('.battery-percentage')).toHaveText('27.5%');\n  await expect(page.locator('.battery-status')).toHaveText('Battery');\n\n  // Emulate connected adapter\n  await page.evaluate(() => window.mockBattery._setCharging(true));\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock-browser-js.md","title":"src-mock-browser-js","url":"https://playwright.dev/docs/src-mock-browser-js","loc":{"lines":{"from":158,"to":171}}}}],["9ebd2c69-edb8-47ec-b863-7791bb692af1",{"pageContent":"---\nid: mock\ntitle: \"Mock APIs\"\n---\n\n## Introduction\n\nWeb APIs are usually implemented as HTTP endpoints. Playwright provides APIs to **mock** and **modify** network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and\n[fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and mocked. With Playwright you can also mock using HAR files that contain multiple network requests made by the page.\n\n## Mock API requests\n\nThe following code will intercept all the calls to `*/**/api/v1/fruits` and will return a custom response instead. No requests to the API will be made. The test goes to the URL that uses the mocked route and asserts that mock data is present on the page.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":1,"to":13}}}}],["0387baf9-98d7-4e73-81f0-949ab9983c00",{"pageContent":"```js\ntest(\"mocks a fruit and doesn't call api\", async ({ page }) => {\n  // Mock the api call before navigating\n  await page.route('*/**/api/v1/fruits', async route => {\n    const json = [{ name: 'Strawberry', id: 21 }];\n    await route.fulfill({ json });\n  });\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the Strawberry fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\n```python async\nasync def test_mock_the_fruit_api(page: Page):\n    async def handle(route: Route):\n        json = [{\"name\": \"Strawberry\", \"id\": 21}]\n        # fulfill the route with the mock data\n        await route.fulfill(json=json)\n\n    # Intercept the route to the fruit API\n    await page.route(\"*/**/api/v1/fruits\", handle)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Strawberry fruit is visible\n    await expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":15,"to":45}}}}],["353e68fd-3896-4ad9-b90d-c4ce0cd761b5",{"pageContent":"# Assert that the Strawberry fruit is visible\n    await expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n```python sync\ndef test_mock_the_fruit_api(page: Page):\n    def handle(route: Route):\n        json = [{\"name\": \"Strawberry\", \"id\": 21}]\n        # fulfill the route with the mock data\n        route.fulfill(json=json)\n\n    # Intercept the route to the fruit API\n    page.route(\"*/**/api/v1/fruits\", handle)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Strawberry fruit is visible\n    expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n```csharp\n// Intercept the route to the fruit API\nawait page.RouteAsync(\"*/**/api/v1/fruits\", async route => {\n  var json = new[] { new { name = \"Strawberry\", id = 21 } };\n  // fulfill the route with the mock data\n  await route.FulfillAsync(new()\n  {\n    Json = json\n  });\n});\n\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":43,"to":76}}}}],["f1ecbdf7-79f5-4162-ae45-b39e68ac3291",{"pageContent":"// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Strawberry fruit is visible\nawait Expect(page.GetByTextAsync(\"Strawberry\")).ToBeVisibleAsync();\n```\n\n```java\n// Intercept the route to the fruit API\npage.route(\"https://fruit.ceo/api/breeds/image/random\", route -> {\n    List<Dictionary<String, Object>> data = new ArrayList<Dictionary<String, Object>>();\n    Hashtable<String, Object> dict = new Hashtable<String, Object>();\n    dict.put(\"name\", \"Strawberry\");\n    dict.put(\"id\", 21);\n    data.add(dict);\n  // fulfill the route with the mock data\n  route.fulfill(RequestOptions.create().setData(data));\n});\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Strawberry fruit is visible\nassertThat(page.getByText(\"Strawberry\")).isVisible();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":75,"to":99}}}}],["8616e60b-0f71-4e1f-924b-e900c275b781",{"pageContent":"// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Strawberry fruit is visible\nassertThat(page.getByText(\"Strawberry\")).isVisible();\n```\n\nYou can see from the trace of the example test that the API was never called, it was however fulfilled with the mock data.\n![api mocking trace](https://github.com/microsoft/playwright/assets/13063165/3dc14cbf-c100-4efc-ac21-d7b52d698b53)\n\nRead more about [advanced networking](./network.md).\n\n## Modify API responses\n\nSometimes, it is essential to make an API request, but the response needs to be patched to\nallow for reproducible testing. In that case, instead of mocking the request, one\ncan perform the request and fulfill it with the modified response.\n\nIn the example below we intercept the call to the fruit API and add a new fruit called 'Loquat', to the data. We then go to the url and assert that this data is there:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":94,"to":112}}}}],["f374081e-d5cb-4102-9bf2-b48b85f0be3a",{"pageContent":"In the example below we intercept the call to the fruit API and add a new fruit called 'Loquat', to the data. We then go to the url and assert that this data is there:\n\n\n```js\ntest('gets the json from api and adds a new fruit', async ({ page }) => {\n  // Get the response and add to it\n  await page.route('*/**/api/v1/fruits', async route => {\n    const response = await route.fetch();\n    const json = await response.json();\n    json.push({ name: 'Loquat', id: 100 });\n    // Fulfill using the original response, while patching the response body\n    // with the given JSON object.\n    await route.fulfill({ response, json });\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the new fruit is visible\n  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":112,"to":133}}}}],["eda70522-c1df-429b-9666-75abe8b58263",{"pageContent":"// Assert that the new fruit is visible\n  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();\n});\n```\n\n```python async\nasync def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):\n    async def handle(route: Route):\n        response = await route.fetch()\n        json = await response.json()\n        json.append({ \"name\": \"Loquat\", \"id\": 100})\n        # Fulfill using the original response, while patching the response body\n        # with the given JSON object.\n        await route.fulfill(response=response, json=json)\n\n    await page.route(\"https://demo.playwright.dev/api-mocking/api/v1/fruits\", handle)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the new fruit is visible\n    await expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":130,"to":152}}}}],["4aa48e45-d1aa-4ae1-8618-b35b84687ca2",{"pageContent":"# Assert that the new fruit is visible\n    await expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```\n\n```python sync\ndef test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):\n    def handle(route: Route):\n        response = route.fetch()\n        json = response.json()\n        json.append({ \"name\": \"Loquat\", \"id\": 100})\n        # Fulfill using the original response, while patching the response body\n        # with the given JSON object.\n        route.fulfill(response=response, json=json)\n\n    page.route(\"https://demo.playwright.dev/api-mocking/api/v1/fruits\", handle)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the new fruit is visible\n    expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":150,"to":171}}}}],["fb5d0a9d-63f2-4a69-b201-086649b44c69",{"pageContent":"# Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the new fruit is visible\n    expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```\n\n```csharp\nawait page.RouteAsync(\"*/**/api/v1/fruits\", async (route) => {\n    var response = await route.FetchAsync();\n    var fruits = await response.JsonAsync<Fruit[]>();\n    fruits.Add(new Fruit() { Name = \"Loquat\", Id = 100 });\n    // Fulfill using the original response, while patching the response body\n    // with the given JSON object.\n    await route.FulfillAsync(new ()\n    {\n      Response = response,\n      Json = fruits\n    });\n  }\n);\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Loquat fruit is visible\nawait Expect(page.GetByTextAsync(\"Loquat\", new () { Exact = true })).ToBeVisibleAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":166,"to":192}}}}],["03680649-b7da-48ce-a8e5-2f5de64579fb",{"pageContent":"// Assert that the Loquat fruit is visible\nawait Expect(page.GetByTextAsync(\"Loquat\", new () { Exact = true })).ToBeVisibleAsync();\n```\n\n```java\npage.route(\"*/**/api/v1/fruits\", route -> {\n  Response response = route.fetch();\n  byte[] json = response.body();\n  JsonObject parsed = new Gson().fromJson(new String(json), JsonObject.class);\n  parsed.add(new JsonObject().add(\"name\", \"Loquat\").add(\"id\", 100));\n  // Fulfill using the original response, while patching the response body\n  // with the given JSON object.\n  route.fulfill(new Route.FulfillOptions().setResponse(response).setBody(parsed.toString()));\n});\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Loquat fruit is visible\nassertThat(page.getByText(\"Loquat\", new Page.GetByTextOptions().setExact(true))).isVisible();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":190,"to":210}}}}],["b975c7a8-5458-401e-9804-5ec931b9de95",{"pageContent":"// Assert that the Loquat fruit is visible\nassertThat(page.getByText(\"Loquat\", new Page.GetByTextOptions().setExact(true))).isVisible();\n```\n\nIn the trace of our test we can see that the API was called and the response was modified.\n![trace of test showing api being called and fulfilled](https://github.com/microsoft/playwright/assets/13063165/8b8dd82d-1b3e-428e-871b-840581fed439)\n\nBy inspecting the response we can see that our new fruit was added to the list.\n![trace of test showing the mock response](https://github.com/microsoft/playwright/assets/13063165/03e6c87c-4ecc-47e8-9ca0-30fface25e9d)\n\nRead more about [advanced networking](./network.md).\n\n## Mocking with HAR files","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":208,"to":220}}}}],["cbb42d5b-25f0-46d3-a310-6e7fe881cae8",{"pageContent":"Read more about [advanced networking](./network.md).\n\n## Mocking with HAR files\n\nA HAR file is an [HTTP Archive](http://www.softwareishard.com/blog/har-12-spec/) file that contains a record of all the network requests that are made when a page is loaded. It contains information about the request and response headers, cookies, content, timings, and more. You can use HAR files to mock network requests in your tests. You'll need to:\n\n1. Record a HAR file.\n1. Commit the HAR file alongside the tests.\n1. Route requests using the saved HAR files in the tests.\n\n### Recording a HAR file\n\nTo record a HAR file we use [`method: Page.routeFromHAR`] or [`method: BrowserContext.routeFromHAR`] method. This method takes in the path to the HAR file and an optional object of options.\nThe options object can contain the URL so that only requests with the URL matching the specified glob pattern will be served from the HAR File. If not specified, all requests will be served from the HAR file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":218,"to":231}}}}],["4283092c-4bff-4ea7-b956-1effa1ae4d98",{"pageContent":"Setting `update` option to true will create or update the HAR file with the actual network information instead of serving the requests from the HAR file. Use it when creating a test to populate the HAR with real data.\n\n```js\ntest('records or updates the HAR file', async ({ page }) => {\n  // Get the response from the HAR file\n  await page.routeFromHAR('./hars/fruit.har', {\n    url: '*/**/api/v1/fruits',\n    update: true,\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\n```python async\nasync def test_records_or_updates_the_har_file(page: Page):\n    # Get the response from the HAR file\n    await page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=True)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":233,"to":257}}}}],["0d8b279a-e034-47c8-9069-72132ee610fe",{"pageContent":"# Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the fruit is visible\n    await expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n```python sync\ndef test_records_or_updates_the_har_file(page: Page):\n    # Get the response from the HAR file\n    page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=True)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the fruit is visible\n    expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n```csharp\n// Get the response from the HAR file\nawait page.RouteFromHARAsync(\"./hars/fruit.har\", new () {\n  Url = \"*/**/api/v1/fruits\",\n  Update = true,\n});\n\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the fruit is visible\nawait Expect(page.GetByText(\"Strawberry\")).ToBeVisibleAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":256,"to":287}}}}],["5a92a51b-4b45-47b2-86ae-0dcdd429c283",{"pageContent":"// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the fruit is visible\nawait Expect(page.GetByText(\"Strawberry\")).ToBeVisibleAsync();\n```\n\n```java\n// Get the response from the HAR file\npage.routeFromHAR(Path.of(\"./hars/fruit.har\"), new RouteFromHAROptions()\n  .setUrl(\"*/**/api/v1/fruits\")\n  .setUpdate(true)\n);\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the fruit is visible\nassertThat(page.getByText(\"Strawberry\")).isVisible();\n```\n\n### Modifying a HAR file\n\nOnce you have recorded a HAR file you can modify it by opening the hashed .txt file inside your 'hars' folder and editing the JSON. This file should be committed to your source control. Anytime you run this test with `update: true` it will update your HAR file with the request from the API.\n\n```json\n[\n  {\n    \"name\": \"Playwright\",\n    \"id\": 100\n  },\n  // ... other fruits\n]\n```\n\n### Replaying from HAR","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":282,"to":317}}}}],["608233fe-3caf-4c6b-bbf5-86856dfecb6d",{"pageContent":"```json\n[\n  {\n    \"name\": \"Playwright\",\n    \"id\": 100\n  },\n  // ... other fruits\n]\n```\n\n### Replaying from HAR\n\nNow that you have the HAR file recorded and modified the mock data, it can be used to serve matching responses in the test. For this, just turn off or simply remove the `update` option. This will run the test against the HAR file instead of hitting the API.\n\n```js\ntest('gets the json from HAR and checks the new fruit has been added', async ({ page }) => {\n  // Replay API requests from HAR.\n  // Either use a matching response from the HAR,\n  // or abort the request if nothing matches.\n  await page.routeFromHAR('./hars/fruit.har', {\n    url: '*/**/api/v1/fruits',\n    update: false,\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the Playwright fruit is visible\n  await expect(page.getByText('Playwright', { exact: true })).toBeVisible();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":307,"to":337}}}}],["0393f4ca-01c8-4c61-8faf-8ce2863caef6",{"pageContent":"// Assert that the Playwright fruit is visible\n  await expect(page.getByText('Playwright', { exact: true })).toBeVisible();\n});\n```\n\n```python async\nasync def test_gets_the_json_from_har_and_checks_the_new_fruit_has_been_added(page: Page):\n    # Replay API requests from HAR.\n    # Either use a matching response from the HAR,\n    # or abort the request if nothing matches.\n    await page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=False)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Playwright fruit is visible\n    await expect(page.get_by_text(\"Playwright\", exact=True)).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":334,"to":351}}}}],["faa0181d-204f-4f8f-ab17-e5f363731d37",{"pageContent":"# Assert that the Playwright fruit is visible\n    await expect(page.get_by_text(\"Playwright\", exact=True)).to_be_visible()\n```\n\n```python sync\ndef test_gets_the_json_from_har_and_checks_the_new_fruit_has_been_added(page: Page):\n    # Replay API requests from HAR.\n    # Either use a matching response from the HAR,\n    # or abort the request if nothing matches.\n    page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=False)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Playwright fruit is visible\n    expect(page.get_by_text(\"Playwright\", exact=True)).to_be_visible()\n```\n\n```csharp\n// Replay API requests from HAR.\n// Either use a matching response from the HAR,\n// or abort the request if nothing matches.\nawait page.RouteFromHARAsync(\"./hars/fruit.har\", new ()\n  {\n    Url = \"*/**/api/v1/fruits\",\n    Update = false,\n  }\n);\n\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":349,"to":379}}}}],["fad85067-f1bc-4e4e-a188-0b0ec9507906",{"pageContent":"// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Playwright fruit is visible\nawait page.ExpectByTextAsync(\"Playwright\", new() { Exact = true }).ToBeVisibleAsync();\n```\n\n```java\n// Replay API requests from HAR.\n// Either use a matching response from the HAR,\n// or abort the request if nothing matches.\npage.routeFromHAR(Path.of(\"./hars/fruit.har\"), new RouteFromHAROptions()\n  .setUrl(\"*/**/api/v1/fruits\")\n  .setUpdate(false)\n);\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Playwright fruit is visible\nassertThat(page.getByText(\"Playwright\", new Page.GetByTextOptions()\n  .setExact(true))).isVisible();\n```\nIn the trace of our test we can see that the route was fulfilled from the HAR file and the API was not called.\n![trace showing the HAR file being used](https://github.com/microsoft/playwright/assets/13063165/1bd7ab66-ea4f-43c2-a4e5-ca17d4837ff1)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":378,"to":402}}}}],["2fb31c8c-2e81-417b-9386-cf6dbc74de0a",{"pageContent":"If we inspect the response we can see our new fruit was added to the JSON, which was done by manually updating the hashed `.txt` file inside the `hars` folder.\n![trace showing response from HAR file](https://github.com/microsoft/playwright/assets/13063165/db3117fc-7b02-4973-9a51-29e213261a6a)\n\nHAR replay matches URL and HTTP method strictly. For POST requests, it also matches POST payloads strictly. If multiple recordings match a request, the one with the most matching headers is picked. An entry resulting in a redirect will be followed automatically.\n\nSimilar to when recording, if given HAR file name ends with `.zip`, it is considered an archive containing the HAR file along with network payloads stored as separate entries. You can also extract this archive, edit payloads or HAR log manually and point to the extracted har file. All the payloads will be resolved relative to the extracted har file on the file system.\n\n#### Recording HAR with CLI","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":404,"to":411}}}}],["67ef2236-7407-40c4-a8a2-6686ef001743",{"pageContent":"#### Recording HAR with CLI\n\nWe recommend the `update` option to record HAR file for your test. However, you can also record the HAR with Playwright CLI.\n\nOpen the browser with Playwright CLI and pass `--save-har` option to produce a HAR file. Optionally, use `--save-har-glob` to only save requests you are interested in, for example API endpoints. If the har file name ends with `.zip`, artifacts are written as separate files and are all compressed into a single `zip`.\n\n```bash js\n# Save API requests from example.com as \"example.har\" archive.\nnpx playwright open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\n```bash java\n# Save API requests from example.com as \"example.har\" archive.\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"open --save-har=example.har --save-har-glob='**/api/**' https://example.com\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":411,"to":425}}}}],["daa928c1-4849-40e1-9061-6ab3a1c4313c",{"pageContent":"```bash python\n# Save API requests from example.com as \"example.har\" archive.\nplaywright open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\n```bash csharp\n# Save API requests from example.com as \"example.har\" archive.\npwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\nRead more about [advanced networking](./network.md).\n\n## Mock WebSockets\n\nThe following code will intercept WebSocket connections and mock entire communcation over the WebSocket, instead of connecting to the server. This example responds to a `\"request\"` with a `\"response\"`.\n\n```js\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\n```java\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":427,"to":459}}}}],["8d067240-cc7b-4b2e-990c-7b78b9faa067",{"pageContent":"```java\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\n```python async\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\nawait page.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n```python sync\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\npage.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n```csharp\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":452,"to":488}}}}],["f2ab80e3-c0c2-4c63-8771-8b0ed8d4926d",{"pageContent":"```csharp\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\nAlternatively, you may want to connect to the actual server, but intercept messages in-between and modify or block them. Here is an example that modifies some of the messages sent by the page to the server, and leaves the rest unmodified.\n\n```js\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  const server = ws.connectToServer();\n  ws.onMessage(message => {\n    if (message === 'request')\n      server.send('request2');\n    else\n      server.send(message);\n  });\n});\n```\n\n```java\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  WebSocketRoute server = ws.connectToServer();\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      server.send(\"request2\");\n    else\n      server.send(frame.text());\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":481,"to":514}}}}],["0372a81a-8dc4-4e1e-bfa7-5094fb00c6b4",{"pageContent":"```python async\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\nawait page.route_web_socket(\"wss://example.com/ws\", handler)\n```\n\n```python sync\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\npage.route_web_socket(\"wss://example.com/ws\", handler)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":516,"to":542}}}}],["b2bcd82e-ed4d-4624-a3f2-d61021b0a0ae",{"pageContent":"def handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\npage.route_web_socket(\"wss://example.com/ws\", handler)\n```\n\n```csharp\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  var server = ws.ConnectToServer();\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      server.Send(\"request2\");\n    else\n      server.Send(frame.Text);\n  });\n});\n```\n\nFor more details, see [WebSocketRoute].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-mock.md","title":"src-mock","url":"https://playwright.dev/docs/src-mock","loc":{"lines":{"from":537,"to":556}}}}],["bcdb7eea-c009-49ba-b900-fe01379c588d",{"pageContent":"---\nid: navigations\ntitle: \"Navigations\"\n---\n\n## Introduction\n\nPlaywright can navigate to URLs and handle navigations caused by the page interactions.\n\n## Basic navigation\n\nSimplest form of a navigation is opening a URL:\n\n```js\n// Navigate the page\nawait page.goto('https://example.com');\n```\n\n```java\n// Navigate the page\npage.navigate(\"https://example.com\");\n```\n\n```python async\n# Navigate the page\nawait page.goto(\"https://example.com\")\n```\n\n```python sync\n# Navigate the page\npage.goto(\"https://example.com\")\n```\n\n```csharp\n// Navigate the page\nawait page.GotoAsync(\"https://example.com\");\n```\n\nThe code above loads the page and waits for the web page to fire the\n[load](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event) event.\nThe load event is fired when the whole page has loaded, including all dependent\nresources such as stylesheets, scripts, iframes, and images.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":1,"to":42}}}}],["503411d7-f7ee-41d5-90b9-1c41df547807",{"pageContent":":::note\nIf the page does a client-side redirect before `load`, [`method: Page.goto`] will\nwait for the redirected page to fire the `load` event.\n:::\n\n## When is the page loaded?\n\nModern pages perform numerous activities after the `load` event was fired. They\nfetch data lazily, populate UI, load expensive resources, scripts and styles after\nthe `load` event was fired. There is no way to tell that the page is `loaded`,\nit depends on the page, framework, etc. So when can you start interacting with\nit?\n\nIn Playwright you can interact with the page at any moment. It will automatically\nwait for the target elements to become [actionable](./actionability.md).\n\n```js\n// Navigate and click element\n// Click will auto-wait for the element\nawait page.goto('https://example.com');\nawait page.getByText('Example Domain').click();\n```\n\n```java\n// Navigate and click element\n// Click will auto-wait for the element\npage.navigate(\"https://example.com\");\npage.getByText(\"Example Domain\").click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":44,"to":72}}}}],["89a4ee1c-3140-4519-bf97-c348f313c397",{"pageContent":"```java\n// Navigate and click element\n// Click will auto-wait for the element\npage.navigate(\"https://example.com\");\npage.getByText(\"Example Domain\").click();\n```\n\n```python async\n# Navigate and click element\n# Click will auto-wait for the element\nawait page.goto(\"https://example.com\")\nawait page.get_by_text(\"example domain\").click()\n```\n\n```python sync\n# Navigate and click element\n# Click will auto-wait for the element\npage.goto(\"https://example.com\")\npage.get_by_text(\"example domain\").click()\n```\n\n```csharp\n// Navigate and click element\n// Click will auto-wait for the element\nawait page.GotoAsync(\"https://example.com\");\nawait page.GetByText(\"Example Domain\").ClickAsync();\n```\n\nFor the scenario above, Playwright will wait for the text to become visible,\nwill wait for the rest of the actionability checks to pass for that element,\nand will click it.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":67,"to":97}}}}],["1f8c4584-88fc-415f-8454-6f032da2ae88",{"pageContent":"For the scenario above, Playwright will wait for the text to become visible,\nwill wait for the rest of the actionability checks to pass for that element,\nand will click it.\n\nPlaywright operates as a very fast user - the moment it sees the button, it\nclicks it. In the general case, you don't need to worry about whether all the\nresources loaded, etc. \n\n## Hydration\n\nAt some point in time, you'll stumble upon a use case where Playwright performs\nan action, but nothing seemingly happens. Or you enter some text into the input\nfield and it will disappear. The most probable reason behind that is a poor page\n[hydration](https://en.wikipedia.org/wiki/Hydration_(web_development)).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":95,"to":108}}}}],["40dbb416-d0a8-4880-b6b2-7eecbad474bd",{"pageContent":"When page is hydrated, first, a static version of the page is sent to the browser.\nThen the dynamic part is sent and the page becomes \"live\". As a very fast user,\nPlaywright will start interacting with the page the moment it sees it. And if\nthe button on a page is enabled, but the listeners have not yet been added,\nPlaywright will do its job, but the click won't have any effect.\n\nA simple way to verify if your page suffers from a poor hydration is to open Chrome\nDevTools, pick \"Slow 3G\" network emulation in the Network panel and reload the page.\nOnce you see the element of interest, interact with it. You'll see that the button\nclicks will be ignored and the entered text will be reset by the subsequent page\nload code. The right fix for this issue is to make sure that all the interactive\ncontrols are disabled until after the hydration, when the page is fully functional.\n\n## Waiting for navigation","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":110,"to":123}}}}],["22f8a2ca-ef28-42cf-936d-2bb5c51ebc2c",{"pageContent":"## Waiting for navigation\n\nClicking an element could trigger multiple navigations. In these cases, it is\nrecommended to explicitly [`method: Page.waitForURL`] to a specific url.\n\n```js\nawait page.getByText('Click me').click();\nawait page.waitForURL('**/login');\n```\n\n```java\npage.getByText(\"Click me\").click();\npage.waitForURL(\"**/login\");\n```\n\n```python async\nawait page.get_by_text(\"Click me\").click()\nawait page.wait_for_url(\"**/login\")\n```\n\n```python sync\npage.get_by_text(\"Click me\").click()\npage.wait_for_url(\"**/login\")\n```\n\n```csharp\nawait page.GetByText(\"Click me\").ClickAsync();\nawait page.WaitForURL(\"**/login\");\n```\n\n## Navigation events\n\nPlaywright splits the process of showing a new document in a page into **navigation** and **loading**.\n\n**Navigation starts** by changing the page URL or by interacting with the page (e.g., clicking a link).\nThe navigation intent may be canceled, for example, on hitting an unresolved DNS address or transformed into a file download.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":123,"to":158}}}}],["021f1223-8f32-48d2-bc6a-b85e2fd8fb47",{"pageContent":"**Navigation is committed** when the response headers have been parsed and session history is updated. Only after the\nnavigation succeeds (is committed), the page starts **loading** the document.\n\n**Loading** covers getting the remaining response body over the network, parsing, executing the scripts and firing load\nevents:\n- [`method: Page.url`] is set to the new url\n- document content is loaded over network and parsed\n- [`event: Page.DOMContentLoaded`] event is fired\n- page executes some scripts and loads resources like stylesheets and images\n- [`event: Page.load`] event is fired\n- page executes dynamically loaded scripts","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-navigations.md","title":"src-navigations","url":"https://playwright.dev/docs/src-navigations","loc":{"lines":{"from":160,"to":170}}}}],["a38d9d0e-a90f-4692-a8fa-35baa5122d74",{"pageContent":"---\nid: network\ntitle: \"Network\"\n---\n## Introduction\n\nPlaywright provides APIs to **monitor** and **modify** browser network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and\n[fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and handled.\n\n\n## Mock APIs\n\nCheck out our [API mocking guide](./mock.md) to learn more on how to\n- mock API requests and never hit the API\n- perform the API request and modify the response\n- use HAR files to mock network requests.\n\n## Network mocking\n* langs: js\n\nYou don't have to configure anything to mock network requests. Just define a custom [Route] that mocks network for a browser context.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":1,"to":24}}}}],["2a6ad3ec-29e8-4c96-9aa0-3e21d070d5bf",{"pageContent":"```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Block any css requests for each test in this file.\n  await context.route(/.css$/, route => route.abort());\n});\n\ntest('loads page without css', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\nAlternatively, you can use [`method: Page.route`] to mock network in a single page.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('loads page without images', async ({ page }) => {\n  // Block png and jpeg images.\n  await page.route(/(png|jpeg)$/, route => route.abort());\n\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\n## HTTP Authentication\n\nPerform HTTP Authentication.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":23,"to":53}}}}],["04e03b14-8cc8-4dfe-b702-d8a8d1c06b83",{"pageContent":"await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\n## HTTP Authentication\n\nPerform HTTP Authentication.\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'bill',\n      password: 'pa55w0rd',\n    }\n  }\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  httpCredentials: {\n    username: 'bill',\n    password: 'pa55w0rd',\n  },\n});\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setHttpCredentials(\"bill\", \"pa55w0rd\"));\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\n```\n\n```python async\ncontext = await browser.new_context(\n    http_credentials={\"username\": \"bill\", \"password\": \"pa55w0rd\"}\n)\npage = await context.new_page()\nawait page.goto(\"https://example.com\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":46,"to":91}}}}],["f472af2c-10ee-4622-97e1-2b8760af3f31",{"pageContent":"```python async\ncontext = await browser.new_context(\n    http_credentials={\"username\": \"bill\", \"password\": \"pa55w0rd\"}\n)\npage = await context.new_page()\nawait page.goto(\"https://example.com\")\n```\n\n```python sync\ncontext = browser.new_context(\n    http_credentials={\"username\": \"bill\", \"password\": \"pa55w0rd\"}\n)\npage = context.new_page()\npage.goto(\"https://example.com\")\n```\n\n```csharp\nusing var context = await Browser.NewContextAsync(new()\n{\n    HttpCredentials = new HttpCredentials\n    {\n        Username = \"bill\",\n        Password = \"pa55w0rd\"\n    },\n});\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://example.com\");\n```\n## HTTP Proxy\n\nYou can configure pages to load over the HTTP(S) proxy or SOCKSv5. Proxy can be either set globally\nfor the entire browser, or for each browser context individually.\n\nYou can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass the [`option: Browser.newContext.proxy`] for.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":85,"to":118}}}}],["5f34e0ca-e8ef-4b29-a83f-502706e5d9bb",{"pageContent":"You can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass the [`option: Browser.newContext.proxy`] for.\n\nHere is an example of a global proxy:\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      username: 'usr',\n      password: 'pwd'\n    }\n  }\n});\n```\n\n```js tab=js-library\nconst browser = await chromium.launch({\n  proxy: {\n    server: 'http://myproxy.com:3128',\n    username: 'usr',\n    password: 'pwd'\n  }\n});\n```\n\n```java\nBrowser browser = chromium.launch(new BrowserType.LaunchOptions()\n  .setProxy(new Proxy(\"http://myproxy.com:3128\")\n  .setUsername(\"usr\")\n  .setPassword(\"pwd\")));\n```\n\n```python async\nbrowser = await chromium.launch(proxy={\n  \"server\": \"http://myproxy.com:3128\",\n  \"username\": \"usr\",\n  \"password\": \"pwd\"\n})\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":118,"to":158}}}}],["791757ca-0781-4bcd-9906-aa946049d904",{"pageContent":"```python async\nbrowser = await chromium.launch(proxy={\n  \"server\": \"http://myproxy.com:3128\",\n  \"username\": \"usr\",\n  \"password\": \"pwd\"\n})\n```\n\n```python sync\nbrowser = chromium.launch(proxy={\n  \"server\": \"http://myproxy.com:3128\",\n  \"username\": \"usr\",\n  \"password\": \"pwd\"\n})\n```\n\n```csharp\nvar proxy = new Proxy\n{\n    Server = \"http://myproxy.com:3128\",\n    Username = \"user\",\n    Password = \"pwd\"\n};\nawait using var browser = await BrowserType.LaunchAsync(new()\n{\n    Proxy = proxy\n});\n```\n\nIts also possible to specify it per context:\n\n```js tab=js-test title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('should use custom proxy on a new context', async ({ browser }) => {\n  const context = await browser.newContext({\n    proxy: {\n      server: 'http://myproxy.com:3128',\n    }\n  });\n  const page = await context.newPage();\n\n  await context.close();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":152,"to":196}}}}],["02fbe0de-b747-447e-8349-f461a2dbee9d",{"pageContent":"await context.close();\n});\n```\n\n```js tab=js-library\nconst browser = await chromium.launch();\nconst context = await browser.newContext({\n  proxy: { server: 'http://myproxy.com:3128' }\n});\n```\n\n```java\nBrowser browser = chromium.launch();\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setProxy(new Proxy(\"http://myproxy.com:3128\")));\n```\n\n```python async\nbrowser = await chromium.launch()\ncontext = await browser.new_context(proxy={\"server\": \"http://myproxy.com:3128\"})\n```\n\n```python sync\nbrowser = chromium.launch()\ncontext = browser.new_context(proxy={\"server\": \"http://myproxy.com:3128\"})\n```\n\n```csharp\nawait using var browser = await BrowserType.LaunchAsync();\nawait using var context = await browser.NewContextAsync(new()\n{\n    Proxy = new Proxy { Server = \"http://myproxy.com:3128\" },\n});\n```\n\n## Network events\n\nYou can monitor all the [Request]s and [Response]s:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":194,"to":231}}}}],["bb6e927d-4fd4-4cdf-ae8a-eb24584e5cff",{"pageContent":"## Network events\n\nYou can monitor all the [Request]s and [Response]s:\n\n```js\n// Subscribe to 'request' and 'response' events.\npage.on('request', request => console.log('>>', request.method(), request.url()));\npage.on('response', response => console.log('<<', response.status(), response.url()));\n\nawait page.goto('https://example.com');\n```\n\n```java\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      page.onRequest(request -> System.out.println(\">> \" + request.method() + \" \" + request.url()));\n      page.onResponse(response -> System.out.println(\"<<\" + response.status() + \" \" + response.url()));\n      page.navigate(\"https://example.com\");\n      browser.close();\n    }\n  }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":229,"to":257}}}}],["f2c4b2d8-60fd-4f4d-a3c2-b64527ab323d",{"pageContent":"```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    # Subscribe to \"request\" and \"response\" events.\n    page.on(\"request\", lambda request: print(\">>\", request.method, request.url))\n    page.on(\"response\", lambda response: print(\"<<\", response.status, response.url))\n    await page.goto(\"https://example.com\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":259,"to":280}}}}],["5a354302-92e0-422c-b78c-610d7d4b7bdf",{"pageContent":"async def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    # Subscribe to \"request\" and \"response\" events.\n    page.on(\"request\", lambda request: print(\">>\", request.method, request.url))\n    page.on(\"response\", lambda response: print(\"<<\", response.status, response.url))\n    page.goto(\"https://example.com\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n```csharp\nusing Microsoft.Playwright;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":273,"to":297}}}}],["b51d3e90-2644-48d1-b49d-fd9b6179fb46",{"pageContent":"with sync_playwright() as playwright:\n    run(playwright)\n```\n\n```csharp\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\npage.Request += (_, request) => Console.WriteLine(\">> \" + request.Method + \" \" + request.Url);\npage.Response += (_, response) => Console.WriteLine(\"<< \" + response.Status + \" \" + response.Url);\nawait page.GotoAsync(\"https://example.com\");\n```\n\nOr wait for a network response after the button click with [`method: Page.waitForResponse`]:\n\n```js\n// Use a glob URL pattern. Note no await.\nconst responsePromise = page.waitForResponse('**/api/fetch_data');\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\n```java\n// Use a glob URL pattern\nResponse response = page.waitForResponse(\"**/api/fetch_data\", () -> {\n  page.getByText(\"Update\").click();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":292,"to":321}}}}],["c9492287-26bf-451a-853a-e5e4be496e02",{"pageContent":"```java\n// Use a glob URL pattern\nResponse response = page.waitForResponse(\"**/api/fetch_data\", () -> {\n  page.getByText(\"Update\").click();\n});\n```\n\n```python async\n# Use a glob url pattern\nasync with page.expect_response(\"**/api/fetch_data\") as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n```\n\n```python sync\n# Use a glob url pattern\nwith page.expect_response(\"**/api/fetch_data\") as response_info:\n    page.get_by_text(\"Update\").click()\nresponse = response_info.value\n```\n\n```csharp\n// Use a glob URL pattern\nvar waitForResponseTask = page.WaitForResponseAsync(\"**/api/fetch_data\");\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n```\n\n#### Variations\n\nWait for [Response]s with [`method: Page.waitForResponse`]\n\n```js\n// Use a RegExp. Note no await.\nconst responsePromise = page.waitForResponse(/\\.jpeg$/);\nawait page.getByText('Update').click();\nconst response = await responsePromise;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":316,"to":352}}}}],["1624d904-c173-468b-bc34-473b7d185ac0",{"pageContent":"```js\n// Use a RegExp. Note no await.\nconst responsePromise = page.waitForResponse(/\\.jpeg$/);\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n\n// Use a predicate taking a Response object. Note no await.\nconst responsePromise = page.waitForResponse(response => response.url().includes(token));\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\n```java\n// Use a RegExp\nResponse response = page.waitForResponse(Pattern.compile(\"\\\\.jpeg$\"), () -> {\n  page.getByText(\"Update\").click();\n});\n\n// Use a predicate taking a Response object\nResponse response = page.waitForResponse(r -> r.url().contains(token), () -> {\n  page.getByText(\"Update\").click();\n});\n```\n\n```python async\n# Use a regular expression\nasync with page.expect_response(re.compile(r\"\\.jpeg$\")) as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":348,"to":376}}}}],["8f78ebbe-a936-4051-bbf3-7127753e61d0",{"pageContent":"```python async\n# Use a regular expression\nasync with page.expect_response(re.compile(r\"\\.jpeg$\")) as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n\n# Use a predicate taking a response object\nasync with page.expect_response(lambda response: token in response.url) as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n```\n\n```python sync\n# Use a regular expression\nwith page.expect_response(re.compile(r\"\\.jpeg$\")) as response_info:\n    page.get_by_text(\"Update\").click()\nresponse = response_info.value\n\n# Use a predicate taking a response object\nwith page.expect_response(lambda response: token in response.url) as response_info:\n    page.get_by_text(\"Update\").click()\nresponse = response_info.value\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":372,"to":394}}}}],["3406c76e-1bf3-46f2-93a4-d1a63054220d",{"pageContent":"```csharp\n// Use a regular expression\nvar waitForResponseTask = page.WaitForResponseAsync(new Regex(\"\\\\.jpeg$\"));\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n\n// Use a predicate taking a Response object\nvar waitForResponseTask = page.WaitForResponseAsync(r => r.Url.Contains(token));\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n```\n\n## Handle requests\n\n```js\nawait page.route('**/api/fetch_data', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\n```java\npage.route(\"**/api/fetch_data\", route -> route.fulfill(new Route.FulfillOptions()\n  .setStatus(200)\n  .setBody(testData)));\npage.navigate(\"https://example.com\");\n```\n\n```python async\nawait page.route(\n    \"**/api/fetch_data\",\n    lambda route: route.fulfill(status=200, body=test_data))\nawait page.goto(\"https://example.com\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":396,"to":430}}}}],["cdb79175-152a-4aea-b664-d546e42a184b",{"pageContent":"```python async\nawait page.route(\n    \"**/api/fetch_data\",\n    lambda route: route.fulfill(status=200, body=test_data))\nawait page.goto(\"https://example.com\")\n```\n\n```python sync\npage.route(\n    \"**/api/fetch_data\",\n    lambda route: route.fulfill(status=200, body=test_data))\npage.goto(\"https://example.com\")\n```\n\nYou can mock API endpoints via handling the network requests in your Playwright script.\n\n#### Variations\n\nSet up route on the entire browser context with [`method: BrowserContext.route`] or page with [`method: Page.route`]. It will apply to popup windows and opened links.\n\n```js\nawait browserContext.route('**/api/login', route => route.fulfill({\n  status: 200,\n  body: 'accept',\n}));\nawait page.goto('https://example.com');\n```\n\n```java\nbrowserContext.route(\"**/api/login\", route -> route.fulfill(new Route.FulfillOptions()\n  .setStatus(200)\n  .setBody(\"accept\")));\npage.navigate(\"https://example.com\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":425,"to":458}}}}],["e7b8a476-013c-40af-b0b2-c5986ee03868",{"pageContent":"```java\nbrowserContext.route(\"**/api/login\", route -> route.fulfill(new Route.FulfillOptions()\n  .setStatus(200)\n  .setBody(\"accept\")));\npage.navigate(\"https://example.com\");\n```\n\n```python async\nawait context.route(\n    \"**/api/login\",\n    lambda route: route.fulfill(status=200, body=\"accept\"))\nawait page.goto(\"https://example.com\")\n```\n\n```python sync\ncontext.route(\n    \"**/api/login\",\n    lambda route: route.fulfill(status=200, body=\"accept\"))\npage.goto(\"https://example.com\")\n```\n\n```csharp\nawait page.RouteAsync(\"**/api/fetch_data\", async route => {\n  await route.FulfillAsync(new() { Status = 200, Body = testData });\n});\nawait page.GotoAsync(\"https://example.com\");\n```\n\n## Modify requests\n\n```js\n// Delete header\nawait page.route('**/*', async route => {\n  const headers = route.request().headers();\n  delete headers['X-Secret'];\n  await route.continue({ headers });\n});\n\n// Continue requests as POST.\nawait page.route('**/*', route => route.continue({ method: 'POST' }));\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":453,"to":493}}}}],["c683b53c-3ec5-49aa-8d44-239961c0b7fc",{"pageContent":"// Continue requests as POST.\nawait page.route('**/*', route => route.continue({ method: 'POST' }));\n```\n\n```java\n// Delete header\npage.route(\"**/*\", route -> {\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.remove(\"X-Secret\");\n    route.resume(new Route.ResumeOptions().setHeaders(headers));\n});\n\n// Continue requests as POST.\npage.route(\"**/*\", route -> route.resume(new Route.ResumeOptions().setMethod(\"POST\")));\n```\n\n```python async\n# Delete header\nasync def handle_route(route):\n    headers = route.request.headers\n    del headers[\"x-secret\"]\n    await route.continue_(headers=headers)\nawait page.route(\"**/*\", handle_route)\n\n# Continue requests as POST.\nawait page.route(\"**/*\", lambda route: route.continue_(method=\"POST\"))\n```\n\n```python sync\n# Delete header\ndef handle_route(route):\n    headers = route.request.headers\n    del headers[\"x-secret\"]\n    route.continue_(headers=headers)\npage.route(\"**/*\", handle_route)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":491,"to":525}}}}],["7ac97a90-a025-4d0d-b472-ad45e0cca1a1",{"pageContent":"```python sync\n# Delete header\ndef handle_route(route):\n    headers = route.request.headers\n    del headers[\"x-secret\"]\n    route.continue_(headers=headers)\npage.route(\"**/*\", handle_route)\n\n# Continue requests as POST.\npage.route(\"**/*\", lambda route: route.continue_(method=\"POST\"))\n```\n\n```csharp\n// Delete header\nawait page.RouteAsync(\"**/*\", async route => {\n    var headers = new Dictionary<string, string>(route.Request.Headers.ToDictionary(x => x.Key, x => x.Value));\n    headers.Remove(\"X-Secret\");\n    await route.ContinueAsync(new() { Headers = headers });\n});\n\n// Continue requests as POST.\nawait Page.RouteAsync(\"**/*\", async route => await route.ContinueAsync(new() { Method = \"POST\" }));\n```\n\nYou can continue requests with modifications. Example above removes an HTTP header from the outgoing requests.\n\n## Abort requests\n\nYou can abort requests using [`method: Page.route`] and [`method: Route.abort`].\n\n```js\nawait page.route('**/*.{png,jpg,jpeg}', route => route.abort());","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":519,"to":550}}}}],["4d6323b8-9242-4fcc-90fe-2c9750ec0ff2",{"pageContent":"## Abort requests\n\nYou can abort requests using [`method: Page.route`] and [`method: Route.abort`].\n\n```js\nawait page.route('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// Abort based on the request type\nawait page.route('**/*', route => {\n  return route.request().resourceType() === 'image' ? route.abort() : route.continue();\n});\n```\n\n```java\npage.route(\"**/*.{png,jpg,jpeg}\", route -> route.abort());\n\n// Abort based on the request type\npage.route(\"**/*\", route -> {\n  if (\"image\".equals(route.request().resourceType()))\n    route.abort();\n  else\n    route.resume();\n});\n```\n\n```python async\nawait page.route(\"**/*.{png,jpg,jpeg}\", lambda route: route.abort())\n\n# Abort based on the request type\nawait page.route(\"**/*\", lambda route: route.abort() if route.request.resource_type == \"image\"  else route.continue_())\n```\n\n```python sync\npage.route(\"**/*.{png,jpg,jpeg}\", lambda route: route.abort())","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":545,"to":578}}}}],["70cdeeed-cef9-4575-8af6-88311436dbe9",{"pageContent":"```python sync\npage.route(\"**/*.{png,jpg,jpeg}\", lambda route: route.abort())\n\n# Abort based on the request type\npage.route(\"**/*\", lambda route: route.abort() if route.request.resource_type == \"image\"  else route.continue_())\n```\n\n```csharp\nawait page.RouteAsync(\"**/*.{png,jpg,jpeg}\", route => route.AbortAsync());\n\n// Abort based on the request type\nawait page.RouteAsync(\"**/*\", async route => {\nif (\"image\".Equals(route.Request.ResourceType))\n    await route.AbortAsync();\nelse\n    await route.ContinueAsync();\n});\n```\n\n## Modify responses\n\nTo modify a response use [APIRequestContext] to get the original response and then pass the response to [`method: Route.fulfill`]. You can override individual fields on the response via options:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":577,"to":598}}}}],["add7d7e3-52aa-426b-b9b8-0f594ab4ad05",{"pageContent":"To modify a response use [APIRequestContext] to get the original response and then pass the response to [`method: Route.fulfill`]. You can override individual fields on the response via options:\n\n```js\nawait page.route('**/title.html', async route => {\n  // Fetch original response.\n  const response = await route.fetch();\n  // Add a prefix to the title.\n  let body = await response.text();\n  body = body.replace('<title>', '<title>My prefix:');\n  await route.fulfill({\n    // Pass all fields from the response.\n    response,\n    // Override response body.\n    body,\n    // Force content type to be html.\n    headers: {\n      ...response.headers(),\n      'content-type': 'text/html'\n    }\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":598,"to":619}}}}],["17d18bfe-0158-456c-809b-4332d421173d",{"pageContent":"```java\npage.route(\"**/title.html\", route -> {\n  // Fetch original response.\n  APIResponse response = route.fetch();\n  // Add a prefix to the title.\n  String body = response.text();\n  body = body.replace(\"<title>\", \"<title>My prefix:\");\n  Map<String, String> headers = response.headers();\n  headers.put(\"content-type\", \"text/html\");\n  route.fulfill(new Route.FulfillOptions()\n    // Pass all fields from the response.\n    .setResponse(response)\n    // Override response body.\n    .setBody(body)\n    // Force content type to be html.\n    .setHeaders(headers));\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":621,"to":638}}}}],["84bdfa65-ff4e-45a6-93d9-b12e99abec51",{"pageContent":"```python async\nasync def handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = await route.fetch()\n    # Add a prefix to the title.\n    body = await response.text()\n    body = body.replace(\"<title>\", \"<title>My prefix:\")\n    await route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, \"content-type\": \"text/html\"},\n    )\n\nawait page.route(\"**/title.html\", handle_route)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":640,"to":657}}}}],["a74258b5-c642-478b-b604-882532e05f0b",{"pageContent":"await page.route(\"**/title.html\", handle_route)\n```\n\n```python sync\ndef handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = route.fetch()\n    # Add a prefix to the title.\n    body = response.text()\n    body = body.replace(\"<title>\", \"<title>My prefix:\")\n    route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, \"content-type\": \"text/html\"},\n    )\n\npage.route(\"**/title.html\", handle_route)\n```\n\n```csharp\nawait Page.RouteAsync(\"**/title.html\", async route =>\n{\n    // Fetch original response.\n    var response = await route.FetchAsync();\n    // Add a prefix to the title.\n    var body = await response.TextAsync();\n    body = body.Replace(\"<title>\", \"<title>My prefix:\");\n\n    var headers = response.Headers;\n    headers.Add(\"Content-Type\", \"text/html\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":656,"to":688}}}}],["aaa59c01-ad8c-4f05-91d7-0da8c5fc61a1",{"pageContent":"var headers = response.Headers;\n    headers.Add(\"Content-Type\", \"text/html\");\n\n    await route.FulfillAsync(new()\n    {\n        // Pass all fields from the response.\n        Response = response,\n        // Override response body.\n        Body = body,\n        // Force content type to be html.\n        Headers = headers,\n    });\n});\n```\n\n## Glob URL patterns\n\nPlaywright uses simplified glob patterns for URL matching in network interception methods like [`method: Page.route`] or [`method: Page.waitForResponse`]. These patterns support basic wildcards:\n\n1. Asterisks:\n  - A single `*` matches any characters except `/`\n  - A double `**` matches any characters including `/`\n1. Question mark `?` matches only question mark `?`. If you want to match any character, use `*` instead.\n1. Curly braces `{}` can be used to match a list of options separated by commas `,`\n1. Backslash `\\` can be used to escape any of special characters (note to escape backslash itself as `\\\\`)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":687,"to":711}}}}],["41ac940c-18e8-4065-a0d4-4c7fb0f67afe",{"pageContent":"Examples:\n- `https://example.com/*.js` matches `https://example.com/file.js` but not `https://example.com/path/file.js`\n- `https://example.com/?page=1` matches `https://example.com/?page=1` but not `https://example.com`\n- `**/*.js` matches both `https://example.com/file.js` and `https://example.com/path/file.js`\n- `**/*.{png,jpg,jpeg}` matches all image requests\n\nImportant notes:\n\n- The glob pattern must match the entire URL, not just a part of it.\n- When using globs for URL matching, consider the full URL structure, including the protocol and path separators.\n- For more complex matching requirements, consider using [RegExp] instead of glob patterns.\n\n## WebSockets\n\nPlaywright supports [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) inspection, mocking and modifying out of the box. See our [API mocking guide](./mock.md#mock-websockets) to learn how to mock WebSockets.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":713,"to":727}}}}],["2171dbcb-a52e-493b-8674-a1805a35ee0f",{"pageContent":"Every time a WebSocket is created, the [`event: Page.webSocket`] event is fired. This event contains the [WebSocket] instance for further web socket frames inspection:\n\n```js\npage.on('websocket', ws => {\n  console.log(`WebSocket opened: ${ws.url()}>`);\n  ws.on('framesent', event => console.log(event.payload));\n  ws.on('framereceived', event => console.log(event.payload));\n  ws.on('close', () => console.log('WebSocket closed'));\n});\n```\n\n```java\npage.onWebSocket(ws -> {\n  log(\"WebSocket opened: \" + ws.url());\n  ws.onFrameSent(frameData -> log(frameData.text()));\n  ws.onFrameReceived(frameData -> log(frameData.text()));\n  ws.onClose(ws1 -> log(\"WebSocket closed\"));\n});\n```\n\n```python\ndef on_web_socket(ws):\n    print(f\"WebSocket opened: {ws.url}\")\n    ws.on(\"framesent\", lambda payload: print(payload))\n    ws.on(\"framereceived\", lambda payload: print(payload))\n    ws.on(\"close\", lambda payload: print(\"WebSocket closed\"))\n\npage.on(\"websocket\", on_web_socket)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":729,"to":757}}}}],["38651c42-1c65-414d-bed4-2fd89ff800d8",{"pageContent":"page.on(\"websocket\", on_web_socket)\n```\n\n```csharp\npage.WebSocket += (_, ws) =>\n{\n    Console.WriteLine(\"WebSocket opened: \" + ws.Url);\n    ws.FrameSent += (_, f) => Console.WriteLine(f.Text);\n    ws.FrameReceived += (_, f) => Console.WriteLine(f.Text);\n    ws.Close += (_, ws1) => Console.WriteLine(\"WebSocket closed\");\n};\n```\n## Missing Network Events and Service Workers\n\nPlaywright's built-in [`method: BrowserContext.route`] and [`method: Page.route`] allow your tests to natively route requests and perform mocking and interception.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":756,"to":770}}}}],["08b2ee45-0759-4e41-b9a1-80777a29fad4",{"pageContent":"1. If you're using Playwright's native [`method: BrowserContext.route`] and [`method: Page.route`], and it appears network events are missing, disable Service Workers by setting [`option: Browser.newContext.serviceWorkers`] to `'block'`.\n1. It might be that you are using a mock tool such as Mock Service Worker (MSW). While this tool works out of the box for mocking responses, it adds its own Service Worker that takes over the network requests, hence making them invisible to [`method: BrowserContext.route`] and [`method: Page.route`]. If you are interested in both network testing and mocking, consider using built-in [`method: BrowserContext.route`] and [`method: Page.route`] for [response mocking](#handle-requests).\n1. If you're interested in not solely using Service Workers for testing and network mocking, but in routing and listening for requests made by Service Workers themselves, please see [this experimental feature](https://github.com/microsoft/playwright/issues/15684).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-network.md","title":"src-network","url":"https://playwright.dev/docs/src-network","loc":{"lines":{"from":772,"to":774}}}}],["ec8b2819-85df-4682-b26f-7c51eca5abf5",{"pageContent":"---\nid: other-locators\ntitle: \"Other locators\"\n---\n\n## Introduction\n\n:::note\nCheck out the main [locators guide](./locators) for most common and recommended locators.\n:::\n\nIn addition to recommended locators like [`method: Page.getByRole`] and [`method: Page.getByText`], Playwright supports a variety of other locators described in this guide.\n\n\n## CSS locator\n\n:::note\nWe recommend prioritizing [user-visible locators](./locators.md#quick-guide) like text or accessible role instead of using CSS that is tied to the implementation and could break when the page changes.\n:::\n\nPlaywright can locate an element by CSS selector.\n\n```js\nawait page.locator('css=button').click();\n```\n```java\npage.locator(\"css=button\").click();\n```\n```python async\nawait page.locator(\"css=button\").click()\n```\n```python sync\npage.locator(\"css=button\").click()\n```\n```csharp\nawait page.Locator(\"css=button\").ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":1,"to":37}}}}],["b925465f-06c4-4a57-818d-75c89edb9e05",{"pageContent":"Playwright augments standard CSS selectors in two ways:\n* CSS selectors pierce open shadow DOM.\n* Playwright adds custom pseudo-classes like `:visible`, `:has-text()`, `:has()`, `:is()`, `:nth-match()` and more.\n\n### CSS: matching by text\n\nPlaywright include a number of CSS pseudo-classes to match elements by their text content.\n\n- `article:has-text(\"Playwright\")` - the `:has-text()` matches any element containing specified text somewhere inside, possibly in a child or a descendant element. Matching is case-insensitive, trims whitespace and searches for a substring.\n\n  For example, `article:has-text(\"Playwright\")` matches `<article><div>Playwright</div></article>`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":39,"to":49}}}}],["189bb7a2-f324-48cb-b984-5876d9e6a6d2",{"pageContent":"For example, `article:has-text(\"Playwright\")` matches `<article><div>Playwright</div></article>`.\n\n  Note that `:has-text()` should be used together with other CSS specifiers, otherwise it will match all the elements containing specified text, including the `<body>`.\n  ```js\n  // Wrong, will match many elements including <body>\n  await page.locator(':has-text(\"Playwright\")').click();\n  // Correct, only matches the <article> element\n  await page.locator('article:has-text(\"Playwright\")').click();\n  ```\n\n  ```java\n  // Wrong, will match many elements including <body>\n  page.locator(\":has-text(\\\"Playwright\\\")\").click();\n  // Correct, only matches the <article> element\n  page.locator(\"article:has-text(\\\"Playwright\\\")\").click();\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":49,"to":64}}}}],["290b9422-6246-4bf2-9923-05b92b186ebb",{"pageContent":"```python async\n  # Wrong, will match many elements including <body>\n  await page.locator(':has-text(\"Playwright\")').click()\n  # Correct, only matches the <article> element\n  await page.locator('article:has-text(\"Playwright\")').click()\n  ```\n  ```python sync\n  # Wrong, will match many elements including <body>\n  page.locator(':has-text(\"Playwright\")').click()\n  # Correct, only matches the <article> element\n  page.locator('article:has-text(\"All products\")').click()\n  ```\n\n  ```csharp\n  // Wrong, will match many elements including <body>\n  await page.Locator(\":has-text(\\\"Playwright\\\")\").ClickAsync();\n  // Correct, only matches the <article> element\n  await page.Locator(\"article:has-text(\\\"Playwright\\\")\").ClickAsync();\n  ```\n\n- `#nav-bar :text(\"Home\")` - the `:text()` pseudo-class matches the smallest element containing specified text. Matching is case-insensitive, trims whitespace and searches for a substring.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":66,"to":86}}}}],["29d1caa0-472f-45b6-9c4a-4bcfa272ba1f",{"pageContent":"- `#nav-bar :text(\"Home\")` - the `:text()` pseudo-class matches the smallest element containing specified text. Matching is case-insensitive, trims whitespace and searches for a substring.\n\n  For example, this will find an element with text \"Home\" somewhere inside the `#nav-bar` element:\n\n  ```js\n  await page.locator('#nav-bar :text(\"Home\")').click();\n  ```\n  ```java\n  page.locator(\"#nav-bar :text('Home')\").click();\n  ```\n  ```python async\n  await page.locator(\"#nav-bar :text('Home')\").click()\n  ```\n  ```python sync\n  page.locator(\"#nav-bar :text('Home')\").click()\n  ```\n  ```csharp\n  await page.Locator(\"#nav-bar :text('Home')\").ClickAsync();\n  ```\n\n- `#nav-bar :text-is(\"Home\")` - the `:text-is()` pseudo-class matches the smallest element with exact text. Exact matching is case-sensitive, trims whitespace and searches for the full string.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":86,"to":106}}}}],["98ddda61-69a3-443a-bbb0-12fda0798f83",{"pageContent":"- `#nav-bar :text-is(\"Home\")` - the `:text-is()` pseudo-class matches the smallest element with exact text. Exact matching is case-sensitive, trims whitespace and searches for the full string.\n\n  For example, `:text-is(\"Log\")` does not match `<button>Log in</button>` because `<button>` contains a single text node `\"Log in\"` that is not equal to `\"Log\"`. However, `:text-is(\"Log\")` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `\" Log \"`.\n\n  Similarly, `:text-is(\"Download\")` will not match `<button>download</button>` because it is case-sensitive.\n\n* `#nav-bar :text-matches(\"reg?ex\", \"i\")` - the `:text-matches()` pseudo-class matches the smallest element with text content matching the [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\n  For example, `:text-matches(\"Log\\s*in\", \"i\")` matches `<button>Login</button>` and `<button>log IN</button>`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":106,"to":114}}}}],["ab89d55a-f833-4096-b245-e925a8817820",{"pageContent":"For example, `:text-matches(\"Log\\s*in\", \"i\")` matches `<button>Login</button>` and `<button>log IN</button>`.\n\n:::note\nText matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n:::\n\n:::note\nInput elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `:text(\"Log in\")` matches `<input type=button value=\"Log in\">`.\n:::\n\n\n### CSS: matching only visible elements\n\nPlaywright supports the `:visible` pseudo class in CSS selectors. For example, `css=button` matches all the buttons on the page, while `css=button:visible` only matches visible buttons. This is useful to distinguish elements that are very similar but differ in visibility.\n\nConsider a page with two buttons, first invisible and second visible.\n\n```html\n<button style='display: none'>Invisible</button>\n<button>Visible</button>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":114,"to":134}}}}],["052ee110-36eb-4e54-b06c-8f4d1d4cba52",{"pageContent":"Consider a page with two buttons, first invisible and second visible.\n\n```html\n<button style='display: none'>Invisible</button>\n<button>Visible</button>\n```\n\n* This will find both buttons and throw a [strictness](./locators.md#strictness) violation error:\n\n  ```js\n  await page.locator('button').click();\n  ```\n\n  ```java\n  page.locator(\"button\").click();\n  ```\n\n  ```python async\n  await page.locator(\"button\").click()\n  ```\n\n  ```python sync\n  page.locator(\"button\").click()\n  ```\n\n  ```csharp\n  await page.Locator(\"button\").ClickAsync();\n  ```\n\n* This will only find a second button, because it is visible, and then click it.\n\n  ```js\n  await page.locator('button:visible').click();\n  ```\n  ```java\n  page.locator(\"button:visible\").click();\n  ```\n  ```python async\n  await page.locator(\"button:visible\").click()\n  ```\n  ```python sync\n  page.locator(\"button:visible\").click()\n  ```\n  ```csharp\n  await page.Locator(\"button:visible\").ClickAsync();\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":129,"to":174}}}}],["ca0181e7-7b2a-4340-8ac6-6b4a41fb6087",{"pageContent":"### CSS: elements that contain other elements\n\nThe `:has()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:has). It returns an element if any of the selectors passed as parameters\nrelative to the `:scope` of the given element match at least one element.\n\nFollowing snippet returns text content of an `<article>` element that has a `<div class=promo>` inside.\n\n```js\nawait page.locator('article:has(div.promo)').textContent();\n```\n\n```java\npage.locator(\"article:has(div.promo)\").textContent();\n```\n\n```python async\nawait page.locator(\"article:has(div.promo)\").text_content()\n```\n\n```python sync\npage.locator(\"article:has(div.promo)\").text_content()\n```\n\n```csharp\nawait page.Locator(\"article:has(div.promo)\").TextContentAsync();\n```\n\n### CSS: elements matching one of the conditions\n\nComma-separated list of CSS selectors will match all elements that can be selected by\none of the selectors in that list.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":176,"to":206}}}}],["759e8e4d-f5f5-4208-b5cf-f7ad418150cb",{"pageContent":"### CSS: elements matching one of the conditions\n\nComma-separated list of CSS selectors will match all elements that can be selected by\none of the selectors in that list.\n\n```js\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click();\n```\n\n```java\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\npage.locator(\"button:has-text(\\\"Log in\\\"), button:has-text(\\\"Sign in\\\")\").click();\n```\n\n```python async\n# Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click()\n```\n\n```python sync\n# Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\npage.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":203,"to":226}}}}],["f9e7edda-28ff-4699-ae7b-00a2c615c9ce",{"pageContent":"```python sync\n# Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\npage.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click()\n```\n\n```csharp\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.Locator(\"button:has-text(\\\"Log in\\\"), button:has-text(\\\"Sign in\\\")\").ClickAsync();\n```\n\nThe `:is()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) that\nmay be useful for specifying a list of extra conditions on an element.\n\n\n### CSS: matching elements based on layout\n\n:::note\nMatching based on layout may produce unexpected results. For example, a different element could be matched when layout changes by one pixel.\n:::\n\nSometimes, it is hard to come up with a good selector to the target element when it lacks distinctive features. In this case, using Playwright layout CSS pseudo-classes could help. These can be combined with regular CSS to pinpoint one of the multiple choices.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":223,"to":243}}}}],["8433dea4-4784-4f31-aa24-e3cf7bb7fdc0",{"pageContent":"For example, `input:right-of(:text(\"Password\"))` matches an input field that is to the right of text \"Password\" - useful when the page has multiple inputs that are hard to distinguish between each other.\n\nNote that layout pseudo-classes are useful in addition to something else, like `input`. If you use a layout pseudo-class alone, like `:right-of(:text(\"Password\"))`, most likely you'll get not the input you are looking for, but some empty element in between the text and the target input.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":245,"to":247}}}}],["2e6dca86-1ce1-4839-9a74-7ca6348d642a",{"pageContent":"Layout pseudo-classes use [bounding client rect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)\nto compute distance and relative position of the elements.\n* `:right-of(div > button)` - Matches elements that are to the right of any element matching the inner selector, at any vertical position.\n* `:left-of(div > button)` - Matches elements that are to the left of any element matching the inner selector, at any vertical position.\n* `:above(div > button)` - Matches elements that are above any of the elements matching the inner selector, at any horizontal position.\n* `:below(div > button)` - Matches elements that are below any of the elements matching the inner selector, at any horizontal position.\n* `:near(div > button)` - Matches elements that are near (within 50 CSS pixels) any of the elements matching the inner selector.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":249,"to":255}}}}],["6c42364b-a3b2-4adc-ba2e-c22464775bff",{"pageContent":"Note that resulting matches are sorted by their distance to the anchor element, so you can use [`method: Locator.first`] to pick the closest one. This is only useful if you have something like a list of similar elements, where the closest is obviously the right one. However, using [`method: Locator.first`] in other cases most likely won't work as expected - it will not target the element you are searching for, but some other element that happens to be the closest like a random empty `<div>`, or an element that is scrolled out and is not currently visible.\n\n```js\n// Fill an input to the right of \"Username\".\nawait page.locator('input:right-of(:text(\"Username\"))').fill('value');\n\n// Click a button near the promo card.\nawait page.locator('button:near(.promo-card)').click();\n\n// Click the radio input in the list closest to the \"Label 3\".\nawait page.locator('[type=radio]:left-of(:text(\"Label 3\"))').first().click();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":257,"to":268}}}}],["5597af33-b685-4057-8f2a-71c065181fe4",{"pageContent":"// Click the radio input in the list closest to the \"Label 3\".\nawait page.locator('[type=radio]:left-of(:text(\"Label 3\"))').first().click();\n```\n\n```java\n// Fill an input to the right of \"Username\".\npage.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\");\n\n// Click a button near the promo card.\npage.locator(\"button:near(.promo-card)\").click();\n\n// Click the radio input in the list closest to the \"Label 3\".\npage.locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").first().click();\n```\n\n```python async\n# Fill an input to the right of \"Username\".\nawait page.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\")\n\n# Click a button near the promo card.\nawait page.locator(\"button:near(.promo-card)\").click()\n\n# Click the radio input in the list closest to the \"Label 3\".\nawait page.locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").first.click()\n```\n\n```python sync\n# Fill an input to the right of \"Username\".\npage.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":266,"to":294}}}}],["7d3a4ab5-d8ef-4f3e-8958-4826a27b2712",{"pageContent":"```python sync\n# Fill an input to the right of \"Username\".\npage.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\")\n\n# Click a button near the promo card.\npage.locator(\"button:near(.promo-card)\").click()\n\n# Click the radio input in the list closest to the \"Label 3\".\npage.locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").first.click()\n```\n\n```csharp\n// Fill an input to the right of \"Username\".\nawait page.Locator(\"input:right-of(:text(\\\"Username\\\"))\").FillAsync(\"value\");\n\n// Click a button near the promo card.\nawait page.Locator(\"button:near(.promo-card)\").ClickAsync();\n\n// Click the radio input in the list closest to the \"Label 3\".\nawait page.Locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").First.ClickAsync();\n```\n\nAll layout pseudo-classes support optional maximum pixel distance as the last argument. For example\n`button:near(:text(\"Username\"), 120)` matches a button that is at most 120 CSS pixels away from the element with the text \"Username\".","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":292,"to":315}}}}],["f1c02cd2-20fc-45fa-ae68-a83551fb7906",{"pageContent":"### CSS: pick n-th match from the query result\n\n:::note\nIt is usually possible to distinguish elements by some attribute or text content, which is more resilient to page changes.\n:::\n\nSometimes page contains a number of similar elements, and it is hard to select a particular one. For example:\n\n```html\n<section> <button>Buy</button> </section>\n<article><div> <button>Buy</button> </div></article>\n<div><div> <button>Buy</button> </div></div>\n```\n\nIn this case, `:nth-match(:text(\"Buy\"), 3)` will select the third button from the snippet above. Note that index is one-based.\n\n```js\n// Click the third \"Buy\" button\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').click();\n```\n\n```java\n// Click the third \"Buy\" button\npage.locator(\":nth-match(:text('Buy'), 3)\").click();\n```\n\n```python async\n# Click the third \"Buy\" button\nawait page.locator(\":nth-match(:text('Buy'), 3)\").click()\n```\n\n```python sync\n# Click the third \"Buy\" button\npage.locator(\":nth-match(:text('Buy'), 3)\").click()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":317,"to":351}}}}],["48026c58-e7ae-4a9a-be08-35645e9cd59f",{"pageContent":"```python sync\n# Click the third \"Buy\" button\npage.locator(\":nth-match(:text('Buy'), 3)\").click()\n```\n\n```csharp\n// Click the third \"Buy\" button\nawait page.Locator(\":nth-match(:text('Buy'), 3)\").ClickAsync();\n```\n\n`:nth-match()` is also useful to wait until a specified number of elements appear, using [`method: Locator.waitFor`].\n\n```js\n// Wait until all three buttons are visible\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').waitFor();\n```\n\n```java\n// Wait until all three buttons are visible\npage.locator(\":nth-match(:text('Buy'), 3)\").waitFor();\n```\n\n```python async\n# Wait until all three buttons are visible\nawait page.locator(\":nth-match(:text('Buy'), 3)\").wait_for()\n```\n\n```python sync\n# Wait until all three buttons are visible\npage.locator(\":nth-match(:text('Buy'), 3)\").wait_for()\n```\n\n```csharp\n// Wait until all three buttons are visible\nawait page.Locator(\":nth-match(:text('Buy'), 3)\").WaitForAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":348,"to":383}}}}],["4db97689-ca11-4275-933b-6b56c2ae58e4",{"pageContent":"```csharp\n// Wait until all three buttons are visible\nawait page.Locator(\":nth-match(:text('Buy'), 3)\").WaitForAsync();\n```\n\n:::note\nUnlike [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child), elements do not have to be siblings, they could be anywhere on the page. In the snippet above, all three buttons match `:text(\"Buy\")` selector, and `:nth-match()` selects the third button.\n:::\n\n\n## N-th element locator\n\nYou can narrow down query to the n-th match using the `nth=` locator passing a zero-based index.\n\n```js\n// Click first button\nawait page.locator('button').locator('nth=0').click();\n\n// Click last button\nawait page.locator('button').locator('nth=-1').click();\n```\n\n```java\n// Click first button\npage.locator(\"button\").locator(\"nth=0\").click();\n\n// Click last button\npage.locator(\"button\").locator(\"nth=-1\").click();\n```\n\n```python async\n# Click first button\nawait page.locator(\"button\").locator(\"nth=0\").click()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":380,"to":412}}}}],["0d6be7e0-749d-4c64-903c-75f1eeecab4c",{"pageContent":"// Click last button\npage.locator(\"button\").locator(\"nth=-1\").click();\n```\n\n```python async\n# Click first button\nawait page.locator(\"button\").locator(\"nth=0\").click()\n\n# Click last button\nawait page.locator(\"button\").locator(\"nth=-1\").click()\n```\n\n```python sync\n# Click first button\npage.locator(\"button\").locator(\"nth=0\").click()\n\n# Click last button\npage.locator(\"button\").locator(\"nth=-1\").click()\n```\n\n```csharp\n// Click first button\nawait page.Locator(\"button\").Locator(\"nth=0\").ClickAsync();\n\n// Click last button\nawait page.Locator(\"button\").Locator(\"nth=-1\").ClickAsync();\n```\n\n\n## Parent element locator\n\nWhen you need to target a parent element of some other element, most of the time you should [`method: Locator.filter`] by the child locator. For example, consider the following DOM structure:\n\n```html\n<li><label>Hello</label></li>\n<li><label>World</label></li>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":406,"to":442}}}}],["8e19dd75-b397-4450-b183-2962e9e40c5d",{"pageContent":"```html\n<li><label>Hello</label></li>\n<li><label>World</label></li>\n```\n\nIf you'd like to target the parent `<li>` of a label with text `\"Hello\"`, using [`method: Locator.filter`] works best:\n\n```js\nconst child = page.getByText('Hello');\nconst parent = page.getByRole('listitem').filter({ has: child });\n```\n\n```java\nLocator child = page.getByText(\"Hello\");\nLocator parent = page.getByRole(AriaRole.LISTITEM).filter(new Locator.FilterOptions().setHas(child));\n```\n\n```python async\nchild = page.get_by_text(\"Hello\")\nparent = page.get_by_role(\"listitem\").filter(has=child)\n```\n\n```python sync\nchild = page.get_by_text(\"Hello\")\nparent = page.get_by_role(\"listitem\").filter(has=child)\n```\n\n```csharp\nvar child = page.GetByText(\"Hello\");\nvar parent = page.GetByRole(AriaRole.Listitem).Filter(new () { Has = child });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":439,"to":469}}}}],["ca6ab599-70be-4e88-b8c3-762479ce9d61",{"pageContent":"```csharp\nvar child = page.GetByText(\"Hello\");\nvar parent = page.GetByRole(AriaRole.Listitem).Filter(new () { Has = child });\n```\n\nAlternatively, if you cannot find a suitable locator for the parent element, use `xpath=..`. Note that this method is not as reliable, because any changes to the DOM structure will break your tests. Prefer [`method: Locator.filter`] when possible.\n\n```js\nconst parent = page.getByText('Hello').locator('xpath=..');\n```\n\n```java\nLocator parent = page.getByText(\"Hello\").locator(\"xpath=..\");\n```\n\n```python async\nparent = page.get_by_text(\"Hello\").locator('xpath=..')\n```\n\n```python sync\nparent = page.get_by_text(\"Hello\").locator('xpath=..')\n```\n\n```csharp\nvar parent = page.GetByText(\"Hello\").Locator(\"xpath=..\");\n```\n\n## React locator\n\n:::note\nReact locator is experimental and prefixed with `_`. The functionality might change in future.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":466,"to":497}}}}],["72fb86b6-9754-458a-9a00-5ecf842192e4",{"pageContent":"```csharp\nvar parent = page.GetByText(\"Hello\").Locator(\"xpath=..\");\n```\n\n## React locator\n\n:::note\nReact locator is experimental and prefixed with `_`. The functionality might change in future.\n:::\n\nReact locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.\n\nIn React locator, component names are transcribed with **CamelCase**.\n\n```js\nawait page.locator('_react=BookItem').click();\n```\n```java\npage.locator(\"_react=BookItem\").click();\n```\n```python async\nawait page.locator(\"_react=BookItem\").click()\n```\n```python sync\npage.locator(\"_react=BookItem\").click()\n```\n```csharp\nawait page.Locator(\"_react=BookItem\").ClickAsync();\n```\n\nMore examples:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":489,"to":519}}}}],["3f5a5d75-682e-4d2c-be9e-878582f5c38f",{"pageContent":"More examples:\n\n- match by **component**: `_react=BookItem`\n- match by component and **exact property value**, case-sensitive: `_react=BookItem[author = \"Steven King\"]`\n- match by property value only, **case-insensitive**: `_react=[author = \"steven king\" i]`\n- match by component and **truthy property value**: `_react=MyButton[enabled]`\n- match by component and **boolean value**: `_react=MyButton[enabled = false]`\n- match by property **value substring**: `_react=[author *= \"King\"]`\n- match by component and **multiple properties**: `_react=BookItem[author *= \"king\" i][year = 1990]`\n- match by **nested** property value: `_react=[some.nested.value = 12]`\n- match by component and property value **prefix**: `_react=BookItem[author ^= \"Steven\"]`\n- match by component and property value **suffix**: `_react=BookItem[author $= \"Steven\"]`\n- match by component and **key**: `_react=BookItem[key = '2']`\n- match by property value **regex**: `_react=[author = /Steven(\\\\s+King)?/i]`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":519,"to":532}}}}],["c25e30e4-773a-48e3-9867-e1ed74fcfdfa",{"pageContent":"To find React element names in a tree use [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).\n\n\n:::note\nReact locator supports React 15 and above.\n:::\n\n:::note\nReact locator, as well as [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.\n:::\n\n## Vue locator\n\n:::note\nVue locator is experimental and prefixed with `_`. The functionality might change in future.\n:::\n\nVue locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.\n\nIn Vue locator, component names are transcribed with **kebab-case**.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":535,"to":554}}}}],["f11f4721-a14f-4f38-9bb8-1ae701c06b47",{"pageContent":"In Vue locator, component names are transcribed with **kebab-case**.\n\n```js\nawait page.locator('_vue=book-item').click();\n```\n```java\npage.locator(\"_vue=book-item\").click();\n```\n```python async\nawait page.locator(\"_vue=book-item\").click()\n```\n```python sync\npage.locator(\"_vue=book-item\").click()\n```\n```csharp\nawait page.Locator(\"_vue=book-item\").ClickAsync();\n```\n\nMore examples:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":554,"to":572}}}}],["3effbcce-e668-4b75-bd20-7f8df8f46b6b",{"pageContent":"More examples:\n\n- match by **component**: `_vue=book-item`\n- match by component and **exact property value**, case-sensitive: `_vue=book-item[author = \"Steven King\"]`\n- match by property value only, **case-insensitive**: `_vue=[author = \"steven king\" i]`\n- match by component and **truthy property value**: `_vue=my-button[enabled]`\n- match by component and **boolean value**: `_vue=my-button[enabled = false]`\n- match by property **value substring**: `_vue=[author *= \"King\"]`\n- match by component and **multiple properties**: `_vue=book-item[author *= \"king\" i][year = 1990]`\n- match by **nested** property value: `_vue=[some.nested.value = 12]`\n- match by component and property value **prefix**: `_vue=book-item[author ^= \"Steven\"]`\n- match by component and property value **suffix**: `_vue=book-item[author $= \"Steven\"]`\n- match by property value **regex**: `_vue=[author = /Steven(\\\\s+King)?/i]`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":572,"to":584}}}}],["a7c90012-e89c-4652-8d64-02421b49b3d2",{"pageContent":"To find Vue element names in a tree use [Vue DevTools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en).\n\n:::note\nVue locator supports Vue2 and above.\n:::\n\n:::note\nVue locator, as well as [Vue DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.\n:::\n\n\n## XPath locator\n\n:::warning\nWe recommend prioritizing [user-visible locators](./locators.md#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes.\n:::\n\nXPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":586,"to":603}}}}],["ecb291c0-9e8a-4363-9f4b-6f300c0c4a3a",{"pageContent":"XPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).\n\n```js\nawait page.locator('xpath=//button').click();\n```\n```java\npage.locator(\"xpath=//button\").click();\n```\n```python async\nawait page.locator(\"xpath=//button\").click()\n```\n```python sync\npage.locator(\"xpath=//button\").click()\n```\n```csharp\nawait page.Locator(\"xpath=//button\").ClickAsync();\n```\n\n:::note\nAny selector string starting with `//` or `..` are assumed to be an xpath selector. For example, Playwright converts `'//html/body'` to `'xpath=//html/body'`.\n:::\n\n:::note\nXPath does not pierce shadow roots.\n:::\n\n\n### XPath union\n\nPipe operator (`|`) can be used to specify multiple selectors in XPath. It will match all\nelements that can be selected by one of the selectors in that list.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":603,"to":633}}}}],["3da36de4-b120-49b3-b051-47ba95601874",{"pageContent":"### XPath union\n\nPipe operator (`|`) can be used to specify multiple selectors in XPath. It will match all\nelements that can be selected by one of the selectors in that list.\n\n```js\n// Waits for either confirmation dialog or load spinner.\nawait page.locator(\n    `//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']`\n).waitFor();\n```\n\n```java\n// Waits for either confirmation dialog or load spinner.\npage.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").waitFor();\n```\n\n```python async\n# Waits for either confirmation dialog or load spinner.\nawait page.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").wait_for()\n```\n\n```python sync\n# Waits for either confirmation dialog or load spinner.\npage.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").wait_for()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":630,"to":655}}}}],["e732c34b-0b0f-4969-900e-53c5ec615c83",{"pageContent":"```python sync\n# Waits for either confirmation dialog or load spinner.\npage.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").wait_for()\n```\n\n```csharp\n// Waits for either confirmation dialog or load spinner.\nawait page.Locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").WaitForAsync();\n```\n\n\n## Label to form control retargeting\n\n:::warning\nWe recommend [locating by label text](./locators.md#locate-by-label) instead of relying to label-to-control retargeting.\n:::\n\nTargeted input actions in Playwright automatically distinguish between labels and controls, so you can target the label to perform an action on the associated control.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":652,"to":669}}}}],["e61a7413-d693-4699-8525-14fed8a05054",{"pageContent":"Targeted input actions in Playwright automatically distinguish between labels and controls, so you can target the label to perform an action on the associated control.\n\nFor example, consider the following DOM structure: `<label for=\"password\">Password:</label><input id=\"password\" type=\"password\">`. You can target the label by its \"Password\" text using [`method: Page.getByText`]. However, the following actions will be performed on the input instead of the label:\n- [`method: Locator.click`] will click the label and automatically focus the input field;\n- [`method: Locator.fill`] will fill the input field;\n- [`method: Locator.inputValue`] will return the value of the input field;\n- [`method: Locator.selectText`] will select text in the input field;\n- [`method: Locator.setInputFiles`] will set files for the input field with `type=file`;\n- [`method: Locator.selectOption`] will select an option from the select box.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":669,"to":677}}}}],["4a2d7ae1-b1ed-4c3b-88d6-ffd891de450a",{"pageContent":"```js\n// Fill the input by targeting the label.\nawait page.getByText('Password').fill('secret');\n```\n\n```java\n// Fill the input by targeting the label.\npage.getByText(\"Password\").fill(\"secret\");\n```\n\n```python async\n# Fill the input by targeting the label.\nawait page.get_by_text(\"Password\").fill(\"secret\")\n```\n\n```python sync\n# Fill the input by targeting the label.\npage.get_by_text(\"Password\").fill(\"secret\")\n```\n\n```csharp\n// Fill the input by targeting the label.\nawait page.GetByText(\"Password\").FillAsync(\"secret\");\n```\n\nHowever, other methods will target the label itself, for example [`method: LocatorAssertions.toHaveText`] will assert the text content of the label, not the input field.\n\n\n```js\n// Fill the input by targeting the label.\nawait expect(page.locator('label')).toHaveText('Password');\n```\n\n```java\n// Fill the input by targeting the label.\nassertThat(page.locator(\"label\")).hasText(\"Password\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":679,"to":715}}}}],["a2bd9737-6431-4539-9891-f31822f73a4d",{"pageContent":"```java\n// Fill the input by targeting the label.\nassertThat(page.locator(\"label\")).hasText(\"Password\");\n```\n\n```python async\n# Fill the input by targeting the label.\nawait expect(page.locator(\"label\")).to_have_text(\"Password\")\n```\n\n```python sync\n# Fill the input by targeting the label.\nexpect(page.locator(\"label\")).to_have_text(\"Password\")\n```\n\n```csharp\n// Fill the input by targeting the label.\nawait Expect(Page.Locator(\"label\")).ToHaveTextAsync(\"Password\");\n```\n\n## Legacy text locator\n\n:::warning\nWe recommend the modern [text locator](./locators.md#get-by-text) instead.\n:::\n\nLegacy text locator matches elements that contain passed text.\n\n```js\nawait page.locator('text=Log in').click();\n```\n```java\npage.locator(\"text=Log in\").click();\n```\n```python async\nawait page.locator(\"text=Log in\").click()\n```\n```python sync\npage.locator(\"text=Log in\").click()\n```\n```csharp\nawait page.Locator(\"text=Log in\").ClickAsync();\n```\n\nLegacy text locator has a few variations:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":712,"to":756}}}}],["9c0e4966-7ccf-44ca-a222-ec807878607a",{"pageContent":"Legacy text locator has a few variations:\n\n- `text=Log in` - default matching is case-insensitive, trims whitespace and searches for a substring. For example, `text=Log` matches `<button>Log in</button>`.\n\n  ```js\n  await page.locator('text=Log in').click();\n  ```\n  ```java\n  page.locator(\"text=Log in\").click();\n  ```\n  ```python async\n  await page.locator(\"text=Log in\").click()\n  ```\n  ```python sync\n  page.locator(\"text=Log in\").click()\n  ```\n  ```csharp\n  await page.Locator(\"text=Log in\").ClickAsync();\n  ```\n\n- `text=\"Log in\"` - text body can be escaped with single or double quotes to search for a text node with exact content after trimming whitespace.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":756,"to":776}}}}],["6f6701a5-47bf-4e14-8240-b4b4858330a0",{"pageContent":"- `text=\"Log in\"` - text body can be escaped with single or double quotes to search for a text node with exact content after trimming whitespace.\n\n  For example, `text=\"Log\"` does not match `<button>Log in</button>` because `<button>` contains a single text node `\"Log in\"` that is not equal to `\"Log\"`. However, `text=\"Log\"` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `\" Log \"`. This exact mode implies case-sensitive matching, so `text=\"Download\"` will not match `<button>download</button>`.\n\n  Quoted body follows the usual escaping rules, e.g. use `\\\"` to escape double quote in a double-quoted string: `text=\"foo\\\"bar\"`.\n\n  ```js\n  await page.locator('text=\"Log in\"').click();\n  ```\n  ```java\n  page.locator(\"text='Log in'\").click();\n  ```\n  ```python async\n  await page.locator(\"text='Log in'\").click()\n  ```\n  ```python sync\n  page.locator(\"text='Log in'\").click()\n  ```\n  ```csharp\n  await page.Locator(\"text='Log in'\").ClickAsync();\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":776,"to":796}}}}],["92d2f18c-501d-46a0-a794-6519c772254b",{"pageContent":"- `/Log\\s*in/i` - body can be a [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) wrapped in `/` symbols. For example, `text=/Log\\s*in/i` matches `<button>Login</button>` and `<button>log IN</button>`.\n\n  ```js\n  await page.locator('text=/Log\\\\s*in/i').click();\n  ```\n  ```java\n  page.locator(\"text=/Log\\\\s*in/i\").click();\n  ```\n  ```python async\n  await page.locator(\"text=/Log\\s*in/i\").click()\n  ```\n  ```python sync\n  page.locator(\"text=/Log\\s*in/i\").click()\n  ```\n  ```csharp\n  await page.Locator(\"text=/Log\\\\s*in/i\").ClickAsync();\n  ```\n\n:::note\nString selectors starting and ending with a quote (either `\"` or `'`) are assumed to be a legacy text locators. For example, `\"Log in\"` is converted to `text=\"Log in\"` internally.\n:::\n\n:::note\nMatching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":798,"to":822}}}}],["8d80a347-3ccd-439a-be82-a38f63f202e5",{"pageContent":":::note\nMatching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n:::\n\n:::note\nInput elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `text=Log in` matches `<input type=button value=\"Log in\">`.\n:::\n\n\n## id, data-testid, data-test-id, data-test selectors\n\n:::warning\nWe recommend [locating by test id](./locators.md#locate-by-test-id) instead.\n:::\n\nPlaywright supports shorthand for selecting elements using certain attributes. Currently, only\nthe following attributes are supported:\n\n- `id`\n- `data-testid`\n- `data-test-id`\n- `data-test`\n\n```js\n// Fill an input with the id \"username\"\nawait page.locator('id=username').fill('value');\n\n// Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click();\n```\n\n```java\n// Fill an input with the id \"username\"\npage.locator(\"id=username\").fill(\"value\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":820,"to":853}}}}],["1c4c480c-685d-4804-9e2d-5af75c03e0e1",{"pageContent":"// Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click();\n```\n\n```java\n// Fill an input with the id \"username\"\npage.locator(\"id=username\").fill(\"value\");\n\n// Click an element with data-test-id \"submit\"\npage.locator(\"data-test-id=submit\").click();\n```\n\n```python async\n# Fill an input with the id \"username\"\nawait page.locator('id=username').fill('value')\n\n# Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click()\n```\n\n```python sync\n# Fill an input with the id \"username\"\npage.locator('id=username').fill('value')\n\n# Click an element with data-test-id \"submit\"\npage.locator('data-test-id=submit').click()\n```\n\n```csharp\n// Fill an input with the id \"username\"\nawait page.Locator(\"id=username\").FillAsync(\"value\");\n\n// Click an element with data-test-id \"submit\"\nawait page.Locator(\"data-test-id=submit\").ClickAsync();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":847,"to":881}}}}],["f9661aca-6ebb-4fb0-9fda-9e2d86510a13",{"pageContent":"// Click an element with data-test-id \"submit\"\nawait page.Locator(\"data-test-id=submit\").ClickAsync();\n```\n\n:::note\nAttribute selectors are not CSS selectors, so anything CSS-specific like `:enabled` is not supported. For more features, use a proper [css](#css-locator) selector, e.g. `css=[data-test=\"login\"]:enabled`.\n:::\n\n## Chaining selectors\n\n:::warning\nWe recommend [chaining locators](./locators.md#matching-inside-a-locator) instead.\n:::\n\nSelectors defined as `engine=body` or in short-form can be combined with the `>>` token, e.g. `selector1 >> selector2 >> selectors3`. When selectors are chained, the next one is queried relative to the previous one's result.\n\nFor example,\n\n```txt\ncss=article >> css=.bar > .baz >> css=span[attr=value]\n```\n\nis equivalent to\n\n```js browser\ndocument\n    .querySelector('article')\n    .querySelector('.bar > .baz')\n    .querySelector('span[attr=value]');\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":879,"to":908}}}}],["40bdadff-8e24-4451-9cb5-4f52d80f3414",{"pageContent":"is equivalent to\n\n```js browser\ndocument\n    .querySelector('article')\n    .querySelector('.bar > .baz')\n    .querySelector('span[attr=value]');\n```\n\nIf a selector needs to include `>>` in the body, it should be escaped inside a string to not be confused with chaining separator, e.g. `text=\"some >> text\"`.\n\n### Intermediate matches\n\n:::warning\nWe recommend [filtering by another locator](./locators.md#filter-by-childdescendant) to locate elements that contain other elements.\n:::\n\nBy default, chained selectors resolve to an element queried by the last selector. A selector can be prefixed with `*` to capture elements that are queried by an intermediate selector.\n\nFor example, `css=article >> text=Hello` captures the element with the text `Hello`, and `*css=article >> text=Hello` (note the `*`) captures the `article` element that contains some element with the text `Hello`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-other-locators.md","title":"src-other-locators","url":"https://playwright.dev/docs/src-other-locators","loc":{"lines":{"from":901,"to":920}}}}],["43c28ecc-293d-4027-b8b6-508abeac7b07",{"pageContent":"---\nid: pages\ntitle: \"Pages\"\n---\n\n## Pages\n\nEach [BrowserContext] can have multiple pages. A [Page] refers to a single tab or a popup window within a browser\ncontext. It should be used to navigate to URLs and interact with the page content.\n\n```js\n// Create a page.\nconst page = await context.newPage();\n\n// Navigate explicitly, similar to entering a URL in the browser.\nawait page.goto('http://example.com');\n// Fill an input.\nawait page.locator('#search').fill('query');\n\n// Navigate implicitly by clicking a link.\nawait page.locator('#submit').click();\n// Expect a new url.\nconsole.log(page.url());\n```\n\n```java\n// Create a page.\nPage page = context.newPage();\n\n// Navigate explicitly, similar to entering a URL in the browser.\npage.navigate(\"http://example.com\");\n// Fill an input.\npage.locator(\"#search\").fill(\"query\");\n\n// Navigate implicitly by clicking a link.\npage.locator(\"#submit\").click();\n// Expect a new url.\nSystem.out.println(page.url());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":1,"to":39}}}}],["25f6fdc8-d3a6-449f-b9f5-33c50783f2a3",{"pageContent":"// Navigate implicitly by clicking a link.\npage.locator(\"#submit\").click();\n// Expect a new url.\nSystem.out.println(page.url());\n```\n\n```python async\npage = await context.new_page()\n\n# Navigate explicitly, similar to entering a URL in the browser.\nawait page.goto('http://example.com')\n# Fill an input.\nawait page.locator('#search').fill('query')\n\n# Navigate implicitly by clicking a link.\nawait page.locator('#submit').click()\n# Expect a new url.\nprint(page.url)\n```\n\n```python sync\npage = context.new_page()\n\n# Navigate explicitly, similar to entering a URL in the browser.\npage.goto('http://example.com')\n# Fill an input.\npage.locator('#search').fill('query')\n\n# Navigate implicitly by clicking a link.\npage.locator('#submit').click()\n# Expect a new url.\nprint(page.url)\n```\n\n```csharp\n// Create a page.\nvar page = await context.NewPageAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":35,"to":71}}}}],["bbc880f7-ff7e-4ef0-9981-19cc97dfadcd",{"pageContent":"# Navigate implicitly by clicking a link.\npage.locator('#submit').click()\n# Expect a new url.\nprint(page.url)\n```\n\n```csharp\n// Create a page.\nvar page = await context.NewPageAsync();\n\n// Navigate explicitly, similar to entering a URL in the browser.\nawait page.GotoAsync(\"http://example.com\");\n// Fill an input.\nawait page.Locator(\"#search\").FillAsync(\"query\");\n\n// Navigate implicitly by clicking a link.\nawait page.Locator(\"#submit\").ClickAsync();\n// Expect a new url.\nConsole.WriteLine(page.Url);\n```\n\n## Multiple pages\n\nEach browser context can host multiple pages (tabs).\n* Each page behaves like a focused, active page. Bringing the page to front is not required.\n* Pages inside a context respect context-level emulation, like viewport sizes, custom network routes or browser\n  locale.\n\n```js\n// Create two pages\nconst pageOne = await context.newPage();\nconst pageTwo = await context.newPage();\n\n// Get pages of a browser context\nconst allPages = context.pages();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":63,"to":98}}}}],["1a232237-35f5-447f-b9b9-d479bcb40d2f",{"pageContent":"```js\n// Create two pages\nconst pageOne = await context.newPage();\nconst pageTwo = await context.newPage();\n\n// Get pages of a browser context\nconst allPages = context.pages();\n```\n\n```java\n// Create two pages\nPage pageOne = context.newPage();\nPage pageTwo = context.newPage();\n\n// Get pages of a browser context\nList<Page> allPages = context.pages();\n```\n\n```python async\n# create two pages\npage_one = await context.new_page()\npage_two = await context.new_page()\n\n# get pages of a browser context\nall_pages = context.pages\n```\n\n```python sync\n# create two pages\npage_one = context.new_page()\npage_two = context.new_page()\n\n# get pages of a browser context\nall_pages = context.pages\n```\n\n```csharp\n// Create two pages\nvar pageOne = await context.NewPageAsync();\nvar pageTwo = await context.NewPageAsync();\n\n// Get pages of a browser context\nvar allPages = context.Pages;\n```\n\n## Handling new pages","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":91,"to":136}}}}],["2a84f763-6879-4beb-a759-1c60234e5387",{"pageContent":"// Get pages of a browser context\nvar allPages = context.Pages;\n```\n\n## Handling new pages\n\nThe `page` event on browser contexts can be used to get new pages that are created in the context. This can be used to\nhandle new pages opened by `target=\"_blank\"` links.\n\n```js\n// Start waiting for new page before clicking. Note no await.\nconst pagePromise = context.waitForEvent('page');\nawait page.getByText('open new tab').click();\nconst newPage = await pagePromise;\n// Interact with the new page normally.\nawait newPage.getByRole('button').click();\nconsole.log(await newPage.title());\n```\n\n```java\n// Get page after a specific action (e.g. clicking a link)\nPage newPage = context.waitForPage(() -> {\n  page.getByText(\"open new tab\").click(); // Opens a new tab\n});\n// Interact with the new page normally\nnewPage.getByRole(AriaRole.BUTTON).click();\nSystem.out.println(newPage.title());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":132,"to":159}}}}],["4a7c5623-5961-470e-abe5-beacc23ea7bd",{"pageContent":"```python async\n# Get page after a specific action (e.g. clicking a link)\nasync with context.expect_page() as new_page_info:\n    await page.get_by_text(\"open new tab\").click() # Opens a new tab\nnew_page = await new_page_info.value\n\n# Interact with the new page normally\nawait new_page.get_by_role(\"button\").click()\nprint(await new_page.title())\n```\n\n```python sync\n# Get page after a specific action (e.g. clicking a link)\nwith context.expect_page() as new_page_info:\n    page.get_by_text(\"open new tab\").click() # Opens a new tab\nnew_page = new_page_info.value\n\n# Interact with the new page normally\nnew_page.get_by_role(\"button\").click()\nprint(new_page.title())\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":161,"to":181}}}}],["39711b38-3ae4-455d-9ca2-46c57224522f",{"pageContent":"# Interact with the new page normally\nnew_page.get_by_role(\"button\").click()\nprint(new_page.title())\n```\n\n```csharp\n// Get page after a specific action (e.g. clicking a link)\nvar newPage = await context.RunAndWaitForPageAsync(async () =>\n{\n    await page.GetByText(\"open new tab\").ClickAsync();\n});\n// Interact with the new page normally\nawait newPage.GetByRole(AriaRole.Button).ClickAsync();\nConsole.WriteLine(await newPage.TitleAsync());\n```\n\nIf the action that triggers the new page is unknown, the following pattern can be used.\n\n```js\n// Get all new pages (including popups) in the context\ncontext.on('page', async page => {\n  await page.waitForLoadState();\n  console.log(await page.title());\n});\n```\n\n```java\n// Get all new pages (including popups) in the context\ncontext.onPage(page -> {\n  page.waitForLoadState();\n  System.out.println(page.title());\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":178,"to":210}}}}],["44f0b2dc-14c8-4300-8163-187c359217c5",{"pageContent":"```java\n// Get all new pages (including popups) in the context\ncontext.onPage(page -> {\n  page.waitForLoadState();\n  System.out.println(page.title());\n});\n```\n\n```python async\n# Get all new pages (including popups) in the context\nasync def handle_page(page):\n    await page.wait_for_load_state()\n    print(await page.title())\n\ncontext.on(\"page\", handle_page)\n```\n\n```python sync\n# Get all new pages (including popups) in the context\ndef handle_page(page):\n    page.wait_for_load_state()\n    print(page.title())\n\ncontext.on(\"page\", handle_page)\n```\n\n```csharp\n// Get all new pages (including popups) in the context\ncontext.Page += async  (_, page) => {\n    await page.WaitForLoadStateAsync();\n    Console.WriteLine(await page.TitleAsync());\n};\n```\n\n\n## Handling popups\n\nIf the page opens a pop-up (e.g. pages opened by `target=\"_blank\"` links), you can get a reference to it by listening to the `popup` event on the page.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":204,"to":241}}}}],["16dc24df-adae-423b-aeeb-452d497332d4",{"pageContent":"## Handling popups\n\nIf the page opens a pop-up (e.g. pages opened by `target=\"_blank\"` links), you can get a reference to it by listening to the `popup` event on the page.\n\nThis event is emitted in addition to the `browserContext.on('page')` event, but only for popups relevant to this page.\n\n```js\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\n// Interact with the new popup normally.\nawait popup.getByRole('button').click();\nconsole.log(await popup.title());\n```\n\n```java\n// Get popup after a specific action (e.g., click)\nPage popup = page.waitForPopup(() -> {\n  page.getByText(\"open the popup\").click();\n});\n// Interact with the popup normally\npopup.getByRole(AriaRole.BUTTON).click();\nSystem.out.println(popup.title());\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":239,"to":263}}}}],["9721979f-e19b-4405-b7a4-ca5fda46aa26",{"pageContent":"```python async\n# Get popup after a specific action (e.g., click)\nasync with page.expect_popup() as popup_info:\n    await page.get_by_text(\"open the popup\").click()\npopup = await popup_info.value\n\n# Interact with the popup normally\nawait popup.get_by_role(\"button\").click()\nprint(await popup.title())\n```\n\n```python sync\n# Get popup after a specific action (e.g., click)\nwith page.expect_popup() as popup_info:\n    page.get_by_text(\"open the popup\").click()\npopup = popup_info.value\n\n# Interact with the popup normally\npopup.get_by_role(\"button\").click()\nprint(popup.title())\n```\n\n```csharp\n// Get popup after a specific action (e.g., click)\nvar popup = await page.RunAndWaitForPopupAsync(async () =>\n{\n    await page.GetByText(\"open the popup\").ClickAsync();\n});\n// Interact with the popup normally\nawait popup.GetByRole(AriaRole.Button).ClickAsync();\nConsole.WriteLine(await popup.TitleAsync());\n```\n\nIf the action that triggers the popup is unknown, the following pattern can be used.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":265,"to":298}}}}],["d6580490-d881-4d14-bcdb-cd3ad55addcf",{"pageContent":"If the action that triggers the popup is unknown, the following pattern can be used.\n\n```js\n// Get all popups when they open\npage.on('popup', async popup => {\n  await popup.waitForLoadState();\n  console.log(await popup.title());\n});\n```\n\n```java\n// Get all popups when they open\npage.onPopup(popup -> {\n  popup.waitForLoadState();\n  System.out.println(popup.title());\n});\n```\n\n```python async\n# Get all popups when they open\nasync def handle_popup(popup):\n    await popup.wait_for_load_state()\n    print(await popup.title())\n\npage.on(\"popup\", handle_popup)\n```\n\n```python sync\n# Get all popups when they open\ndef handle_popup(popup):\n    popup.wait_for_load_state()\n    print(popup.title())\n\npage.on(\"popup\", handle_popup)\n```\n\n```csharp\n// Get all popups when they open\npage.Popup += async  (_, popup) => {\n    await popup.WaitForLoadStateAsync();\n    Console.WriteLine(await page.TitleAsync());\n};\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pages.md","title":"src-pages","url":"https://playwright.dev/docs/src-pages","loc":{"lines":{"from":298,"to":340}}}}],["83b23189-1749-477a-97ba-47b9d2e54e7d",{"pageContent":"---\nid: pom\ntitle: \"Page object models\"\n---\n\n## Introduction\n\nLarge test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.\n\nA page object represents a part of your web application. An e-commerce web application might have a home page, a listings page and a checkout page. Each of them can be represented by page object models.\n\nPage objects **simplify authoring** by creating a higher-level API which suits your application and **simplify maintenance** by capturing element selectors in one place and create reusable code to avoid repetition.\n\n## Implementation\n* langs: js\n\nWe will create a `PlaywrightDevPage` helper class to encapsulate common operations on the `playwright.dev` page. Internally, it will use the `page` object.\n\n```js tab=js-test title=\"playwright-dev-page.ts\"\nimport { expect, type Locator, type Page } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":1,"to":20}}}}],["5b1745f7-c018-4079-bc5f-8fe5537d5f13",{"pageContent":"```js tab=js-test title=\"playwright-dev-page.ts\"\nimport { expect, type Locator, type Page } from '@playwright/test';\n\nexport class PlaywrightDevPage {\n  readonly page: Page;\n  readonly getStartedLink: Locator;\n  readonly gettingStartedHeader: Locator;\n  readonly pomLink: Locator;\n  readonly tocList: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Guides',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":19,"to":48}}}}],["3c94a383-a7dd-49c2-8d13-14db468a7f33",{"pageContent":"async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\n```\n\n```js tab=js-library title=\"models/PlaywrightDevPage.js\"\nclass PlaywrightDevPage {\n  /**\n   * @param {import('playwright').Page} page\n   */\n  constructor(page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Playwright Test',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":45,"to":76}}}}],["a15942f6-31d2-40f6-82db-522ba6395ad9",{"pageContent":"async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\nmodule.exports = { PlaywrightDevPage };\n```\n\nNow we can use the `PlaywrightDevPage` class in our tests.\n\n```js tab=js-test title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\nimport { PlaywrightDevPage } from './playwright-dev-page';\n\ntest('getting started should contain table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  await expect(playwrightDev.tocList).toHaveText([\n    `How to install Playwright`,\n    `What's Installed`,\n    `How to run the example test`,\n    `How to open the HTML test report`,\n    `Write tests using web first assertions, page fixtures and locators`,\n    `Run single test, multiple tests, headed mode`,\n    `Generate tests with Codegen`,\n    `See a trace of your tests`\n  ]);\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":78,"to":106}}}}],["bfabbdd2-603e-4929-8338-3575e3df779b",{"pageContent":"test('should show Page Object Model article', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.pageObjectModel();\n  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');\n});\n```\n\n```js tab=js-library title=\"example.spec.js\"\nconst { PlaywrightDevPage } = require('./playwright-dev-page');\n\n// In the test\nconst page = await browser.newPage();\nawait playwrightDev.goto();\nawait playwrightDev.getStarted();\nawait expect(playwrightDev.tocList).toHaveText([\n  `How to install Playwright`,\n  `What's Installed`,\n  `How to run the example test`,\n  `How to open the HTML test report`,\n  `Write tests using web first assertions, page fixtures and locators`,\n  `Run single test, multiple tests, headed mode`,\n  `Generate tests with Codegen`,\n  `See a trace of your tests`\n]);\n```\n\n## Implementation\n* langs: java, csharp, python\n\nPage object models wrap over a Playwright [Page].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":108,"to":138}}}}],["4e935852-bae9-45b4-b6d4-43bbe0863f59",{"pageContent":"## Implementation\n* langs: java, csharp, python\n\nPage object models wrap over a Playwright [Page].\n\n```java title=\"models/SearchPage.java\"\npackage models;\n\nimport com.microsoft.playwright;\n\npublic class SearchPage {\n  private final Page page;\n  private final Locator searchTermInput;\n\n  public SearchPage(Page page) {\n    this.page = page;\n    this.searchTermInput = page.locator(\"[aria-label='Enter your search term']\");\n  }\n\n  public void navigate() {\n    page.navigate(\"https://bing.com\");\n  }\n\n  public void search(String text) {\n    searchTermInput.fill(text);\n    searchTermInput.press(\"Enter\");\n  }\n}\n```\n\n```python async title=\"models/search.py\"\nclass SearchPage:\n    def __init__(self, page):\n        self.page = page\n        self.search_term_input = page.locator('[aria-label=\"Enter your search term\"]')\n\n    async def navigate(self):\n        await self.page.goto(\"https://bing.com\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":135,"to":172}}}}],["8b22f660-293c-4648-a32c-6498fd6755b3",{"pageContent":"async def navigate(self):\n        await self.page.goto(\"https://bing.com\")\n\n    async def search(self, text):\n        await self.search_term_input.fill(text)\n        await self.search_term_input.press(\"Enter\")\n```\n\n```python sync title=\"models/search.py\"\nclass SearchPage:\n    def __init__(self, page):\n        self.page = page\n        self.search_term_input = page.locator('[aria-label=\"Enter your search term\"]')\n\n    def navigate(self):\n        self.page.goto(\"https://bing.com\")\n\n    def search(self, text):\n        self.search_term_input.fill(text)\n        self.search_term_input.press(\"Enter\")\n```\n\n```csharp\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\n\nnamespace BigEcommerceApp.Tests.Models;\n\npublic class SearchPage\n{\n  private readonly IPage _page;\n  private readonly ILocator _searchTermInput;\n\n  public SearchPage(IPage page)\n  {\n    _page = page;\n    _searchTermInput = page.Locator(\"[aria-label='Enter your search term']\");\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":171,"to":208}}}}],["6cd601f3-6192-4a42-8a71-57c69e0baf9f",{"pageContent":"public SearchPage(IPage page)\n  {\n    _page = page;\n    _searchTermInput = page.Locator(\"[aria-label='Enter your search term']\");\n  }\n\n  public async Task GotoAsync()\n  {\n    await _page.GotoAsync(\"https://bing.com\");\n  }\n\n  public async Task SearchAsync(string text)\n  {\n    await _searchTermInput.FillAsync(text);\n    await _searchTermInput.PressAsync(\"Enter\");\n  }\n}\n```\n\nPage objects can then be used inside a test.\n\n```java\nimport models.SearchPage;\nimport com.microsoft.playwright.*;\n// ...\n\n// In the test\nPage page = browser.newPage();\nSearchPage searchPage = new SearchPage(page);\nsearchPage.navigate();\nsearchPage.search(\"search query\");\n```\n\n```python async title=\"test_search.py\"\nfrom models.search import SearchPage\n\n# in the test\npage = await browser.new_page()\nsearch_page = SearchPage(page)\nawait search_page.navigate()\nawait search_page.search(\"search query\")\n```\n\n```python sync title=\"test_search.py\"\nfrom models.search import SearchPage","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":204,"to":248}}}}],["920a2d21-6a24-46fd-86ad-0275d710848e",{"pageContent":"```python sync title=\"test_search.py\"\nfrom models.search import SearchPage\n\n# in the test\npage = browser.new_page()\nsearch_page = SearchPage(page)\nsearch_page.navigate()\nsearch_page.search(\"search query\")\n```\n\n```csharp\nusing BigEcommerceApp.Tests.Models;\n\n// in the test\nvar page = new SearchPage(await browser.NewPageAsync());\nawait page.GotoAsync();\nawait page.SearchAsync(\"search query\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-pom.md","title":"src-pom","url":"https://playwright.dev/docs/src-pom","loc":{"lines":{"from":247,"to":264}}}}],["3dea244a-9bd8-4500-be78-d97d960fd7ec",{"pageContent":"---\nid: protractor\ntitle: \"Migrating from Protractor\"\n---\n\n## Migration Principles\n\n- No need for \"webdriver-manager\" / Selenium.\n- Protractor’s [ElementFinder] ⇄ [Playwright Test Locator](./api/class-locator)\n- Protractor’s [`waitForAngular`] ⇄ Playwright Test [auto-waiting](./actionability.md)\n- Don’t forget to await in Playwright Test\n\n## Cheat Sheet","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":1,"to":13}}}}],["dfbb7e0c-ccb2-4797-96d5-13ee36c37f0a",{"pageContent":"| Protractor                                        | Playwright Test                         |\n|---------------------------------------------------|-----------------------------------------|\n| `element(by.buttonText('...'))`                   | `page.locator('button, input[type=\"button\"], input[type=\"submit\"] >> text=\"...\"')` |\n| `element(by.css('...'))`                          | `page.locator('...')`                   |\n| `element(by.cssContainingText('..1..', '..2..'))` | `page.locator('..1.. >> text=..2..')`   |\n| `element(by.id('...'))`                           | `page.locator('#...')`                  |\n| `element(by.model('...'))`                        | `page.locator('[ng-model=\"...\"]')`      |\n| `element(by.repeater('...'))`                     | `page.locator('[ng-repeat=\"...\"]')`     |\n| `element(by.xpath('...'))`                        | `page.locator('xpath=...')`             |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":15,"to":23}}}}],["23e71a76-9f10-48a9-b3fe-7872d93bc9de",{"pageContent":"| `element(by.repeater('...'))`                     | `page.locator('[ng-repeat=\"...\"]')`     |\n| `element(by.xpath('...'))`                        | `page.locator('xpath=...')`             |\n| `element.all`                                     | `page.locator`                          |\n| `browser.get(url)`                                | `await page.goto(url)`                  |\n| `browser.getCurrentUrl()`                         | `page.url()`                            |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":22,"to":26}}}}],["c8f28eb8-1a94-48ca-9078-5d27b1feeb66",{"pageContent":"## Example\n\nProtractor:\n\n```js\ndescribe('angularjs homepage todo list', function() {\n  it('should add a todo', function() {\n    browser.get('https://angularjs.org');\n\n    element(by.model('todoList.todoText')).sendKeys('first test');\n    element(by.css('[value=\"add\"]')).click();\n\n    const todoList = element.all(by.repeater('todo in todoList.todos'));\n    expect(todoList.count()).toEqual(3);\n    expect(todoList.get(2).getText()).toEqual('first test');\n\n    // You wrote your first test, cross it off the list\n    todoList.get(2).element(by.css('input')).click();\n    const completedAmount = element.all(by.css('.done-true'));\n    expect(completedAmount.count()).toEqual(2);\n  });\n});\n```\n\nLine-by-line migration to Playwright Test:\n\n\n```js\nconst { test, expect } = require('@playwright/test'); // 1\n\ntest.describe('angularjs homepage todo list', () => {\n  test('should add a todo', async ({ page }) => { // 2, 3\n    await page.goto('https://angularjs.org'); // 4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":28,"to":60}}}}],["1c824b93-d91a-41cb-844d-f71fbcc6e29c",{"pageContent":"test.describe('angularjs homepage todo list', () => {\n  test('should add a todo', async ({ page }) => { // 2, 3\n    await page.goto('https://angularjs.org'); // 4\n\n    await page.locator('[ng-model=\"todoList.todoText\"]').fill('first test');\n    await page.locator('[value=\"add\"]').click();\n\n    const todoList = page.locator('[ng-repeat=\"todo in todoList.todos\"]'); // 5\n    await expect(todoList).toHaveCount(3);\n    await expect(todoList.nth(2)).toHaveText('first test', {\n      useInnerText: true,\n    });\n\n    // You wrote your first test, cross it off the list\n    await todoList.nth(2).getByRole('textbox').click();\n    const completedAmount = page.locator('.done-true');\n    await expect(completedAmount).toHaveCount(2);\n  });\n});\n```\n\nMigration highlights (see inline comments in the Playwright Test code snippet):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":58,"to":79}}}}],["ba19b097-2138-4b2e-98a0-67e006ca7b1a",{"pageContent":"Migration highlights (see inline comments in the Playwright Test code snippet):\n\n1. Each Playwright Test file has explicit import of the `test` and `expect` functions\n1. Test function is marked with `async`\n1. Playwright Test is given a `page` as one of its parameters. This is one of the many [useful fixtures](./api/class-fixtures) in Playwright Test.\n1. Almost all Playwright calls are prefixed with `await`\n1. Locator creation with [`method: Page.locator`] is one of the few methods that is sync.\n\n## Polyfilling `waitForAngular`\n\nPlaywright Test has built-in [auto-waiting](./actionability.md) that makes protractor's [`waitForAngular`] unneeded in general case.\n\nHowever, it might come handy in some edge cases.\nHere's how to polyfill `waitForAngular` function in Playwright Test:\n\n1. Make sure you have protractor installed in your package.json\n1. Polyfill function","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":79,"to":95}}}}],["c3de6179-f635-4253-97b5-f3296d9d9ea9",{"pageContent":"1. Make sure you have protractor installed in your package.json\n1. Polyfill function\n\n    ```js\n    async function waitForAngular(page) {\n      const clientSideScripts = require('protractor/built/clientsidescripts.js');\n\n      async function executeScriptAsync(page, script, ...scriptArgs) {\n        await page.evaluate(`\n          new Promise((resolve, reject) => {\n            const callback = (errMessage) => {\n              if (errMessage)\n                reject(new Error(errMessage));\n              else\n                resolve();\n            };\n            (function() {${script}}).apply(null, [...${JSON.stringify(scriptArgs)}, callback]);\n          })\n        `);\n      }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":94,"to":113}}}}],["c0a23d39-9007-4851-81c7-f4195bfb105a",{"pageContent":"await executeScriptAsync(page, clientSideScripts.waitForAngular, '');\n    }\n    ```\n    If you don't want to keep a version protractor around, you can also use this simpler approach using this function (only works for Angular 2+):\n    ```js\n    async function waitForAngular(page) {\n      await page.evaluate(async () => {\n        // @ts-expect-error\n        if (window.getAllAngularTestabilities) {\n          // @ts-expect-error\n          await Promise.all(window.getAllAngularTestabilities().map(whenStable));\n          // @ts-expect-error\n          async function whenStable(testability) {\n            return new Promise(res => testability.whenStable(res));\n          }\n        }\n      });\n    }\n    ```\n1. Polyfill usage\n\n    ```js\n    const page = await context.newPage();\n    await page.goto('https://example.org');\n    await waitForAngular(page);\n    ```\n\n## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":115,"to":144}}}}],["9317c68c-5332-4800-8d1d-c2b2f84d9b10",{"pageContent":"## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](./api/class-frame), [tabs and contexts](./pages)\n- Run tests in parallel across multiple browsers\n- Built-in test [artifact collection](./test-use-options.md#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n- [Playwright Inspector](./debug.md)\n- [Playwright Test Code generation](./codegen-intro.md)\n- [Playwright Tracing](./trace-viewer.md) for post-mortem debugging\n\n## Further Reading\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](./intro)\n- [Fixtures](./test-fixtures)\n- [Locators](./locators)\n- [Assertions](./test-assertions)\n- [Auto-waiting](./actionability)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":142,"to":165}}}}],["d40ef758-6fe7-4ece-9b7c-433c3f49b50a",{"pageContent":"Learn more about Playwright Test runner:\n\n- [Getting Started](./intro)\n- [Fixtures](./test-fixtures)\n- [Locators](./locators)\n- [Assertions](./test-assertions)\n- [Auto-waiting](./actionability)\n\n[ElementFinder]: https://www.protractortest.org/#/api?view=ElementFinder\n[`waitForAngular`]: https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-protractor-js.md","title":"src-protractor-js","url":"https://playwright.dev/docs/src-protractor-js","loc":{"lines":{"from":159,"to":168}}}}],["7cfdf88c-bb68-4430-a927-019bf8c401b9",{"pageContent":"---\nid: puppeteer\ntitle: \"Migrating from Puppeteer\"\n---\n\n## Migration Principles\n\nThis guide describes migration to [Playwright Library](./library) and [Playwright Test](./intro.md) from Puppeteer. The APIs have similarities, but Playwright offers much more possibilities for web testing and cross-browser automation.\n\n- Most Puppeteer APIs can be used as is\n- The use of [ElementHandle] is discouraged, use [Locator] objects and web-first assertions instead.\n- Playwright is cross-browser\n- You probably don't need explicit wait\n\n## Cheat Sheet","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":1,"to":15}}}}],["140bdd9e-1df5-4e79-a8c9-e551510154a0",{"pageContent":"| Puppeteer                                          | Playwright Library                          |\n|----------------------------------------------------|---------------------------------------------|\n| `await puppeteer.launch()`                         | `await playwright.chromium.launch()`        |\n| `puppeteer.launch({product: 'firefox'})`           | `await playwright.firefox.launch()`         |\n|  WebKit is not supported by Puppeteer              | `await playwright.webkit.launch()`          |\n| `await browser.createIncognitoBrowserContext(...)` | `await browser.newContext(...)`             |\n| `await page.setViewport(...)`                      | `await page.setViewportSize(...)`           |\n| `await page.waitForXPath(XPathSelector)`           | `await page.waitForSelector(XPathSelector)` |\n| `await page.waitForNetworkIdle(...)`               | `await page.waitForLoadState('networkidle')` |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":17,"to":25}}}}],["2c628ca2-6d58-46c0-af01-7f5d089a3937",{"pageContent":"| `await page.waitForNetworkIdle(...)`               | `await page.waitForLoadState('networkidle')` |\n| `await page.$eval(...)`                            | [Assertions](./test-assertions) can often be used instead to verify text, attribute, class... |\n| `await page.$(...)`                                | Discouraged, use [Locators](./api/class-locator) instead |\n| `await page.$x(xpath_selector)`                    | Discouraged, use [Locators](./api/class-locator) instead |\n| No methods dedicated to checkbox or radio input    | `await page.locator(selector).check()`<br/>`await page.locator(selector).uncheck()` |\n| `await page.click(selector)`                       | `await page.locator(selector).click()`      |\n| `await page.focus(selector)`                       | `await page.locator(selector).focus()`      |\n| `await page.hover(selector)`                       | `await page.locator(selector).hover()`      |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":25,"to":32}}}}],["21acc18e-2040-40ad-9cff-bb5f3c14a21d",{"pageContent":"| `await page.hover(selector)`                       | `await page.locator(selector).hover()`      |\n| `await page.select(selector, values)`              | `await page.locator(selector).selectOption(values)` |\n| `await page.tap(selector)`                         | `await page.locator(selector).tap()`        |\n| `await page.type(selector, ...)`                   | `await page.locator(selector).fill(...)` |\n| `await page.waitForFileChooser(...)`<br/>`await elementHandle.uploadFile(...)` | `await page.locator(selector).setInputFiles(...)` |\n| `await page.cookies([...urls])`                    | `await browserContext.cookies([urls])`      |\n| `await page.deleteCookie(...cookies)`              | `await browserContext.clearCookies()`       |\n| `await page.setCookie(...cookies)`                 | `await browserContext.addCookies(cookies)`  |\n| `page.on(...)`                                     | `page.on(...)`<br/>In order to intercept and mutate requests, see [`method: Page.route`] |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":32,"to":40}}}}],["8c2b8c91-2ccf-4566-8d24-ac1ba3a0db55",{"pageContent":"`page.waitForNavigation` and `page.waitForSelector` remain, but in many cases will not be necessary due to [auto-waiting](./actionability).\n\nThe use of [ElementHandle] is discouraged, use [Locator] objects and web-first assertions instead.\n\nLocators are the central piece of Playwright's auto-waiting and retry-ability. Locators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches a given selector.\n\n## Examples\n\n### Automation example\n\nPuppeteer:\n\n```js\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1280, height: 800 });\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle2',\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\nLine-by-line migration to Playwright:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":42,"to":69}}}}],["cafb898c-42c8-4ced-ab28-5a84b1b70e71",{"pageContent":"Line-by-line migration to Playwright:\n\n```js\nconst { chromium } = require('playwright'); // 1\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage(); // 2\n  await page.setViewportSize({ width: 1280, height: 800 }); // 3\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle', // 4\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\nMigration highlights (see inline comments in the Playwright code snippet):\n\n1. Each Playwright Library file has explicit import of `chromium`. Other browsers `webkit` or `firefox` can be used.\n1. For browser state isolation, consider [browser contexts](./browser-contexts.md)\n1. `setViewport` becomes `setViewportSize`\n1. `networkidle2` becomes `networkidle`. Please note that in most cases it is not useful, thanks to auto-waiting.\n\n### Test example\n\nPuppeteer with Jest:\n\n```js\nimport puppeteer from 'puppeteer';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":69,"to":98}}}}],["1e6592e9-3bca-489c-9fdd-7ba2e9350204",{"pageContent":"### Test example\n\nPuppeteer with Jest:\n\n```js\nimport puppeteer from 'puppeteer';\n\ndescribe('Playwright homepage', () => {\n  let browser;\n  let page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch();\n    page = await browser.newPage();\n  });\n\n  it('contains hero title', async () => {\n    await page.goto('https://playwright.dev/');\n    await page.waitForSelector('.hero__title');\n    const text = await page.$eval('.hero__title', e => e.textContent);\n    expect(text).toContain('Playwright enables reliable end-to-end testing'); // 5\n  });\n\n  afterAll(() => browser.close());\n});\n```\nLine-by-line migration to Playwright Test:\n\n```js\nimport { test, expect } from '@playwright/test'; // 1","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":93,"to":122}}}}],["757768d7-61a4-4db4-999a-7ae3c32f99b2",{"pageContent":"afterAll(() => browser.close());\n});\n```\nLine-by-line migration to Playwright Test:\n\n```js\nimport { test, expect } from '@playwright/test'; // 1\n\ntest.describe('Playwright homepage', () => {\n  test('contains hero title', async ({ page }) => { // 2, 3\n    await page.goto('https://playwright.dev/');\n    const titleLocator = page.locator('.hero__title'); // 4\n    await expect(titleLocator).toContainText( // 5\n        'Playwright enables reliable end-to-end testing'\n    );\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":116,"to":133}}}}],["afda86cb-3f60-4969-8402-1cd646c2e76b",{"pageContent":"1. Each Playwright Test file has explicit import of the `test` and `expect` functions\n1. Test function is marked with `async`\n1. Playwright Test is given a `page` as one of its parameters. This is one of the many [useful fixtures](./api/class-fixtures) in Playwright Test.\nPlaywright Test creates an isolated [Page] object for each test. However, if you'd like to reuse a single [Page] object between multiple tests, you can create your own in [`method: Test.beforeAll`] and close it in [`method: Test.afterAll`].\n1. Locator creation with [`method: Page.locator`] is one of the few methods that is sync.\n1. Use [assertions](./test-assertions) to verify the state instead of `page.$eval()`.\n\n## Testing\n\nTo improve testing, it is advised to use [Locators](./api/class-locator) and web-first [Assertions](./test-assertions). See [Writing Tests](./writing-tests)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":135,"to":144}}}}],["2bb3627e-a5a8-4052-89f6-599c8d177209",{"pageContent":"## Testing\n\nTo improve testing, it is advised to use [Locators](./api/class-locator) and web-first [Assertions](./test-assertions). See [Writing Tests](./writing-tests)\n\nIt is common with Puppeteer to use `page.evaluate()` or `page.$eval()` to inspect an [ElementHandle] and extract the value of text content, attribute, class... Web-first [Assertions](./test-assertions) offers several matchers for this purpose, it is more reliable and readable.\n\n[Playwright Test](./intro.md) is our first-party recommended test runner to be used with Playwright. It provides several features like Page Object Model, parallelism, fixtures or reporters.\n\n## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":142,"to":152}}}}],["711edc59-4741-4d9f-8723-572c618a95e8",{"pageContent":"## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](./api/class-frame), [tabs and contexts](./pages)\n- Run tests in isolation in parallel across multiple browsers\n- Built-in test [artifact collection](./test-use-options.md#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n- [Playwright Inspector](./debug.md)\n- [Playwright Test Code generation](./codegen-intro.md)\n- [Playwright Tracing](./trace-viewer.md) for post-mortem debugging\n\n## Further Reading\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](./intro)\n- [Fixtures](./test-fixtures)\n- [Locators](./locators.md)\n- [Assertions](./test-assertions)\n- [Auto-waiting](./actionability)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-puppeteer-js.md","title":"src-puppeteer-js","url":"https://playwright.dev/docs/src-puppeteer-js","loc":{"lines":{"from":150,"to":173}}}}],["f628f247-4598-49a1-b1a9-282e8e09792a",{"pageContent":"---\nid: release-notes\ntitle: \"Release notes\"\ntoc_max_heading_level: 2\n---\n\n## Version 1.52\n\n### Highlights\n \n- New method [`method: LocatorAssertions.toContainClass`] to ergonomically assert individual class names on the element.\n\n  ```csharp\n    await Expect(Page.GetByRole(AriaRole.Listitem, new() { Name = \"Ship v1.52\" })).ToContainClassAsync(\"done\");\n  ```\n\n- [Aria Snapshots](./aria-snapshots.md) got two new properties: [`/children`](./aria-snapshots.md#strict-matching) for strict matching and `/url` for links.\n\n  ```csharp\n  await Expect(locator).ToMatchAriaSnapshotAsync(@\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"\"Feature B\"\":\n          - /url: \"\"https://playwright.dev\"\"\n  \");\n  ```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1,"to":30}}}}],["9dc45493-3576-4ae9-a9b2-ddb951cc15f4",{"pageContent":"### Miscellaneous\n\n- New option [`option: APIRequest.newContext.maxRedirects`] in [`method: APIRequest.newContext`] to control the maximum number of redirects.\n- New option `ref` in [`method: Locator.ariaSnapshot`] to generate reference for each element in the snapshot which can later be used to locate the element.\n\n### Breaking Changes\n\n- Glob URL patterns in methods like [`method: Page.route`] do not support `?` and `[]` anymore. We recommend using regular expressions instead.\n- Method [`method: Route.continue`] does not allow to override the `Cookie` header anymore. If a `Cookie` header is provided, it will be ignored, and the cookie will be loaded from the browser's cookie store. To set custom cookies, use [`method: BrowserContext.addCookies`].\n- macOS 13 is now deprecated and will no longer receive WebKit updates. Please upgrade to a more recent macOS version to continue benefiting from the latest WebKit improvements.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":30,"to":41}}}}],["ab349324-1420-4655-a67f-2146ecc3fa44",{"pageContent":"### Browser Versions\n\n- Chromium 136.0.7103.25\n- Mozilla Firefox 137.0\n- WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 135\n- Microsoft Edge 135\n\n## Version 1.51\n\n### Highlights\n\n* New option [`option: BrowserContext.storageState.indexedDB`] for [`method: BrowserContext.storageState`] allows to save and restore IndexedDB contents. Useful when your application uses [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) to store authentication tokens, like Firebase Authentication.\n\n  Here is an example following the [authentication guide](./auth.md#reusing-signed-in-state):\n\n  ```csharp\n  // Save storage state into the file. Make sure to include IndexedDB.\n  await context.StorageStateAsync(new()\n  {\n      Path = \"../../../playwright/.auth/state.json\",\n      IndexedDB = true\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":41,"to":66}}}}],["d73fa3d4-a8bc-4f8a-b6ed-ec8dd6161c02",{"pageContent":"// Create a new context with the saved storage state.\n  var context = await browser.NewContextAsync(new()\n  {\n      StorageStatePath = \"../../../playwright/.auth/state.json\"\n  });\n  ```\n\n* New option [`option: Locator.filter.visible`] for [`method: Locator.filter`] allows matching only visible elements.\n\n  ```csharp\n  // Ignore invisible todo items.\n  var todoItems = Page.GetByTestId(\"todo-item\").Filter(new() { Visible = true });\n  // Check there are exactly 3 visible ones.\n  await Expect(todoItems).ToHaveCountAsync(3);\n  ```\n\n* New option `Contrast` for methods [`method: Page.emulateMedia`] and [`method: Browser.newContext`] allows to emulate the `prefers-contrast` media feature.\n\n* New option [`option: APIRequest.newContext.failOnStatusCode`] makes all fetch requests made through the [APIRequestContext] throw on response codes other than 2xx and 3xx.\n\n### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":68,"to":92}}}}],["de774100-0147-41f2-9099-cc7c149e13f9",{"pageContent":"### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 133\n* Microsoft Edge 133\n\n\n## Version 1.50\n\n### Support for Xunit\n\n* Support for xUnit 2.8+ via [Microsoft.Playwright.Xunit](https://www.nuget.org/packages/Microsoft.Playwright.Xunit). Follow our [Getting Started](./intro.md) guide to learn more.\n\n### Miscellaneous\n\n* Added method [`method: LocatorAssertions.toHaveAccessibleErrorMessage`] to assert the Locator points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).\n\n### UI updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":88,"to":110}}}}],["490c9886-c327-4277-893c-9393b3b7bd19",{"pageContent":"### UI updates\n\n* New button in Codegen for picking elements to produce aria snapshots.\n* Additional details (such as keys pressed) are now displayed alongside action API calls in traces.\n* Display of `canvas` content in traces is error-prone. Display is now disabled by default, and can be enabled via the `Display canvas content` UI setting.\n* `Call` and `Network` panels now display additional time information.\n\n### Breaking\n\n* [`method: LocatorAssertions.toBeEditable`] and [`method: Locator.isEditable`] now throw if the target element is not `<input>`, `<select>`, or a number of other editable elements.\n\n### Browser Versions\n\n* Chromium 133.0.6943.16\n* Mozilla Firefox 134.0\n* WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n### Aria snapshots","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":110,"to":134}}}}],["dcde33cc-d4cb-472a-90ea-c21b8a401f9c",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n### Aria snapshots\n\nNew assertion [`method: LocatorAssertions.toMatchAriaSnapshot`] verifies page structure by comparing to an expected accessibility tree, represented as YAML.\n\n```csharp\nawait page.GotoAsync(\"https://playwright.dev\");\nawait Expect(page.Locator(\"body\")).ToMatchAriaSnapshotAsync(@\"\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"\"Get started\"\"\n    - link \"\"Star microsoft/playwright on GitHub\"\"\n  - main:\n    - img \"\"Browsers (Chromium, Firefox, WebKit)\"\"\n    - heading \"\"Any browser • Any platform • One API\"\"\n\");\n```\n\nYou can generate this assertion with [Test Generator](./codegen) or by calling [`method: Locator.ariaSnapshot`].\n\nLearn more in the [aria snapshots guide](./aria-snapshots).\n\n### Tracing groups\n\nNew method [`method: Tracing.group`] allows you to visually group actions in the trace viewer.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":127,"to":157}}}}],["4abc180e-25a4-493e-a2b1-d0572603e7f8",{"pageContent":"Learn more in the [aria snapshots guide](./aria-snapshots).\n\n### Tracing groups\n\nNew method [`method: Tracing.group`] allows you to visually group actions in the trace viewer.\n\n```csharp\n// All actions between GroupAsync and GroupEndAsync\n// will be shown in the trace viewer as a group.\nawait Page.Context.Tracing.GroupAsync(\"Open Playwright.dev > API\");\nawait Page.GotoAsync(\"https://playwright.dev/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"API\" }).ClickAsync();\nawait Page.Context.Tracing.GroupEndAsync();\n```\n\n### Breaking: `chrome` and `msedge` channels switch to new headless mode\n\nThis change affects you if you're using one of the following channels in your `playwright.config.ts`:\n- `chrome`, `chrome-dev`, `chrome-beta`, or `chrome-canary`\n- `msedge`, `msedge-dev`, `msedge-beta`, or `msedge-canary`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":153,"to":172}}}}],["c5fba4d4-94a4-43e3-9253-24d4d97cd74c",{"pageContent":"After updating to Playwright v1.49, run your test suite. If it still passes, you're good to go. If not, you will probably need to update your snapshots, and adapt some of your test code around PDF viewers and extensions. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for more details.\n\n### Try new Chromium headless\n\nYou can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):\n\n> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.\n\nSee [issue #33566](https://github.com/microsoft/playwright/issues/33566) for the list of possible breakages you could encounter and more details on Chromium headless. Please file an issue if you see any problems after opting in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":174,"to":182}}}}],["09056f3c-e6d7-4ed8-a8b3-b644ec21c3de",{"pageContent":"```xml csharp title=\"runsettings.xml\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Channel>chromium</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n```bash csharp\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Channel=chromium\n```\n\n### Miscellaneous\n\n- There will be no more updates for WebKit on Ubuntu 20.04 and Debian 11. We recommend updating your OS to a later version.\n- `<canvas>` elements inside a snapshot now draw a preview.\n\n### Browser Versions\n\n- Chromium 131.0.6778.33\n- Mozilla Firefox 132.0\n- WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 130\n- Microsoft Edge 130\n\n\n## Version 1.48\n\n### WebSocket routing","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":184,"to":219}}}}],["40c4cae7-60cd-464e-be54-e99a77791b5b",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 130\n- Microsoft Edge 130\n\n\n## Version 1.48\n\n### WebSocket routing\n\nNew methods [`method: Page.routeWebSocket`] and [`method: BrowserContext.routeWebSocket`] allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a `\"request\"` with a `\"response\"`.\n\n```csharp\nawait page.RouteWebSocketAsync(\"/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\nSee [WebSocketRoute] for more details.\n\n### UI updates\n\n- New \"copy\" buttons for annotations and test location in the HTML report.\n- Route method calls like [`method: Route.fulfill`] are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.\n- New \"Copy as cURL\" and \"Copy as fetch\" buttons for requests in the network tab.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":211,"to":238}}}}],["107b50da-50b4-4b12-a3d5-73fc397bded9",{"pageContent":"### Miscellaneous\n\n- New method [`method: Page.requestGC`] may help detect memory leaks.\n- Requests made by [APIRequestContext] now record detailed timing and security information in the HAR.\n\n### Browser Versions\n\n- Chromium 130.0.6723.19\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 129\n- Microsoft Edge 129\n\n\n## Version 1.47\n\n### Network Tab improvements\n\nThe Network tab in the trace viewer has several nice improvements:\n\n- filtering by asset type and URL\n- better display of query string parameters\n- preview of font assets\n\n![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":240,"to":269}}}}],["7880ebc1-2c1a-47bb-bee6-d97644e748fb",{"pageContent":"![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous\n\n- The `mcr.microsoft.com/playwright/dotnet:v1.47.0` now serves a Playwright image based on Ubuntu 24.04 Noble.\n  To use the 22.04 jammy-based image, please use `mcr.microsoft.com/playwright/dotnet:v1.47.0-jammy` instead.\n- The `:latest`/`:focal`/`:jammy` tag for Playwright Docker images is no longer being published. Pin to a specific version for better stability and reproducibility.\n- TLS client certificates can now be passed from memory by passing [`option: Browser.newContext.clientCertificates.cert`] and [`option: Browser.newContext.clientCertificates.key`] as byte arrays instead of file paths.\n- [`option: Locator.selectOption.noWaitAfter`] in [`method: Locator.selectOption`] was deprecated.\n- We've seen reports of WebGL in Webkit misbehaving on GitHub Actions `macos-13`. We recommend upgrading GitHub Actions to `macos-14`.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":267,"to":278}}}}],["bffeb258-578b-4e3d-a6b4-b0cda21ef25a",{"pageContent":"### Browser Versions\n\n- Chromium 129.0.6668.29\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 128\n- Microsoft Edge 128\n\n## Version 1.46\n\n### TLS Client Certificates\n\nPlaywright now allows to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.\n\nYou can provide client certificates as a parameter of [`method: Browser.newContext`] and [`method: APIRequest.newContext`]. The following snippet sets up a client certificate for `https://example.com`:\n\n```csharp\nvar context = await Browser.NewContextAsync(new() {\n  ClientCertificates = [\n    new() {\n      Origin = \"https://example.com\",\n      CertPath = \"client-certificates/cert.pem\",\n      KeyPath = \"client-certificates/key.pem\",\n    }\n  ]\n});\n```\n\n### Trace Viewer Updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":278,"to":309}}}}],["40768345-6575-4597-bf93-8592d608794c",{"pageContent":"### Trace Viewer Updates\n\n- Content of text attachments is now rendered inline in the attachments pane.\n- New setting to show/hide routing actions like [`method: Route.continue`].\n- Request method and status are shown in the network details tab.\n- New button to copy source file location to clipboard.\n- Metadata pane now displays the `BaseURL`.\n\n### Miscellaneous\n\n- New `maxRetries` option in [`method: APIRequestContext.fetch`] which retries on the `ECONNRESET` network error.\n\n### Browser Versions\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n\n## Version 1.45\n\n### Clock\n\nUtilizing the new [Clock] API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:\n* testing with predefined time;\n* keeping consistent time and timers;\n* monitoring inactivity;\n* ticking through time manually.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":309,"to":341}}}}],["79001406-212c-49d3-a59c-0697aba67b46",{"pageContent":"```csharp\n// Initialize clock with some time before the test time and let the page load naturally.\n// `Date.now` will progress as the timers fire.\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)\n});\nawait Page.GotoAsync(\"http://localhost:3333\");\n\n// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\n\n// Assert the page state.\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\nawait Page.Clock.FastForwardAsync(\"30:00\");\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:30:00 AM\");\n```\n\nSee [the clock guide](./clock.md) for more details.\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":343,"to":366}}}}],["50d5e8de-5d3a-4127-8fca-971f0aaffb67",{"pageContent":"See [the clock guide](./clock.md) for more details.\n\n### Miscellaneous\n\n- Method [`method: Locator.setInputFiles`] now supports uploading a directory for `<input type=file webkitdirectory>` elements.\n  ```csharp\n  await page.GetByLabel(\"Upload directory\").SetInputFilesAsync(\"mydir\");\n  ```\n\n- Multiple methods like [`method: Locator.click`] or [`method: Locator.press`] now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.\n  ```csharp\n  // Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\n  await page.Keyboard.PressAsync(\"ControlOrMeta+S\");\n  ```\n\n- New property `httpCredentials.send` in [`method: APIRequest.newContext`] that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.\n\n- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":364,"to":381}}}}],["d6d8b7bf-cd16-48f2-850e-709c2108101b",{"pageContent":"- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.\n\n- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.\n\n### Browser Versions\n\n* Chromium 127.0.6533.5\n* Mozilla Firefox 127.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 126\n* Microsoft Edge 126\n\n## Version 1.44\n\n### New APIs\n\n**Accessibility assertions**\n\n- [`method: LocatorAssertions.toHaveAccessibleName`] checks if the element has the specified accessible name:\n  ```csharp\n  var locator = Page.GetByRole(AriaRole.Button);\n  await Expect(locator).ToHaveAccessibleNameAsync(\"Submit\");\n  ```\n\n- [`method: LocatorAssertions.toHaveAccessibleDescription`] checks if the element has the specified accessible description:\n  ```csharp\n  var locator = Page.GetByRole(AriaRole.Button);\n  await Expect(locator).ToHaveAccessibleDescriptionAsync(\"Upload a photo\");\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":381,"to":412}}}}],["296174e3-709c-4b80-bbf0-5a8a359bb38d",{"pageContent":"- [`method: LocatorAssertions.toHaveRole`] checks if the element has the specified ARIA role:\n  ```csharp\n  var locator = Page.GetByTestId(\"save-button\");\n  await Expect(locator).ToHaveRoleAsync(AriaRole.Button);\n  ```\n\n**Locator handler**\n\n- After executing the handler added with [`method: Page.addLocatorHandler`], Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `NoWaitAfter` option.\n- You can use new `Times` option in [`method: Page.addLocatorHandler`] to specify maximum number of times the handler should be run.\n- The handler in [`method: Page.addLocatorHandler`] now accepts the locator as argument.\n- New [`method: Page.removeLocatorHandler`] method for removing previously added locator handlers.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":414,"to":425}}}}],["5343d6bb-5bb7-4b71-aabe-229bea057f69",{"pageContent":"```csharp\nvar locator = Page.GetByText(\"This interstitial covers the button\");\nawait Page.AddLocatorHandlerAsync(locator, async (overlay) =>\n{\n    await overlay.Locator(\"#close\").ClickAsync();\n}, new() { Times = 3, NoWaitAfter = true });\n// Run your tests that can be interrupted by the overlay.\n// ...\nawait Page.RemoveLocatorHandlerAsync(locator);\n```\n\n**Miscellaneous options**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":427,"to":438}}}}],["b7b1149c-f16a-4d3c-b521-1302a74fc68e",{"pageContent":"**Miscellaneous options**\n\n- New method [`method: FormData.append`] allows to specify repeating fields with the same name in [`Multipart`](./api/class-apirequestcontext#api-request-context-fetch-option-multipart) option in `APIRequestContext.FetchAsync()`:\n  ```csharp\n  var formData = Context.APIRequest.CreateFormData();\n  formData.Append(\"file\", new FilePayload()\n  {\n      Name = \"f1.js\",\n      MimeType = \"text/javascript\",\n      Buffer = System.Text.Encoding.UTF8.GetBytes(\"var x = 2024;\")\n  });\n  formData.Append(\"file\", new FilePayload()\n  {\n      Name = \"f2.txt\",\n      MimeType = \"text/plain\",\n      Buffer = System.Text.Encoding.UTF8.GetBytes(\"hello\")\n  });\n  var response = await Context.APIRequest.PostAsync(\"https://example.com/uploadFiles\", new() { Multipart = formData });\n  ```\n\n- [`method: PageAssertions.toHaveURL`] now supports `IgnoreCase` [option](./api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":438,"to":460}}}}],["ce46e5d1-2632-49af-8e73-17290163aab4",{"pageContent":"- [`method: PageAssertions.toHaveURL`] now supports `IgnoreCase` [option](./api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n\n### Browser Versions\n\n* Chromium 125.0.6422.14\n* Mozilla Firefox 125.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 124\n* Microsoft Edge 124\n\n## Version 1.43\n\n### New APIs\n\n- Method [`method: BrowserContext.clearCookies`] now supports filters to remove only some cookies.\n\n  ```csharp\n  // Clear all cookies.\n  await Context.ClearCookiesAsync();\n  // New: clear cookies with a particular name.\n  await Context.ClearCookiesAsync(new() { Name = \"session-id\" });\n  // New: clear cookies for a particular domain.\n  await Context.ClearCookiesAsync(new() { Domain = \"my-origin.com\" });\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":458,"to":484}}}}],["163f35c1-2d63-4211-845a-0e0ca6940a8e",{"pageContent":"- New property [`method: Locator.contentFrame`] converts a [Locator] object to a [FrameLocator]. This can be useful when you have a [Locator] object obtained somewhere, and later on would like to interact with the content inside the frame.\n\n  ```csharp\n  var locator = Page.Locator(\"iframe[name='embedded']\");\n  // ...\n  var frameLocator = locator.ContentFrame;\n  await frameLocator.GetByRole(AriaRole.Button).ClickAsync();\n  ```\n\n- New property [`method: FrameLocator.owner`] converts a [FrameLocator] object to a [Locator]. This can be useful when you have a [FrameLocator] object obtained somewhere, and later on would like to interact with the `iframe` element.\n\n  ```csharp\n  var frameLocator = page.FrameLocator(\"iframe[name='embedded']\");\n  // ...\n  var locator = frameLocator.Owner;\n  await Expect(locator).ToBeVisibleAsync();\n  ```\n\n### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":486,"to":510}}}}],["80a896b3-0524-4f84-8703-6df36b8a85be",{"pageContent":"### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 123\n* Microsoft Edge 123\n\n## Version 1.42\n\n### New Locator Handler\n\nNew method [`method: Page.addLocatorHandler`] registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":504,"to":519}}}}],["307e7b94-9125-4e6d-9e16-23c800ddaf3b",{"pageContent":"```csharp\n// Setup the handler.\nawait Page.AddLocatorHandlerAsync(\n    Page.GetByRole(AriaRole.Heading, new() { Name = \"Hej! You are in control of your cookies.\" }),\n    async () =>\n    {\n        await Page.GetByRole(AriaRole.Button, new() { Name = \"Accept all\" }).ClickAsync();\n    });\n// Write the test as usual.\nawait Page.GotoAsync(\"https://www.ikea.com/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Collection of blue and white\" }).ClickAsync();\nawait Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Light and easy\" })).ToBeVisibleAsync();\n```\n\n### New APIs\n\n- [`method: Page.pdf`] accepts two new options [`option: Page.pdf.tagged`] and [`option: Page.pdf.outline`].\n\n### Announcements\n\n* ⚠️ Ubuntu 18 is not supported anymore.\n\n### Browser Versions\n\n* Chromium 123.0.6312.4\n* Mozilla Firefox 123.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":521,"to":556}}}}],["7cfdfa75-1716-4d53-b23e-f22f54f86969",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs\n\n- New method [`method: Page.unrouteAll`] removes all routes registered by [`method: Page.route`] and [`method: Page.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New method [`method: BrowserContext.unrouteAll`] removes all routes registered by [`method: BrowserContext.route`] and [`method: BrowserContext.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New options [`option: Page.screenshot.style`] in [`method: Page.screenshot`] and [`option: Locator.screenshot.style`] in [`method: Locator.screenshot`] to add custom CSS to the page before taking a screenshot.\n\n### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":549,"to":568}}}}],["7a97a6e0-903e-473a-8d43-f778a9e22c53",{"pageContent":"### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 120\n* Microsoft Edge 120\n\n## Version 1.40\n\n### Test Generator Update\n\n![Playwright Test Generator](https://github.com/microsoft/playwright/assets/9881434/e8d67e2e-f36d-4301-8631-023948d3e190)\n\nNew tools to generate assertions:\n- \"Assert visibility\" tool generates [`method: LocatorAssertions.toBeVisible`].\n- \"Assert value\" tool generates [`method: LocatorAssertions.toHaveValue`].\n- \"Assert text\" tool generates [`method: LocatorAssertions.toContainText`].\n\nHere is an example of a generated test with assertions:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":562,"to":584}}}}],["ffc18b6b-26b6-483a-bfe6-bcff69f6bc1d",{"pageContent":"Here is an example of a generated test with assertions:\n\n```csharp\nawait Page.GotoAsync(\"https://playwright.dev/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\nawait Expect(Page.GetByLabel(\"Breadcrumbs\").GetByRole(AriaRole.List)).ToContainTextAsync(\"Installation\");\nawait Expect(Page.GetByLabel(\"Search\")).ToBeVisibleAsync();\nawait Page.GetByLabel(\"Search\").ClickAsync();\nawait Page.GetByPlaceholder(\"Search docs\").FillAsync(\"locator\");\nawait Expect(Page.GetByPlaceholder(\"Search docs\")).ToHaveValueAsync(\"locator\");\n```\n\n### New APIs\n\n- Options [`option: Page.close.reason`] in [`method: Page.close`], [`option: BrowserContext.close.reason`] in [`method: BrowserContext.close`] and [`option: Browser.close.reason`] in [`method: Browser.close`]. Close reason is reported for all operations interrupted by the closure.\n- Option [`option: BrowserType.launchPersistentContext.firefoxUserPrefs`] in [`method: BrowserType.launchPersistentContext`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":584,"to":599}}}}],["a37ba868-9b88-49f0-a59a-59bd13dcf6ab",{"pageContent":"### Other Changes\n\n- Methods [`method: Download.path`] and [`method: Download.createReadStream`] throw an error for failed and cancelled downloads.\n- Playwright [docker image](./docker.md) now comes with .NET 8 (new LTS).\n\n### Browser Versions\n\n* Chromium 120.0.6099.28\n* Mozilla Firefox 119.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 119\n* Microsoft Edge 119\n\n## Version 1.39\n\nEvergreen browsers update.\n\n### Browser Versions\n\n* Chromium 119.0.6045.9\n* Mozilla Firefox 118.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 118\n* Microsoft Edge 118\n\n## Version 1.38\n\n### Trace Viewer Updates\n\n![Playwright Trace Viewer](https://github.com/microsoft/playwright/assets/746130/0c41e20d-c54b-4600-8ca8-1cbb6393ddef)\n\n1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n\n### Deprecations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":601,"to":646}}}}],["92e8f8ec-9aa3-4582-a1d1-20441d9dcb52",{"pageContent":"1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n\n### Deprecations\n\n* The following methods were deprecated: [`method: Page.type`], [`method: Frame.type`],\n  [`method: Locator.type`] and [`method: ElementHandle.type`].\n  Please use [`method: Locator.fill`] instead which is much faster. Use\n  [`method: Locator.pressSequentially`] only if there is a special keyboard\n  handling on the page, and you need to press keys one-by-one.\n\n### Browser Versions\n\n* Chromium 117.0.5938.62\n* Mozilla Firefox 117.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 116\n* Microsoft Edge 116\n\n## Version 1.37\n\n### 📚 Debian 12 Bookworm Support\n\nPlaywright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":638,"to":672}}}}],["6b0b5c4d-5430-4ab2-ad48-a1e004583718",{"pageContent":"Playwright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ | ✅ |\n\n### Browser Versions\n\n* Chromium 116.0.5845.82\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36\n\n🏝️ Summer maintenance release.\n\n### Browser Versions\n\n* Chromium 115.0.5790.75\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.35\n\n### Highlights\n\n* New option `MaskColor` for methods [`method: Page.screenshot`] and [`method: Locator.screenshot`] to change default masking color.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":669,"to":710}}}}],["a6845686-d391-472a-88b5-547e06134185",{"pageContent":"## Version 1.35\n\n### Highlights\n\n* New option `MaskColor` for methods [`method: Page.screenshot`] and [`method: Locator.screenshot`] to change default masking color.\n\n* New `uninstall` CLI command to uninstall browser binaries:\n  ```bash\n  $ pwsh bin/Debug/netX/playwright.ps1 uninstall # remove browsers installed by this installation\n  $ pwsh bin/Debug/netX/playwright.ps1 uninstall --all # remove all ever-install Playwright browsers\n  ```\n\n### Browser Versions\n\n* Chromium 115.0.5790.13\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.34\n\n### Highlights\n\n* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```csharp\n    var button = page.GetByRole(AriaRole.BUTTON).And(page.GetByTitle(\"Subscribe\"));\n    ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":706,"to":737}}}}],["b76794ae-0aa0-41ea-9fd9-c5659feecfdc",{"pageContent":"* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```csharp\n    var button = page.GetByRole(AriaRole.BUTTON).And(page.GetByTitle(\"Subscribe\"));\n    ```\n\n* New events [`event: BrowserContext.console`] and [`event: BrowserContext.dialog`] to subscribe to any dialogs\n  and console messages from any page from the given browser context. Use the new methods [`method: ConsoleMessage.page`]\n  and [`method: Dialog.page`] to pin-point event source.\n\n### Browser Versions\n\n* Chromium 114.0.5735.26\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":733,"to":756}}}}],["0235838b-a16c-4d31-8a8f-b2a1b90c1d84",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update\n\n* Use [`method: Locator.or`] to create a locator that matches either of the two locators.\n  Consider a scenario where   you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead.\n  In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":749,"to":760}}}}],["c2363b97-f152-4681-b959-3b288ccec8a4",{"pageContent":"```csharp\n    var newEmail = Page.GetByRole(AriaRole.Button, new() { Name = \"New email\" });\n    var dialog = Page.GetByText(\"Confirm security settings\");\n    await Expect(newEmail.Or(dialog)).ToBeVisibleAsync();\n    if (await dialog.IsVisibleAsync())\n      await Page.GetByRole(AriaRole.Button, new() { Name = \"Dismiss\" }).ClickAsync();\n    await newEmail.ClickAsync();\n    ```\n* Use new options [`option: Locator.filter.hasNot`] and [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n  to find elements that **do not match** certain conditions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":762,"to":771}}}}],["170170d9-3779-4b3d-9a81-b4b80ec559c3",{"pageContent":"```csharp\n    var rowLocator = Page.Locator(\"tr\");\n    await rowLocator\n        .Filter(new() { HasNotText = \"text in column 1\" })\n        .Filter(new() { HasNot = Page.GetByRole(AriaRole.Button, new() { Name = \"column 2 button\" })})\n        .ScreenshotAsync();\n    ```\n* Use new web-first assertion [`method: LocatorAssertions.toBeAttached`] to ensure that the element\n  is present in the page's DOM. Do not confuse with the [`method: LocatorAssertions.toBeVisible`] that ensures that\n  element is both attached & visible.\n\n### New APIs\n\n- [`method: Locator.or`]\n- New option [`option: Locator.filter.hasNot`] in [`method: Locator.filter`]\n- New option [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n- [`method: LocatorAssertions.toBeAttached`]\n- New option [`option: Route.fetch.timeout`] in [`method: Route.fetch`]\n\n### ⚠️ Breaking change","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":773,"to":792}}}}],["781b716a-4906-45ec-aa67-ea7e61da65a8",{"pageContent":"### ⚠️ Breaking change\n\n* The `mcr.microsoft.com/playwright/dotnet:v1.33.0` now serves a Playwright image based on Ubuntu Jammy.\n  To use the focal-based image, please use `mcr.microsoft.com/playwright/dotnet:v1.33.0-focal` instead.\n\n### Browser Versions\n\n* Chromium 113.0.5672.53\n* Mozilla Firefox 112.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 112\n* Microsoft Edge 112\n\n\n## Version 1.32\n\n### New APIs\n\n- New options [`option: Page.routeFromHAR.updateMode`] and [`option: Page.routeFromHAR.updateContent`] in [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`].\n- Chaining existing locator objects, see [locator docs](./locators.md#matching-inside-a-locator) for details.\n- New option [`option: Tracing.startChunk.name`] in method [`method: Tracing.startChunk`].\n\n### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":792,"to":821}}}}],["44e34d36-6932-4b86-bb9d-b4fcecc9d7c9",{"pageContent":"### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 111\n* Microsoft Edge 111\n\n\n## Version 1.31\n\n### New APIs\n\n- New assertion [`method: LocatorAssertions.toBeInViewport`] ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n\n  ```csharp\n  var locator = Page.GetByRole(AriaRole.Button);\n\n  // Make sure at least some part of element intersects viewport.\n  await Expect(locator).ToBeInViewportAsync();\n\n  // Make sure element is fully outside of viewport.\n  await Expect(locator).Not.ToBeInViewportAsync();\n\n  // Make sure that at least half of the element intersects viewport.\n  await Expect(locator).ToBeInViewportAsync(new() { Ratio = 0.5 });\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":817,"to":847}}}}],["2c36d282-9d8b-4b35-b715-df9d3d16ecbb",{"pageContent":"// Make sure that at least half of the element intersects viewport.\n  await Expect(locator).ToBeInViewportAsync(new() { Ratio = 0.5 });\n  ```\n\n- New methods [`method: BrowserContext.newCDPSession`] and [`method: Browser.newBrowserCDPSession`] create a [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) session for the page and browser respectively.\n\n\n### Miscellaneous\n\n- DOM snapshots in trace viewer can be now opened in a separate window.\n- New option [`option: Route.fetch.maxRedirects`] for method [`method: Route.fetch`].\n- Playwright now supports Debian 11 arm64.\n- Official [docker images](./docker.md) now include Node 18 instead of Node 16.\n\n### Browser Versions\n\n* Chromium 111.0.5563.19\n* Mozilla Firefox 109.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 110\n* Microsoft Edge 110\n\n\n## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":845,"to":877}}}}],["e07b7e57-1925-4d4d-b542-e6f1a1726c17",{"pageContent":"* Google Chrome 110\n* Microsoft Edge 110\n\n\n## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n### New APIs\n\n- New method [`method: Route.fetch`] and new option `Json` for [`method: Route.fulfill`]:\n\n    ```csharp\n    await Page.RouteAsync(\"**/api/settings\", async route => {\n      // Fetch original settings.\n      var response = await route.FetchAsync();\n\n      // Force settings theme to a predefined value.\n      var json = await response.JsonAsync<MyDataType>();\n      json.Theme = \"Solarized\";\n\n      // Fulfill with modified data.\n      await route.FulfillAsync(new() {\n        Json = json\n      });\n    });\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":867,"to":907}}}}],["3941b6d0-84c4-405a-a27a-914dfc17f8bf",{"pageContent":"// Fulfill with modified data.\n      await route.FulfillAsync(new() {\n        Json = json\n      });\n    });\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:\n\n  ```csharp\n  // Check all checkboxes!\n  var checkboxes = Page.GetByRole(AriaRole.Checkbox);\n  foreach (var checkbox in await checkboxes.AllAsync())\n    await checkbox.CheckAsync();\n  ```\n\n- [`method: Locator.selectOption`] matches now by value or label:\n\n  ```html\n  <select multiple>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n  ```\n\n  ```csharp\n  await element.SelectOptionAsync(\"Red\");\n  ```\n\n### Browser Versions\n\n* Chromium 109.0.5414.46\n* Mozilla Firefox 107.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 108\n* Microsoft Edge 108\n\n\n## Version 1.28\n\n### Playwright Tools","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":900,"to":944}}}}],["972680fe-2f83-47bb-af15-940f9bc20aee",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 108\n* Microsoft Edge 108\n\n\n## Version 1.28\n\n### Playwright Tools\n\n* **Live Locators in CodeGen.** Generate a locator for any element on the page using \"Explore\" tool.\n\n![Locator Explorer](https://user-images.githubusercontent.com/9798949/202293757-2e3ec0ac-1feb-4d6f-9935-73e08658b76d.png)\n\n### New APIs\n\n- [`method: Locator.blur`]\n- [`method: Locator.clear`]\n\n### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n## Version 1.27\n\n### Locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":936,"to":968}}}}],["9945a4f4-d471-428d-9df6-9386b392c889",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n## Version 1.27\n\n### Locators\n\nWith these new APIs writing locators is a joy:\n- [`method: Page.getByText`] to locate by text content.\n- [`method: Page.getByRole`] to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n- [`method: Page.getByLabel`] to locate a form control by associated label's text.\n- [`method: Page.getByTestId`] to locate an element based on its `data-testid` attribute (other attribute can be configured).\n- [`method: Page.getByPlaceholder`] to locate an input by placeholder.\n- [`method: Page.getByAltText`] to locate an element, usually image, by its text alternative.\n- [`method: Page.getByTitle`] to locate an element by its title.\n\n```csharp\nawait page.GetByLabel(\"User Name\").FillAsync(\"John\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":961,"to":980}}}}],["3fa74e91-549d-449b-9c2c-7d852a7a4572",{"pageContent":"```csharp\nawait page.GetByLabel(\"User Name\").FillAsync(\"John\");\n\nawait page.GetByLabel(\"Password\").FillAsync(\"secret-password\");\n\nawait page.GetByRole(AriaRole.Button, new() { NameString = \"Sign in\" }).ClickAsync();\n\nawait Expect(Page.GetByText(\"Welcome, John!\")).ToBeVisibleAsync();\n```\n\nAll the same methods are also available on [Locator], [FrameLocator] and [Frame] classes.\n\n### Other highlights\n\n- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.\n\n### Behavior Changes\n\n- [`method: LocatorAssertions.toHaveAttribute`] with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.\n\n   ```csharp\n   await Expect(Page.GetByRole(AriaRole.Button)).ToHaveAttributeAsync(\"disabled\", \"\");\n   ```\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":979,"to":1003}}}}],["91fd89f6-2fa3-437c-95c3-bb0ad1b423df",{"pageContent":"```csharp\n   await Expect(Page.GetByRole(AriaRole.Button)).ToHaveAttributeAsync(\"disabled\", \"\");\n   ```\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 106\n* Microsoft Edge 106\n\n\n## Version 1.26\n\n### Assertions\n\n- New option `Enabled` for [`method: LocatorAssertions.toBeEnabled`].\n- [`method: LocatorAssertions.toHaveText`] now pierces open shadow roots.\n- New option `Editable` for [`method: LocatorAssertions.toBeEditable`].\n- New option `Visible` for [`method: LocatorAssertions.toBeVisible`].\n- [`method: APIResponseAssertions.toBeOK`] is now available.\n\n### Other highlights\n\n- New option `MaxRedirects` for [`method: APIRequestContext.get`] and others to limit redirect count.\n- Codegen now supports MSTest and NUnit frameworks.\n- ASP .NET is now supported.\n\n### Behavior Change","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":999,"to":1031}}}}],["3311c0ff-3965-4007-8272-b251d4a47201",{"pageContent":"### Behavior Change\n\nA bunch of Playwright APIs already support the `WaitUntil: WaitUntilState.DOMContentLoaded` option.\nFor example:\n\n```csharp\nawait Page.GotoAsync(\"https://playwright.dev\", new() { WaitUntil = WaitUntilState.DOMContentLoaded });\n```\n\nPrior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded`\nevent.\n\nTo align with web specification, the `WaitUntilState.DOMContentLoaded` value only waits for\nthe target frame to fire the `'DOMContentLoaded'` event. Use `WaitUntil: WaitUntilState.Load` to wait for all iframes.\n\n### Browser Versions\n\n* Chromium 106.0.5249.30\n* Mozilla Firefox 104.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 105\n* Microsoft Edge 105\n\n## Version 1.25\n\n### New .runsettings file support","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1031,"to":1059}}}}],["7e54a20f-48f1-4990-8c14-047983b81c89",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 105\n* Microsoft Edge 105\n\n## Version 1.25\n\n### New .runsettings file support\n\n`Microsoft.Playwright.NUnit` and `Microsoft.Playwright.MSTest` will now consider the `.runsettings` file and passed settings via the CLI when running end-to-end tests. See in the [documentation](./test-runners) for a full list of supported settings.\n\nThe following does now work:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1052,"to":1063}}}}],["0a71ffb2-5f9f-4310-9c0e-bd6955716161",{"pageContent":"The following does now work:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <!-- Playwright -->\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>true</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n</RunSettings>\n```\n\n### Announcements\n\n* 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).\n* ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.\n\n### Browser Versions\n\n* Chromium 105.0.5195.19\n* Mozilla Firefox 103.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 104\n* Microsoft Edge 104\n\n## Version 1.24","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1063,"to":1103}}}}],["5d8b685d-05c2-4020-89fb-7ae17aacc8cd",{"pageContent":"* Chromium 105.0.5195.19\n* Mozilla Firefox 103.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 104\n* Microsoft Edge 104\n\n## Version 1.24\n\n<div className=\"embed-youtube\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/9F05o1shxcY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n### 🐂 Debian 11 Bullseye Support\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know\nif you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n### New introduction docs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1094,"to":1122}}}}],["1896760f-e78c-4f80-af58-26733be4be87",{"pageContent":"|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n### New introduction docs\n\nWe rewrote our Getting Started docs to be more end-to-end testing focused. Check them out on [playwright.dev](./intro).\n\n## Version 1.23\n\n### API Testing\n\nPlaywright for .NET 1.23 introduces new [API Testing](./api/class-apirequestcontext) that lets you send requests to the server directly from .NET!\nNow you can:\n\n- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser\n\nTo do a request on behalf of Playwright's Page, use **new [`property: Page.request`] API**:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1116,"to":1137}}}}],["479df23f-b6e2-4986-a680-682d619b87bf",{"pageContent":"To do a request on behalf of Playwright's Page, use **new [`property: Page.request`] API**:\n\n```csharp\n// Do a GET request on behalf of page\nvar response = await Page.APIRequest.GetAsync(\"http://example.com/foo.json\");\nConsole.WriteLine(response.Status);\nConsole.WriteLine(response.StatusText);\nConsole.WriteLine(response.Ok);\nConsole.WriteLine(response.Headers[\"Content-Type\"]);\nConsole.WriteLine(await response.TextAsync());\nConsole.WriteLine((await response.JsonAsync())?.GetProperty(\"foo\").GetString());\n```\n\nRead more about it in our [API testing guide](./api-testing).\n\n### Network Replay\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.\n\nTo record network into HAR file:\n\n```bash\npwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\nAlternatively, you can record HAR programmatically:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1137,"to":1162}}}}],["dcfe27b8-1dad-4ca1-afa7-d09824004367",{"pageContent":"```bash\npwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\nAlternatively, you can record HAR programmatically:\n\n```csharp\nvar context = await browser.NewContextAsync(new()\n{\n  RecordHarPath = harPath,\n  RecordHarUrlFilterString = \"**/api/**\",\n});\n\n// ... Perform actions ...\n\n// Close context to ensure HAR is saved to disk.\ncontext.CloseAsync();\n```\n\nUse the new methods [`method: Page.routeFromHAR`] or [`method: BrowserContext.routeFromHAR`] to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:\n\n\n```csharp\nawait context.RouteFromHARAsync(\"example.har\");\n```\n\nRead more in [our documentation](./mock.md#mocking-with-har-files).\n\n\n### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1158,"to":1191}}}}],["31c1f54e-498c-4635-8bde-b4e0df126154",{"pageContent":"### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:\n\n```csharp\n// Remove a header from all requests.\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    var headers = route.Request.Headers;\n    headers.Remove(\"X-Secret\");\n    await route.ContinueAsync(new() { Headers = headers });\n});\n\n// Abort all images.\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    if (route.Request.ResourceType == \"image\")\n    {\n        await route.AbortAsync();\n    }\n    else\n    {\n        await route.FallbackAsync();\n    }\n});\n```\n\nNote that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1187,"to":1218}}}}],["79b6ac2f-76ad-4167-be18-149dd22bcc5b",{"pageContent":"Note that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update\n\n* New method [`method: LocatorAssertions.toHaveValues`] that asserts all selected values of `<select multiple>` element.\n* Methods [`method: LocatorAssertions.toContainText`] and [`method: LocatorAssertions.toHaveText`] now accept `ignoreCase` option.\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1216,"to":1223}}}}],["41b1912e-a286-4fd1-a4ca-baa86502c91f",{"pageContent":"### Miscellaneous\n\n* If there's a service worker that's in your way, you can now easily disable it with a new context option `serviceWorkers`:\n  ```csharp\n  var context = await Browser.NewContextAsync(new()\n  {\n      ServiceWorkers = ServiceWorkerPolicy.Block\n  });\n  ```\n* Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:\n  ```csharp\n  var context = await Browser.NewContextAsync(new() { RecordHarPath = \"example.har.zip\" });\n  ```\n* If you intend to edit HAR by hand, consider using the `\"minimal\"` HAR recording mode\n  that only records information that is essential for replaying:\n  ```csharp\n  var context = await Browser.NewContextAsync(new() { RecordHarPath = \"example.har\", RecordHarMode = HarMode.Minimal });\n  ```\n* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64.\n* Playwright for .NET now supports **linux-arm64** and provides a **arm64 Ubuntu 20.04 Docker image** for it.\n\n## Version 1.22\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1223,"to":1246}}}}],["fcfed155-3393-4c3b-9f30-340ffd8d5de2",{"pageContent":"## Version 1.22\n\n### Highlights\n\n- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```csharp\n  // Click a button with accessible name \"log in\"\n  await page.Locator(\"role=button[name='log in']\").ClickAsync();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n\n- New [`method: Locator.filter`] API to filter an existing locator\n\n  ```csharp\n  var buttons = page.Locator(\"role=button\");\n  // ...\n  var submitLocator = buttons.Filter(new() { HasText = \"Sign up\" });\n  await submitLocator.ClickAsync();\n  ```\n\n## Version 1.21\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1244,"to":1268}}}}],["1b09cf8a-847c-4378-8a0e-07a0f00a9154",{"pageContent":"## Version 1.21\n\n### Highlights\n\n- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```csharp\n  // Click a button with accessible name \"log in\"\n  await page.Locator(\"role=button[name='log in']\").ClickAsync();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n- New `scale` option in [`method: Page.screenshot`] for smaller sized screenshots.\n- New `caret` option in [`method: Page.screenshot`] to control text caret. Defaults to `\"hide\"`.\n- We now ship a designated .NET docker image `mcr.microsoft.com/playwright/dotnet`. Read more in [our documentation](./docker).\n\n### Behavior Changes\n\n- Playwright now supports large file uploads (100s of MBs) via [`method: Locator.setInputFiles`] API.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1266,"to":1286}}}}],["24bd4c2a-51ba-48d7-8a73-cad97b68d9cf",{"pageContent":"### Behavior Changes\n\n- Playwright now supports large file uploads (100s of MBs) via [`method: Locator.setInputFiles`] API.\n\n### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n\n## Version 1.20\n\n### Web-First Assertions\n\nPlaywright for .NET 1.20 introduces [Web-First Assertions](./test-assertions).\n\nConsider the following example:\n\n```csharp\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[TestFixture]\npublic class ExampleTests : PageTest\n{\n    [Test]\n    public async Task StatusBecomesSubmitted()\n    {\n        await Expect(Page.Locator(\".status\")).ToHaveTextAsync(\"Submitted\");\n    }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1282,"to":1322}}}}],["7935f539-f5f5-4e88-8ff1-316d257a2be4",{"pageContent":"Playwright will be re-testing the node with the selector `.status` until\nfetched Node has the `\"Submitted\"` text. It will be re-fetching the node and\nchecking it over and over, until the condition is met or until the timeout is\nreached. You can pass this timeout as an option.\n\nRead more in [our documentation](./test-assertions).\n\n### Other Updates\n\n- New options for methods [`method: Page.screenshot`], [`method: Locator.screenshot`] and [`method: ElementHandle.screenshot`]:\n  * Option `ScreenshotAnimations.Disabled` rewinds all CSS animations and transitions to a consistent state\n  * Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.\n- [`method: Locator.highlight`] visually reveals element(s) for easier debugging.\n\n### Announcements\n\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1324,"to":1342}}}}],["656318bf-1343-4279-89ba-b0c0683f3147",{"pageContent":"### Announcements\n\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 99\n- Microsoft Edge 99\n\n## Version 1.19\n\n### Highlights\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:\n\n  ```csharp\n  await Page.Locator(\"article\", new() { Has = Page.Locator(\".highlight\") }).ClickAsync();\n  ```\n\n  Read more in [locator documentation](./api/class-locator#locator-locator)\n\n- New [`method: Locator.page`]\n- [`method: Page.screenshot`] and [`method: Locator.screenshot`] now automatically hide blinking caret\n- Playwright Codegen now generates locators and frame locators\n\n### Browser Versions\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1338,"to":1373}}}}],["b72180a5-3bd7-4700-84c3-632967e1dfef",{"pageContent":"### Browser Versions\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n\n## Version 1.18\n\n### Locator Improvements\n\n- [`method: Locator.dragTo`]\n- Each locator can now be optionally filtered by the text it contains:\n    ```csharp\n    await Page.Locator(\"li\", new() { HasTextString = \"My Item\" })\n              .Locator(\"button\").click();\n    ```\n    Read more in [locator documentation](./api/class-locator#locator-locator)\n\n\n### New APIs & changes\n\n- [`AcceptDownloads`](./api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `true`.\n- [`Sources`](./api/class-tracing#tracing-start-option-sources) option to embed sources into traces.\n\n### Browser Versions\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1369,"to":1408}}}}],["b4029aba-e5e0-4699-b556-1c3bc845089d",{"pageContent":"### Browser Versions\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n\n## Version 1.17\n\n### Frame Locators\n\nPlaywright 1.17 introduces [frame locators](./api/class-framelocator) - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.\n\n![Graphics](https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png)\n\nFrame locators can be created with either [`method: Page.frameLocator`] or [`method: Locator.frameLocator`] method.\n\n```csharp\nvar locator = page.FrameLocator(\"#my-frame\").Locator(\"text=Submit\");\nawait locator.ClickAsync();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1399,"to":1429}}}}],["51369c8b-9958-4196-961e-b45baab61624",{"pageContent":"```csharp\nvar locator = page.FrameLocator(\"#my-frame\").Locator(\"text=Submit\");\nawait locator.ClickAsync();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update\n\nPlaywright Trace Viewer is now **available online** at https://trace.playwright.dev! Just drag-and-drop your `trace.zip` file to inspect its contents.\n\n> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.\n\n- Playwright Test traces now include sources by default (these could be turned off with tracing option)\n- Trace Viewer now shows test name\n- New trace metadata tab with browser details\n- Snapshots now have URL bar\n\n![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1422,"to":1442}}}}],["eb5c5b26-d576-40a5-b81c-4cc6fd375c74",{"pageContent":"![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update\n\n- HTML report now supports dynamic filtering\n- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.\n\n![image](https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png)\n\n### Ubuntu ARM64 support + more\n\n- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.\n- You can now use Playwright to install stable version of Edge on Linux:\n    ```bash\n    pwsh bin/Debug/netX/playwright.ps1 install msedge\n    ```\n\n\n### New APIs\n\n- Tracing now supports a [`'title'`](./api/class-tracing#tracing-start-option-title) option\n- Page navigations support a new [`'commit'`](./api/class-page#page-goto) waiting option\n\n## Version 1.16\n\n### 🎭 Playwright Library\n\n#### Locator.WaitForAsync","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1440,"to":1467}}}}],["2db2e393-915a-40d2-9421-f07b14676bcb",{"pageContent":"## Version 1.16\n\n### 🎭 Playwright Library\n\n#### Locator.WaitForAsync\n\nWait for a locator to resolve to a single element with a given state.\nDefaults to the `state: 'visible'`.\n\n```csharp\nvar orderSent = page.Locator(\"#order-sent\");\norderSent.WaitForAsync();\n```\n\nRead more about [`method: Locator.waitFor`].\n\n### 🎭 Playwright Trace Viewer\n\n- run trace viewer with `pwsh bin/Debug/netX/playwright.ps1 show-trace` and drop trace files to the trace viewer PWA\n- better visual attribution of action targets\n\nRead more about [Trace Viewer](./trace-viewer).\n\n### Browser Versions\n\n- Chromium 97.0.4666.0\n- Mozilla Firefox 93.0\n- WebKit 15.4\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n### 📜 New Headers API","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1463,"to":1504}}}}],["261e9603-b4a4-43bf-8921-782769c2e145",{"pageContent":"- Google Chrome 94\n- Microsoft Edge 94\n\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n### 📜 New Headers API\n\nPreviously it was not possible to get multiple header values of a response. This is now possible and additional helper functions are available:\n\n- [`method: Request.allHeaders`]\n- [`method: Request.headersArray`]\n- [`method: Request.headerValue`]\n- [`method: Response.allHeaders`]\n- [`method: Response.headersArray`]\n- [`method: Response.headerValue`]\n- [`method: Response.headerValues`]\n\n### 🌈 Forced-Colors emulation\n\nIts now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1494,"to":1520}}}}],["b61f5c77-291b-42e1-b9db-ccc62dd9a99d",{"pageContent":"Its now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs\n\n- [`method: Page.route`] accepts new `times` option to specify how many times this route should be matched.\n- [`method: Page.setChecked`] and [`method: Locator.setChecked`] were introduced to set the checked state of a checkbox.\n- [`method: Request.sizes`] Returns resource size information for given http request.\n- [`method: Tracing.startChunk`] - Start a new trace chunk.\n- [`method: Tracing.stopChunk`] - Stops a new trace chunk.\n\n### Important ⚠\n* ⬆ .NET Core Apps 2.1 are **no longer** supported for our CLI tooling. As of August 31st, 2021, .NET Core 2.1 is no [longer supported](https://devblogs.microsoft.com/dotnet/net-core-2-1-will-reach-end-of-support-on-august-21-2021/) and will not receive any security updates. We've decided to move the CLI forward and require .NET Core 3.1 as a minimum.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1518,"to":1529}}}}],["538705f8-3dbd-4bb6-a0df-6fc925945544",{"pageContent":"### Browser Versions\n\n- Chromium 96.0.4641.0\n- Mozilla Firefox 92.0\n- WebKit 15.0\n\n## Version 1.14\n\n#### ⚡️ New \"strict\" mode\n\nSelector ambiguity is a common problem in automation testing. **\"strict\" mode**\nensures that your selector points to a single element and throws otherwise.\n\nSet `setStrict(true)` in your action calls to opt in.\n\n```csharp\n// This will throw if you have more than one button!\nawait page.Locator(\"button\", new() { Strict = true });\n```\n\n#### 📍 New [**Locators API**](./api/class-locator)\n\nLocator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.\n\nThe difference between the [Locator](./api/class-locator) and [ElementHandle](./api/class-elementhandle) is that the latter points to a particular element, while [Locator](./api/class-locator) captures the logic of how to retrieve that element.\n\nAlso, locators are **\"strict\" by default**!","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1531,"to":1557}}}}],["172dc6d9-e4ce-46c1-9187-cb7bf80e1e1c",{"pageContent":"Also, locators are **\"strict\" by default**!\n\n```csharp\nvar locator = page.Locator(\"button\");\nawait locator.ClickAsync();\n```\n\nLearn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines\n\nReact and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.\n\n```csharp\nawait page.Locator(\"_react=SubmitButton[enabled=true]\").ClickAsync();\nawait page.Locator(\"_vue=submit-button[enabled=true]\").ClickAsync();\n```\n\nLearn more in the [react selectors documentation](./other-locators.md#react-locator) and the [vue selectors documentation](./other-locators.md#vue-locator).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1557,"to":1575}}}}],["278379ee-7ec6-45dd-85c3-13b7480ff148",{"pageContent":"Learn more in the [react selectors documentation](./other-locators.md#react-locator) and the [vue selectors documentation](./other-locators.md#vue-locator).\n\n#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines\n\n- [`nth`](./other-locators.md#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.\n- [`visible`](./other-locators.md#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.\n\n```csharp\n// select the first button among all buttons\nawait button.ClickAsync(\"button >> nth=0\");\n// or if you are using locators, you can use First, Nth() and Last\nawait page.Locator(\"button\").First.ClickAsync();\n\n// click a visible button\nawait button.ClickAsync(\"button >> visible=true\");\n```\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1575,"to":1592}}}}],["e3a27838-abf7-46b7-ab0c-e0a1c30528b0",{"pageContent":"// click a visible button\nawait button.ClickAsync(\"button >> visible=true\");\n```\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n#### Playwright\n\n- **🖖 Programmatic drag-and-drop support** via the [`method: Page.dragAndDrop`] API.\n- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [`method: Browser.newContext`].\n\n#### Tools\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n\n#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1588,"to":1621}}}}],["327178c9-c466-4dc2-ae3b-50ae523a32af",{"pageContent":"#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs\n\n- new `baseURL` option in [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`method: Response.securityDetails`] and [`method: Response.serverAddr`]\n- [`method: Page.dragAndDrop`] and [`method: Frame.dragAndDrop`]\n- [`method: Download.cancel`]\n- [`method: Page.inputValue`], [`method: Frame.inputValue`] and [`method: ElementHandle.inputValue`]\n- new `force` option in [`method: Page.fill`], [`method: Frame.fill`], and [`method: ElementHandle.fill`]\n- new `force` option in [`method: Page.selectOption`], [`method: Frame.selectOption`], and [`method: ElementHandle.selectOption`]\n\n## Version 1.12\n\n#### Highlights\n\n- Playwright for .NET v1.12 is now stable!\n- Ships with the [codegen](./codegen.md) and [trace viewer](./trace-viewer.md) tools out-of-the-box\n\n#### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1610,"to":1638}}}}],["9f588d92-caf9-48f0-bcee-d35bff661b77",{"pageContent":"#### Highlights\n\n- Playwright for .NET v1.12 is now stable!\n- Ships with the [codegen](./codegen.md) and [trace viewer](./trace-viewer.md) tools out-of-the-box\n\n#### Browser Versions\n\n- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-csharp.md","title":"src-release-notes-csharp","url":"https://playwright.dev/docs/src-release-notes-csharp","loc":{"lines":{"from":1633,"to":1647}}}}],["faae1b5e-2c97-4534-9c34-9bdeeaf5cfcd",{"pageContent":"---\nid: release-notes\ntitle: \"Release notes\"\ntoc_max_heading_level: 2\n---\n\n## Version 1.52\n\n### Highlights\n \n- New method [`method: LocatorAssertions.toContainClass`] to ergonomically assert individual class names on the element.\n\n  ```java\n    assertThat(page.getByRole(AriaRole.LISTITEM, new Page.GetByRoleOptions().setName(\"Ship v1.52\"))).containsClass(\"done\");\n  ```\n\n- [Aria Snapshots](./aria-snapshots.md) got two new properties: [`/children`](./aria-snapshots.md#strict-matching) for strict matching and `/url` for links.\n\n  ```java\n  assertThat(locator).toMatchAriaSnapshot(\"\"\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  \"\"\");\n  ```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1,"to":30}}}}],["7fa83fb7-828f-4916-bf39-ccc478bb55ee",{"pageContent":"### Miscellaneous\n\n- New option [`option: APIRequest.newContext.maxRedirects`] in [`method: APIRequest.newContext`] to control the maximum number of redirects.\n- New option `ref` in [`method: Locator.ariaSnapshot`] to generate reference for each element in the snapshot which can later be used to locate the element.\n\n### Breaking Changes\n\n- Glob URL patterns in methods like [`method: Page.route`] do not support `?` and `[]` anymore. We recommend using regular expressions instead.\n- Method [`method: Route.continue`] does not allow to override the `Cookie` header anymore. If a `Cookie` header is provided, it will be ignored, and the cookie will be loaded from the browser's cookie store. To set custom cookies, use [`method: BrowserContext.addCookies`].\n- macOS 13 is now deprecated and will no longer receive WebKit updates. Please upgrade to a more recent macOS version to continue benefiting from the latest WebKit improvements.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":30,"to":41}}}}],["0298abf9-0243-419f-8c02-4e5db9e29da3",{"pageContent":"### Browser Versions\n\n- Chromium 136.0.7103.25\n- Mozilla Firefox 137.0\n- WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 135\n- Microsoft Edge 135\n\n## Version 1.51\n\n### Highlights\n\n* New option [`option: BrowserContext.storageState.indexedDB`] for [`method: BrowserContext.storageState`] allows to save and restore IndexedDB contents. Useful when your application uses [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) to store authentication tokens, like Firebase Authentication.\n\n  Here is an example following the [authentication guide](./auth.md#reusing-signed-in-state):\n\n  ```java\n  // Save storage state into the file. Make sure to include IndexedDB.\n  context.storageState(new BrowserContext.StorageStateOptions()\n      .setPath(Paths.get(\"state.json\"))\n      .setIndexedDB(true));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":41,"to":64}}}}],["57dea57a-d2b0-4789-84be-bbee037d37eb",{"pageContent":"// Create a new context with the saved storage state.\n  BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n      .setStorageStatePath(Paths.get(\"state.json\")));\n  ```\n\n* New option [`option: Locator.filter.visible`] for [`method: Locator.filter`] allows matching only visible elements.\n\n  ```java\n  // Ignore invisible todo items.\n  Locator todoItems = page.getByTestId(\"todo-item\")\n      .filter(new Locator.FilterOptions().setVisible(true));\n  // Check there are exactly 3 visible ones.\n  assertThat(todoItems).hasCount(3);\n  ```\n\n* New option `setContrast` for methods [`method: Page.emulateMedia`] and [`method: Browser.newContext`] allows to emulate the `prefers-contrast` media feature.\n\n* New option [`option: APIRequest.newContext.failOnStatusCode`] makes all fetch requests made through the [APIRequestContext] throw on response codes other than 2xx and 3xx.\n\n### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":66,"to":89}}}}],["e9cd24cd-a249-45ab-917a-9a236e400764",{"pageContent":"### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 133\n* Microsoft Edge 133\n\n\n## Version 1.50\n\n### Miscellaneous\n\n* Added method [`method: LocatorAssertions.toHaveAccessibleErrorMessage`] to assert the Locator points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).\n\n### UI updates\n\n* New button in Codegen for picking elements to produce aria snapshots.\n* Additional details (such as keys pressed) are now displayed alongside action API calls in traces.\n* Display of `canvas` content in traces is error-prone. Display is now disabled by default, and can be enabled via the `Display canvas content` UI setting.\n* `Call` and `Network` panels now display additional time information.\n\n### Breaking","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":85,"to":110}}}}],["01e254e7-88de-4c5b-a453-df77e08c3522",{"pageContent":"### Breaking\n\n* [`method: LocatorAssertions.toBeEditable`] and [`method: Locator.isEditable`] now throw if the target element is not `<input>`, `<select>`, or a number of other editable elements.\n\n### Browser Versions\n\n* Chromium 133.0.6943.16\n* Mozilla Firefox 134.0\n* WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n### Aria snapshots\n\nNew assertion [`method: LocatorAssertions.toMatchAriaSnapshot`] verifies page structure by comparing to an expected accessibility tree, represented as YAML.\n\n```java\npage.navigate(\"https://playwright.dev\");\nassertThat(page.locator(\"body\")).matchesAriaSnapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n  - main:\n    - img \"Browsers (Chromium, Firefox, WebKit)\"\n    - heading \"Any browser • Any platform • One API\"\n\"\"\");\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":110,"to":142}}}}],["4aa5a4ee-5972-4dd7-82cd-dd4863848010",{"pageContent":"You can generate this assertion with [Test Generator](./codegen) or by calling [`method: Locator.ariaSnapshot`].\n\nLearn more in the [aria snapshots guide](./aria-snapshots).\n\n### Tracing groups\n\nNew method [`method: Tracing.group`] allows you to visually group actions in the trace viewer.\n\n```java\n// All actions between group and groupEnd\n// will be shown in the trace viewer as a group.\npage.context().tracing().group(\"Open Playwright.dev > API\");\npage.navigate(\"https://playwright.dev/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"API\")).click();\npage.context().tracing().groupEnd();\n```\n\n### Breaking: `chrome` and `msedge` channels switch to new headless mode\n\nThis change affects you if you're using one of the following channels in your `playwright.config.ts`:\n- `chrome`, `chrome-dev`, `chrome-beta`, or `chrome-canary`\n- `msedge`, `msedge-dev`, `msedge-beta`, or `msedge-canary`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":144,"to":165}}}}],["59ba8ea9-c539-4b82-8466-86371b28be6e",{"pageContent":"After updating to Playwright v1.49, run your test suite. If it still passes, you're good to go. If not, you will probably need to update your snapshots, and adapt some of your test code around PDF viewers and extensions. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for more details.\n\n### Try new Chromium headless\n\nYou can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):\n\n> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.\n\nSee [issue #33566](https://github.com/microsoft/playwright/issues/33566) for the list of possible breakages you could encounter and more details on Chromium headless. Please file an issue if you see any problems after opting in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":167,"to":175}}}}],["f97716fd-48a6-4d96-a0ad-0748eb4f7f13",{"pageContent":"```java\nBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel(\"chromium\"));\n```\n\n### Miscellaneous\n\n- There will be no more updates for WebKit on Ubuntu 20.04 and Debian 11. We recommend updating your OS to a later version.\n- `<canvas>` elements inside a snapshot now draw a preview.\n\n### Browser Versions\n\n- Chromium 131.0.6778.33\n- Mozilla Firefox 132.0\n- WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 130\n- Microsoft Edge 130\n\n\n## Version 1.48\n\n### WebSocket routing\n\nNew methods [`method: Page.routeWebSocket`] and [`method: BrowserContext.routeWebSocket`] allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a `\"request\"` with a `\"response\"`.\n\n```java\npage.routeWebSocket(\"/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":177,"to":211}}}}],["a358e1ac-0dbf-4e61-b626-f37a608abaf3",{"pageContent":"```java\npage.routeWebSocket(\"/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\nSee [WebSocketRoute] for more details.\n\n### UI updates\n\n- New \"copy\" buttons for annotations and test location in the HTML report.\n- Route method calls like [`method: Route.fulfill`] are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.\n- New \"Copy as cURL\" and \"Copy as fetch\" buttons for requests in the network tab.\n\n### Miscellaneous\n\n- New method [`method: Page.requestGC`] may help detect memory leaks.\n- Requests made by [APIRequestContext] now record detailed timing and security information in the HAR.\n\n### Browser Versions\n\n- Chromium 130.0.6723.19\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 129\n- Microsoft Edge 129\n\n\n## Version 1.47\n\n### Network Tab improvements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":204,"to":240}}}}],["2d028e1b-b718-45b5-9d05-f1243e3d2f9c",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 129\n- Microsoft Edge 129\n\n\n## Version 1.47\n\n### Network Tab improvements\n\nThe Network tab in the trace viewer has several nice improvements:\n\n- filtering by asset type and URL\n- better display of query string parameters\n- preview of font assets\n\n![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":232,"to":250}}}}],["0d2d41ad-4260-4c69-a95d-bc3e5d0ccc83",{"pageContent":"![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous\n\n- The `mcr.microsoft.com/playwright/java:v1.47.0` now serves a Playwright image based on Ubuntu 24.04 Noble.\n  To use the 22.02 jammy-based image, please use `mcr.microsoft.com/playwright/java:v1.47.0-jammy` instead.\n- The `:latest`/`:focal`/`:jammy` tag for Playwright Docker images is no longer being published. Pin to a specific version for better stability and reproducibility.\n- TLS client certificates can now be passed from memory by passing [`option: Browser.newContext.clientCertificates.cert`] and [`option: Browser.newContext.clientCertificates.key`] as byte arrays instead of file paths.\n- [`option: Locator.selectOption.noWaitAfter`] in [`method: Locator.selectOption`] was deprecated.\n- We've seen reports of WebGL in Webkit misbehaving on GitHub Actions `macos-13`. We recommend upgrading GitHub Actions to `macos-14`.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":248,"to":259}}}}],["37a110cf-0b1a-407e-8453-469195f6d0a7",{"pageContent":"### Browser Versions\n\n- Chromium 129.0.6668.29\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 128\n- Microsoft Edge 128\n\n## Version 1.46\n\n### TLS Client Certificates\n\nPlaywright now allows to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.\n\nYou can provide client certificates as a parameter of [`method: Browser.newContext`] and [`method: APIRequest.newContext`]. The following snippet sets up a client certificate for `https://example.com`:\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setClientCertificates(asList(new ClientCertificate(\"https://example.com\")\n          .setCertPath(Paths.get(\"client-certificates/cert.pem\"))\n          .setKeyPath(Paths.get(\"client-certificates/key.pem\")))));\n```\n\n### Trace Viewer Updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":259,"to":285}}}}],["37a2d046-8ac0-4a7a-8bde-24f7955e18b2",{"pageContent":"### Trace Viewer Updates\n\n- Content of text attachments is now rendered inline in the attachments pane.\n- New setting to show/hide routing actions like [`method: Route.continue`].\n- Request method and status are shown in the network details tab.\n- New button to copy source file location to clipboard.\n- Metadata pane now displays the `baseURL`.\n\n### Miscellaneous\n\n- New `maxRetries` option in [`method: APIRequestContext.fetch`] which retries on the `ECONNRESET` network error.\n\n### Browser Versions\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n\n## Version 1.45\n\n### Clock\n\nUtilizing the new [Clock] API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:\n* testing with predefined time;\n* keeping consistent time and timers;\n* monitoring inactivity;\n* ticking through time manually.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":285,"to":317}}}}],["63a19a3e-f19e-4551-ad22-a5f55c1a9101",{"pageContent":"```java\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\npage.clock().install(new Clock.InstallOptions().setTime(\"2024-02-02T08:00:00\"));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");\n\n// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\npage.clock().pauseAt(\"2024-02-02T10:00:00\");\n\n// Assert the page state.\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\npage.clock().fastForward(\"30:00\");\nassertThat(locator).hasText(\"2/2/2024, 10:30:00 AM\");\n```\n\nSee [the clock guide](./clock.md) for more details.\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":319,"to":340}}}}],["eb82e5cb-51ba-43c4-98f3-a5ca9669cf55",{"pageContent":"See [the clock guide](./clock.md) for more details.\n\n### Miscellaneous\n\n- Method [`method: Locator.setInputFiles`] now supports uploading a directory for `<input type=file webkitdirectory>` elements.\n  ```java\n  page.getByLabel(\"Upload directory\").setInputFiles(Paths.get(\"mydir\"));\n  ```\n\n- Multiple methods like [`method: Locator.click`] or [`method: Locator.press`] now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.\n  ```java\n  // Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\n  page.keyboard.press(\"ControlOrMeta+S\");\n  ```\n\n- New property `httpCredentials.send` in [`method: APIRequest.newContext`] that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.\n\n- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":338,"to":355}}}}],["2d6c58b5-3476-4542-a926-19cbbb040438",{"pageContent":"- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.\n\n- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.\n\n### Browser Versions\n\n* Chromium 127.0.6533.5\n* Mozilla Firefox 127.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 126\n* Microsoft Edge 126\n\n## Version 1.44\n\n### New APIs\n\n**Accessibility assertions**\n\n- [`method: LocatorAssertions.toHaveAccessibleName`] checks if the element has the specified accessible name:\n  ```java\n  Locator locator = page.getByRole(AriaRole.BUTTON);\n  assertThat(locator).hasAccessibleName(\"Submit\");\n  ```\n\n- [`method: LocatorAssertions.toHaveAccessibleDescription`] checks if the element has the specified accessible description:\n  ```java\n  Locator locator = page.getByRole(AriaRole.BUTTON);\n  assertThat(locator).hasAccessibleDescription(\"Upload a photo\");\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":355,"to":386}}}}],["12bfb468-393a-40e8-bb99-89bf59b4905b",{"pageContent":"- [`method: LocatorAssertions.toHaveRole`] checks if the element has the specified ARIA role:\n  ```java\n  Locator locator = page.getByTestId(\"save-button\");\n  assertThat(locator).hasRole(AriaRole.BUTTON);\n  ```\n\n**Locator handler**\n\n- After executing the handler added with [`method: Page.addLocatorHandler`], Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `setNoWaitAfter` option.\n- You can use new `setTimes` option in [`method: Page.addLocatorHandler`] to specify maximum number of times the handler should be run.\n- The handler in [`method: Page.addLocatorHandler`] now accepts the locator as argument.\n- New [`method: Page.removeLocatorHandler`] method for removing previously added locator handlers.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":388,"to":399}}}}],["a64d706c-8340-47c8-a869-f4eefb064c0a",{"pageContent":"```java\nLocator locator = page.getByText(\"This interstitial covers the button\");\npage.addLocatorHandler(locator, overlay -> {\n  overlay.locator(\"#close\").click();\n}, new Page.AddLocatorHandlerOptions().setTimes(3).setNoWaitAfter(true));\n// Run your tests that can be interrupted by the overlay.\n// ...\npage.removeLocatorHandler(locator);\n```\n\n**Miscellaneous options**\n\n- New method [`method: FormData.append`] allows to specify repeating fields with the same name in [`setMultipart`](./api/class-requestoptions#request-options-set-multipart) option in `RequestOptions`:\n  ```java\n  FormData formData = FormData.create();\n  formData.append(\"file\", new FilePayload(\"f1.js\", \"text/javascript\",\n  \"var x = 2024;\".getBytes(StandardCharsets.UTF_8)));\n  formData.append(\"file\", new FilePayload(\"f2.txt\", \"text/plain\",\n    \"hello\".getBytes(StandardCharsets.UTF_8)));\n  APIResponse response = context.request().post(\"https://example.com/uploadFile\", RequestOptions.create().setMultipart(formData));\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":401,"to":421}}}}],["55b99c75-eba4-4174-ad96-36e8e676d17c",{"pageContent":"- `expect(page).toHaveURL(url)` now supports `setIgnoreCase` [option](./api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n\n### Browser Versions\n\n* Chromium 125.0.6422.14\n* Mozilla Firefox 125.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 124\n* Microsoft Edge 124\n\n## Version 1.43\n\n### New APIs\n\n- Method [`method: BrowserContext.clearCookies`] now supports filters to remove only some cookies.\n\n  ```java\n  // Clear all cookies.\n  context.clearCookies();\n  // New: clear cookies with a particular name.\n  context.clearCookies(new BrowserContext.ClearCookiesOptions().setName(\"session-id\"));\n  // New: clear cookies for a particular domain.\n  context.clearCookies(new BrowserContext.ClearCookiesOptions().setDomain(\"my-origin.com\"));\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":423,"to":449}}}}],["ec704697-bcc5-445e-99b2-976a064b3763",{"pageContent":"- New method [`method: Locator.contentFrame`] converts a [Locator] object to a [FrameLocator]. This can be useful when you have a [Locator] object obtained somewhere, and later on would like to interact with the content inside the frame.\n\n  ```java\n  Locator locator = page.locator(\"iframe[name='embedded']\");\n  // ...\n  FrameLocator frameLocator = locator.contentFrame();\n  frameLocator.getByRole(AriaRole.BUTTON).click();\n  ```\n\n- New method [`method: FrameLocator.owner`] converts a [FrameLocator] object to a [Locator]. This can be useful when you have a [FrameLocator] object obtained somewhere, and later on would like to interact with the `iframe` element.\n\n  ```java\n  FrameLocator frameLocator = page.frameLocator(\"iframe[name='embedded']\");\n  // ...\n  Locator locator = frameLocator.owner();\n  assertThat(locator).isVisible();\n  ```\n\n### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":451,"to":475}}}}],["f8102ad8-ab2c-438b-aa1a-a4dbe3cc66ea",{"pageContent":"### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 123\n* Microsoft Edge 123\n\n## Version 1.42\n\n### Experimental JUnit integration\n\nAdd new [`@UsePlaywright`](./junit.md) annotation to your test classes to start using Playwright\nfixtures for [Page], [BrowserContext], [Browser], [APIRequestContext] and [Playwright] in the\ntest methods.\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.junit.UsePlaywright;\nimport org.junit.jupiter.api.Test;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":469,"to":496}}}}],["a34cec4d-53c0-4513-9140-6828ca32cbb4",{"pageContent":"import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@UsePlaywright\npublic class TestExample {\n  void shouldNavigateToInstallationGuide(Page page) {\n    page.navigate(\"https://playwright.dev/java/\");\n    page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Docs\")).click();\n    assertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName(\"Installation\"))).isVisible();\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":495,"to":511}}}}],["df22820a-ba0e-4e36-b320-caa1ffbe53c0",{"pageContent":"@Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}\n```\n\nIn the example above, all three test methods use the same [Browser]. Each test\nuses its own [BrowserContext] and [Page].\n\n**Custom options**\n\nImplement your own `OptionsFactory` to initialize the fixtures with custom configuration.\n\n```java\nimport com.microsoft.playwright.junit.Options;\nimport com.microsoft.playwright.junit.OptionsFactory;\nimport com.microsoft.playwright.junit.UsePlaywright;\n\n@UsePlaywright(MyTest.CustomOptions.class)\npublic class MyTest {","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":513,"to":537}}}}],["6879f459-ebbe-469c-95d3-066a75c7f087",{"pageContent":"@UsePlaywright(MyTest.CustomOptions.class)\npublic class MyTest {\n\n  public static class CustomOptions implements OptionsFactory {\n    @Override\n    public Options getOptions() {\n      return new Options()\n          .setHeadless(false)\n          .setContextOption(new Browser.NewContextOptions()\n              .setBaseURL(\"https://github.com\"))\n          .setApiRequestOptions(new APIRequest.NewContextOptions()\n              .setBaseURL(\"https://playwright.dev\"));\n    }\n  }\n\n  @Test\n  public void testWithCustomOptions(Page page, APIRequestContext request) {\n    page.navigate(\"/\");\n    assertThat(page).hasURL(Pattern.compile(\"github\"));\n\n    APIResponse response = request.get(\"/\");\n    assertTrue(response.text().contains(\"Playwright\"));\n  }\n}\n```\n\nLearn more about the fixtures in our [JUnit guide](./junit.md).\n\n### New Locator Handler","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":536,"to":564}}}}],["8f27e37e-146e-4d7a-b531-fdf9e9c72bcf",{"pageContent":"Learn more about the fixtures in our [JUnit guide](./junit.md).\n\n### New Locator Handler\n\nNew method [`method: Page.addLocatorHandler`] registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears.\n\n```java\n// Setup the handler.\npage.addLocatorHandler(\n    page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Hej! You are in control of your cookies.\")),\n    () -> {\n        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Accept all\")).click();\n    });\n// Write the test as usual.\npage.navigate(\"https://www.ikea.com/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Collection of blue and white\")).click();\nassertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName(\"Light and easy\"))).isVisible();\n```\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":562,"to":581}}}}],["d3e0c6d3-4886-485a-86d2-096db3ed4be0",{"pageContent":"### New APIs\n\n- [`method: Page.pdf`] accepts two new options [`option: Page.pdf.tagged`] and [`option: Page.pdf.outline`].\n\n### Announcements\n\n* ⚠️ Ubuntu 18 is not supported anymore.\n\n### Browser Versions\n\n* Chromium 123.0.6312.4\n* Mozilla Firefox 123.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs\n\n- New method [`method: Page.unrouteAll`] removes all routes registered by [`method: Page.route`] and [`method: Page.routeFromHAR`].\n- New method [`method: BrowserContext.unrouteAll`] removes all routes registered by [`method: BrowserContext.route`] and [`method: BrowserContext.routeFromHAR`].\n- New options [`option: Page.screenshot.style`] in [`method: Page.screenshot`] and [`option: Locator.screenshot.style`] in [`method: Locator.screenshot`] to add custom CSS to the page before taking a screenshot.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":581,"to":608}}}}],["71ef79bf-a49b-4c9b-b0c5-25058b6e0a88",{"pageContent":"### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 120\n* Microsoft Edge 120\n\n## Version 1.40\n\n### Test Generator Update\n\n![Playwright Test Generator](https://github.com/microsoft/playwright/assets/9881434/e8d67e2e-f36d-4301-8631-023948d3e190)\n\nNew tools to generate assertions:\n- \"Assert visibility\" tool generates [`method: LocatorAssertions.toBeVisible`].\n- \"Assert value\" tool generates [`method: LocatorAssertions.toHaveValue`].\n- \"Assert text\" tool generates [`method: LocatorAssertions.toContainText`].\n\nHere is an example of a generated test with assertions:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":608,"to":630}}}}],["0b300d43-d679-4786-8ff6-dd4c92e4bc8a",{"pageContent":"Here is an example of a generated test with assertions:\n\n```java\npage.navigate(\"https://playwright.dev/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Get started\")).click();\nassertThat(page.getByLabel(\"Breadcrumbs\").getByRole(AriaRole.LIST)).containsText(\"Installation\");\nassertThat(page.getByLabel(\"Search\")).isVisible();\npage.getByLabel(\"Search\").click();\npage.getByPlaceholder(\"Search docs\").fill(\"locator\");\nassertThat(page.getByPlaceholder(\"Search docs\")).hasValue(\"locator\");\n```\n\n### New APIs\n\n- Options [`option: Page.close.reason`] in [`method: Page.close`], [`option: BrowserContext.close.reason`] in [`method: BrowserContext.close`] and [`option: Browser.close.reason`] in [`method: Browser.close`]. Close reason is reported for all operations interrupted by the closure.\n- Option [`option: BrowserType.launchPersistentContext.firefoxUserPrefs`] in [`method: BrowserType.launchPersistentContext`].\n\n### Other Changes","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":630,"to":647}}}}],["22555cea-3748-4275-9550-f82c27380881",{"pageContent":"### Other Changes\n\n- Methods [`method: Download.path`] and [`method: Download.createReadStream`] throw an error for failed and cancelled downloads.\n\n### Browser Versions\n\n* Chromium 120.0.6099.28\n* Mozilla Firefox 119.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 119\n* Microsoft Edge 119\n\n## Version 1.39\n\nEvergreen browsers update.\n\n### Browser Versions\n\n* Chromium 119.0.6045.9\n* Mozilla Firefox 118.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 118\n* Microsoft Edge 118\n\n## Version 1.38\n\n### Trace Viewer Updates\n\n![Playwright Trace Viewer](https://github.com/microsoft/playwright/assets/746130/0c41e20d-c54b-4600-8ca8-1cbb6393ddef)\n\n1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n\n### Deprecations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":647,"to":691}}}}],["f482931d-e7c8-4ad9-b74c-ae85a1b64f9a",{"pageContent":"1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n\n### Deprecations\n\n* The following methods were deprecated: [`method: Page.type`], [`method: Frame.type`],\n  [`method: Locator.type`] and [`method: ElementHandle.type`].\n  Please use [`method: Locator.fill`] instead which is much faster. Use\n  [`method: Locator.pressSequentially`] only if there is a special keyboard\n  handling on the page, and you need to press keys one-by-one.\n\n### Browser Versions\n\n* Chromium 117.0.5938.62\n* Mozilla Firefox 117.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 116\n* Microsoft Edge 116\n\n## Version 1.37\n\n### New APIs\n\n- New methods [`method: BrowserContext.newCDPSession`] and [`method: Browser.newBrowserCDPSession`] create a [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) session for the page and browser respectively.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":683,"to":714}}}}],["77558fea-2259-4a7e-b653-12260043a33c",{"pageContent":"```java\n  CDPSession cdpSession = page.context().newCDPSession(page);\n  cdpSession.send(\"Runtime.enable\");\n\n  JsonObject params = new JsonObject();\n  params.addProperty(\"expression\", \"window.foo = 'bar'\");\n  cdpSession.send(\"Runtime.evaluate\", params);\n\n  Object foo = page.evaluate(\"window['foo']\");\n  assertEquals(\"bar\", foo);\n  ```\n\n### 📚 Debian 12 Bookworm Support\n\nPlaywright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ | ✅ |\n\n### Browser Versions\n\n* Chromium 116.0.5845.82\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36\n\n🏝️ Summer maintenance release.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":716,"to":754}}}}],["f57da900-2005-4310-b25e-c6a6af9bfea6",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36\n\n🏝️ Summer maintenance release.\n\n### Browser Versions\n\n* Chromium 115.0.5790.75\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.35\n\n### Highlights\n\n* New option `maskColor` for methods [`method: Page.screenshot`] and [`method: Locator.screenshot`] to change default masking color.\n\n* New `uninstall` CLI command to uninstall browser binaries:\n  ```bash\n  $ mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall\" # remove browsers installed by this installation\n  $ mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall --all\" # remove all ever-install Playwright browsers\n  ```\n\n### Browser Versions\n\n* Chromium 115.0.5790.13\n* Mozilla Firefox 113.0\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":747,"to":783}}}}],["9218b810-e762-4e5e-b5da-e7931a0f0b26",{"pageContent":"### Browser Versions\n\n* Chromium 115.0.5790.13\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.34\n\n### Highlights\n\n* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```java\n    Locator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle(\"Subscribe\"));\n    ```\n\n* New events [`event: BrowserContext.console`] and [`event: BrowserContext.dialog`] to subscribe to any dialogs\n  and console messages from any page from the given browser context. Use the new methods [`method: ConsoleMessage.page`]\n  and [`method: Dialog.page`] to pin-point event source.\n\n### Browser Versions\n\n* Chromium 114.0.5735.26\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":779,"to":817}}}}],["52d10034-ed5d-4fcf-9236-ef8c9538d26e",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update\n\n* Use [`method: Locator.or`] to create a locator that matches either of the two locators.\n  Consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead.\n  In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":810,"to":821}}}}],["a6188b93-9295-476a-88c2-19c67574b9e0",{"pageContent":"```java\n    Locator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"New email\"));\n    Locator dialog = page.getByText(\"Confirm security settings\");\n    assertThat(newEmail.or(dialog)).isVisible();\n    if (dialog.isVisible())\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Dismiss\")).click();\n    newEmail.click();\n    ```\n* Use new options [`option: Locator.filter.hasNot`] and [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n  to find elements that **do not match** certain conditions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":823,"to":832}}}}],["3ed81047-66cc-49fe-991f-942cfa883f2d",{"pageContent":"```java\n    Locator rowLocator = page.locator(\"tr\");\n    rowLocator\n        .filter(new Locator.FilterOptions().setHasNotText(\"text in column 1\"))\n        .filter(new Locator.FilterOptions().setHasNot(\n          page.getByRole(AriaRole.BUTTON,\n            new Page.GetByRoleOptions().setName(\"column 2 button\" ))))\n        .screenshot();\n    ```\n* Use new web-first assertion [`method: LocatorAssertions.toBeAttached`] to ensure that the element\n  is present in the page's DOM. Do not confuse with the [`method: LocatorAssertions.toBeVisible`] that ensures that\n  element is both attached & visible.\n\n### New APIs\n\n- [`method: Locator.or`]\n- New option [`option: Locator.filter.hasNot`] in [`method: Locator.filter`]\n- New option [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n- [`method: LocatorAssertions.toBeAttached`]\n- New option [`option: Route.fetch.timeout`] in [`method: Route.fetch`]\n\n### Other highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":834,"to":855}}}}],["ea60dead-4303-4f1a-8a49-32c956702ff8",{"pageContent":"### Other highlights\n\n- Native support for Apple Silicon - Playwright now runs without Rosetta\n- Added Ubuntu 22.04 (Jammy) Docker image\n\n### ⚠️ Breaking change\n\n* The `mcr.microsoft.com/playwright/java:v1.33.0` now serves a Playwright image based on Ubuntu Jammy.\n  To use the focal-based image, please use `mcr.microsoft.com/playwright/java:v1.33.0-focal` instead.\n\n### Browser Versions\n\n* Chromium 113.0.5672.53\n* Mozilla Firefox 112.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 112\n* Microsoft Edge 112\n\n## Version 1.32\n\n### New APIs\n\n- New options [`option: Page.routeFromHAR.updateMode`] and [`option: Page.routeFromHAR.updateContent`] in [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`].\n- Chaining existing locator objects, see [locator docs](./locators.md#matching-inside-a-locator) for details.\n- New option [`option: Tracing.startChunk.name`] in method [`method: Tracing.startChunk`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":855,"to":882}}}}],["f471e502-34e0-40ad-9a6e-025e87a438b0",{"pageContent":"### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 111\n* Microsoft Edge 111\n\n\n## Version 1.31\n\n### New APIs\n\n- New assertion [`method: LocatorAssertions.toBeInViewport`] ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n\n  ```java\n  Locator locator = page.getByRole(AriaRole.BUTTON);\n\n  // Make sure at least some part of element intersects viewport.\n  assertThat(locator).isInViewport();\n\n  // Make sure element is fully outside of viewport.\n  assertThat(locator).not().isInViewport();\n\n  // Make sure that at least half of the element intersects viewport.\n  assertThat(locator).isInViewport(new LocatorAssertions.IsInViewportOptions().setRatio(0.5));\n  ```\n\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":884,"to":917}}}}],["941e0a3f-e227-4ee7-a349-88478061c7de",{"pageContent":"// Make sure that at least half of the element intersects viewport.\n  assertThat(locator).isInViewport(new LocatorAssertions.IsInViewportOptions().setRatio(0.5));\n  ```\n\n\n### Miscellaneous\n\n- DOM snapshots in trace viewer can be now opened in a separate window.\n- New option [`option: Route.fetch.maxRedirects`] for method [`method: Route.fetch`].\n- Playwright now supports Debian 11 arm64.\n- Official [docker images](./docker.md) now include Node 18 instead of Node 16.\n\n### Browser Versions\n\n* Chromium 111.0.5563.19\n* Mozilla Firefox 109.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 110\n* Microsoft Edge 110\n\n\n## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n### New APIs\n\n- New method [`method: Route.fetch`]:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":912,"to":954}}}}],["9bc9e661-4ec2-41af-8696-5f89e7e28a39",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n### New APIs\n\n- New method [`method: Route.fetch`]:\n\n    ```java\n    page.route(\"**/api/settings\", route -> {\n      // Fetch original settings.\n      APIResponse response = route.fetch();\n      // Force settings theme to a predefined value.\n      String body = response.text().replace(\"\\\"theme\\\":\\\"default\\\"\",\n        \"\\\"theme\\\":\\\"Solorized\\\"\");\n      // Fulfill with modified data.\n      route.fulfill(new Route.FulfillOptions().setResponse(response).setBody(body));\n    });\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:\n\n    ```java\n    // Check all checkboxes!\n    Locator checkboxes = page.getByRole(AriaRole.CHECKBOX);\n    for (Locator checkbox : checkboxes.all())\n      checkbox.check();\n    ```\n\n- [`method: Locator.selectOption`] matches now by value or label:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":944,"to":977}}}}],["88fe6009-08b0-4c60-a29f-aef10cc68923",{"pageContent":"- [`method: Locator.selectOption`] matches now by value or label:\n\n  ```html\n  <select multiple>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n  ```\n\n  ```java\n  element.selectOption(\"Red\");\n  ```\n\n### Browser Versions\n\n* Chromium 109.0.5414.46\n* Mozilla Firefox 107.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 108\n* Microsoft Edge 108\n\n## Version 1.28\n\n### Playwright Tools\n\n* **Live Locators in CodeGen.** Generate a locator for any element on the page using \"Explore\" tool.\n\n![Locator Explorer](https://user-images.githubusercontent.com/9798949/202293631-2f402cc2-35fb-4877-8ea1-82265fbbc232.png)\n\n### New APIs\n\n- [`method: Locator.blur`]\n- [`method: Locator.clear`]\n\n### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":977,"to":1021}}}}],["e316e8d5-2bf0-4766-b621-ae8eba1ace47",{"pageContent":"### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n### Locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1015,"to":1029}}}}],["a7d49d79-e1c7-450c-aa68-2fd9a47bed5b",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n### Locators\n\nWith these new APIs writing locators is a joy:\n- [`method: Page.getByText`] to locate by text content.\n- [`method: Page.getByRole`] to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n- [`method: Page.getByLabel`] to locate a form control by associated label's text.\n- [`method: Page.getByTestId`] to locate an element based on its `data-testid` attribute (other attribute can be configured).\n- [`method: Page.getByPlaceholder`] to locate an input by placeholder.\n- [`method: Page.getByAltText`] to locate an element, usually image, by its text alternative.\n- [`method: Page.getByTitle`] to locate an element by its title.\n\n```java\npage.getByLabel(\"User Name\").fill(\"John\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1021,"to":1041}}}}],["a235a256-f42e-4ec0-bb4b-dd2a2eb39c14",{"pageContent":"```java\npage.getByLabel(\"User Name\").fill(\"John\");\n\npage.getByLabel(\"Password\").fill(\"secret-password\");\n\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\")).click();\n\nassertThat(page.getByText(\"Welcome, John!\")).isVisible();\n```\n\nAll the same methods are also available on [Locator], [FrameLocator] and [Frame] classes.\n\n### Other highlights\n\n- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.\n\n### Behavior Changes\n\n- [`method: LocatorAssertions.toHaveAttribute`] with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.\n\n   ```java\n   assertThat(page.getByRole(AriaRole.BUTTON)).hasAttribute(\"disabled\", \"\");\n   ```\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1040,"to":1068}}}}],["483b6b9c-5a56-44c2-ad7a-ffcfb9227708",{"pageContent":"```java\n   assertThat(page.getByRole(AriaRole.BUTTON)).hasAttribute(\"disabled\", \"\");\n   ```\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 106\n* Microsoft Edge 106\n\n\n## Version 1.26\n\n### Assertions\n\n- New option `enabled` for [`method: LocatorAssertions.toBeEnabled`].\n- [`method: LocatorAssertions.toHaveText`] now pierces open shadow roots.\n- New option `editable` for [`method: LocatorAssertions.toBeEditable`].\n- New option `visible` for [`method: LocatorAssertions.toBeVisible`].\n\n### Other highlights\n\n- New option `setMaxRedirects` for [`method: APIRequestContext.get`] and others to limit redirect count.\n- Docker images are now using OpenJDK 17.\n\n### Behavior Change\n\nA bunch of Playwright APIs already support the `setWaitUntil(WaitUntilState.DOMCONTENTLOADED)` option.\nFor example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1060,"to":1093}}}}],["e72c6c15-5289-46e8-8255-3398b796f390",{"pageContent":"### Behavior Change\n\nA bunch of Playwright APIs already support the `setWaitUntil(WaitUntilState.DOMCONTENTLOADED)` option.\nFor example:\n\n```java\npage.navigate(\"https://playwright.dev\", new Page.NavigateOptions().setWaitUntil(WaitUntilState.DOMCONTENTLOADED));\n```\n\nPrior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded`\nevent.\n\nTo align with web specification, the `WaitUntilState.DOMCONTENTLOADED` value only waits for\nthe target frame to fire the `'DOMContentLoaded'` event. Use `setWaitUntil(WaitUntilState.LOAD)` to wait for all iframes.\n\n### Browser Versions\n\n* Chromium 106.0.5249.30\n* Mozilla Firefox 104.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 105\n* Microsoft Edge 105\n\n## Version 1.25\n\n### New APIs & changes\n\n- Default assertions timeout now can be changed with [`setDefaultAssertionTimeout`](./api/class-playwrightassertions#playwright-assertions-set-default-assertion-timeout).\n\n### Announcements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1090,"to":1122}}}}],["9205b66f-2b1c-4b76-8ed4-482a3b2ed673",{"pageContent":"- Default assertions timeout now can be changed with [`setDefaultAssertionTimeout`](./api/class-playwrightassertions#playwright-assertions-set-default-assertion-timeout).\n\n### Announcements\n\n* 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).\n* ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.\n\n### Browser Versions\n\n* Chromium 105.0.5195.19\n* Mozilla Firefox 103.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 104\n* Microsoft Edge 104\n\n## Version 1.24\n\n<div className=\"embed-youtube\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/9F05o1shxcY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n### 🐂 Debian 11 Bullseye Support","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1120,"to":1144}}}}],["3bc93924-40f3-4e69-afc6-cc57bfadfc62",{"pageContent":"### 🐂 Debian 11 Bullseye Support\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know\nif you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n## Version 1.23\n\n### Network Replay\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.\n\nTo record network into HAR file:\n\n```bash\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"open --save-har=example.har --save-har-glob='**/api/**' https://example.com\"\n```\n\nAlternatively, you can record HAR programmatically:\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordHarPath(Paths.get(\"example.har\"))\n    .setRecordHarUrlFilter(\"**/api/**\"));\n\n// ... Perform actions ...","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1144,"to":1176}}}}],["3ea022ba-067b-4a84-bd02-f6fdf0c7673d",{"pageContent":"// ... Perform actions ...\n\n// Close context to ensure HAR is saved to disk.\ncontext.close();\n```\n\nUse the new methods [`method: Page.routeFromHAR`] or [`method: BrowserContext.routeFromHAR`] to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:\n\n\n```java\ncontext.routeFromHAR(Paths.get(\"example.har\"));\n```\n\nRead more in [our documentation](./mock.md#mocking-with-har-files).\n\n\n### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:\n\n```java\n// Remove a header from all requests.\npage.route(\"**/*\", route -> {\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.remove(\"X-Secret\");\n  route.resume(new Route.ResumeOptions().setHeaders(headers));\n});\n\n// Abort all images.\npage.route(\"**/*\", route -> {\n  if (\"image\".equals(route.request().resourceType()))\n    route.abort();\n  else\n    route.fallback();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1176,"to":1213}}}}],["fdac7607-7527-4f2f-a1db-57967f7be3a5",{"pageContent":"// Abort all images.\npage.route(\"**/*\", route -> {\n  if (\"image\".equals(route.request().resourceType()))\n    route.abort();\n  else\n    route.fallback();\n});\n```\n\nNote that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update\n\n* New method [`method: LocatorAssertions.toHaveValues`] that asserts all selected values of `<select multiple>` element.\n* Methods [`method: LocatorAssertions.toContainText`] and [`method: LocatorAssertions.toHaveText`] now accept `ignoreCase` option.\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1206,"to":1222}}}}],["a0c96caa-4b4e-4b79-b0fa-b124bbd7604d",{"pageContent":"### Miscellaneous\n\n* If there's a service worker that's in your way, you can now easily disable it with a new context option `serviceWorkers`:\n  ```java\n  BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n      .setServiceWorkers(ServiceWorkerPolicy.BLOCK));\n  ```\n* Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:\n  ```java\n  BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n      .setRecordHarPath(Paths.get(\"example.har.zip\")));\n  ```\n* If you intend to edit HAR by hand, consider using the `\"minimal\"` HAR recording mode\n  that only records information that is essential for replaying:\n  ```java\n  BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n      .setRecordHarPath(Paths.get(\"example.har\"))\n      .setRecordHarMode(HarMode.MINIMAL));\n  ```\n* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64.\n\n\n## Version 1.22\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1222,"to":1246}}}}],["77df76a8-d232-466e-b423-6909ba02127f",{"pageContent":"## Version 1.22\n\n### Highlights\n\n- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```java\n  // Click a button with accessible name \"log in\"\n  page.locator(\"role=button[name='log in']\").click();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n\n- New [`method: Locator.filter`] API to filter an existing locator\n\n  ```java\n  Locator buttonsLocator = page.locator(\"role=button\");\n  // ...\n  Locator submitButton = buttonsLocator.filter(new Locator.FilterOptions().setHasText(\"Submit\"));\n  submitButton.click();\n  ```\n\n- Playwright for Java now supports **Ubuntu 20.04 ARM64** and **Apple M1**.\n  You can now run Playwright for Java tests on Apple M1, inside Docker on Apple M1, and on Raspberry Pi.\n\n\n## Version 1.21\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1244,"to":1272}}}}],["7f055446-1f81-4c40-9225-bf115d3db5e8",{"pageContent":"## Version 1.21\n\n### Highlights\n\n- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```java\n  // Click a button with accessible name \"log in\"\n  page.locator(\"role=button[name='log in']\").click();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n- New `scale` option in [`method: Page.screenshot`] for smaller sized screenshots.\n- New `caret` option in [`method: Page.screenshot`] to control text caret. Defaults to `\"hide\"`.\n\n### Behavior Changes\n\n- Playwright now supports large file uploads (100s of MBs) via [`method: Locator.setInputFiles`] API.\n\n### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1270,"to":1298}}}}],["2010135d-c90f-4865-abbc-7f4a383ed86d",{"pageContent":"### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n\n## Version 1.20\n\n### Highlights\n\n- New options for methods [`method: Page.screenshot`], [`method: Locator.screenshot`] and [`method: ElementHandle.screenshot`]:\n  * Option `ScreenshotAnimations.DISABLED` rewinds all CSS animations and transitions to a consistent state\n  * Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.\n- [Trace Viewer](./trace-viewer) now shows [API testing requests](./api-testing).\n- [`method: Locator.highlight`] visually reveals element(s) for easier debugging.\n\n### Announcements\n\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1289,"to":1319}}}}],["d4c551f8-bb47-427a-b1f9-5aa0da050ffa",{"pageContent":"### Browser Versions\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 99\n- Microsoft Edge 99\n\n\n## Version 1.19\n\n### Highlights\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:\n\n  ```java\n  page.locator(\"article\", new Page.LocatorOptions().setHas(page.locator(\".highlight\"))).click();\n  ```\n\n  Read more in [locator documentation](./api/class-locator#locator-locator)\n\n- New [`method: Locator.page`]\n- [`method: Page.screenshot`] and [`method: Locator.screenshot`] now automatically hide blinking caret\n- Playwright Codegen now generates locators and frame locators\n\n### Browser Versions\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n## Version 1.18\n\n### API Testing","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1315,"to":1356}}}}],["9f5049a7-0846-4281-a119-53b7d4d61bb8",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n## Version 1.18\n\n### API Testing\n\nPlaywright for Java 1.18 introduces new [API Testing](./api/class-apirequestcontext) that lets you send requests to the server directly from Java!\nNow you can:\n\n- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser\n\nTo do a request on behalf of Playwright's Page, use **new [`property: Page.request`] API**:\n\n```java\n// Do a GET request on behalf of page\nAPIResponse res = page.request().get(\"http://example.com/foo.json\");\n```\n\nRead more about it in our [API testing guide](./api-testing).\n\n### Web-First Assertions\n\nPlaywright for Java 1.18 introduces [Web-First Assertions](./test-assertions).\n\nConsider the following example:\n\n```java\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1349,"to":1381}}}}],["3bfe7702-9e49-40b1-b307-dcab23c40c2d",{"pageContent":"Consider the following example:\n\n```java\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestExample {\n  @Test\n  void statusBecomesSubmitted() {\n    // ...\n    page.locator(\"#submit-button\").click();\n    assertThat(page.locator(\".status\")).hasText(\"Submitted\");\n  }\n}\n```\n\nPlaywright will be re-testing the node with the selector `.status` until\nfetched Node has the `\"Submitted\"` text. It will be re-fetching the node and\nchecking it over and over, until the condition is met or until the timeout is\nreached. You can pass this timeout as an option.\n\nRead more in [our documentation](./test-assertions).\n\n### Locator Improvements\n\n- [`method: Locator.dragTo`]\n- Each locator can now be optionally filtered by the text it contains:\n    ```java\n    page.locator(\"li\", new Page.LocatorOptions().setHasText(\"my item\"))\n        .locator(\"button\").click();\n    ```\n    Read more in [locator documentation](./api/class-locator#locator-locator)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1378,"to":1408}}}}],["5503f113-d682-434d-869e-ae7f05a9ebcb",{"pageContent":"### Tracing Improvements\n\n[Tracing](./api/class-tracing.md) now can embed Java sources to recorded\ntraces, using new [`setSources`](./api/class-tracing#tracing-start-option-sources) option.\n\n![tracing-java-sources](https://user-images.githubusercontent.com/746130/150180856-40a7df71-370c-4597-8665-40c77a5e06ad.png)\n\n### New APIs & changes\n\n- [`acceptDownloads`](./api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `true`.\n\n\n\n### Browser Versions\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n\n## Version 1.17\n\n### Frame Locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1410,"to":1438}}}}],["a9ba8b69-989f-46e3-80a3-f6c6f016e566",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n\n## Version 1.17\n\n### Frame Locators\n\nPlaywright 1.17 introduces [frame locators](./api/class-framelocator) - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.\n\n![Graphics](https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png)\n\nFrame locators can be created with either [`method: Page.frameLocator`] or [`method: Locator.frameLocator`] method.\n\n```java\nLocator locator = page.frameLocator(\"#my-frame\").locator(\"text=Submit\");\nlocator.click();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1429,"to":1453}}}}],["16954899-c81a-4608-8502-414ea283f853",{"pageContent":"```java\nLocator locator = page.frameLocator(\"#my-frame\").locator(\"text=Submit\");\nlocator.click();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update\n\nPlaywright Trace Viewer is now **available online** at https://trace.playwright.dev! Just drag-and-drop your `trace.zip` file to inspect its contents.\n\n> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.\n\n- Playwright Test traces now include sources by default (these could be turned off with tracing option)\n- Trace Viewer now shows test name\n- New trace metadata tab with browser details\n- Snapshots now have URL bar\n\n![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1446,"to":1466}}}}],["d59ed4f1-a275-4e55-855d-d4499c4f839a",{"pageContent":"![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update\n\n- HTML report now supports dynamic filtering\n- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.\n\n![image](https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png)\n\n### Ubuntu ARM64 support + more\n\n- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.\n- You can now use Playwright to install stable version of Edge on Linux:\n    ```bash\n    mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install msedge\"\n    ```\n\n\n### New APIs\n\n- Tracing now supports a [`'title'`](./api/class-tracing#tracing-start-option-title) option\n- Page navigations support a new [`'commit'`](./api/class-page#page-goto) waiting option\n\n## Version 1.16\n\n### 🎭 Playwright Library","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1464,"to":1489}}}}],["b5e7ef56-d98b-43b0-ac02-c191981b57e6",{"pageContent":"## Version 1.16\n\n### 🎭 Playwright Library\n\n#### Locator.waitFor\n\nWait for a locator to resolve to a single element with a given state.\nDefaults to the `state: 'visible'`.\n\n```java\nLocator orderSent = page.locator(\"#order-sent\");\norderSent.waitFor();\n```\n\nRead more about [`method: Locator.waitFor`].\n\n### 🎭 Playwright Trace Viewer\n\n- run trace viewer with `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace\"` and drop trace files to the trace viewer PWA\n- better visual attribution of action targets\n\nRead more about [Trace Viewer](./trace-viewer).\n\n### Browser Versions\n\n- Chromium 97.0.4666.0\n- Mozilla Firefox 93.0\n- WebKit 15.4\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n### 📜 New Headers API","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1487,"to":1527}}}}],["d040a616-f883-40cd-af3a-d3e8be0b3a3e",{"pageContent":"- Google Chrome 94\n- Microsoft Edge 94\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n### 📜 New Headers API\n\nPreviously it was not possible to get multiple header values of a response. This is now possible and additional helper functions are available:\n\n- [`method: Request.allHeaders`]\n- [`method: Request.headersArray`]\n- [`method: Request.headerValue`]\n- [`method: Response.allHeaders`]\n- [`method: Response.headersArray`]\n- [`method: Response.headerValue`]\n- [`method: Response.headerValues`]\n\n### 🌈 Forced-Colors emulation\n\nIts now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1518,"to":1543}}}}],["cb712181-d858-4334-b985-4e4d6f84843a",{"pageContent":"Its now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs\n\n- [`method: Page.route`] accepts new `times` option to specify how many times this route should be matched.\n- [`method: Page.setChecked`] and [`method: Locator.setChecked`] were introduced to set the checked state of a checkbox.\n- [`method: Request.sizes`] Returns resource size information for given http request.\n- [`method: Tracing.startChunk`] - Start a new trace chunk.\n- [`method: Tracing.stopChunk`] - Stops a new trace chunk.\n\n### Browser Versions\n\n- Chromium 96.0.4641.0\n- Mozilla Firefox 92.0\n- WebKit 15.0\n\n## Version 1.14\n\n#### ⚡️ New \"strict\" mode\n\nSelector ambiguity is a common problem in automation testing. **\"strict\" mode**\nensures that your selector points to a single element and throws otherwise.\n\nSet `setStrict(true)` in your action calls to opt in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1541,"to":1564}}}}],["2625c340-db90-451b-b0b6-c6b7b7d5067e",{"pageContent":"Set `setStrict(true)` in your action calls to opt in.\n\n```java\n// This will throw if you have more than one button!\npage.click(\"button\", new Page.ClickOptions().setStrict(true));\n```\n\n#### 📍 New [**Locators API**](./api/class-locator)\n\nLocator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.\n\nThe difference between the [Locator](./api/class-locator) and [ElementHandle](./api/class-elementhandle) is that the latter points to a particular element, while [Locator](./api/class-locator) captures the logic of how to retrieve that element.\n\nAlso, locators are **\"strict\" by default**!\n\n```java\nLocator locator = page.locator(\"button\");\nlocator.click();\n```\n\nLearn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1564,"to":1586}}}}],["df4f7450-d346-49eb-908e-fa0b85d70847",{"pageContent":"Learn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines\n\nReact and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.\n\n```java\npage.locator(\"_react=SubmitButton[enabled=true]\").click();\npage.locator(\"_vue=submit-button[enabled=true]\").click();\n```\n\nLearn more in the [react selectors documentation](./other-locators.md#react-locator) and the [vue selectors documentation](./other-locators.md#vue-locator).\n\n#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1584,"to":1597}}}}],["4a52d008-8726-464d-a0b4-8a00c3784255",{"pageContent":"#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines\n\n- [`nth`](./other-locators.md#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.\n- [`visible`](./other-locators.md#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.\n\n```java\n// select the first button among all buttons\nbutton.click(\"button >> nth=0\");\n// or if you are using locators, you can use first(), nth() and last()\npage.locator(\"button\").first().click();\n\n// click a visible button\nbutton.click(\"button >> visible=true\");\n```\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n#### Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1597,"to":1621}}}}],["c7600796-9b9c-49ba-930e-cfebf1e3cbf4",{"pageContent":"// click a visible button\nbutton.click(\"button >> visible=true\");\n```\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n#### Playwright\n\n- **🖖 Programmatic drag-and-drop support** via the [`method: Page.dragAndDrop`] API.\n- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [`method: Browser.newContext`].\n\n#### Tools\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n\n#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1608,"to":1641}}}}],["389b99f9-4dcf-48fc-b18e-8b0a7eb12c4f",{"pageContent":"#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs\n\n- new `baseURL` option in [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`method: Response.securityDetails`] and [`method: Response.serverAddr`]\n- [`method: Page.dragAndDrop`] and [`method: Frame.dragAndDrop`]\n- [`method: Download.cancel`]\n- [`method: Page.inputValue`], [`method: Frame.inputValue`] and [`method: ElementHandle.inputValue`]\n- new `force` option in [`method: Page.fill`], [`method: Frame.fill`], and [`method: ElementHandle.fill`]\n- new `force` option in [`method: Page.selectOption`], [`method: Frame.selectOption`], and [`method: ElementHandle.selectOption`]\n\n## Version 1.12\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1630,"to":1653}}}}],["d5f188bc-d85c-459f-b265-2a514efd0a72",{"pageContent":"## Version 1.12\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer\n\n[Playwright Trace Viewer](./trace-viewer.md) is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:\n- page DOM before and after each Playwright action\n- page rendering before and after each Playwright action\n- browser network during script execution\n\nTraces are recorded using the new [`property: BrowserContext.tracing`] API:\n\n```java\nBrowser browser = playwright.chromium().launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\nTraces are examined later with the Playwright CLI:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1651,"to":1679}}}}],["a58e843f-920d-410b-9057-e8c59c8299ba",{"pageContent":"// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\nTraces are examined later with the Playwright CLI:\n\n\n```sh\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\nThat will open the following GUI:\n\n![image](https://user-images.githubusercontent.com/746130/121109654-d66c4480-c7c0-11eb-8d4d-eb70d2b03811.png)\n\n👉 Read more in [trace viewer documentation](./trace-viewer.md).\n\n\n#### Browser Versions\n\n- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1674,"to":1704}}}}],["f75734c7-f757-49b9-bbff-44a6bb3b7f05",{"pageContent":"- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs\n\n- `reducedMotion` option in [`method: Page.emulateMedia`], [`method: BrowserType.launchPersistentContext`], [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`event: BrowserContext.request`]\n- [`event: BrowserContext.requestFailed`]\n- [`event: BrowserContext.requestFinished`]\n- [`event: BrowserContext.response`]\n- `tracesDir` option in [`method: BrowserType.launch`] and [`method: BrowserType.launchPersistentContext`]\n- new [`property: BrowserContext.tracing`] API namespace\n- new [`method: Download.page`] method\n\n## Version 1.11","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1695,"to":1715}}}}],["67097528-7311-4b0d-86d3-3d58a1250400",{"pageContent":"## Version 1.11\n\n🎥  New video: [Playwright: A New Test Automation Framework for the Modern Web](https://youtu.be/_Jla6DyuEu4) ([slides](https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing))\n- We talked about Playwright\n- Showed engineering work behind the scenes\n- Did live demos with new features ✨\n- **Special thanks** to [applitools](http://applitools.com/) for hosting the event and inviting us!\n\n#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1715,"to":1729}}}}],["25c0ce17-c05c-4d07-a5d2-69e6caa61143",{"pageContent":"#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs\n\n- support for **async predicates** across the API in methods such as [`method: Page.waitForRequest`] and others\n- new **emulation devices**: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4\n- new methods:\n    * [`method: Page.waitForURL`] to await navigations to URL\n    * [`method: Video.delete`] and [`method: Video.saveAs`] to manage screen recording\n- new options:\n    * `screen` option in the [`method: Browser.newContext`] method to emulate `window.screen` dimensions\n    * `position` option in [`method: Page.check`] and [`method: Page.uncheck`] methods\n    * `trial` option to dry-run actions in [`method: Page.check`], [`method: Page.uncheck`], [`method: Page.click`], [`method: Page.dblclick`], [`method: Page.hover`] and [`method: Page.tap`]\n\n## Version 1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1723,"to":1741}}}}],["c78a30e8-9944-4d58-b29f-8c5bcf577e98",{"pageContent":"## Version 1.10\n\n- [Playwright for Java v1.10](https://github.com/microsoft/playwright-java) is **now stable**!\n- Run Playwright against **Google Chrome** and **Microsoft Edge** stable channels with the [new channels API](./browsers).\n- Chromium screenshots are **fast** on Mac & Windows.\n\n#### Bundled Browser Versions\n\n- Chromium 90.0.4430.0\n- Mozilla Firefox 87.0b10\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1741,"to":1763}}}}],["73c07184-0dcb-4959-92cb-822bc6a59849",{"pageContent":"- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9\n\n- [Playwright Inspector](./debug.md) is a **new GUI tool** to author and debug your tests.\n  - **Line-by-line debugging** of your Playwright scripts, with play, pause and step-through.\n  - Author new scripts by **recording user actions**.\n  - **Generate element selectors** for your script by hovering over elements.\n  - Set the `PWDEBUG=1` environment variable to launch the Inspector\n\n- **Pause script execution** with [`method: Page.pause`] in headed mode. Pausing the page launches [Playwright Inspector](./debug.md) for debugging.\n\n- **New has-text pseudo-class** for CSS selectors. `:has-text(\"example\")` matches any element containing `\"example\"` somewhere inside, possibly in a child or a descendant element. See [more examples](./other-locators.md#css-matching-by-text).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1755,"to":1773}}}}],["075041d1-60d0-408c-9767-a7d59368afa9",{"pageContent":"- **Page dialogs are now auto-dismissed** during execution, unless a listener for `dialog` event is configured. [Learn more](./dialogs.md) about this.\n\n- [Playwright for Python](https://github.com/microsoft/playwright-python) is **now stable** with an idiomatic snake case API and pre-built [Docker image](./docker.md) to run tests in CI/CD.\n\n#### Browser Versions\n\n- Chromium 90.0.4421.0\n- Mozilla Firefox 86.0b10\n- WebKit 14.1\n\n#### New APIs\n- [`method: Page.pause`].\n\n\n## Version 1.8","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1775,"to":1789}}}}],["53d10b7f-1738-4f14-b408-e5d793f93168",{"pageContent":"#### Browser Versions\n\n- Chromium 90.0.4421.0\n- Mozilla Firefox 86.0b10\n- WebKit 14.1\n\n#### New APIs\n- [`method: Page.pause`].\n\n\n## Version 1.8\n\n- [Selecting elements based on layout](./other-locators.md#css-matching-elements-based-on-layout) with `:left-of()`, `:right-of()`, `:above()` and `:below()`.\n- Playwright now includes command line interface, former playwright-cli.\n  ```bash java\n  mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"--help\"\n  ```\n- [`method: Page.selectOption`] now waits for the options to be present.\n- New methods to [assert element state](./actionability#assertions) like [`method: Page.isEditable`].\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1779,"to":1799}}}}],["4177208b-76ca-4459-a69e-7e1b7da1c6bf",{"pageContent":"#### New APIs\n\n- [`method: ElementHandle.isChecked`].\n- [`method: ElementHandle.isDisabled`].\n- [`method: ElementHandle.isEditable`].\n- [`method: ElementHandle.isEnabled`].\n- [`method: ElementHandle.isHidden`].\n- [`method: ElementHandle.isVisible`].\n- [`method: Page.isChecked`].\n- [`method: Page.isDisabled`].\n- [`method: Page.isEditable`].\n- [`method: Page.isEnabled`].\n- [`method: Page.isHidden`].\n- [`method: Page.isVisible`].\n- New option `'editable'` in [`method: ElementHandle.waitForElementState`].\n\n#### Browser Versions\n\n- Chromium 90.0.4392.0\n- Mozilla Firefox 85.0b5\n- WebKit 14.1\n\n## Version 1.7","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1799,"to":1821}}}}],["6bef5be9-31e4-4105-9e26-7263c8eb64f2",{"pageContent":"## Version 1.7\n\n- **New Java SDK**: [Playwright for Java](https://github.com/microsoft/playwright-java) is now on par with [JavaScript](https://github.com/microsoft/playwright), [Python](https://github.com/microsoft/playwright-python) and [.NET bindings](https://github.com/microsoft/playwright-dotnet).\n- **Browser storage API**: New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.\n- **New CSS selectors**: We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces [new CSS extensions](./other-locators.md#css-locator) and there's more coming soon.\n- **New website**: The docs website at [playwright.dev](https://playwright.dev/) has been updated and is now built with [Docusaurus](https://v2.docusaurus.io/).\n- **Support for Apple Silicon**: Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1821,"to":1829}}}}],["4b0ae50a-f6d1-4183-87b7-8781a7888d7a",{"pageContent":"#### New APIs\n\n- [`method: BrowserContext.storageState`] to get current state for later reuse.\n- `storageState` option in [`method: Browser.newContext`] and [`method: Browser.newPage`] to setup browser context state.\n\n#### Browser Versions\n\n- Chromium 89.0.4344.0\n- Mozilla Firefox 84.0b9\n- WebKit 14.1","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-java.md","title":"src-release-notes-java","url":"https://playwright.dev/docs/src-release-notes-java","loc":{"lines":{"from":1829,"to":1838}}}}],["61a15032-199b-43a0-b9c7-db805c468bf8",{"pageContent":"---\nid: release-notes\ntitle: \"Release notes\"\ntoc_max_heading_level: 2\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Version 1.52\n\n### Highlights\n \n- New method [`method: LocatorAssertions.toContainClass`] to ergonomically assert individual class names on the element.\n\n  ```ts\n  await expect(page.getByRole('listitem', { name: 'Ship v1.52' })).toContainClass('done');\n  ```\n\n- [Aria Snapshots](./aria-snapshots.md) got two new properties: [`/children`](./aria-snapshots.md#strict-matching) for strict matching and `/url` for links.\n\n  ```ts\n  await expect(locator).toMatchAriaSnapshot(`\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  `);\n  ```\n\n### Test Runner","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1,"to":32}}}}],["5f3e98c7-4a61-4f0a-a922-874fb9e5b400",{"pageContent":"### Test Runner\n\n- New property [`property: TestProject.workers`] allows to specify the number of concurrent worker processes to use for a test project. The global limit of property [`property: TestConfig.workers`] still applies.\n- New [`property: TestConfig.failOnFlakyTests`] option to fail the test run if any flaky tests are detected, similarly to `--fail-on-flaky-tests`. This is useful for CI/CD environments where you want to ensure that all tests are stable before deploying.\n- New property [`property: TestResult.annotations`] contains annotations for each test retry.\n\n### Miscellaneous\n\n- New option [`option: APIRequest.newContext.maxRedirects`] in [`method: APIRequest.newContext`] to control the maximum number of redirects.\n- New option `ref` in [`method: Locator.ariaSnapshot`] to generate reference for each element in the snapshot which can later be used to locate the element.\n- HTML reporter now supports *NOT filtering* via `!@my-tag` or `!my-file.spec.ts` or `!p:my-project`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":32,"to":42}}}}],["595d4a19-df33-4d36-ae3f-b05b1ef7e98d",{"pageContent":"### Breaking Changes\n\n- Glob URL patterns in methods like [`method: Page.route`] do not support `?` and `[]` anymore. We recommend using regular expressions instead.\n- Method [`method: Route.continue`] does not allow to override the `Cookie` header anymore. If a `Cookie` header is provided, it will be ignored, and the cookie will be loaded from the browser's cookie store. To set custom cookies, use [`method: BrowserContext.addCookies`].\n- macOS 13 is now deprecated and will no longer receive WebKit updates. Please upgrade to a more recent macOS version to continue benefiting from the latest WebKit improvements.\n\n### Browser Versions\n\n- Chromium 136.0.7103.25\n- Mozilla Firefox 137.0\n- WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 135\n- Microsoft Edge 135\n\n## Version 1.51\n\n### StorageState for indexedDB","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":44,"to":63}}}}],["5581493f-da6c-431b-93e0-114d7d4199a3",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 135\n- Microsoft Edge 135\n\n## Version 1.51\n\n### StorageState for indexedDB\n\n* New option [`option: BrowserContext.storageState.indexedDB`] for [`method: BrowserContext.storageState`] allows to save and restore IndexedDB contents. Useful when your application uses [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) to store authentication tokens, like Firebase Authentication.\n\n  Here is an example following the [authentication guide](./auth.md#basic-shared-account-in-all-tests):\n\n  ```js title=\"tests/auth.setup.ts\"\n  import { test as setup, expect } from '@playwright/test';\n  import path from 'path';\n\n  const authFile = path.join(__dirname, '../playwright/.auth/user.json');\n\n  setup('authenticate', async ({ page }) => {\n    await page.goto('/');\n    // ... perform authentication steps ...","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":56,"to":77}}}}],["59195e87-5f5d-4f53-ab08-efce0d863f12",{"pageContent":"const authFile = path.join(__dirname, '../playwright/.auth/user.json');\n\n  setup('authenticate', async ({ page }) => {\n    await page.goto('/');\n    // ... perform authentication steps ...\n\n    // make sure to save indexedDB\n    await page.context().storageState({ path: authFile, indexedDB: true });\n  });\n  ```\n\n### Copy as prompt\n\nNew \"Copy prompt\" button on errors in the HTML report, trace viewer and UI mode. Click to copy a pre-filled LLM prompt that contains the error message and useful context for fixing the error.\n\n  ![Copy prompt](https://github.com/user-attachments/assets/f3654407-dd6d-4240-9845-0d96df2bf30a)\n\n### Filter visible elements\n\nNew option [`option: Locator.filter.visible`] for [`method: Locator.filter`] allows matching only visible elements.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":73,"to":92}}}}],["34a4b68b-6893-4225-90a2-f709a9fdab48",{"pageContent":"### Filter visible elements\n\nNew option [`option: Locator.filter.visible`] for [`method: Locator.filter`] allows matching only visible elements.\n\n  ```js title=\"example.spec.ts\"\n  test('some test', async ({ page }) => {\n    // Ignore invisible todo items.\n    const todoItems = page.getByTestId('todo-item').filter({ visible: true });\n    // Check there are exactly 3 visible ones.\n    await expect(todoItems).toHaveCount(3);\n  });\n  ```\n\n### Git information in HTML report\n\nSet option [`property: TestConfig.captureGitInfo`] to capture git information into [`property: TestConfig.metadata`].\n\n  ```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    captureGitInfo: { commit: true, diff: true }\n  });\n  ```\n\n  HTML report will show this information when available:\n\n  ![Git information in the report](https://github.com/user-attachments/assets/f5b3f6f4-aa08-4a24-816c-7edf33ef0c37)\n\n### Test Step improvements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":90,"to":119}}}}],["db98e8c6-f091-4fc5-b255-197d44ba1b68",{"pageContent":"![Git information in the report](https://github.com/user-attachments/assets/f5b3f6f4-aa08-4a24-816c-7edf33ef0c37)\n\n### Test Step improvements\n\nA new [TestStepInfo] object is now available in test steps. You can add step attachments or skip the step under some conditions.\n\n  ```js\n  test('some test', async ({ page, isMobile }) => {\n    // Note the new \"step\" argument:\n    await test.step('here is my step', async step => {\n      step.skip(isMobile, 'not relevant on mobile layouts');\n\n      // ...\n      await step.attach('my attachment', { body: 'some text' });\n      // ...\n    });\n  });\n  ```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":117,"to":136}}}}],["851e5aa8-aa34-4fbc-9588-1baad6954f94",{"pageContent":"// ...\n      await step.attach('my attachment', { body: 'some text' });\n      // ...\n    });\n  });\n  ```\n\n### Miscellaneous\n\n* New option `contrast` for methods [`method: Page.emulateMedia`] and [`method: Browser.newContext`] allows to emulate the `prefers-contrast` media feature.\n* New option [`option: APIRequest.newContext.failOnStatusCode`] makes all fetch requests made through the [APIRequestContext] throw on response codes other than 2xx and 3xx.\n* Assertion [`method: PageAssertions.toHaveURL`] now supports a predicate.\n\n### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 133\n* Microsoft Edge 133\n\n\n## Version 1.50\n\n### Test runner\n\n* New option [`option: Test.step.timeout`] allows specifying a maximum run time for an individual test step. A timed-out step will fail the execution of the test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":129,"to":158}}}}],["7413eb25-c3e0-4334-a090-e192a6be216c",{"pageContent":"## Version 1.50\n\n### Test runner\n\n* New option [`option: Test.step.timeout`] allows specifying a maximum run time for an individual test step. A timed-out step will fail the execution of the test.\n\n  ```js\n  test('some test', async ({ page }) => {\n    await test.step('a step', async () => {\n      // This step can time out separately from the test\n    }, { timeout: 1000 });\n  });\n  ```\n\n* New method [`method: Test.step.skip`] to disable execution of a test step.\n\n  ```js\n  test('some test', async ({ page }) => {\n    await test.step('before running step', async () => {\n      // Normal step\n    });\n\n    await test.step.skip('not yet ready', async () => {\n      // This step is skipped\n    });\n\n    await test.step('after running step', async () => {\n      // This step still runs even though the previous one was skipped\n    });\n  });\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":154,"to":184}}}}],["bc492c0f-0f50-4c1e-859f-aa5841111df3",{"pageContent":"await test.step('after running step', async () => {\n      // This step still runs even though the previous one was skipped\n    });\n  });\n  ```\n\n* Expanded [`method: LocatorAssertions.toMatchAriaSnapshot#2`] to allow storing of aria snapshots in separate YAML files.\n* Added method [`method: LocatorAssertions.toHaveAccessibleErrorMessage`] to assert the Locator points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).\n* Option [`property: TestConfig.updateSnapshots`] added the configuration enum `changed`. `changed` updates only the snapshots that have changed, whereas `all` now updates all snapshots, regardless of whether there are any differences.\n* New option [`property: TestConfig.updateSourceMethod`] defines the way source code is updated when [`property: TestConfig.updateSnapshots`] is configured. Added `overwrite` and `3-way` modes that write the changes into source code, on top of existing `patch` mode that creates a patch file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":180,"to":189}}}}],["ae81167c-11f8-46f7-bde0-f82cb86c14d5",{"pageContent":"```bash\n  npx playwright test --update-snapshots=changed --update-source-method=3way\n  ```\n\n* Option [`property: TestConfig.webServer`] added a `gracefulShutdown` field for specifying a process kill signal other than the default `SIGKILL`.\n* Exposed [`property: TestStep.attachments`] from the reporter API to allow retrieval of all attachments created by that step.\n* New option `pathTemplate` for `toHaveScreenshot` and `toMatchAriaSnapshot` assertions in the [`property: TestConfig.expect`] configuration.\n\n### UI updates\n\n* Updated default HTML reporter to improve display of attachments.\n* New button in Codegen for picking elements to produce aria snapshots.\n* Additional details (such as keys pressed) are now displayed alongside action API calls in traces.\n* Display of `canvas` content in traces is error-prone. Display is now disabled by default, and can be enabled via the `Display canvas content` UI setting.\n* `Call` and `Network` panels now display additional time information.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":191,"to":205}}}}],["9b2c8b44-2130-4fc4-b1ef-2c8c27744e3a",{"pageContent":"### Breaking\n\n* [`method: LocatorAssertions.toBeEditable`] and [`method: Locator.isEditable`] now throw if the target element is not `<input>`, `<select>`, or a number of other editable elements.\n* Option [`property: TestConfig.updateSnapshots`] now updates all snapshots when set to `all`, rather than only the failed/changed snapshots. Use the new enum `changed` to keep the old functionality of only updating the changed snapshots.\n\n### Browser Versions\n\n* Chromium 133.0.6943.16\n* Mozilla Firefox 134.0\n* WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n<LiteYouTube\n  id=\"S5wCft-ImKk\"\n  title=\"Playwright 1.49\"\n/>\n\n### Aria snapshots\n\nNew assertion [`method: LocatorAssertions.toMatchAriaSnapshot`] verifies page structure by comparing to an expected accessibility tree, represented as YAML.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":207,"to":232}}}}],["aea09ff6-3d6a-4f31-9cc0-7449a0a670dc",{"pageContent":"### Aria snapshots\n\nNew assertion [`method: LocatorAssertions.toMatchAriaSnapshot`] verifies page structure by comparing to an expected accessibility tree, represented as YAML.\n\n```js\nawait page.goto('https://playwright.dev');\nawait expect(page.locator('body')).toMatchAriaSnapshot(`\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n  - main:\n    - img \"Browsers (Chromium, Firefox, WebKit)\"\n    - heading \"Any browser • Any platform • One API\"\n`);\n```\n\nYou can generate this assertion with [Test Generator](./codegen) and update the expected snapshot with `--update-snapshots` command line flag.\n\nLearn more in the [aria snapshots guide](./aria-snapshots).\n\n### Test runner","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":230,"to":251}}}}],["cb8c1d66-090f-4852-bb80-2ef68cd39975",{"pageContent":"Learn more in the [aria snapshots guide](./aria-snapshots).\n\n### Test runner\n\n- New option [`property: TestConfig.tsconfig`] allows to specify a single `tsconfig` to be used for all tests.\n- New method [`method: Test.fail.only`] to focus on a failing test.\n- Options [`property: TestConfig.globalSetup`] and [`property: TestConfig.globalTeardown`] now support multiple setups/teardowns.\n- New value `'on-first-failure'` for [`property: TestOptions.screenshot`].\n- Added \"previous\" and \"next\" buttons to the HTML report to quickly switch between test cases.\n- New properties [`property: TestInfoError.cause`] and [`property: TestError.cause`] mirroring [`Error.cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause).\n\n### Breaking: `chrome` and `msedge` channels switch to new headless mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":249,"to":260}}}}],["ccfe1aae-f025-442f-9eee-f7853111fd88",{"pageContent":"### Breaking: `chrome` and `msedge` channels switch to new headless mode\n\nThis change affects you if you're using one of the following channels in your `playwright.config.ts`:\n- `chrome`, `chrome-dev`, `chrome-beta`, or `chrome-canary`\n- `msedge`, `msedge-dev`, `msedge-beta`, or `msedge-canary`\n\n#### What do I need to do?\n\nAfter updating to Playwright v1.49, run your test suite. If it still passes, you're good to go. If not, you will probably need to update your snapshots, and adapt some of your test code around PDF viewers and extensions. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for more details.\n\n### Other breaking changes\n\n- There will be no more updates for WebKit on Ubuntu 20.04 and Debian 11. We recommend updating your OS to a later version.\n- Package `@playwright/experimental-ct-vue2` will no longer be updated.\n- Package `@playwright/experimental-ct-solid` will no longer be updated.\n\n### Try new Chromium headless","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":260,"to":276}}}}],["67d5eded-2dc8-4f28-a50c-fe61620754e6",{"pageContent":"### Try new Chromium headless\n\nYou can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):\n\n> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.\n\nSee [issue #33566](https://github.com/microsoft/playwright/issues/33566) for the list of possible breakages you could encounter and more details on Chromium headless. Please file an issue if you see any problems after opting in.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'], channel: 'chromium' },\n    },\n  ],\n});\n```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":276,"to":297}}}}],["d665962d-fd6c-40b1-b9b5-25471460e1f7",{"pageContent":"export default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'], channel: 'chromium' },\n    },\n  ],\n});\n```\n\n### Miscellaneous\n\n- `<canvas>` elements inside a snapshot now draw a preview.\n- New method [`method: Tracing.group`] to visually group actions in the trace.\n- Playwright docker images switched from Node.js v20 to Node.js v22 LTS.\n\n### Browser Versions\n\n- Chromium 131.0.6778.33\n- Mozilla Firefox 132.0\n- WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 130\n- Microsoft Edge 130\n\n\n## Version 1.48\n\n<LiteYouTube\n  id=\"VGlkSBkMVCQ\"\n  title=\"Playwright 1.48\"\n/>\n\n### WebSocket routing\n\nNew methods [`method: Page.routeWebSocket`] and [`method: BrowserContext.routeWebSocket`] allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a `\"request\"` with a `\"response\"`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":287,"to":324}}}}],["d23a4ff0-7543-45b2-8918-c133cd613d4a",{"pageContent":"```js\nawait page.routeWebSocket('/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\nSee [WebSocketRoute] for more details.\n\n### UI updates\n\n- New \"copy\" buttons for annotations and test location in the HTML report.\n- Route method calls like [`method: Route.fulfill`] are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.\n- New \"Copy as cURL\" and \"Copy as fetch\" buttons for requests in the network tab.\n\n### Miscellaneous\n\n- Option [`option: APIRequestContext.fetch.form`] and similar ones now accept [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n- New method [`method: Page.requestGC`] may help detect memory leaks.\n- New option [`option: Test.step.location`] to pass custom step location.\n- Requests made by [APIRequestContext] now record detailed timing and security information in the HAR.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":326,"to":350}}}}],["1dfdd3e2-55a3-46c2-82f0-17cea9b5f765",{"pageContent":"### Browser Versions\n\n- Chromium 130.0.6723.19\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 129\n- Microsoft Edge 129\n\n\n## Version 1.47\n\n### Network Tab improvements\n\nThe Network tab in the UI mode and trace viewer has several nice improvements:\n\n- filtering by asset type and URL\n- better display of query string parameters\n- preview of font assets\n\n![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n\n### `--tsconfig` CLI option\n\nBy default, Playwright will look up the closest tsconfig for each imported file using a heuristic. You can now specify a single tsconfig file in the command line, and Playwright will use it for all imported files, not only test files:\n\n```sh\n# Pass a specific tsconfig\nnpx playwright test --tsconfig tsconfig.test.json\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":350,"to":382}}}}],["fbedeea2-87c4-4f17-9a46-47f2086e1c11",{"pageContent":"```sh\n# Pass a specific tsconfig\nnpx playwright test --tsconfig tsconfig.test.json\n```\n\n### [APIRequestContext] now accepts [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) and `string` as query parameters\n\nYou can now pass [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) and `string` as query parameters to [APIRequestContext]:\n\n```js\ntest('query params', async ({ request }) => {\n  const searchParams = new URLSearchParams();\n  searchParams.set('userId', 1);\n  const response = await request.get(\n      'https://jsonplaceholder.typicode.com/posts',\n      {\n        params: searchParams // or as a string: 'userId=1'\n      }\n  );\n  // ...\n});\n```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":379,"to":402}}}}],["bef1d12e-2641-499e-8a2a-a8fe8ddb6091",{"pageContent":"- The `mcr.microsoft.com/playwright:v1.47.0` now serves a Playwright image based on Ubuntu 24.04 Noble.\n  To use the 22.04 jammy-based image, please use `mcr.microsoft.com/playwright:v1.47.0-jammy` instead.\n- New options [`option: Page.removeAllListeners.behavior`], [`option: Browser.removeAllListeners.behavior`] and [`option: BrowserContext.removeAllListeners.behavior`] to wait for ongoing listeners to complete.\n- TLS client certificates can now be passed from memory by passing [`option: Browser.newContext.clientCertificates.cert`] and [`option: Browser.newContext.clientCertificates.key`] as buffers instead of file paths.\n- Attachments with a `text/html` content type can now be opened in a new tab in the HTML report. This is useful for including third-party reports or other HTML content in the Playwright test report and distributing it to your team.\n- [`option: Locator.selectOption.noWaitAfter`] option in [`method: Locator.selectOption`] was deprecated.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":404,"to":409}}}}],["bc27c901-3782-4e4f-b0ca-d377d62c3f60",{"pageContent":"- [`option: Locator.selectOption.noWaitAfter`] option in [`method: Locator.selectOption`] was deprecated.\n- We've seen reports of WebGL in Webkit misbehaving on GitHub Actions `macos-13`. We recommend upgrading GitHub Actions to `macos-14`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":409,"to":410}}}}],["85279bf7-addf-493f-8523-b07a12f7887d",{"pageContent":"### Browser Versions\n\n- Chromium 129.0.6668.29\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 128\n- Microsoft Edge 128\n\n## Version 1.46\n\n<LiteYouTube\n  id=\"tQo7w-QQBsI\"\n  title=\"Playwright 1.46\"\n/>\n\n\n### TLS Client Certificates\n\nPlaywright now allows you to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.\n\nThe following snippet sets up a client certificate for `https://example.com`:\n\n```js\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // ...\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":412,"to":452}}}}],["55b56b4c-564b-4d4f-a619-a1031aa7bc35",{"pageContent":"You can also provide client certificates to a particular [test project](./api/class-testproject#test-project-use) or as a parameter of [`method: Browser.newContext`] and [`method: APIRequest.newContext`].\n\n### `--only-changed` cli option\n\nNew CLI option `--only-changed` will only run test files that have been changed since the last git commit or from a specific git \"ref\". This will also run all test files that import any changed files.\n\n```sh\n# Only run test files with uncommitted changes\nnpx playwright test --only-changed\n\n# Only run test files changed relative to the \"main\" branch\nnpx playwright test --only-changed=main\n```\n\n### Component Testing: New `router` fixture\n\nThis release introduces an experimental `router` fixture to intercept and handle network requests in component testing.\nThere are two ways to use the router fixture:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":454,"to":471}}}}],["54542556-de10-49ab-9853-a602a540a001",{"pageContent":"This release introduces an experimental `router` fixture to intercept and handle network requests in component testing.\nThere are two ways to use the router fixture:\n\n- Call `router.route(url, handler)` that behaves similarly to [`method: Page.route`].\n- Call `router.use(handlers)` and pass [MSW library](https://mswjs.io) request handlers to it.\n\nHere is an example of reusing your existing MSW handlers in the test.\n\n```js\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\nThis fixture is only available in [component tests](./test-components#handling-network-requests).\n\n### UI Mode / Trace Viewer Updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":470,"to":494}}}}],["efac7e16-8907-4282-a440-65bbce3745b4",{"pageContent":"This fixture is only available in [component tests](./test-components#handling-network-requests).\n\n### UI Mode / Trace Viewer Updates\n\n- Test annotations are now shown in UI mode.\n- Content of text attachments is now rendered inline in the attachments pane.\n- New setting to show/hide routing actions like [`method: Route.continue`].\n- Request method and status are shown in the network details tab.\n- New button to copy source file location to clipboard.\n- Metadata pane now displays the `baseURL`.\n\n### Miscellaneous\n\n- New `maxRetries` option in [`method: APIRequestContext.fetch`] which retries on the `ECONNRESET` network error.\n- New option to [box a fixture](./test-fixtures#box-fixtures) to minimize the fixture exposure in test reports and error messages.\n- New option to provide a [custom fixture title](./test-fixtures#custom-fixture-title) to be used in test reports and error messages.\n\n### Browser Versions\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":492,"to":513}}}}],["3282f968-36ee-4282-81bb-d019668d6e9f",{"pageContent":"### Browser Versions\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n## Version 1.45\n\n<LiteYouTube\n  id=\"54_aC-rVKHg\"\n  title=\"Playwright 1.45\"\n/>\n\n### Clock\n\nUtilizing the new [Clock] API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:\n* testing with predefined time;\n* keeping consistent time and timers;\n* monitoring inactivity;\n* ticking through time manually.\n\n```js\n// Initialize clock and let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":509,"to":542}}}}],["90932a05-4a44-4d0c-83a9-af73e5286ce6",{"pageContent":"// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\nSee [the clock guide](./clock.md) for more details.\n\n### Test runner\n\n- New CLI option `--fail-on-flaky-tests` that sets exit code to `1` upon any flaky tests. Note that by default, the test runner exits with code `0` when all failed tests recovered upon a retry. With this option, the test run will fail in such case.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":540,"to":556}}}}],["53175254-f9f6-4e1a-a83b-c4b926463067",{"pageContent":"- New environment variable `PLAYWRIGHT_FORCE_TTY` controls whether built-in `list`, `line` and `dot` reporters assume a live terminal. For example, this could be useful to disable tty behavior when your CI environment does not handle ANSI control sequences well. Alternatively, you can enable tty behavior even when to live terminal is present, if you plan to post-process the output and handle control sequences.\n\n  ```sh\n  # Avoid TTY features that output ANSI control sequences\n  PLAYWRIGHT_FORCE_TTY=0 npx playwright test\n\n  # Enable TTY features, assuming a terminal width 80\n  PLAYWRIGHT_FORCE_TTY=80 npx playwright test\n  ```\n\n- New options [`property: TestConfig.respectGitIgnore`] and [`property: TestProject.respectGitIgnore`] control whether files matching `.gitignore` patterns are excluded when searching for tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":558,"to":568}}}}],["b712a088-fc6c-470c-a5a8-6237de604a0c",{"pageContent":"- New options [`property: TestConfig.respectGitIgnore`] and [`property: TestProject.respectGitIgnore`] control whether files matching `.gitignore` patterns are excluded when searching for tests.\n\n- New property `timeout` is now available for custom expect matchers. This property takes into account `playwright.config.ts` and `expect.configure()`.\n  ```js\n  import { expect as baseExpect } from '@playwright/test';\n\n  export const expect = baseExpect.extend({\n    async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n      // When no timeout option is specified, use the config timeout.\n      const timeout = options?.timeout ?? this.timeout;\n      // ... implement the assertion ...\n    },\n  });\n  ```\n\n### Miscellaneous\n\n- Method [`method: Locator.setInputFiles`] now supports uploading a directory for `<input type=file webkitdirectory>` elements.\n  ```js\n  await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":568,"to":588}}}}],["e106c775-a2cc-446d-9386-44facca5d907",{"pageContent":"- Multiple methods like [`method: Locator.click`] or [`method: Locator.press`] now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.\n  ```js\n  // Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\n  await page.keyboard.press('ControlOrMeta+S');\n  ```\n\n- New property `httpCredentials.send` in [`method: APIRequest.newContext`] that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.\n\n- New option `reason` in [`method: APIRequestContext.dispose`] that will be included in the error message of ongoing operations interrupted by the context disposal.\n\n- New option `host` in [`method: BrowserType.launchServer`] allows to accept websocket connections on a specific address instead of unspecified `0.0.0.0`.\n\n- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":590,"to":602}}}}],["518c210b-4d91-4349-ba03-66549207a425",{"pageContent":"- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.\n\n- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.\n\n### Browser Versions\n\n* Chromium 127.0.6533.5\n* Mozilla Firefox 127.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 126\n* Microsoft Edge 126\n\n## Version 1.44\n\n<LiteYouTube\n  id=\"avjSahFWdCI\"\n  title=\"Playwright 1.44\"\n/>\n\n### New APIs\n\n**Accessibility assertions**\n\n- [`method: LocatorAssertions.toHaveAccessibleName`] checks if the element has the specified accessible name:\n  ```js\n  const locator = page.getByRole('button');\n  await expect(locator).toHaveAccessibleName('Submit');\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":602,"to":632}}}}],["3ac285ef-ccd9-4534-a5af-f4ec269482f1",{"pageContent":"- [`method: LocatorAssertions.toHaveAccessibleDescription`] checks if the element has the specified accessible description:\n  ```js\n  const locator = page.getByRole('button');\n  await expect(locator).toHaveAccessibleDescription('Upload a photo');\n  ```\n\n- [`method: LocatorAssertions.toHaveRole`] checks if the element has the specified ARIA role:\n  ```js\n  const locator = page.getByTestId('save-button');\n  await expect(locator).toHaveRole('button');\n  ```\n\n**Locator handler**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":634,"to":646}}}}],["3d4f540a-1af8-4fab-868c-e8763d36ade5",{"pageContent":"**Locator handler**\n\n- After executing the handler added with [`method: Page.addLocatorHandler`], Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `noWaitAfter` option.\n- You can use new `times` option in [`method: Page.addLocatorHandler`] to specify maximum number of times the handler should be run.\n- The handler in [`method: Page.addLocatorHandler`] now accepts the locator as argument.\n- New [`method: Page.removeLocatorHandler`] method for removing previously added locator handlers.\n\n```js\nconst locator = page.getByText('This interstitial covers the button');\nawait page.addLocatorHandler(locator, async overlay => {\n  await overlay.locator('#close').click();\n}, { times: 3, noWaitAfter: true });\n// Run your tests that can be interrupted by the overlay.\n// ...\nawait page.removeLocatorHandler(locator);\n```\n\n**Miscellaneous options**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":646,"to":663}}}}],["ce7ce749-b2fc-4826-87b8-dca548569155",{"pageContent":"**Miscellaneous options**\n\n- [`multipart`](./api/class-apirequestcontext#api-request-context-fetch-option-multipart) option in `apiRequestContext.fetch()` now accepts [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and supports repeating fields with the same name.\n  ```js\n  const formData = new FormData();\n  formData.append('file', new File(['let x = 2024;'], 'f1.js', { type: 'text/javascript' }));\n  formData.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\n  context.request.post('https://example.com/uploadFiles', {\n    multipart: formData\n  });\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":663,"to":673}}}}],["6bfae5ed-6421-4b88-a295-b85cda80e8ed",{"pageContent":"- `expect(callback).toPass({ intervals })` can now be configured by `expect.toPass.intervals` option globally in [`property: TestConfig.expect`] or per project in [`property: TestProject.expect`].\n- `expect(page).toHaveURL(url)` now supports `ignoreCase` [option](./api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n- [`property: TestProject.ignoreSnapshots`](./api/class-testproject#test-project-ignore-snapshots) allows to configure  per project whether to skip screenshot expectations.\n\n**Reporter API**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":675,"to":679}}}}],["55bc9c59-2066-4a78-a17a-81a6a3e2dce3",{"pageContent":"**Reporter API**\n\n- New method [`method: Suite.entries`] returns child test suites and test cases in their declaration order. [`property: Suite.type`] and [`property: TestCase.type`] can be used to tell apart test cases and suites in the list.\n- [Blob](./test-reporters#blob-reporter) reporter now allows overriding report file path with a single option `outputFile`. The same option can also be specified as `PLAYWRIGHT_BLOB_OUTPUT_FILE` environment variable that might be more convenient on CI/CD.\n- [JUnit](./test-reporters#junit-reporter) reporter now supports `includeProjectInTestName` option.\n\n**Command line**\n\n- `--last-failed` CLI option to for running only tests that failed in the previous run.\n\n  First run all tests:\n  ```sh\n  $ npx playwright test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":679,"to":691}}}}],["e09d7b76-6937-443e-9274-6ad02c0fe8a5",{"pageContent":"**Command line**\n\n- `--last-failed` CLI option to for running only tests that failed in the previous run.\n\n  First run all tests:\n  ```sh\n  $ npx playwright test\n\n  Running 103 tests using 5 workers\n  ...\n  2 failed\n    [chromium] › my-test.spec.ts:8:5 › two ─────────────────────────────────────────────────────────\n    [chromium] › my-test.spec.ts:13:5 › three ──────────────────────────────────────────────────────\n  101 passed (30.0s)\n  ```\n\n  Now fix the failing tests and run Playwright again with `--last-failed` option:\n  ```sh\n  $ npx playwright test --last-failed\n\n  Running 2 tests using 2 workers\n    2 passed (1.2s)\n  ```\n\n### Browser Versions\n\n* Chromium 125.0.6422.14\n* Mozilla Firefox 125.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 124\n* Microsoft Edge 124\n\n## Version 1.43\n\n### New APIs\n\n- Method [`method: BrowserContext.clearCookies`] now supports filters to remove only some cookies.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":685,"to":724}}}}],["9be199af-bc8e-499c-922e-77c964c02608",{"pageContent":"* Google Chrome 124\n* Microsoft Edge 124\n\n## Version 1.43\n\n### New APIs\n\n- Method [`method: BrowserContext.clearCookies`] now supports filters to remove only some cookies.\n\n  ```js\n  // Clear all cookies.\n  await context.clearCookies();\n  // New: clear cookies with a particular name.\n  await context.clearCookies({ name: 'session-id' });\n  // New: clear cookies for a particular domain.\n  await context.clearCookies({ domain: 'my-origin.com' });\n  ```\n\n- New mode `retain-on-first-failure` for [`property: TestOptions.trace`]. In this mode, trace is recorded for the first run of each test, but not for retires. When test run fails, the trace file is retained, otherwise it is removed.\n\n  ```js title=playwright.config.ts\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    use: {\n      trace: 'retain-on-first-failure',\n    },\n  });\n  ```\n\n- New property [`property: TestInfo.tags`] exposes test tags during test execution.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":717,"to":747}}}}],["f5758c74-f960-40af-95c1-6872f66ee60a",{"pageContent":"export default defineConfig({\n    use: {\n      trace: 'retain-on-first-failure',\n    },\n  });\n  ```\n\n- New property [`property: TestInfo.tags`] exposes test tags during test execution.\n\n  ```js\n  test('example', async ({ page }) => {\n    console.log(test.info().tags);\n  });\n  ```\n\n- New method [`method: Locator.contentFrame`] converts a [Locator] object to a [FrameLocator]. This can be useful when you have a [Locator] object obtained somewhere, and later on would like to interact with the content inside the frame.\n\n  ```js\n  const locator = page.locator('iframe[name=\"embedded\"]');\n  // ...\n  const frameLocator = locator.contentFrame();\n  await frameLocator.getByRole('button').click();\n  ```\n\n- New method [`method: FrameLocator.owner`] converts a [FrameLocator] object to a [Locator]. This can be useful when you have a [FrameLocator] object obtained somewhere, and later on would like to interact with the `iframe` element.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":740,"to":764}}}}],["10984388-6879-4b2a-85f7-ec83d58362d0",{"pageContent":"```js\n  const frameLocator = page.frameLocator('iframe[name=\"embedded\"]');\n  // ...\n  const locator = frameLocator.owner();\n  await expect(locator).toBeVisible();\n  ```\n\n### UI Mode Updates\n\n![Playwright UI Mode](https://github.com/microsoft/playwright/assets/9881434/61ca7cfc-eb7a-4305-8b62-b6c9f098f300)\n\n* See tags in the test list.\n* Filter by tags by typing `@fast` or clicking on the tag itself.\n* New shortcuts:\n  - \"F5\" to run tests.\n  - \"Shift F5\" to stop running tests.\n  - \"Ctrl `\" to toggle test output.\n\n### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 123\n* Microsoft Edge 123\n\n## Version 1.42\n\n<LiteYouTube\n  id=\"KjSaIQLlgns\"\n  title=\"Playwright 1.41 & 1.42\"\n/>\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":766,"to":802}}}}],["323c72c2-1613-4890-b4b7-8806cefceb2f",{"pageContent":"* Google Chrome 123\n* Microsoft Edge 123\n\n## Version 1.42\n\n<LiteYouTube\n  id=\"KjSaIQLlgns\"\n  title=\"Playwright 1.41 & 1.42\"\n/>\n\n### New APIs\n\n- New method [`method: Page.addLocatorHandler`] registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears:\n```js\n// Setup the handler.\nawait page.addLocatorHandler(\n    page.getByRole('heading', { name: 'Hej! You are in control of your cookies.' }),\n    async () => {\n      await page.getByRole('button', { name: 'Accept all' }).click();\n    });\n// Write the test as usual.\nawait page.goto('https://www.ikea.com/');\nawait page.getByRole('link', { name: 'Collection of blue and white' }).click();\nawait expect(page.getByRole('heading', { name: 'Light and easy' })).toBeVisible();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":792,"to":816}}}}],["f82ce58b-9220-48a9-b345-41dcf346f75c",{"pageContent":"- `expect(callback).toPass()` timeout can now be configured by `expect.toPass.timeout` option [globally](./api/class-testconfig#test-config-expect) or in [project config](./api/class-testproject#test-project-expect)\n\n- [`event: ElectronApplication.console`] event is emitted when Electron main process calls console API methods.\n```js\nelectronApp.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\n- [New syntax](./test-annotations#tag-tests) for adding tags to the tests (@-tokens in the test title are still supported):\n```js\ntest('test customer login', {\n  tag: ['@fast', '@login'],\n}, async ({ page }) => {\n  // ...\n});\n```\n Use `--grep` command line option to run only tests with certain tags.\n```sh\nnpx playwright test --grep @fast\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":818,"to":842}}}}],["f9a1af4e-869a-431a-8c83-b582d3c8ff6f",{"pageContent":"- `--project` command line [flag](./test-cli#reference) now supports '*' wildcard:\n```sh\nnpx playwright test --project='*mobile*'\n```\n\n- [New syntax](./test-annotations#annotate-tests) for test annotations:\n```js\ntest('test full report', {\n  annotation: [\n    { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },\n    { type: 'docs', description: 'https://playwright.dev/docs/test-annotations#tag-tests' },\n  ],\n}, async ({ page }) => {\n  // ...\n});\n```\n\n- [`method: Page.pdf`] accepts two new options [`tagged`](./api/class-page#page-pdf-option-tagged) and [`outline`](./api/class-page#page-pdf-option-outline).\n\n### Announcements\n\n* ⚠️ Ubuntu 18 is not supported anymore.\n\n### Browser Versions\n\n* Chromium 123.0.6312.4\n* Mozilla Firefox 123.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":844,"to":880}}}}],["db42d058-4916-4f53-9acd-58cfbbb7ea64",{"pageContent":"- New method [`method: Page.unrouteAll`] removes all routes registered by [`method: Page.route`] and [`method: Page.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New method [`method: BrowserContext.unrouteAll`] removes all routes registered by [`method: BrowserContext.route`] and [`method: BrowserContext.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New options [`option: Page.screenshot.style`] in [`method: Page.screenshot`] and [`option: Locator.screenshot.style`] in [`method: Locator.screenshot`] to add custom CSS to the page before taking a screenshot.\n- New option `stylePath` for methods [`method: PageAssertions.toHaveScreenshot#1`] and [`method: LocatorAssertions.toHaveScreenshot#1`] to apply a custom stylesheet while making the screenshot.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":882,"to":885}}}}],["58719581-5464-4a6b-ab65-9fd3e241ee7d",{"pageContent":"- New option `stylePath` for methods [`method: PageAssertions.toHaveScreenshot#1`] and [`method: LocatorAssertions.toHaveScreenshot#1`] to apply a custom stylesheet while making the screenshot.\n- New `fileName` option for [Blob reporter](./test-reporters#blob-reporter), to specify the name of the report to be created.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":885,"to":886}}}}],["c0ee04d8-c7cb-4153-a013-0e2faec6bee4",{"pageContent":"### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 120\n* Microsoft Edge 120\n\n## Version 1.40\n\n<LiteYouTube\n  id=\"mn892dV81_8\"\n  title=\"Playwright 1.40\"\n/>\n\n### Test Generator Update\n\n![Playwright Test Generator](https://github.com/microsoft/playwright/assets/9881434/e8d67e2e-f36d-4301-8631-023948d3e190)\n\nNew tools to generate assertions:\n- \"Assert visibility\" tool generates [`method: LocatorAssertions.toBeVisible`].\n- \"Assert value\" tool generates [`method: LocatorAssertions.toHaveValue`].\n- \"Assert text\" tool generates [`method: LocatorAssertions.toContainText`].\n\nHere is an example of a generated test with assertions:\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":888,"to":918}}}}],["2334e055-550c-4d76-aacd-7b9d386e9c68",{"pageContent":"Here is an example of a generated test with assertions:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  await page.getByRole('link', { name: 'Get started' }).click();\n  await expect(page.getByLabel('Breadcrumbs').getByRole('list')).toContainText('Installation');\n  await expect(page.getByLabel('Search')).toBeVisible();\n  await page.getByLabel('Search').click();\n  await page.getByPlaceholder('Search docs').fill('locator');\n  await expect(page.getByPlaceholder('Search docs')).toHaveValue('locator');\n});\n```\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":915,"to":931}}}}],["2bfe770d-9284-4d9d-b1e9-c07ed279acd2",{"pageContent":"### New APIs\n\n- Options [`option: Page.close.reason`] in [`method: Page.close`], [`option: BrowserContext.close.reason`] in [`method: BrowserContext.close`] and [`option: Browser.close.reason`] in [`method: Browser.close`]. Close reason is reported for all operations interrupted by the closure.\n- Option [`option: BrowserType.launchPersistentContext.firefoxUserPrefs`] in [`method: BrowserType.launchPersistentContext`].\n\n### Other Changes\n\n- Methods [`method: Download.path`] and [`method: Download.createReadStream`] throw an error for failed and cancelled downloads.\n- Playwright [docker image](./docker.md) now comes with Node.js v20.\n\n### Browser Versions\n\n* Chromium 120.0.6099.28\n* Mozilla Firefox 119.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 119\n* Microsoft Edge 119\n\n## Version 1.39\n\n<LiteYouTube\n  id=\"KqVuRAlOkm0\"\n  title=\"Playwright 1.39\"\n/>\n\n### Add custom matchers to your expect","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":931,"to":959}}}}],["90b0748b-756c-47d2-ac93-cdb07f58bca6",{"pageContent":"* Google Chrome 119\n* Microsoft Edge 119\n\n## Version 1.39\n\n<LiteYouTube\n  id=\"KqVuRAlOkm0\"\n  title=\"Playwright 1.39\"\n/>\n\n### Add custom matchers to your expect\n\nYou can extend Playwright assertions by providing custom matchers. These matchers will be available on the expect object.\n\n```js title=\"test.spec.ts\"\nimport { expect as baseExpect } from '@playwright/test';\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    // ... see documentation for how to write matchers.\n  },\n});\n\ntest('pass', async ({ page }) => {\n  await expect(page.getByTestId('cart')).toHaveAmount(5);\n});\n```\n\nSee the documentation [for a full example](./test-assertions#add-custom-matchers-using-expectextend).\n\n### Merge test fixtures\n\nYou can now merge test fixtures from multiple files or modules:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":949,"to":980}}}}],["a486ffd2-1a6e-4f28-ac7f-4e9cce019e81",{"pageContent":"See the documentation [for a full example](./test-assertions#add-custom-matchers-using-expectextend).\n\n### Merge test fixtures\n\nYou can now merge test fixtures from multiple files or modules:\n\n```js title=\"fixtures.ts\"\nimport { mergeTests } from '@playwright/test';\nimport { test as dbTest } from 'database-test-utils';\nimport { test as a11yTest } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n```js title=\"test.spec.ts\"\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n### Merge custom expect matchers\n\nYou can now merge custom expect matchers from multiple files or modules:\n\n```js title=\"fixtures.ts\"\nimport { mergeTests, mergeExpects } from '@playwright/test';\nimport { test as dbTest, expect as dbExpect } from 'database-test-utils';\nimport { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":976,"to":1005}}}}],["9d95d9fd-20f8-4dbb-922b-15ae11980fef",{"pageContent":"export const test = mergeTests(dbTest, a11yTest);\nexport const expect = mergeExpects(dbExpect, a11yExpect);\n```\n\n```js title=\"test.spec.ts\"\nimport { test, expect } from './fixtures';\n\ntest('passes', async ({ page, database }) => {\n  await expect(database).toHaveDatabaseUser('admin');\n  await expect(page).toPassA11yAudit();\n});\n```\n\n### Hide implementation details: box test steps\n\nYou can mark a [`method: Test.step`] as \"boxed\" so that errors inside it point to the step call site.\n\n```js\nasync function login(page) {\n  await test.step('login', async () => {\n    // ...\n  }, { box: true });  // Note the \"box\" option here.\n}\n```\n\n```txt\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n  14 |   await page.goto('https://github.com/login');\n> 15 |   await login(page);\n     |         ^\n  16 | });\n```\n\nSee [`method: Test.step`] documentation for a full example.\n\n### New APIs\n\n- [`method: LocatorAssertions.toHaveAttribute#2`]","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1007,"to":1046}}}}],["9ee707a6-8186-44a8-9d3c-c24452899d11",{"pageContent":"See [`method: Test.step`] documentation for a full example.\n\n### New APIs\n\n- [`method: LocatorAssertions.toHaveAttribute#2`]\n\n### Browser Versions\n\n* Chromium 119.0.6045.9\n* Mozilla Firefox 118.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 118\n* Microsoft Edge 118\n\n## Version 1.38\n\n<LiteYouTube\n  id=\"YGJTeXaZDTM\"\n  title=\"Playwright 1.38\"\n/>\n\n### UI Mode Updates\n\n![Playwright UI Mode](https://github.com/microsoft/playwright/assets/746130/8ba27be0-58fd-4f62-8561-950480610369)\n\n1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n- The [`method: Reporter.onEnd`] now reports `startTime` and total run `duration`.\n\n### Deprecations","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1042,"to":1079}}}}],["3153370d-8559-4f1f-aa94-a3b118a46ba6",{"pageContent":"### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n- The [`method: Reporter.onEnd`] now reports `startTime` and total run `duration`.\n\n### Deprecations\n\n* The following methods were deprecated: [`method: Page.type`], [`method: Frame.type`],\n  [`method: Locator.type`] and [`method: ElementHandle.type`].\n  Please use [`method: Locator.fill`] instead which is much faster. Use\n  [`method: Locator.pressSequentially`] only if there is a special keyboard\n  handling on the page, and you need to press keys one-by-one.\n\n### Breaking Changes: Playwright no longer downloads browsers automatically\n\n> **Note**: If you are using `@playwright/test` package, this change does not affect you.\n\nPlaywright recommends to use `@playwright/test` package and download browsers via `npx playwright install` command. If you are following this recommendation, nothing has changed for you.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1073,"to":1091}}}}],["27e08156-6424-4a45-88e5-430cc7264420",{"pageContent":"Playwright recommends to use `@playwright/test` package and download browsers via `npx playwright install` command. If you are following this recommendation, nothing has changed for you.\n\nHowever, up to v1.38, installing the `playwright` package instead of `@playwright/test` did automatically download browsers. This is no longer the case, and we recommend to explicitly download browsers via `npx playwright install` command.\n\n**v1.37 and earlier**\n\n`playwright` package was downloading browsers during `npm install`, while `@playwright/test` was not.\n\n**v1.38 and later**\n\n`playwright` and `@playwright/test` packages do not download browsers during `npm install`.\n\n**Recommended migration**\n\nRun `npx playwright install` to download browsers after `npm install`. For example, in your CI configuration:\n\n```yml\n- run: npm ci\n- run: npx playwright install --with-deps\n```\n\n**Alternative migration option - not recommended**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1091,"to":1112}}}}],["7ddd21aa-81d3-4494-8580-788a71588d29",{"pageContent":"```yml\n- run: npm ci\n- run: npx playwright install --with-deps\n```\n\n**Alternative migration option - not recommended**\n\nAdd `@playwright/browser-chromium`, `@playwright/browser-firefox` and `@playwright/browser-webkit` as a dependency. These packages download respective browsers during `npm install`. Make sure you keep the version of all playwright packages in sync:\n\n```json\n// package.json\n{\n  \"devDependencies\": {\n    \"playwright\": \"1.38.0\",\n    \"@playwright/browser-chromium\": \"1.38.0\",\n    \"@playwright/browser-firefox\": \"1.38.0\",\n    \"@playwright/browser-webkit\": \"1.38.0\"\n  }\n}\n```\n\n### Browser Versions\n\n* Chromium 117.0.5938.62\n* Mozilla Firefox 117.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 116\n* Microsoft Edge 116\n\n## Version 1.37\n\n<LiteYouTube\n  id=\"cEd4SH_Xf5U\"\n  title=\"Playwright 1.36 & 1.37\"\n/>\n\n### New `npx playwright merge-reports` tool","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1107,"to":1146}}}}],["d8bf30b3-43d4-4f76-ba51-7f3e6ceaeb30",{"pageContent":"* Google Chrome 116\n* Microsoft Edge 116\n\n## Version 1.37\n\n<LiteYouTube\n  id=\"cEd4SH_Xf5U\"\n  title=\"Playwright 1.36 & 1.37\"\n/>\n\n### New `npx playwright merge-reports` tool\n\nIf you run tests on multiple shards, you can now merge all reports in a single HTML report (or any other report)\nusing the new `merge-reports` CLI tool.\n\nUsing `merge-reports` tool requires the following steps:\n\n1. Adding a new \"blob\" reporter to the config when running on CI:\n\n  ```js title=\"playwright.config.ts\"\n  export default defineConfig({\n    testDir: './tests',\n    reporter: process.env.CI ? 'blob' : 'html',\n  });\n  ```\n\n  The \"blob\" reporter will produce \".zip\" files that contain all the information\n  about the test run.\n\n2. Copying all \"blob\" reports in a single shared location and running `npx playwright merge-reports`:\n\n  ```bash\n  npx playwright merge-reports --reporter html ./all-blob-reports\n  ```\n\n  Read more in [our documentation](./test-sharding.md).\n\n### 📚 Debian 12 Bookworm Support","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1136,"to":1173}}}}],["2ba0bff2-8eee-44ee-9d12-8e9144167d11",{"pageContent":"```bash\n  npx playwright merge-reports --reporter html ./all-blob-reports\n  ```\n\n  Read more in [our documentation](./test-sharding.md).\n\n### 📚 Debian 12 Bookworm Support\n\nPlaywright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ | ✅ |\n\n### UI Mode Updates\n\n- UI Mode now respects project dependencies. You can control which dependencies to respect by checking/unchecking them in a projects list.\n- Console logs from the test are now displayed in the Console tab.\n\n### Browser Versions\n\n* Chromium 116.0.5845.82\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1167,"to":1202}}}}],["2281c0d2-40ad-4d39-9d2d-b69c5ef81afd",{"pageContent":"* Chromium 116.0.5845.82\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36\n\n🏝️ Summer maintenance release.\n\n### Browser Versions\n\n* Chromium 115.0.5790.75\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.35\n\n<LiteYouTube\n  id=\"pJiirfyJwcA\"\n  title=\"Playwright 1.35\"\n/>\n\n### Highlights\n\n* UI mode is now available in VSCode Playwright extension via a new \"Show trace viewer\" button:\n\n  ![Playwright UI Mode](https://github.com/microsoft/playwright/assets/746130/13094128-259b-477a-8bbb-c1181178e8a2)\n\n* UI mode and trace viewer mark network requests handled with [`method: Page.route`] and [`method: BrowserContext.route`] handlers, as well as those issued via the [API testing](./api-testing):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1193,"to":1230}}}}],["197b7b75-2bd2-4f08-96d3-4f292511609c",{"pageContent":"* UI mode and trace viewer mark network requests handled with [`method: Page.route`] and [`method: BrowserContext.route`] handlers, as well as those issued via the [API testing](./api-testing):\n\n  ![Trace Viewer](https://github.com/microsoft/playwright/assets/746130/0df2d4b6-faa3-465c-aff3-c435b430bfe1)\n\n* New option `maskColor` for methods [`method: Page.screenshot`], [`method: Locator.screenshot`], [`method: PageAssertions.toHaveScreenshot#1`] and [`method: LocatorAssertions.toHaveScreenshot#1`] to change default masking color:\n  ```js\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({\n    mask: [page.locator('img')],\n    maskColor: '#00FF00', // green\n  });\n  ```\n\n* New `uninstall` CLI command to uninstall browser binaries:\n  ```bash\n  $ npx playwright uninstall # remove browsers installed by this installation\n  $ npx playwright uninstall --all # remove all ever-install Playwright browsers\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1230,"to":1247}}}}],["d9546175-3489-4920-82b6-2a35640edf1c",{"pageContent":"* Both UI mode and trace viewer now could be opened in a browser tab:\n  ```bash\n  $ npx playwright test --ui-port 0 # open UI mode in a tab on a random port\n  $ npx playwright show-trace --port 0 # open trace viewer in tab on a random port\n  ```\n\n### ⚠️ Breaking changes\n\n* `playwright-core` binary got renamed from `playwright` to `playwright-core`. So if you use `playwright-core` CLI, make sure to update the name:\n  ```bash\n  $ npx playwright-core install # the new way to install browsers when using playwright-core\n  ```\n\n  This change **does not** affect `@playwright/test` and `playwright` package users.\n\n### Browser Versions\n\n* Chromium 115.0.5790.13\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.34\n\n<LiteYouTube\n  id=\"JeFD6rqDbBo\"\n  title=\"Playwright 1.34\"\n/>\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1249,"to":1282}}}}],["a4838040-302d-4b3e-88e7-eb331c245ce7",{"pageContent":"* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.34\n\n<LiteYouTube\n  id=\"JeFD6rqDbBo\"\n  title=\"Playwright 1.34\"\n/>\n\n### Highlights\n\n* UI Mode now shows steps, fixtures and attachments:\n  ![UI Mode attachments](https://github.com/microsoft/playwright/assets/746130/1d280419-d79a-4a56-b2dc-54d631281d56)\n* New property [`property: TestProject.teardown`] to specify a project that needs to run after this\n  and all dependent projects have finished. Teardown is useful to cleanup any resources acquired by this project.\n\n  A common pattern would be a `setup` dependency with a corresponding `teardown`:\n  ```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1272,"to":1291}}}}],["0883e36a-5689-43d3-a88e-cd6a260b8f08",{"pageContent":"A common pattern would be a `setup` dependency with a corresponding `teardown`:\n  ```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    projects: [\n      {\n        name: 'setup',\n        testMatch: /global.setup\\.ts/,\n        teardown: 'teardown',\n      },\n      {\n        name: 'teardown',\n        testMatch: /global.teardown\\.ts/,\n      },\n      {\n        name: 'chromium',\n        use: devices['Desktop Chrome'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'firefox',\n        use: devices['Desktop Firefox'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'webkit',\n        use: devices['Desktop Safari'],\n        dependencies: ['setup'],\n      },\n    ],\n  });\n  ```\n* New method [`expect.configure`](./test-assertions.md#expectconfigure) to\n  create pre-configured expect instance with its own defaults such as `timeout`\n  and `soft`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1289,"to":1324}}}}],["2950c9ad-ebab-436e-a606-72831cc84582",{"pageContent":"```js\n  const slowExpect = expect.configure({ timeout: 10000 });\n  await slowExpect(locator).toHaveText('Submit');\n\n  // Always do soft assertions.\n  const softExpect = expect.configure({ soft: true });\n  ```\n\n* New options `stderr` and `stdout`  in [`property: TestConfig.webServer`] to configure output handling:\n\n  ```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    // Run your local dev server before starting the tests\n    webServer: {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      reuseExistingServer: !process.env.CI,\n      stdout: 'pipe',\n      stderr: 'pipe',\n    },\n  });\n  ```\n* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```js\n    const button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n    ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1326,"to":1354}}}}],["e940b731-d6d1-4503-ba57-ef42410caef7",{"pageContent":"```js\n    const button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n    ```\n\n* New events [`event: BrowserContext.console`] and [`event: BrowserContext.dialog`] to subscribe to any dialogs\n  and console messages from any page from the given browser context. Use the new methods [`method: ConsoleMessage.page`]\n  and [`method: Dialog.page`] to pin-point event source.\n\n### ⚠️ Breaking changes\n\n* `npx playwright test` no longer works if you install both `playwright` and `@playwright/test`. There's no need\n  to install both, since you can always import browser automation APIs from `@playwright/test` directly:\n\n  ```js title=\"automation.ts\"\n  import { chromium, firefox, webkit } from '@playwright/test';\n  /* ... */\n  ```\n* Node.js 14 is no longer supported since it [reached its end-of-life](https://nodejs.dev/en/about/releases/) on April 30, 2023.\n\n### Browser Versions\n\n* Chromium 114.0.5735.26\n* Mozilla Firefox 113.0\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1352,"to":1375}}}}],["486b4a00-dd9e-4b00-a554-bb6acae8ebc8",{"pageContent":"### Browser Versions\n\n* Chromium 114.0.5735.26\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n<LiteYouTube\n  id=\"JeFD6rqDbBo\"\n  title=\"Playwright 1.33\"\n/>\n\n### Locators Update\n\n* Use [`method: Locator.or`] to create a locator that matches either of the two locators.\n  Consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead.\n  In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1371,"to":1393}}}}],["f40eb1d2-1d24-4d56-9eac-f03c220fa47b",{"pageContent":"```js\n    const newEmail = page.getByRole('button', { name: 'New email' });\n    const dialog = page.getByText('Confirm security settings');\n    await expect(newEmail.or(dialog)).toBeVisible();\n    if (await dialog.isVisible())\n      await page.getByRole('button', { name: 'Dismiss' }).click();\n    await newEmail.click();\n    ```\n* Use new options [`option: Locator.filter.hasNot`] and [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n  to find elements that **do not match** certain conditions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1395,"to":1404}}}}],["a26b605a-5b32-43c5-829a-71eaf2103748",{"pageContent":"```js\n    const rowLocator = page.locator('tr');\n    await rowLocator\n        .filter({ hasNotText: 'text in column 1' })\n        .filter({ hasNot: page.getByRole('button', { name: 'column 2 button' }) })\n        .screenshot();\n    ```\n* Use new web-first assertion [`method: LocatorAssertions.toBeAttached`] to ensure that the element\n  is present in the page's DOM. Do not confuse with the [`method: LocatorAssertions.toBeVisible`] that ensures that\n  element is both attached & visible.\n\n### New APIs\n\n- [`method: Locator.or`]\n- New option [`option: Locator.filter.hasNot`] in [`method: Locator.filter`]\n- New option [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n- [`method: LocatorAssertions.toBeAttached`]\n- New option [`option: Route.fetch.timeout`] in [`method: Route.fetch`]\n- [`method: Reporter.onExit`]\n\n### ⚠️ Breaking change","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1406,"to":1426}}}}],["35a08e03-9caf-4645-b01b-326e42ce35dc",{"pageContent":"### ⚠️ Breaking change\n\n* The `mcr.microsoft.com/playwright:v1.33.0` now serves a Playwright image based on Ubuntu Jammy.\n  To use the focal-based image, please use `mcr.microsoft.com/playwright:v1.33.0-focal` instead.\n\n### Browser Versions\n\n* Chromium 113.0.5672.53\n* Mozilla Firefox 112.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 112\n* Microsoft Edge 112\n\n## Version 1.32\n\n<LiteYouTube\n  id=\"jF0yA-JLQW0\"\n  title=\"Playwright 1.32\"\n/>\n\n### Introducing UI Mode (preview)\n\nNew [UI Mode](./test-ui-mode.md) lets you explore, run and debug tests. Comes with a built-in watch mode.\n\n![Playwright UI Mode](https://user-images.githubusercontent.com/746130/227004851-3901a691-4f8e-43d6-8d6b-cbfeafaeb999.png)\n\nEngage with a new flag `--ui`:\n\n```sh\nnpx playwright test --ui\n```\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1426,"to":1461}}}}],["50fbb531-10f8-49f7-85c0-64792926ff67",{"pageContent":"Engage with a new flag `--ui`:\n\n```sh\nnpx playwright test --ui\n```\n\n### New APIs\n\n- New options [`option: Page.routeFromHAR.updateMode`] and [`option: Page.routeFromHAR.updateContent`] in [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`].\n- Chaining existing locator objects, see [locator docs](./locators.md#matching-inside-a-locator) for details.\n- New property [`property: TestInfo.testId`].\n- New option [`option: Tracing.startChunk.name`] in method [`method: Tracing.startChunk`].\n\n\n### ⚠️ Breaking change in component tests\n\nNote: **component tests only**, does not affect end-to-end tests.\n\n* `@playwright/experimental-ct-react` now supports **React 18 only**.\n* If you're running component tests with React 16 or 17, please replace\n  `@playwright/experimental-ct-react` with `@playwright/experimental-ct-react17`.\n\n### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1455,"to":1481}}}}],["6216da23-1c08-47d5-aa39-9a7bff451e4f",{"pageContent":"### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 111\n* Microsoft Edge 111\n\n## Version 1.31\n\n<LiteYouTube\n  id=\"PI50YAPTAs4\"\n  title=\"Playwright 1.31\"\n/>\n\n### New APIs\n\n- New property [`property: TestProject.dependencies`] to configure dependencies between projects.\n\n  Using dependencies allows global setup to produce traces and other artifacts,\n  see the setup steps in the test report and more.\n\n  ```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1477,"to":1503}}}}],["470ebebd-086e-437b-b1e3-5722ce38abd5",{"pageContent":"```js title=\"playwright.config.ts\"\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    projects: [\n      {\n        name: 'setup',\n        testMatch: /global.setup\\.ts/,\n      },\n      {\n        name: 'chromium',\n        use: devices['Desktop Chrome'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'firefox',\n        use: devices['Desktop Firefox'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'webkit',\n        use: devices['Desktop Safari'],\n        dependencies: ['setup'],\n      },\n    ],\n  });\n  ```\n\n- New assertion [`method: LocatorAssertions.toBeInViewport`] ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n  ```js\n  const button = page.getByRole('button');\n\n  // Make sure at least some part of element intersects viewport.\n  await expect(button).toBeInViewport();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1502,"to":1536}}}}],["50a5d1cc-2156-4edf-8e14-eab21e05c2ba",{"pageContent":"```js\n  const button = page.getByRole('button');\n\n  // Make sure at least some part of element intersects viewport.\n  await expect(button).toBeInViewport();\n\n  // Make sure element is fully outside of viewport.\n  await expect(button).not.toBeInViewport();\n\n  // Make sure that at least half of the element intersects viewport.\n  await expect(button).toBeInViewport({ ratio: 0.5 });\n  ```\n\n\n### Miscellaneous\n\n- DOM snapshots in trace viewer can be now opened in a separate window.\n- New method `defineConfig` to be used in `playwright.config`.\n- New option [`option: Route.fetch.maxRedirects`] for method [`method: Route.fetch`].\n- Playwright now supports Debian 11 arm64.\n- Official [docker images](./docker.md) now include Node 18 instead of Node 16.\n\n\n### ⚠️ Breaking change in component tests\n\nNote: **component tests only**, does not affect end-to-end tests.\n\n`playwright-ct.config` configuration file for [component testing](./test-components.md) now requires calling `defineConfig`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1532,"to":1559}}}}],["83473a93-ee71-432e-a27c-70452fa9fb29",{"pageContent":"Note: **component tests only**, does not affect end-to-end tests.\n\n`playwright-ct.config` configuration file for [component testing](./test-components.md) now requires calling `defineConfig`.\n\n```js\n// Before\n\nimport { type PlaywrightTestConfig, devices } from '@playwright/experimental-ct-react';\nconst config: PlaywrightTestConfig = {\n  // ... config goes here ...\n};\nexport default config;\n```\n\nReplace `config` variable definition with `defineConfig` call:\n\n```js\n// After\n\nimport { defineConfig, devices } from '@playwright/experimental-ct-react';\nexport default defineConfig({\n  // ... config goes here ...\n});\n```\n\n### Browser Versions\n\n* Chromium 111.0.5563.19\n* Mozilla Firefox 109.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 110\n* Microsoft Edge 110\n\n\n## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1557,"to":1602}}}}],["dc4542ee-bdbd-4cdf-96aa-bbec0826f697",{"pageContent":"## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n<LiteYouTube\n  id=\"VbVlz61VtNo\"\n  title=\"Playwright 1.29\"\n/>\n\n### New APIs\n\n- New method [`method: Route.fetch`] and new option `json` for [`method: Route.fulfill`]:\n\n    ```js\n    await page.route('**/api/settings', async route => {\n      // Fetch original settings.\n      const response = await route.fetch();\n\n      // Force settings theme to a predefined value.\n      const json = await response.json();\n      json.theme = 'Solorized';\n\n      // Fulfill with modified data.\n      await route.fulfill({ json });\n    });\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1594,"to":1633}}}}],["f3fcc90e-fd37-4620-8902-012c1873590e",{"pageContent":"// Fulfill with modified data.\n      await route.fulfill({ json });\n    });\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:\n\n    ```js\n    // Check all checkboxes!\n    const checkboxes = page.getByRole('checkbox');\n    for (const checkbox of await checkboxes.all())\n      await checkbox.check();\n    ```\n\n- [`method: Locator.selectOption`] matches now by value or label:\n\n  ```html\n  <select multiple>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n  ```\n\n  ```js\n  await element.selectOption('Red');\n  ```\n\n- Retry blocks of code until all assertions pass:\n\n    ```js\n    await expect(async () => {\n      const response = await page.request.get('https://api.example.com');\n      await expect(response).toBeOK();\n    }).toPass();\n    ```\n\n  Read more in [our documentation](./test-assertions.md#expecttopass).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1628,"to":1665}}}}],["16fbc0a9-91e1-46ba-8cc2-6587ba565497",{"pageContent":"Read more in [our documentation](./test-assertions.md#expecttopass).\n\n- Automatically capture **full page screenshot** on test failure:\n    ```js title=\"playwright.config.ts\"\n    import { defineConfig } from '@playwright/test';\n    export default defineConfig({\n      use: {\n        screenshot: {\n          mode: 'only-on-failure',\n          fullPage: true,\n        }\n      }\n    });\n    ```\n\n### Miscellaneous\n\n- Playwright Test now respects [`jsconfig.json`](https://code.visualstudio.com/docs/languages/jsconfig).\n- New options `args` and `proxy` for [`method: AndroidDevice.launchBrowser`].\n- Option `postData` in method [`method: Route.continue`] now supports [Serializable] values.\n\n### Browser Versions\n\n* Chromium 109.0.5414.46\n* Mozilla Firefox 107.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 108\n* Microsoft Edge 108\n\n## Version 1.28\n\n<LiteYouTube\n  id=\"tVSq-0n-TY4\"\n  title=\"Playwright 1.28\"\n/>\n\n### Playwright Tools","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1665,"to":1704}}}}],["adbe795c-3b18-42cc-a956-ed3713a479f8",{"pageContent":"* Google Chrome 108\n* Microsoft Edge 108\n\n## Version 1.28\n\n<LiteYouTube\n  id=\"tVSq-0n-TY4\"\n  title=\"Playwright 1.28\"\n/>\n\n### Playwright Tools\n\n* **Record at Cursor in VSCode.** You can run the test, position the cursor at the end of the test and continue generating the test.\n\n![New VSCode Extension](https://user-images.githubusercontent.com/746130/202005839-aba2eeba-217b-424d-8496-8b4f5fa72f41.png)\n\n* **Live Locators in VSCode.** You can hover and edit locators in VSCode to get them  highlighted in the opened browser.\n* **Live Locators in CodeGen.** Generate a locator for any element on the page using \"Explore\" tool.\n\n![Locator Explorer](https://user-images.githubusercontent.com/746130/201796876-01567a0b-ca61-4a9d-b12b-04786c471671.png)\n\n* **Codegen and Trace Viewer Dark Theme.** Automatically picked up from operating system settings.\n\n![Dark Theme](https://user-images.githubusercontent.com/746130/201797969-603f74df-d7cf-4c56-befd-798dbd269796.png)\n\n\n### Test Runner","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1694,"to":1720}}}}],["d6d8125b-b1db-4192-9b18-7b3bcd4d33b4",{"pageContent":"![Dark Theme](https://user-images.githubusercontent.com/746130/201797969-603f74df-d7cf-4c56-befd-798dbd269796.png)\n\n\n### Test Runner\n\n* Configure retries and test timeout for a file or a test with [`method: Test.describe.configure`].\n\n    ```js\n    // Each test in the file will be retried twice and have a timeout of 20 seconds.\n    test.describe.configure({ retries: 2, timeout: 20_000 });\n    test('runs first', async ({ page }) => {});\n    test('runs second', async ({ page }) => {});\n    ```\n\n* Use [`property: TestProject.snapshotPathTemplate`] and [`property: TestConfig.snapshotPathTemplate`] to configure a template controlling location of snapshots generated by [`method: PageAssertions.toHaveScreenshot#1`] and [`method: SnapshotAssertions.toMatchSnapshot#1`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1717,"to":1731}}}}],["5b2aa5f1-2965-41ee-b418-14d76217d16e",{"pageContent":"```js title=\"playwright.config.ts\"\n    import { defineConfig } from '@playwright/test';\n    export default defineConfig({\n      testDir: './tests',\n      snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',\n    });\n    ```\n\n### New APIs\n\n- [`method: Locator.blur`]\n- [`method: Locator.clear`]\n- [`method: Android.launchServer`] and  [`method: Android.connect`]\n- [`event: AndroidDevice.close`]\n\n### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n<LiteYouTube\n  id=\"b84eqab3kwc\"\n  title=\"Playwright 1.27\"\n/>\n\n\n### Locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1733,"to":1768}}}}],["f8ddaf37-879c-49d2-be22-973e44d8aefc",{"pageContent":"* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n<LiteYouTube\n  id=\"b84eqab3kwc\"\n  title=\"Playwright 1.27\"\n/>\n\n\n### Locators\n\nWith these new APIs writing locators is a joy:\n- [`method: Page.getByText`] to locate by text content.\n- [`method: Page.getByRole`] to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n- [`method: Page.getByLabel`] to locate a form control by associated label's text.\n- [`method: Page.getByTestId`] to locate an element based on its `data-testid` attribute (other attribute can be configured).\n- [`method: Page.getByPlaceholder`] to locate an input by placeholder.\n- [`method: Page.getByAltText`] to locate an element, usually image, by its text alternative.\n- [`method: Page.getByTitle`] to locate an element by its title.\n\n```js\nawait page.getByLabel('User Name').fill('John');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1756,"to":1780}}}}],["94a07199-3cfa-4013-8af6-66aa100fc2ae",{"pageContent":"```js\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();\n\nawait expect(page.getByText('Welcome, John!')).toBeVisible();\n```\n\nAll the same methods are also available on [Locator], [FrameLocator] and [Frame] classes.\n\n### Other highlights\n\n- `workers` option in the `playwright.config.ts` now accepts a percentage string to use some of the available CPUs. You can also pass it in the command line:\n  ```bash\n  npx playwright test --workers=20%\n  ```\n\n- New options `host` and `port` for the html reporter.\n  ```js\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    reporter: [['html', { host: 'localhost', port: '9223' }]],\n  });\n  ```\n\n- New field `FullConfig.configFile` is available to test reporters, specifying the path to the config file if any.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1779,"to":1807}}}}],["c935d730-df12-4d81-b39c-83961207359f",{"pageContent":"- New field `FullConfig.configFile` is available to test reporters, specifying the path to the config file if any.\n\n- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.\n\n### Behavior Changes\n\n- [`method: LocatorAssertions.toHaveAttribute`] with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.\n\n   ```js\n   await expect(page.getByRole('button')).toHaveAttribute('disabled', '');\n   ```\n\n- Command line options `--grep` and `--grep-invert` previously incorrectly ignored `grep` and `grepInvert` options specified in the config. Now all of them are applied together.\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1807,"to":1827}}}}],["3be251f2-8e3d-4254-beea-6075ebf37d06",{"pageContent":"### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 106\n* Microsoft Edge 106\n\n\n## Version 1.26\n\n<LiteYouTube\n  id=\"b84eqab3kwc\"\n  title=\"Playwright 1.26\"\n/>\n\n### Assertions\n\n- New option `enabled` for [`method: LocatorAssertions.toBeEnabled`].\n- [`method: LocatorAssertions.toHaveText`] now pierces open shadow roots.\n- New option `editable` for [`method: LocatorAssertions.toBeEditable`].\n- New option `visible` for [`method: LocatorAssertions.toBeVisible`].\n\n### Other highlights\n\n- New option `maxRedirects` for [`method: APIRequestContext.get`] and others to limit redirect count.\n- New command-line flag `--pass-with-no-tests` that allows the test suite to pass when no files are found.\n- New command-line flag `--ignore-snapshots` to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `expect(page).toHaveScreenshot()`.\n\n### Behavior Change","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1821,"to":1853}}}}],["ad595624-2f84-4e41-91b1-43040661a333",{"pageContent":"### Behavior Change\n\nA bunch of Playwright APIs already support the `waitUntil: 'domcontentloaded'` option.\nFor example:\n\n```js\nawait page.goto('https://playwright.dev', {\n  waitUntil: 'domcontentloaded',\n});\n```\n\nPrior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded`\nevent.\n\nTo align with web specification, the `'domcontentloaded'` value only waits for\nthe target frame to fire the `'DOMContentLoaded'` event. Use `waitUntil: 'load'` to wait for all iframes.\n\n### Browser Versions\n\n* Chromium 106.0.5249.30\n* Mozilla Firefox 104.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 105\n* Microsoft Edge 105\n\n## Version 1.25\n\n<LiteYouTube\n  id=\"NFLHA57a-so\"\n  title=\"Playwright 1.25\"\n/>\n\n### VSCode Extension\n\n* Watch your tests running live & keep devtools open.\n* Pick selector.\n* Record new test from current page state.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1853,"to":1892}}}}],["aa1fc31c-65f0-4b32-a4a3-368ff161c5e3",{"pageContent":"<LiteYouTube\n  id=\"NFLHA57a-so\"\n  title=\"Playwright 1.25\"\n/>\n\n### VSCode Extension\n\n* Watch your tests running live & keep devtools open.\n* Pick selector.\n* Record new test from current page state.\n\n![vscode extension screenshot](https://user-images.githubusercontent.com/746130/183781999-1b9fdbc5-cfae-47d6-b4f7-5d4ae89716a8.jpg)\n\n### Test Runner\n\n* [`method: Test.step`] now returns the value of the step function:\n\n    ```js\n    test('should work', async ({ page }) => {\n      const pageTitle = await test.step('get title', async () => {\n        await page.goto('https://playwright.dev');\n        return await page.title();\n      });\n      console.log(pageTitle);\n    });\n    ```\n\n* Added [`method: Test.describe.fixme`].\n* New `'interrupted'` test status.\n* Enable tracing via CLI flag: `npx playwright test --trace=on`.\n\n### Announcements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1883,"to":1914}}}}],["37375d8c-6aaf-4f2a-b923-6159eb0f18d8",{"pageContent":"* Added [`method: Test.describe.fixme`].\n* New `'interrupted'` test status.\n* Enable tracing via CLI flag: `npx playwright test --trace=on`.\n\n### Announcements\n\n* 🎁 We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright:v1.34.0-jammy`.\n* 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).\n* 🪦 This is the last release with Node.js 12 support, we recommend upgrading to Node.js LTS (16).\n* ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.\n\n### Browser Versions\n\n* Chromium 105.0.5195.19\n* Mozilla Firefox 103.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 104\n* Microsoft Edge 104\n\n\n## Version 1.24\n\n<LiteYouTube\n  id=\"9F05o1shxcY\"\n  title=\"Playwright 1.24\"\n/>\n\n### 🌍 Multiple Web Servers in `playwright.config.ts`\n\nLaunch multiple web servers, databases, or other processes by passing an array of configurations:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1910,"to":1942}}}}],["adcaea91-55a5-4535-a8c2-d607513848a6",{"pageContent":"### 🌍 Multiple Web Servers in `playwright.config.ts`\n\nLaunch multiple web servers, databases, or other processes by passing an array of configurations:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\n### 🐂 Debian 11 Bullseye Support\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know\nif you encounter any issues!\n\nLinux support looks like this:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1940,"to":1972}}}}],["77d46cc9-257a-4141-93a9-ac5891bcd9a3",{"pageContent":"### 🐂 Debian 11 Bullseye Support\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know\nif you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n### 🕵️ Anonymous Describe\n\nIt is now possible to call [`method: Test.describe`] to create suites without a title. This is useful for giving a group of tests a common option with [`method: Test.use`].\n\n```js\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n### 🧩 Component Tests Update\n\nPlaywright 1.24 Component Tests introduce `beforeMount` and `afterMount` hooks.\nUse these to configure your app for tests.\n\nFor example, this could be used to setup App router in Vue.js:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":1967,"to":2003}}}}],["2fd67c8b-2c3d-4a42-9be8-9280e2bdc89a",{"pageContent":"Playwright 1.24 Component Tests introduce `beforeMount` and `afterMount` hooks.\nUse these to configure your app for tests.\n\nFor example, this could be used to setup App router in Vue.js:\n\n```js title=\"src/component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(Component, {\n    hooksConfig: {\n      /* anything to configure your app */\n    }\n  });\n});\n```\n\n```js title=\"playwright/index.ts\"\nimport { router } from '../router';\nimport { beforeMount } from '@playwright/experimental-ct-vue/hooks';\n\nbeforeMount(async ({ app, hooksConfig }) => {\n  app.use(router);\n});\n```\n\nA similar configuration in Next.js would look like this:\n\n```js title=\"src/component.spec.jsx\"\nimport { test } from '@playwright/experimental-ct-react';\nimport { Component } from './mycomponent';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2000,"to":2031}}}}],["09005223-6e27-4c51-802f-9c6292572040",{"pageContent":"A similar configuration in Next.js would look like this:\n\n```js title=\"src/component.spec.jsx\"\nimport { test } from '@playwright/experimental-ct-react';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<Component></Component>, {\n    // Pass mock value from test into `beforeMount`.\n    hooksConfig: {\n      router: {\n        query: { page: 1, per_page: 10 },\n        asPath: '/posts'\n      }\n    }\n  });\n});\n```\n\n```js title=\"playwright/index.js\"\nimport router from 'next/router';\nimport { beforeMount } from '@playwright/experimental-ct-react/hooks';\n\nbeforeMount(async ({ hooksConfig }) => {\n  // Before mount, redefine useRouter to return mock value from test.\n  router.useRouter = () => hooksConfig.router;\n});\n```\n\n## Version 1.23\n\n<LiteYouTube\n  id=\"NRGOV46P3kU\"\n  title=\"Playwright 1.23\"\n/>\n\n### Network Replay\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2027,"to":2065}}}}],["34f9e1e6-8c69-42dd-99d7-1dd516992e7c",{"pageContent":"## Version 1.23\n\n<LiteYouTube\n  id=\"NRGOV46P3kU\"\n  title=\"Playwright 1.23\"\n/>\n\n### Network Replay\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.\n\nTo record network into HAR file:\n\n```bash\nnpx playwright open --save-har=github.har.zip https://github.com/microsoft\n```\n\nAlternatively, you can record HAR programmatically:\n\n```js\nconst context = await browser.newContext({\n  recordHar: { path: 'github.har.zip' }\n});\n// ... do stuff ...\nawait context.close();\n```\n\nUse the new methods [`method: Page.routeFromHAR`] or [`method: BrowserContext.routeFromHAR`] to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:\n\n\n```js\nawait context.routeFromHAR('github.har.zip');\n```\n\nRead more in [our documentation](./mock.md#mocking-with-har-files).\n\n\n### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2056,"to":2097}}}}],["bb900935-395b-452d-965a-e19eea587d45",{"pageContent":"### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:\n\n```js\n// Remove a header from all requests.\ntest.beforeEach(async ({ page }) => {\n  await page.route('**/*', async route => {\n    const headers = await route.request().allHeaders();\n    delete headers['if-none-match'];\n    await route.fallback({ headers });\n  });\n});\n\ntest('should work', async ({ page }) => {\n  await page.route('**/*', async route => {\n    if (route.request().resourceType() === 'image')\n      await route.abort();\n    else\n      await route.fallback();\n  });\n});\n```\n\nNote that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2093,"to":2121}}}}],["9cd968cb-3508-4153-a6e8-9f57c5d979dc",{"pageContent":"Note that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update\n\n* New method [`method: LocatorAssertions.toHaveValues`] that asserts all selected values of `<select multiple>` element.\n* Methods [`method: LocatorAssertions.toContainText`] and [`method: LocatorAssertions.toHaveText`] now accept `ignoreCase` option.\n\n### Component Tests Update\n\n* Support for Vue2 via the [`@playwright/experimental-ct-vue2`](https://www.npmjs.com/package/@playwright/experimental-ct-vue2) package.\n* Support for component tests for [create-react-app](https://www.npmjs.com/package/create-react-app) with components in `.js` files.\n\nRead more about [component testing with Playwright](./test-components).\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2119,"to":2133}}}}],["e0d469c6-5378-47b2-89d8-9d301c485614",{"pageContent":"Read more about [component testing with Playwright](./test-components).\n\n### Miscellaneous\n\n* If there's a service worker that's in your way, you can now easily disable it with a new context option `serviceWorkers`:\n  ```js title=\"playwright.config.ts\"\n  export default {\n    use: {\n      serviceWorkers: 'block',\n    }\n  };\n  ```\n* Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:\n  ```js\n  const context = await browser.newContext({\n    recordHar: {\n      path: 'github.har.zip',\n    }\n  });\n  ```\n* If you intend to edit HAR by hand, consider using the `\"minimal\"` HAR recording mode\n  that only records information that is essential for replaying:\n  ```js\n  const context = await browser.newContext({\n    recordHar: {\n      path: 'github.har',\n      mode: 'minimal',\n    }\n  });\n  ```\n* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64. We also publish new docker image `mcr.microsoft.com/playwright:v1.34.0-jammy`.\n\n### ⚠️ Breaking Changes ⚠️","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2131,"to":2163}}}}],["ab373638-cba9-462c-8f90-04331e130c49",{"pageContent":"### ⚠️ Breaking Changes ⚠️\n\nWebServer is now considered \"ready\" if request to the specified url has any of the following HTTP status codes:\n\n* `200-299`\n* `300-399` (new)\n* `400`, `401`, `402`, `403` (new)\n\n\n## Version 1.22\n\n<LiteYouTube\n  id=\"keV2CIgtBlg\"\n  title=\"Playwright 1.22\"\n/>\n\n### Highlights\n\n- Components Testing (preview)\n\n  Playwright Test can now test your [React](https://reactjs.org/),\n  [Vue.js](https://vuejs.org/) or [Svelte](https://svelte.dev/) components.\n  You can use all the features\n  of Playwright Test (such as parallelization, emulation & debugging) while running components\n  in real browsers.\n\n  Here is what a typical component test looks like:\n\n  ```js title=\"App.spec.tsx\"\n  import { test, expect } from '@playwright/experimental-ct-react';\n  import App from './App';\n\n  // Let's test component in a dark scheme!\n  test.use({ colorScheme: 'dark' });\n\n  test('should render', async ({ mount }) => {\n    const component = await mount(<App></App>);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2163,"to":2199}}}}],["507448d1-62c8-41c8-81b5-f03a15a82735",{"pageContent":"// Let's test component in a dark scheme!\n  test.use({ colorScheme: 'dark' });\n\n  test('should render', async ({ mount }) => {\n    const component = await mount(<App></App>);\n\n    // As with any Playwright test, assert locator text.\n    await expect(component).toContainText('React');\n    // Or do a screenshot 🚀\n    await expect(component).toHaveScreenshot();\n    // Or use any Playwright method\n    await component.click();\n  });\n  ```\n\n  Read more in [our documentation](./test-components).\n\n- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```js\n  // Click a button with accessible name \"log in\"\n  await page.locator('role=button[name=\"log in\"]').click();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2195,"to":2219}}}}],["167db70c-5c91-4613-a453-a6237d6a69ad",{"pageContent":"```js\n  // Click a button with accessible name \"log in\"\n  await page.locator('role=button[name=\"log in\"]').click();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n\n- New [`method: Locator.filter`] API to filter an existing locator\n\n  ```js\n  const buttons = page.locator('role=button');\n  // ...\n  const submitButton = buttons.filter({ hasText: 'Submit' });\n  await submitButton.click();\n  ```\n\n- New web-first assertions [`method: PageAssertions.toHaveScreenshot#1`] and [`method: LocatorAssertions.toHaveScreenshot#1`] that\n  wait for screenshot stabilization and enhances test reliability.\n\n  The new assertions has screenshot-specific defaults, such as:\n  * disables animations\n  * uses CSS scale option\n\n  ```js\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot();\n  ```\n\n  The new [`method: PageAssertions.toHaveScreenshot#1`] saves screenshots at the same\n  location as [`method: SnapshotAssertions.toMatchSnapshot#1`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2214,"to":2243}}}}],["16b8ac1e-1503-45b4-bdeb-27f301abc641",{"pageContent":"The new [`method: PageAssertions.toHaveScreenshot#1`] saves screenshots at the same\n  location as [`method: SnapshotAssertions.toMatchSnapshot#1`].\n\n\n## Version 1.21\n\n<LiteYouTube\n  id=\"45HZdbmgEw8\"\n  title=\"Playwright 1.21\"\n/>\n\n### Highlights\n\n- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```js\n  // Click a button with accessible name \"log in\"\n  await page.locator('role=button[name=\"log in\"]').click();\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n- New `scale` option in [`method: Page.screenshot`] for smaller sized screenshots.\n- New `caret` option in [`method: Page.screenshot`] to control text caret. Defaults to `\"hide\"`.\n\n- New method `expect.poll` to wait for an arbitrary condition:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2242,"to":2266}}}}],["a74f3a85-5dea-42b4-bc5e-b57e58d79965",{"pageContent":"- New method `expect.poll` to wait for an arbitrary condition:\n\n  ```js\n  // Poll the method until it returns an expected result.\n  await expect.poll(async () => {\n    const response = await page.request.get('https://api.example.com');\n    return response.status();\n  }).toBe(200);\n  ```\n\n  `expect.poll` supports most synchronous matchers, like `.toBe()`, `.toContain()`, etc.\n  Read more in [our documentation](./test-assertions.md#expectpoll).\n\n### Behavior Changes\n\n- ESM support when running TypeScript tests is now enabled by default. The `PLAYWRIGHT_EXPERIMENTAL_TS_ESM` env variable is\n  no longer required.\n- The `mcr.microsoft.com/playwright` docker image no longer contains Python. Please use `mcr.microsoft.com/playwright/python`\n  as a Playwright-ready docker image with pre-installed Python.\n- Playwright now supports large file uploads (100s of MBs) via [`method: Locator.setInputFiles`] API.\n\n### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2266,"to":2291}}}}],["ee6dfd86-c2f5-4b6b-ac1d-1d4c11f0e150",{"pageContent":"### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n\n## Version 1.20\n\n<LiteYouTube\n  id=\"6vV-XXKsrbA\"\n  title=\"Playwright 1.20\"\n/>\n\n### Highlights\n\n- New options for methods [`method: Page.screenshot`], [`method: Locator.screenshot`] and [`method: ElementHandle.screenshot`]:\n  * Option `animations: \"disabled\"` rewinds all CSS animations and transitions to a consistent state\n  * Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.\n- `expect().toMatchSnapshot()` now supports anonymous snapshots: when snapshot name is missing, Playwright Test will generate one\n  automatically:\n\n  ```js\n  expect('Web is Awesome <3').toMatchSnapshot();\n  ```\n- New `maxDiffPixels` and `maxDiffPixelRatio` options for fine-grained screenshot comparison using `expect().toMatchSnapshot()`:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2287,"to":2317}}}}],["9b11d44d-77f3-4b6b-a269-b402edc58ab2",{"pageContent":"```js\n  expect('Web is Awesome <3').toMatchSnapshot();\n  ```\n- New `maxDiffPixels` and `maxDiffPixelRatio` options for fine-grained screenshot comparison using `expect().toMatchSnapshot()`:\n\n  ```js\n  expect(await page.screenshot()).toMatchSnapshot({\n    maxDiffPixels: 27, // allow no more than 27 different pixels.\n  });\n  ```\n\n  It is most convenient to specify `maxDiffPixels` or `maxDiffPixelRatio` once in [`property: TestConfig.expect`].\n\n- Playwright Test now adds [`property: TestConfig.fullyParallel`] mode. By default, Playwright Test parallelizes between files. In fully parallel mode, tests inside a single file are also run in parallel. You can also use `--fully-parallel` command line flag.\n\n  ```js title=\"playwright.config.ts\"\n  export default {\n    fullyParallel: true,\n  };\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2314,"to":2333}}}}],["27facfb1-50f1-4d29-bc7e-a703fae651d0",{"pageContent":"```js title=\"playwright.config.ts\"\n  export default {\n    fullyParallel: true,\n  };\n  ```\n\n- [`property: TestProject.grep`] and [`property: TestProject.grepInvert`] are now configurable per project. For example, you can now\n  configure smoke tests project using `grep`:\n  ```js title=\"playwright.config.ts\"\n  export default {\n    projects: [\n      {\n        name: 'smoke tests',\n        grep: /@smoke/,\n      },\n    ],\n  };\n  ```\n\n- [Trace Viewer](./trace-viewer) now shows [API testing requests](./api-testing).\n- [`method: Locator.highlight`] visually reveals element(s) for easier debugging.\n\n### Announcements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2329,"to":2351}}}}],["bc224e7a-cc63-4ed4-87c5-c4f4466b323d",{"pageContent":"- [Trace Viewer](./trace-viewer) now shows [API testing requests](./api-testing).\n- [`method: Locator.highlight`] visually reveals element(s) for easier debugging.\n\n### Announcements\n\n- We now ship a designated Python docker image `mcr.microsoft.com/playwright/python`. Please switch over to it if you use\n  Python. This is the last release that includes Python inside our javascript `mcr.microsoft.com/playwright` docker image.\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 99\n- Microsoft Edge 99\n\n## Version 1.19\n\n<LiteYouTube\n  id=\"z0EOFvlf14U\"\n  title=\"Playwright 1.19\"\n/>\n\n### Playwright Test Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2348,"to":2375}}}}],["de6b7ebd-cf1b-4209-aeec-01da41a521ce",{"pageContent":"- Google Chrome 99\n- Microsoft Edge 99\n\n## Version 1.19\n\n<LiteYouTube\n  id=\"z0EOFvlf14U\"\n  title=\"Playwright 1.19\"\n/>\n\n### Playwright Test Update\n\n- Playwright Test v1.19 now supports *soft assertions*. Failed soft assertions\n  **do not** terminate test execution, but mark the test as failed.\n\n  ```js\n  // Make a few checks that will not stop the test when failed...\n  await expect.soft(page.locator('#status')).toHaveText('Success');\n  await expect.soft(page.locator('#eta')).toHaveText('1 day');\n\n  // ... and continue the test to check more things.\n  await page.locator('#next-page').click();\n  await expect.soft(page.locator('#title')).toHaveText('Make another order');\n  ```\n\n  Read more in [our documentation](./test-assertions#soft-assertions)\n\n- You can now specify a **custom expect message** as a second argument to the `expect` and `expect.soft` functions, for example:\n\n  ```js\n  await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2365,"to":2396}}}}],["c1544148-c0b1-413c-a4c7-c690a8b3a226",{"pageContent":"```js\n  await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n  ```\n\n  The error would look like this:\n\n  ```bash\n      Error: should be logged in\n\n      Call log:\n        - expect.toBeVisible with timeout 5000ms\n        - waiting for \"getByText('Name')\"\n\n\n        2 |\n        3 | test('example test', async({ page }) => {\n      > 4 |   await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n          |                                                                  ^\n        5 | });\n        6 |\n  ```\n\n  Read more in [our documentation](./test-assertions#custom-expect-message)\n- By default, tests in a single file are run in order. If you have many independent tests in a single file, you can now\n  run them in parallel with [`method: Test.describe.configure`].\n\n### Other Updates\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2394,"to":2422}}}}],["11315a8e-93bc-4ba9-8e5a-f5ce42c8b3aa",{"pageContent":"### Other Updates\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:\n\n  ```js\n  await page.locator('article', {\n    has: page.locator('.highlight'),\n  }).click();\n  ```\n\n  Read more in [locator documentation](./api/class-locator#locator-locator)\n\n- New [`method: Locator.page`]\n- [`method: Page.screenshot`] and [`method: Locator.screenshot`] now automatically hide blinking caret\n- Playwright Codegen now generates locators and frame locators\n- New option `url`  in [`property: TestConfig.webServer`] to ensure your web server is ready before running the tests\n- New [`property: TestInfo.errors`] and [`property: TestResult.errors`] that contain all failed assertions and soft assertions.\n\n\n### Potentially breaking change in Playwright Test Global Setup\n\nIt is unlikely that this change will affect you, no action is required if your tests keep running as they did.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2420,"to":2441}}}}],["dfd1c2da-3f4d-4c67-8638-c0a8958cd925",{"pageContent":"### Potentially breaking change in Playwright Test Global Setup\n\nIt is unlikely that this change will affect you, no action is required if your tests keep running as they did.\n\nWe've noticed that in rare cases, the set of tests to be executed was configured in the global setup by means of the environment variables. We also noticed some applications that were post processing the reporters' output in the global teardown. If you are doing one of the two, [learn more](https://github.com/microsoft/playwright/issues/12018)\n\n### Browser Versions\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n\n## Version 1.18\n\n<LiteYouTube\n  id=\"ABLYpw2BN_g\"\n  title=\"Playwright 1.18\"\n/>\n\n### Locator Improvements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2439,"to":2464}}}}],["285544de-8fac-4146-adaa-8367d608b26d",{"pageContent":"- Google Chrome 98\n- Microsoft Edge 98\n\n\n## Version 1.18\n\n<LiteYouTube\n  id=\"ABLYpw2BN_g\"\n  title=\"Playwright 1.18\"\n/>\n\n### Locator Improvements\n\n- [`method: Locator.dragTo`]\n- [`expect(locator).toBeChecked({ checked })`](./api/class-locatorassertions#locator-assertions-to-be-checked)\n- Each locator can now be optionally filtered by the text it contains:\n    ```js\n    await page.locator('li', { hasText: 'my item' }).locator('button').click();\n    ```\n    Read more in [locator documentation](./api/class-locator#locator-locator)\n\n\n### Testing API improvements\n\n- [`expect(response).toBeOK()`](./test-assertions)\n- [`testInfo.attach()`](./api/class-testinfo#test-info-attach)\n- [`test.info()`](./api/class-test#test-info)\n\n### Improved TypeScript Support","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2453,"to":2481}}}}],["1ede9497-286e-4af1-b3db-5164dff57c8f",{"pageContent":"- [`expect(response).toBeOK()`](./test-assertions)\n- [`testInfo.attach()`](./api/class-testinfo#test-info-attach)\n- [`test.info()`](./api/class-test#test-info)\n\n### Improved TypeScript Support\n\n1. Playwright Test now respects `tsconfig.json`'s [`baseUrl`](https://www.typescriptlang.org/tsconfig#baseUrl) and [`paths`](https://www.typescriptlang.org/tsconfig#paths), so you can use aliases\n1. There is a new environment variable `PW_EXPERIMENTAL_TS_ESM` that allows importing ESM modules in your TS code, without the need for the compile step. Don't forget the `.js` suffix when you are importing your esm modules. Run your tests as follows:\n\n```bash\nnpm i --save-dev @playwright/test@1.18.0-rc1\nPW_EXPERIMENTAL_TS_ESM=1 npx playwright test\n```\n\n### Create Playwright\n\nThe `npm init playwright` command is now generally available for your use:\n\n```sh\n# Run from your project's root directory\nnpm init playwright@latest\n# Or create a new project\nnpm init playwright@latest new-project\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2477,"to":2500}}}}],["7c04c99d-4a98-45a6-b1cd-5bf0186030ab",{"pageContent":"```sh\n# Run from your project's root directory\nnpm init playwright@latest\n# Or create a new project\nnpm init playwright@latest new-project\n```\n\nThis will create a Playwright Test configuration file, optionally add examples, a GitHub Action workflow and a first test `example.spec.ts`.\n\n### New APIs & changes\n\n- new [`testCase.repeatEachIndex`](./api/class-testcase#test-case-repeat-each-index) API\n- [`acceptDownloads`](./api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `true`\n\n### Breaking change: custom config options\n\nCustom config options are a convenient way to parametrize projects with different values. Learn more in [this guide](./test-parameterize#parameterized-projects).\n\nPreviously, any fixture introduced through [`method: Test.extend`] could be overridden in the [`property: TestProject.use`] config section. For example,\n\n```js\n// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2495,"to":2516}}}}],["213bd73d-b17b-4346-bf40-4a3808a8cf98",{"pageContent":"```js\n// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  myParameter: 'default',\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\nThe proper way to make a fixture parametrized in the config file is to specify `option: true` when defining the fixture. For example,\n\n```js\n// CORRECT: THIS SNIPPET WORKS SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  // Fixtures marked as \"option: true\" will get a value specified in the config,\n  // or fallback to the default value.\n  myParameter: ['default', { option: true }],\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\n### Browser Versions\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n## Version 1.17\n\n<LiteYouTube\n  id=\"7iyIdeoAP04\"\n  title=\"Playwright 1.17\"\n/>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2515,"to":2568}}}}],["e284c9fe-7615-4804-a30f-590f9e224c5c",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n## Version 1.17\n\n<LiteYouTube\n  id=\"7iyIdeoAP04\"\n  title=\"Playwright 1.17\"\n/>\n\n### Frame Locators\n\nPlaywright 1.17 introduces [frame locators](./api/class-framelocator) - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.\n\n![Graphics](https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png)\n\nFrame locators can be created with either [`method: Page.frameLocator`] or [`method: Locator.frameLocator`] method.\n\n```js\nconst locator = page.frameLocator('#my-iframe').locator('text=Submit');\nawait locator.click();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2557,"to":2585}}}}],["5da53bc4-f2af-490f-bc66-6388c2c57b10",{"pageContent":"```js\nconst locator = page.frameLocator('#my-iframe').locator('text=Submit');\nawait locator.click();\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update\n\nPlaywright Trace Viewer is now **available online** at https://trace.playwright.dev! Just drag-and-drop your `trace.zip` file to inspect its contents.\n\n> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.\n\n- Playwright Test traces now include sources by default (these could be turned off with tracing option)\n- Trace Viewer now shows test name\n- New trace metadata tab with browser details\n- Snapshots now have URL bar\n\n![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2578,"to":2598}}}}],["85f1a10b-53df-44f8-9f3e-1e83b922651c",{"pageContent":"![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update\n\n- HTML report now supports dynamic filtering\n- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.\n\n![image](https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png)\n\n### Ubuntu ARM64 support + more\n\n- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.\n- You can now use Playwright to install stable version of Edge on Linux:\n    ```bash\n    npx playwright install msedge\n    ```\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2596,"to":2613}}}}],["6295ad11-9207-4774-8e4f-b6e467fb3b98",{"pageContent":"### New APIs\n\n- Tracing now supports a [`'title'`](./api/class-tracing#tracing-start-option-title) option\n- Page navigations support a new [`'commit'`](./api/class-page#page-goto) waiting option\n- HTML reporter got [new configuration options](./test-reporters#html-reporter)\n- [`testConfig.snapshotDir` option](./api/class-testconfig#test-config-snapshot-dir)\n- [`testInfo.parallelIndex`](./api/class-testinfo#test-info-parallel-index)\n- [`testInfo.titlePath`](./api/class-testinfo#test-info-title-path)\n- [`testOptions.trace`](./api/class-testoptions#test-options-trace) has new options\n- [`expect.toMatchSnapshot`](./api/class-genericassertions.md) supports subdirectories\n- [`reporter.printsToStdio()`](./api/class-reporter#reporter-prints-to-stdio)\n\n\n## Version 1.16\n\n<LiteYouTube\n  id=\"OQKwFDmY64g\"\n  title=\"Playwright 1.16\"\n/>\n\n### 🎭 Playwright Test\n\n#### API Testing","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2613,"to":2635}}}}],["fc5a7b19-a69a-4875-85d4-47c0dfaf1ca7",{"pageContent":"## Version 1.16\n\n<LiteYouTube\n  id=\"OQKwFDmY64g\"\n  title=\"Playwright 1.16\"\n/>\n\n### 🎭 Playwright Test\n\n#### API Testing\n\nPlaywright 1.16 introduces new [API Testing](./api/class-apirequestcontext) that lets you send requests to the server directly from Node.js!\nNow you can:\n\n- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser\n\nTo do a request on behalf of Playwright's Page, use **new [`property: Page.request`] API**:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  // Do a GET request on behalf of page\n  const response = await page.request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\nTo do a stand-alone request from node.js to an API endpoint, use **new [`request` fixture](./api/class-fixtures#fixtures-request)**:\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2626,"to":2659}}}}],["df3c0fdb-c328-470d-9770-d8b20ea24045",{"pageContent":"To do a stand-alone request from node.js to an API endpoint, use **new [`request` fixture](./api/class-fixtures#fixtures-request)**:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ request }) => {\n  // Do a GET request on behalf of page\n  const response = await request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\nRead more about it in our [API testing guide](./api-testing).\n\n#### Response Interception\n\nIt is now possible to do response interception by combining [API Testing](./api-testing) with [request interception](./network#modify-requests).\n\nFor example, we can blur all the images on the page:\n\n```js\nimport { test, expect } from '@playwright/test';\nimport jimp from 'jimp'; // image processing library","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2656,"to":2678}}}}],["d4064423-9b9d-4631-a309-979e034f8558",{"pageContent":"For example, we can blur all the images on the page:\n\n```js\nimport { test, expect } from '@playwright/test';\nimport jimp from 'jimp'; // image processing library\n\ntest('response interception', async ({ page }) => {\n  await page.route('**/*.jpeg', async route => {\n    const response = await page._request.fetch(route.request());\n    const image = await jimp.read(await response.body());\n    await image.blur(5);\n    await route.fulfill({\n      response,\n      body: await image.getBufferAsync('image/jpeg'),\n    });\n  });\n  const response = await page.goto('https://playwright.dev');\n  expect(response.status()).toBe(200);\n});\n```\n\nRead more about [response interception](./network#modify-responses).\n\n#### New HTML reporter\n\nTry it out new HTML reporter with either `--reporter=html` or a `reporter` entry\nin `playwright.config.ts` file:\n\n```bash\n$ npx playwright test --reporter=html\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2674,"to":2704}}}}],["86c328aa-4145-48fb-bcaf-58cb4c5101aa",{"pageContent":"#### New HTML reporter\n\nTry it out new HTML reporter with either `--reporter=html` or a `reporter` entry\nin `playwright.config.ts` file:\n\n```bash\n$ npx playwright test --reporter=html\n```\n\nThe HTML reporter has all the information about tests and their failures, including surfacing\ntrace and image artifacts.\n\n![html reporter](https://user-images.githubusercontent.com/746130/138324311-94e68b39-b51a-4776-a446-f60037a77f32.png)\n\nRead more about [our reporters](./test-reporters#html-reporter).\n\n### 🎭 Playwright Library\n\n#### locator.waitFor\n\nWait for a locator to resolve to a single element with a given state.\nDefaults to the `state: 'visible'`.\n\nComes especially handy when working with lists:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  const completeness = page.locator('text=Success');\n  await completeness.waitFor();\n  expect(await page.screenshot()).toMatchSnapshot('screen.png');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2697,"to":2730}}}}],["dcd9475a-1792-4cd5-b67e-4b8ccf873fdf",{"pageContent":"Read more about [`method: Locator.waitFor`].\n\n### Docker support for Arm64\n\nPlaywright Docker image is now published for Arm64 so it can be used on Apple Silicon.\n\nRead more about [Docker integration](./docker).\n\n### 🎭 Playwright Trace Viewer\n\n- web-first assertions inside trace viewer\n- run trace viewer with `npx playwright show-trace` and drop trace files to the trace viewer PWA\n- API testing is integrated with trace viewer\n- better visual attribution of action targets\n\nRead more about [Trace Viewer](./trace-viewer).\n\n### Browser Versions\n\n- Chromium 97.0.4666.0\n- Mozilla Firefox 93.0\n- WebKit 15.4\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n\n## Version 1.15\n\n<LiteYouTube\n  id=\"6RwzsDeEj7Y\"\n  title=\"Playwright 1.15\"\n/>\n\n### 🎭 Playwright Library\n\n#### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n#### 📜 New Headers API","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2732,"to":2774}}}}],["f5810af2-7a98-405b-a26d-2c34ad9bc7c6",{"pageContent":"### 🎭 Playwright Library\n\n#### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n#### 📜 New Headers API\n\nPreviously it was not possible to get multiple header values of a response. This is now  possible and additional helper functions are available:\n\n- [`method: Request.allHeaders`]\n- [`method: Request.headersArray`]\n- [`method: Request.headerValue`]\n- [`method: Response.allHeaders`]\n- [`method: Response.headersArray`]\n- [`method: Response.headerValue`]\n- [`method: Response.headerValues`]\n\n#### 🌈 Forced-Colors emulation\n\nIts now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2768,"to":2790}}}}],["92127b0c-fd4a-40b2-9d1c-f0ea05a69173",{"pageContent":"Its now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n#### New APIs\n\n- [`method: Page.route`] accepts new `times` option to specify how many times this route should be matched.\n- [`method: Page.setChecked`] and [`method: Locator.setChecked`] were introduced to set the checked state of a checkbox.\n- [`method: Request.sizes`] Returns resource size information for given http request.\n- [`method: Tracing.startChunk`] - Start a new trace chunk.\n- [`method: Tracing.stopChunk`] - Stops a new trace chunk.\n\n### 🎭 Playwright Test\n\n#### 🤝 `test.parallel()` run tests in the same file in parallel\n\n```js\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {\n  });\n  test('runs in parallel 2', async ({ page }) => {\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2788,"to":2809}}}}],["38b4b576-3181-4fdc-b30e-fc8ee41b3f1d",{"pageContent":"```js\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {\n  });\n  test('runs in parallel 2', async ({ page }) => {\n  });\n});\n```\n\nBy default, tests in a single file are run in order. If you have many independent tests in a single file, you can now run them in parallel with [test.describe.parallel(title, callback)](./api/class-test#test-describe-parallel).\n\n#### 🛠 Add `--debug` CLI flag\n\nBy using `npx playwright test --debug` it will enable the [Playwright Inspector](./debug#playwright-inspector) for you to debug your tests.\n\n### Browser Versions\n\n- Chromium 96.0.4641.0\n- Mozilla Firefox 92.0\n- WebKit 15.0\n\n## Version 1.14\n\n<LiteYouTube\n  id=\"LczBDR0gOhk\"\n  title=\"Playwright 1.14\"\n/>\n\n### 🎭 Playwright Library\n\n#### ⚡️ New \"strict\" mode\n\nSelector ambiguity is a common problem in automation testing. **\"strict\" mode**\nensures that your selector points to a single element and throws otherwise.\n\nPass `strict: true` into your action calls to opt in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2802,"to":2837}}}}],["31d6ba8f-d8ce-47c6-b209-d692a9128a4c",{"pageContent":"Pass `strict: true` into your action calls to opt in.\n\n```js\n// This will throw if you have more than one button!\nawait page.click('button', { strict: true });\n```\n\n#### 📍 New [**Locators API**](./api/class-locator)\n\nLocator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.\n\nThe difference between the [Locator](./api/class-locator) and [ElementHandle](./api/class-elementhandle) is that the latter points to a particular element, while [Locator](./api/class-locator) captures the logic of how to retrieve that element.\n\nAlso, locators are **\"strict\" by default**!\n\n```js\nconst locator = page.locator('button');\nawait locator.click();\n```\n\nLearn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2837,"to":2859}}}}],["61a212d3-8a38-4919-9b15-ea17018d72ef",{"pageContent":"Learn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines\n\nReact and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.\n\n```js\nawait page.locator('_react=SubmitButton[enabled=true]').click();\nawait page.locator('_vue=submit-button[enabled=true]').click();\n```\n\nLearn more in the [react selectors documentation](./other-locators.md#react-locator) and the [vue selectors documentation](./other-locators.md#vue-locator).\n\n#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2857,"to":2870}}}}],["89f17228-b002-4c3e-8d94-7f558738d881",{"pageContent":"#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines\n\n- [`nth`](./other-locators.md#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.\n- [`visible`](./other-locators.md#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.\n\n```js\n// select the first button among all buttons\nawait button.click('button >> nth=0');\n// or if you are using locators, you can use first(), nth() and last()\nawait page.locator('button').first().click();\n\n// click a visible button\nawait button.click('button >> visible=true');\n```\n\n### 🎭 Playwright Test\n\n#### ✅ Web-First Assertions\n\n`expect` now supports lots of new web-first assertions.\n\nConsider the following example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2870,"to":2891}}}}],["120c5711-ac49-436d-9a77-33d0b7bc7d66",{"pageContent":"### 🎭 Playwright Test\n\n#### ✅ Web-First Assertions\n\n`expect` now supports lots of new web-first assertions.\n\nConsider the following example:\n\n```js\nawait expect(page.locator('.status')).toHaveText('Submitted');\n```\n\nPlaywright Test will be re-testing the node with the selector `.status` until fetched Node has the `\"Submitted\"` text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [`testProject.expect`](./api/class-testproject#test-project-expect) value in test config.\n\nBy default, the timeout for assertions is not set, so it'll wait forever, until the whole test times out.\n\nList of all new assertions:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2885,"to":2901}}}}],["a98466c3-327b-4302-abf2-85e9bf319e0b",{"pageContent":"- [`expect(locator).toBeChecked()`](./api/class-locatorassertions#locator-assertions-to-be-checked)\n- [`expect(locator).toBeDisabled()`](./api/class-locatorassertions#locator-assertions-to-be-disabled)\n- [`expect(locator).toBeEditable()`](./api/class-locatorassertions#locator-assertions-to-be-editable)\n- [`expect(locator).toBeEmpty()`](./api/class-locatorassertions#locator-assertions-to-be-empty)\n- [`expect(locator).toBeEnabled()`](./api/class-locatorassertions#locator-assertions-to-be-enabled)\n- [`expect(locator).toBeFocused()`](./api/class-locatorassertions#locator-assertions-to-be-focused)\n- [`expect(locator).toBeHidden()`](./api/class-locatorassertions#locator-assertions-to-be-hidden)\n- [`expect(locator).toBeVisible()`](./api/class-locatorassertions#locator-assertions-to-be-visible)\n- [`expect(locator).toContainText(text, options?)`](./api/class-locatorassertions#locator-assertions-to-contain-text)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2903,"to":2911}}}}],["b84a9f5e-e2f7-4e37-bce5-fa54944c7af0",{"pageContent":"- [`expect(locator).toContainText(text, options?)`](./api/class-locatorassertions#locator-assertions-to-contain-text)\n- [`expect(locator).toHaveAttribute(name, value)`](./api/class-locatorassertions#locator-assertions-to-have-attribute)\n- [`expect(locator).toHaveClass(expected)`](./api/class-locatorassertions#locator-assertions-to-have-class)\n- [`expect(locator).toHaveCount(count)`](./api/class-locatorassertions#locator-assertions-to-have-count)\n- [`expect(locator).toHaveCSS(name, value)`](./api/class-locatorassertions#locator-assertions-to-have-css)\n- [`expect(locator).toHaveId(id)`](./api/class-locatorassertions#locator-assertions-to-have-id)\n- [`expect(locator).toHaveJSProperty(name, value)`](./api/class-locatorassertions#locator-assertions-to-have-js-property)\n- [`expect(locator).toHaveText(expected, options)`](./api/class-locatorassertions#locator-assertions-to-have-text)\n- [`expect(page).toHaveTitle(title)`](./api/class-pageassertions#page-assertions-to-have-title)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2911,"to":2919}}}}],["e70ddc36-7a85-4355-93b6-c19da969e4ee",{"pageContent":"- [`expect(page).toHaveTitle(title)`](./api/class-pageassertions#page-assertions-to-have-title)\n- [`expect(page).toHaveURL(url)`](./api/class-pageassertions#page-assertions-to-have-url)\n- [`expect(locator).toHaveValue(value)`](./api/class-locatorassertions#locator-assertions-to-have-value)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2919,"to":2921}}}}],["983b885c-803a-4dcb-8acf-851e4f1b630f",{"pageContent":"#### ⛓ Serial mode with [`describe.serial`](./api/class-test#test-describe-serial)\n\nDeclares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.\n\n```js\ntest.describe.serial('group', () => {\n  test('runs first', async ({ page }) => { /* ... */ });\n  test('runs second', async ({ page }) => { /* ... */ });\n});\n```\n\nLearn more in the [documentation](./api/class-test#test-describe-serial).\n\n#### 🐾 Steps API with [`test.step`](./api/class-test#test-step)\n\nSplit long tests into multiple steps using `test.step()` API:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n  await test.step('news feed', async () => {\n    // ...\n  });\n});\n```\n\nStep information is exposed in reporters API.\n\n#### 🌎 Launch web server before running tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2923,"to":2955}}}}],["156d422c-a016-4b12-9834-66a065c8046b",{"pageContent":"Step information is exposed in reporters API.\n\n#### 🌎 Launch web server before running tests\n\nTo launch a server during the tests, use the [`webServer`](./test-webserver) option in the configuration file. The server will wait for a given url to be available before running the tests, and the url will be passed over to Playwright as a [`baseURL`](./api/class-testoptions#test-options-base-url) when creating a context.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start', // command to launch\n    url: 'http://127.0.0.1:3000', // url to await for\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\nLearn more in the [documentation](./test-webserver).\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n\n#### Playwright Test","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2953,"to":2983}}}}],["99dbe711-b74e-4407-b8ea-df78c127feab",{"pageContent":"Learn more in the [documentation](./test-webserver).\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n\n#### Playwright Test\n\n- **⚡️ Introducing [Reporter API](https://github.com/microsoft/playwright/blob/65a9037461ffc15d70cdc2055832a0c5512b227c/packages/playwright-test/types/testReporter.d.ts)** which is already used to create an [Allure Playwright reporter](https://github.com/allure-framework/allure-js/pull/297).\n- **⛺️ New [`baseURL` fixture](./test-configuration#basic-configuration)** to support relative paths in tests.\n\n\n#### Playwright\n\n- **🖖 Programmatic drag-and-drop support** via the [`method: Page.dragAndDrop`] API.\n- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [`method: Browser.newContext`].\n\n#### Tools\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n- Playwright Inspector can generate Playwright Test tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2971,"to":2997}}}}],["8a4edc03-d49d-452e-badb-64c1cb90defb",{"pageContent":"#### Tools\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n- Playwright Inspector can generate Playwright Test tests.\n\n#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n- [Chrome Extensions](./chrome-extensions.md)\n- [Playwright Test Annotations](./test-annotations.md)\n- [Playwright Test Configuration](./test-configuration.md)\n- [Playwright Test Fixtures](./test-fixtures.md)\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":2994,"to":3014}}}}],["6074cda1-99ce-46f4-b1ff-267cf2c641fb",{"pageContent":"#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs\n\n- new `baseURL` option in [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`method: Response.securityDetails`] and [`method: Response.serverAddr`]\n- [`method: Page.dragAndDrop`] and [`method: Frame.dragAndDrop`]\n- [`method: Download.cancel`]\n- [`method: Page.inputValue`], [`method: Frame.inputValue`] and [`method: ElementHandle.inputValue`]\n- new `force` option in [`method: Page.fill`], [`method: Frame.fill`], and [`method: ElementHandle.fill`]\n- new `force` option in [`method: Page.selectOption`], [`method: Frame.selectOption`], and [`method: ElementHandle.selectOption`]\n\n## Version 1.12\n\n#### ⚡️ Introducing Playwright Test\n\n[Playwright Test](./intro.md) is a **new test runner** built from scratch by Playwright team specifically to accommodate end-to-end testing needs:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3008,"to":3028}}}}],["ce084f48-14f0-432c-8f2f-99adb2c7e063",{"pageContent":"#### ⚡️ Introducing Playwright Test\n\n[Playwright Test](./intro.md) is a **new test runner** built from scratch by Playwright team specifically to accommodate end-to-end testing needs:\n\n- Run tests across all browsers.\n- Execute tests in parallel.\n- Enjoy context isolation and sensible defaults out of the box.\n- Capture videos, screenshots and other artifacts on failure.\n- Integrate your POMs as extensible fixtures.\n\nInstallation:\n```bash\nnpm i -D @playwright/test\n```\n\nSimple test `tests/foo.spec.ts`:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\nRunning:\n\n```bash\nnpx playwright test\n```\n\n👉  Read more in [Playwright Test documentation](./intro.md).\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3026,"to":3061}}}}],["ab207068-a7b5-49ca-8244-c23e4bec6b24",{"pageContent":"Running:\n\n```bash\nnpx playwright test\n```\n\n👉  Read more in [Playwright Test documentation](./intro.md).\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer\n\n[Playwright Trace Viewer](./trace-viewer.md) is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:\n- page DOM before and after each Playwright action\n- page rendering before and after each Playwright action\n- browser network during script execution\n\nTraces are recorded using the new [`property: BrowserContext.tracing`] API:\n\n```js\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3053,"to":3082}}}}],["033dd88d-4868-46fe-b427-20b11f02a705",{"pageContent":"const page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\nTraces are examined later with the Playwright CLI:\n\n\n```sh\nnpx playwright show-trace trace.zip\n```\n\nThat will open the following GUI:\n\n![image](https://user-images.githubusercontent.com/746130/121109654-d66c4480-c7c0-11eb-8d4d-eb70d2b03811.png)\n\n👉 Read more in [trace viewer documentation](./trace-viewer.md).\n\n\n#### Browser Versions\n\n- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3077,"to":3109}}}}],["49d8dcb6-5bb5-4007-9e2b-62eefbdd7f76",{"pageContent":"- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs\n\n- `reducedMotion` option in [`method: Page.emulateMedia`], [`method: BrowserType.launchPersistentContext`], [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`event: BrowserContext.request`]\n- [`event: BrowserContext.requestFailed`]\n- [`event: BrowserContext.requestFinished`]\n- [`event: BrowserContext.response`]\n- `tracesDir` option in [`method: BrowserType.launch`] and [`method: BrowserType.launchPersistentContext`]\n- new [`property: BrowserContext.tracing`] API namespace\n- new [`method: Download.page`] method\n\n## Version 1.11","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3100,"to":3120}}}}],["9f892098-15ab-4fa8-9231-ffbb559af862",{"pageContent":"## Version 1.11\n\n🎥  New video: [Playwright: A New Test Automation Framework for the Modern Web](https://youtu.be/_Jla6DyuEu4) ([slides](https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing))\n- We talked about Playwright\n- Showed engineering work behind the scenes\n- Did live demos with new features ✨\n- **Special thanks** to [applitools](http://applitools.com/) for hosting the event and inviting us!\n\n#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3120,"to":3134}}}}],["0f665b27-3d4f-42db-ba74-61a53580bcf3",{"pageContent":"#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs\n\n- support for **async predicates** across the API in methods such as [`method: Page.waitForRequest`] and others\n- new **emulation devices**: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4\n- new methods:\n    * [`method: Page.waitForURL`] to await navigations to URL\n    * [`method: Video.delete`] and [`method: Video.saveAs`] to manage screen recording\n- new options:\n    * `screen` option in the [`method: Browser.newContext`] method to emulate `window.screen` dimensions\n    * `position` option in [`method: Page.check`] and [`method: Page.uncheck`] methods\n    * `trial` option to dry-run actions in [`method: Page.check`], [`method: Page.uncheck`], [`method: Page.click`], [`method: Page.dblclick`], [`method: Page.hover`] and [`method: Page.tap`]\n\n## Version 1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3128,"to":3146}}}}],["2981a635-5bff-4e00-9e90-c6e923ea343f",{"pageContent":"## Version 1.10\n\n- [Playwright for Java v1.10](https://github.com/microsoft/playwright-java) is **now stable**!\n- Run Playwright against **Google Chrome** and **Microsoft Edge** stable channels with the [new channels API](./browsers).\n- Chromium screenshots are **fast** on Mac & Windows.\n\n#### Bundled Browser Versions\n\n- Chromium 90.0.4430.0\n- Mozilla Firefox 87.0b10\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3146,"to":3168}}}}],["fb79fbe9-4a05-4f38-af6f-4ae86d439d95",{"pageContent":"- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9\n\n- [Playwright Inspector](./debug.md) is a **new GUI tool** to author and debug your tests.\n  - **Line-by-line debugging** of your Playwright scripts, with play, pause and step-through.\n  - Author new scripts by **recording user actions**.\n  - **Generate element selectors** for your script by hovering over elements.\n  - Set the `PWDEBUG=1` environment variable to launch the Inspector\n\n- **Pause script execution** with [`method: Page.pause`] in headed mode. Pausing the page launches [Playwright Inspector](./debug.md) for debugging.\n\n- **New has-text pseudo-class** for CSS selectors. `:has-text(\"example\")` matches any element containing `\"example\"` somewhere inside, possibly in a child or a descendant element. See [more examples](./other-locators.md#css-matching-by-text).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3160,"to":3178}}}}],["de4508bb-375d-4c6d-a688-a8a94ef59245",{"pageContent":"- **Page dialogs are now auto-dismissed** during execution, unless a listener for `dialog` event is configured. [Learn more](./dialogs.md) about this.\n\n- [Playwright for Python](https://github.com/microsoft/playwright-python) is **now stable** with an idiomatic snake case API and pre-built [Docker image](./docker.md) to run tests in CI/CD.\n\n#### Browser Versions\n\n- Chromium 90.0.4421.0\n- Mozilla Firefox 86.0b10\n- WebKit 14.1\n\n#### New APIs\n- [`method: Page.pause`].\n\n\n## Version 1.8\n\n- [Selecting elements based on layout](./other-locators.md#css-matching-elements-based-on-layout) with `:left-of()`, `:right-of()`, `:above()` and `:below()`.\n- Playwright now includes [command line interface](./test-cli.md), former playwright-cli.\n  ```bash js\n  npx playwright --help\n  ```\n- [`method: Page.selectOption`] now waits for the options to be present.\n- New methods to [assert element state](./actionability#assertions) like [`method: Page.isEditable`].\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3180,"to":3204}}}}],["77e613d1-bc28-40c2-a552-4814b2d6ea4b",{"pageContent":"#### New APIs\n\n- [`method: ElementHandle.isChecked`].\n- [`method: ElementHandle.isDisabled`].\n- [`method: ElementHandle.isEditable`].\n- [`method: ElementHandle.isEnabled`].\n- [`method: ElementHandle.isHidden`].\n- [`method: ElementHandle.isVisible`].\n- [`method: Page.isChecked`].\n- [`method: Page.isDisabled`].\n- [`method: Page.isEditable`].\n- [`method: Page.isEnabled`].\n- [`method: Page.isHidden`].\n- [`method: Page.isVisible`].\n- New option `'editable'` in [`method: ElementHandle.waitForElementState`].\n\n#### Browser Versions\n\n- Chromium 90.0.4392.0\n- Mozilla Firefox 85.0b5\n- WebKit 14.1\n\n## Version 1.7","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3204,"to":3226}}}}],["f8d45982-a1e4-4268-afb7-08c66f2697bf",{"pageContent":"## Version 1.7\n\n- **New Java SDK**: [Playwright for Java](https://github.com/microsoft/playwright-java) is now on par with [JavaScript](https://github.com/microsoft/playwright), [Python](https://github.com/microsoft/playwright-python) and [.NET bindings](https://github.com/microsoft/playwright-dotnet).\n- **Browser storage API**: New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.\n- **New CSS selectors**: We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces [new CSS extensions](./other-locators.md#css-locator) and there's more coming soon.\n- **New website**: The docs website at [playwright.dev](https://playwright.dev/) has been updated and is now built with [Docusaurus](https://v2.docusaurus.io/).\n- **Support for Apple Silicon**: Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3226,"to":3234}}}}],["22bb6a54-f14e-458c-8bc7-953a82ec354a",{"pageContent":"#### New APIs\n\n- [`method: BrowserContext.storageState`] to get current state for later reuse.\n- `storageState` option in [`method: Browser.newContext`] and [`method: Browser.newPage`] to setup browser context state.\n\n#### Browser Versions\n\n- Chromium 89.0.4344.0\n- Mozilla Firefox 84.0b9\n- WebKit 14.1","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-js.md","title":"src-release-notes-js","url":"https://playwright.dev/docs/src-release-notes-js","loc":{"lines":{"from":3234,"to":3243}}}}],["a31b4e85-d110-4e12-a38c-4463e41c2751",{"pageContent":"---\nid: release-notes\ntitle: \"Release notes\"\ntoc_max_heading_level: 2\n---\n\n## Version 1.52\n\n### Highlights\n \n- New method [`method: LocatorAssertions.toContainClass`] to ergonomically assert individual class names on the element.\n\n  ```python\n    expect(page.get_by_role('listitem', name='Ship v1.52')).to_contain_class('done')\n  ```\n\n- [Aria Snapshots](./aria-snapshots.md) got two new properties: [`/children`](./aria-snapshots.md#strict-matching) for strict matching and `/url` for links.\n\n  ```python\n  expect(locator).to_match_aria_snapshot(\"\"\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  \"\"\")\n  ```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1,"to":30}}}}],["eb3f4840-1177-4651-80e1-9187d6d44af0",{"pageContent":"### Miscellaneous\n\n- New option [`option: APIRequest.newContext.maxRedirects`] in [`method: APIRequest.newContext`] to control the maximum number of redirects.\n- New option `ref` in [`method: Locator.ariaSnapshot`] to generate reference for each element in the snapshot which can later be used to locate the element.\n\n### Breaking Changes\n\n- Glob URL patterns in methods like [`method: Page.route`] do not support `?` and `[]` anymore. We recommend using regular expressions instead.\n- Method [`method: Route.continue`] does not allow to override the `Cookie` header anymore. If a `Cookie` header is provided, it will be ignored, and the cookie will be loaded from the browser's cookie store. To set custom cookies, use [`method: BrowserContext.addCookies`].\n- macOS 13 is now deprecated and will no longer receive WebKit updates. Please upgrade to a more recent macOS version to continue benefiting from the latest WebKit improvements.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":30,"to":41}}}}],["ce8edd52-9281-49ec-86c2-99f437af779a",{"pageContent":"### Browser Versions\n\n- Chromium 136.0.7103.25\n- Mozilla Firefox 137.0\n- WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 135\n- Microsoft Edge 135\n\n## Version 1.51\n\n### Highlights\n\n* New option [`option: BrowserContext.storageState.indexedDB`] for [`method: BrowserContext.storageState`] allows to save and restore IndexedDB contents. Useful when your application uses [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) to store authentication tokens, like Firebase Authentication.\n\n  Here is an example following the [authentication guide](./auth.md#reusing-signed-in-state):\n\n  ```python\n  # Save storage state into the file. Make sure to include IndexedDB.\n  storage = await context.storage_state(path=\"state.json\", indexed_db=True)\n\n  # Create a new context with the saved storage state.\n  context = await browser.new_context(storage_state=\"state.json\")\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":41,"to":66}}}}],["0fe8132d-e1d9-4723-bc3a-7f35726566e5",{"pageContent":"# Create a new context with the saved storage state.\n  context = await browser.new_context(storage_state=\"state.json\")\n  ```\n\n* New option [`option: Locator.filter.visible`] for [`method: Locator.filter`] allows matching only visible elements.\n\n  ```python\n  # Ignore invisible todo items.\n  todo_items = page.get_by_test_id(\"todo-item\").filter(visible=True)\n  # Check there are exactly 3 visible ones.\n  await expect(todo_items).to_have_count(3)\n  ```\n\n* New option `contrast` for methods [`method: Page.emulateMedia`] and [`method: Browser.newContext`] allows to emulate the `prefers-contrast` media feature.\n\n* New option [`option: APIRequest.newContext.failOnStatusCode`] makes all fetch requests made through the [APIRequestContext] throw on response codes other than 2xx and 3xx.\n\n### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 133\n* Microsoft Edge 133","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":64,"to":90}}}}],["cf65d7e1-9e46-4047-9f11-45a86d8b476c",{"pageContent":"### Browser Versions\n\n* Chromium 134.0.6998.35\n* Mozilla Firefox 135.0\n* WebKit 18.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 133\n* Microsoft Edge 133\n\n\n## Version 1.50\n\n### Async Pytest Plugin\n\n* [Playwright's Pytest plugin](./test-runners.md) now has support for [Async Fixtures](https://playwright.dev/python/docs/test-runners#async-fixtures).\n\n### Miscellaneous\n\n* Added method [`method: LocatorAssertions.toHaveAccessibleErrorMessage`] to assert the Locator points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).\n\n### UI updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":81,"to":103}}}}],["ce2a9f31-7e6a-497f-9e8e-5ce2848592d9",{"pageContent":"### UI updates\n\n* New button in Codegen for picking elements to produce aria snapshots.\n* Additional details (such as keys pressed) are now displayed alongside action API calls in traces.\n* Display of `canvas` content in traces is error-prone. Display is now disabled by default, and can be enabled via the `Display canvas content` UI setting.\n* `Call` and `Network` panels now display additional time information.\n\n### Breaking\n\n* [`method: LocatorAssertions.toBeEditable`] and [`method: Locator.isEditable`] now throw if the target element is not `<input>`, `<select>`, or a number of other editable elements.\n\n### Browser Versions\n\n* Chromium 133.0.6943.16\n* Mozilla Firefox 134.0\n* WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n### Aria snapshots","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":103,"to":127}}}}],["0fdfb1d9-80a9-4d62-87b5-74a31b812d7a",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 132\n* Microsoft Edge 132\n\n## Version 1.49\n\n### Aria snapshots\n\nNew assertion [`method: LocatorAssertions.toMatchAriaSnapshot`] verifies page structure by comparing to an expected accessibility tree, represented as YAML.\n\n```python\npage.goto(\"https://playwright.dev\")\nexpect(page.locator('body')).to_match_aria_snapshot('''\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n  - main:\n    - img \"Browsers (Chromium, Firefox, WebKit)\"\n    - heading \"Any browser • Any platform • One API\"\n''')\n```\n\nYou can generate this assertion with [Test Generator](./codegen) or by calling [`method: Locator.ariaSnapshot`].\n\nLearn more in the [aria snapshots guide](./aria-snapshots).\n\n### Tracing groups\n\nNew method [`method: Tracing.group`] allows you to visually group actions in the trace viewer.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":120,"to":150}}}}],["f2735b1a-be3b-4914-8a32-d134e4b2734b",{"pageContent":"Learn more in the [aria snapshots guide](./aria-snapshots).\n\n### Tracing groups\n\nNew method [`method: Tracing.group`] allows you to visually group actions in the trace viewer.\n\n```python\n# All actions between group and group_end\n# will be shown in the trace viewer as a group.\npage.context.tracing.group(\"Open Playwright.dev > API\")\npage.goto(\"https://playwright.dev/\")\npage.get_by_role(\"link\", name=\"API\").click()\npage.context.tracing.group_end()\n```\n\n### Breaking: `chrome` and `msedge` channels switch to new headless mode\n\nThis change affects you if you're using one of the following channels in your `playwright.config.ts`:\n- `chrome`, `chrome-dev`, `chrome-beta`, or `chrome-canary`\n- `msedge`, `msedge-dev`, `msedge-beta`, or `msedge-canary`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":146,"to":165}}}}],["d7c4688b-e877-48de-aae6-527454556ea0",{"pageContent":"After updating to Playwright v1.49, run your test suite. If it still passes, you're good to go. If not, you will probably need to update your snapshots, and adapt some of your test code around PDF viewers and extensions. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for more details.\n\n### Try new Chromium headless\n\nYou can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):\n\n> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.\n\nSee [issue #33566](https://github.com/microsoft/playwright/issues/33566) for the list of possible breakages you could encounter and more details on Chromium headless. Please file an issue if you see any problems after opting in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":167,"to":175}}}}],["370d1e41-de67-4c74-8d1a-726159caad94",{"pageContent":"```bash python\npytest test_login.py --browser-channel chromium\n```\n\n### Miscellaneous\n\n- There will be no more updates for WebKit on Ubuntu 20.04 and Debian 11. We recommend updating your OS to a later version.\n- `<canvas>` elements inside a snapshot now draw a preview.\n- Python 3.8 is not supported anymore.\n\n### Browser Versions\n\n- Chromium 131.0.6778.33\n- Mozilla Firefox 132.0\n- WebKit 18.2\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 130\n- Microsoft Edge 130\n\n\n## Version 1.48\n\n### WebSocket routing\n\nNew methods [`method: Page.routeWebSocket`] and [`method: BrowserContext.routeWebSocket`] allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a `\"request\"` with a `\"response\"`.\n\n```python\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":177,"to":208}}}}],["90acb0ce-ac2b-49d7-bfc6-23edbdd372cd",{"pageContent":"```python\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\npage.route_web_socket(\"/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\nSee [WebSocketRoute] for more details.\n\n### UI updates\n\n- New \"copy\" buttons for annotations and test location in the HTML report.\n- Route method calls like [`method: Route.fulfill`] are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.\n- New \"Copy as cURL\" and \"Copy as fetch\" buttons for requests in the network tab.\n\n### Miscellaneous\n\n- New method [`method: Page.requestGC`] may help detect memory leaks.\n- Requests made by [APIRequestContext] now record detailed timing and security information in the HAR.\n\n### Browser Versions\n\n- Chromium 130.0.6723.19\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":205,"to":234}}}}],["e91cc640-14a7-4e7a-be30-7c7dcbcb46fe",{"pageContent":"### Browser Versions\n\n- Chromium 130.0.6723.19\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 129\n- Microsoft Edge 129\n\n\n## Version 1.47\n\n### Network Tab improvements\n\nThe Network tab in the trace viewer has several nice improvements:\n\n- filtering by asset type and URL\n- better display of query string parameters\n- preview of font assets\n\n![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":228,"to":252}}}}],["0df7173e-6b22-44cc-a945-91f7b0d0d583",{"pageContent":"![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)\n\n### Miscellaneous\n\n- The `mcr.microsoft.com/playwright/python:v1.47.0` now serves a Playwright image based on Ubuntu 24.04 Noble.\n  To use the 22.04 jammy-based image, please use `mcr.microsoft.com/playwright/python:v1.47.0-jammy` instead.\n- The `:latest`/`:focal`/`:jammy` tag for Playwright Docker images is no longer being published. Pin to a specific version for better stability and reproducibility.\n- TLS client certificates can now be passed from memory by passing [`option: Browser.newContext.clientCertificates.cert`] and [`option: Browser.newContext.clientCertificates.key`] as bytes instead of file paths.\n- [`option: Locator.selectOption.noWaitAfter`] in [`method: Locator.selectOption`] was deprecated.\n- We've seen reports of WebGL in Webkit misbehaving on GitHub Actions `macos-13`. We recommend upgrading GitHub Actions to `macos-14`.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":250,"to":261}}}}],["bd147dbf-a1d6-4427-b05b-1747d76f01de",{"pageContent":"### Browser Versions\n\n- Chromium 129.0.6668.29\n- Mozilla Firefox 130.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 128\n- Microsoft Edge 128\n\n## Version 1.46\n\n### TLS Client Certificates\n\nPlaywright now allows to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.\n\nYou can provide client certificates as a parameter of [`method: Browser.newContext`] and [`method: APIRequest.newContext`]. The following snippet sets up a client certificate for `https://example.com`:\n\n```python\ncontext = browser.new_context(\n    client_certificates=[\n        {\n            \"origin\": \"https://example.com\",\n            \"certPath\": \"client-certificates/cert.pem\",\n            \"keyPath\": \"client-certificates/key.pem\",\n        }\n    ],\n)\n```\n\n### Trace Viewer Updates","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":261,"to":292}}}}],["0d7d155f-3f46-420a-97ed-8ca30cbe4db1",{"pageContent":"### Trace Viewer Updates\n\n- Content of text attachments is now rendered inline in the attachments pane.\n- New setting to show/hide routing actions like [`method: Route.continue`].\n- Request method and status are shown in the network details tab.\n- New button to copy source file location to clipboard.\n- Metadata pane now displays the `base_url`.\n\n### Miscellaneous\n\n- New `maxRetries` option in [`method: APIRequestContext.fetch`] which retries on the `ECONNRESET` network error.\n\n### Browser Versions\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n\n## Version 1.45\n\n### Clock","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":292,"to":318}}}}],["67528c96-f572-4379-a120-0876e31321ca",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n\n## Version 1.45\n\n### Clock\n\nUtilizing the new [Clock] API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:\n* testing with predefined time;\n* keeping consistent time and timers;\n* monitoring inactivity;\n* ticking through time manually.\n\n```python\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\npage.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\npage.goto(\"http://localhost:3333\")\n\n# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":310,"to":337}}}}],["f40b91b5-a499-47a4-8f6d-656ac0f25037",{"pageContent":"# Assert the page state.\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\npage.clock.fast_forward(\"30:00\")\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\nSee [the clock guide](./clock.md) for more details.\n\n### Miscellaneous\n\n- Method [`method: Locator.setInputFiles`] now supports uploading a directory for `<input type=file webkitdirectory>` elements.\n  ```python\n  page.get_by_label(\"Upload directory\").set_input_files('mydir')\n  ```\n\n- Multiple methods like [`method: Locator.click`] or [`method: Locator.press`] now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.\n  ```python\n  # Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\n  page.keyboard.press(\"ControlOrMeta+S\")\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":336,"to":357}}}}],["436b36d4-1b82-4f14-80f7-40aca9b6cbcf",{"pageContent":"- New property `httpCredentials.send` in [`method: APIRequest.newContext`] that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.\n\n- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.\n\n- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.\n\n### Browser Versions\n\n* Chromium 127.0.6533.5\n* Mozilla Firefox 127.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 126\n* Microsoft Edge 126\n\n## Version 1.44\n\n### New APIs\n\n**Accessibility assertions**\n\n- [`method: LocatorAssertions.toHaveAccessibleName`] checks if the element has the specified accessible name:\n  ```python\n  locator = page.get_by_role(\"button\")\n  expect(locator).to_have_accessible_name(\"Submit\")\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":359,"to":386}}}}],["c2d8b489-20c4-4a71-b311-19eabdcf0e25",{"pageContent":"- [`method: LocatorAssertions.toHaveAccessibleDescription`] checks if the element has the specified accessible description:\n  ```python\n  locator = page.get_by_role(\"button\")\n  expect(locator).to_have_accessible_description(\"Upload a photo\")\n  ```\n\n- [`method: LocatorAssertions.toHaveRole`] checks if the element has the specified ARIA role:\n  ```python\n  locator = page.get_by_test_id(\"save-button\")\n  expect(locator).to_have_role(\"button\")\n  ```\n\n**Locator handler**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":388,"to":400}}}}],["4ba581da-b1ff-492b-a826-832988d400e0",{"pageContent":"**Locator handler**\n\n- After executing the handler added with [`method: Page.addLocatorHandler`], Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `no_wait_after` option.\n- You can use new `times` option in [`method: Page.addLocatorHandler`] to specify maximum number of times the handler should be run.\n- The handler in [`method: Page.addLocatorHandler`] now accepts the locator as argument.\n- New [`method: Page.removeLocatorHandler`] method for removing previously added locator handlers.\n\n```python\nlocator = page.get_by_text(\"This interstitial covers the button\")\npage.add_locator_handler(locator, lambda overlay: overlay.locator(\"#close\").click(), times=3, no_wait_after=True)\n# Run your tests that can be interrupted by the overlay.\n# ...\npage.remove_locator_handler(locator)\n```\n\n**Miscellaneous options**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":400,"to":415}}}}],["e4a27766-cb76-4026-abb5-17517c98f0b5",{"pageContent":"**Miscellaneous options**\n\n- [`method: PageAssertions.toHaveURL`] now supports `ignore_case` [option](./api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n\n### Browser Versions\n\n* Chromium 125.0.6422.14\n* Mozilla Firefox 125.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 124\n* Microsoft Edge 124\n\n## Version 1.43\n\n### New APIs\n\n- Method [`method: BrowserContext.clearCookies`] now supports filters to remove only some cookies.\n\n  ```python\n  # Clear all cookies.\n  context.clear_cookies()\n  # New: clear cookies with a particular name.\n  context.clear_cookies(name=\"session-id\")\n  # New: clear cookies for a particular domain.\n  context.clear_cookies(domain=\"my-origin.com\")\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":415,"to":443}}}}],["44bfdf4e-fb29-4d77-952a-144d8bd05413",{"pageContent":"- New method [`method: Locator.contentFrame`] converts a [Locator] object to a [FrameLocator]. This can be useful when you have a [Locator] object obtained somewhere, and later on would like to interact with the content inside the frame.\n\n  ```python\n  locator = page.locator(\"iframe[name='embedded']\")\n  # ...\n  frame_locator = locator.content_frame\n  frame_locator.getByRole(\"button\").click()\n  ```\n\n- New method [`method: FrameLocator.owner`] converts a [FrameLocator] object to a [Locator]. This can be useful when you have a [FrameLocator] object obtained somewhere, and later on would like to interact with the `iframe` element.\n\n  ```python\n  frame_locator = page.frame_locator(\"iframe[name='embedded']\")\n  # ...\n  locator = frame_locator.owner\n  expect(locator).to_be_visible()\n  ```\n\n- Conda builds are now published for macOS-arm64 and Linux-arm64.\n\n### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":445,"to":469}}}}],["634facbe-7a3e-481c-9986-ce0319cbfb1c",{"pageContent":"- Conda builds are now published for macOS-arm64 and Linux-arm64.\n\n### Browser Versions\n\n* Chromium 124.0.6367.8\n* Mozilla Firefox 124.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 123\n* Microsoft Edge 123\n\n## Version 1.42\n\n### New Locator Handler\n\nNew method [`method: Page.addLocatorHandler`] registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears.\n\n```python\n# Setup the handler.\npage.add_locator_handler(\n    page.get_by_role(\"heading\", name=\"Hej! You are in control of your cookies.\"),\n    lambda: page.get_by_role(\"button\", name=\"Accept all\").click(),\n)\n# Write the test as usual.\npage.goto(\"https://www.ikea.com/\")\npage.get_by_role(\"link\", name=\"Collection of blue and white\").click()\nexpect(page.get_by_role(\"heading\", name=\"Light and easy\")).to_be_visible()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":463,"to":492}}}}],["03b5c195-1198-41f3-a5d5-89a9296f2c15",{"pageContent":"### New APIs\n\n- [`method: Page.pdf`] accepts two new options [`option: Page.pdf.tagged`] and [`option: Page.pdf.outline`].\n\n### Announcements\n\n* ⚠️ Ubuntu 18 is not supported anymore.\n\n### Browser Versions\n\n* Chromium 123.0.6312.4\n* Mozilla Firefox 123.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":494,"to":515}}}}],["910d227d-c504-4013-8895-8033d4459d1c",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 122\n* Microsoft Edge 123\n\n## Version 1.41\n\n### New APIs\n\n- New method [`method: Page.unrouteAll`] removes all routes registered by [`method: Page.route`] and [`method: Page.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New method [`method: BrowserContext.unrouteAll`] removes all routes registered by [`method: BrowserContext.route`] and [`method: BrowserContext.routeFromHAR`]. Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New options [`option: Page.screenshot.style`] in [`method: Page.screenshot`] and [`option: Locator.screenshot.style`] in [`method: Locator.screenshot`] to add custom CSS to the page before taking a screenshot.\n\n### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":508,"to":527}}}}],["a29f1c13-979d-4302-ace8-3c37e95c91a5",{"pageContent":"### Browser Versions\n\n* Chromium 121.0.6167.57\n* Mozilla Firefox 121.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 120\n* Microsoft Edge 120\n\n## Version 1.40\n\n### Test Generator Update\n\n![Playwright Test Generator](https://github.com/microsoft/playwright/assets/9881434/e8d67e2e-f36d-4301-8631-023948d3e190)\n\nNew tools to generate assertions:\n- \"Assert visibility\" tool generates [`method: LocatorAssertions.toBeVisible`].\n- \"Assert value\" tool generates [`method: LocatorAssertions.toHaveValue`].\n- \"Assert text\" tool generates [`method: LocatorAssertions.toContainText`].\n\nHere is an example of a generated test with assertions:\n\n```python\nfrom playwright.sync_api import Page, expect","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":521,"to":546}}}}],["a34e15df-3680-48a2-b293-3d0907cca7e7",{"pageContent":"Here is an example of a generated test with assertions:\n\n```python\nfrom playwright.sync_api import Page, expect\n\ndef test_example(page: Page) -> None:\n    page.goto(\"https://playwright.dev/\")\n    page.get_by_role(\"link\", name=\"Get started\").click()\n    expect(page.get_by_label(\"Breadcrumbs\").get_by_role(\"list\")).to_contain_text(\"Installation\")\n    expect(page.get_by_label(\"Search\")).to_be_visible()\n    page.get_by_label(\"Search\").click()\n    page.get_by_placeholder(\"Search docs\").fill(\"locator\")\n    expect(page.get_by_placeholder(\"Search docs\")).to_have_value(\"locator\");\n```\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":543,"to":558}}}}],["77ee64c2-c9e4-487d-94fc-9050d4ac3dfb",{"pageContent":"### New APIs\n\n- Options [`option: Page.close.reason`] in [`method: Page.close`], [`option: BrowserContext.close.reason`] in [`method: BrowserContext.close`] and [`option: Browser.close.reason`] in [`method: Browser.close`]. Close reason is reported for all operations interrupted by the closure.\n- Option [`option: BrowserType.launchPersistentContext.firefoxUserPrefs`] in [`method: BrowserType.launchPersistentContext`].\n\n### Other Changes\n\n- Method [`method: Download.path`] throws an error for failed and cancelled downloads.\n\n### Browser Versions\n\n* Chromium 120.0.6099.28\n* Mozilla Firefox 119.0\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 119\n* Microsoft Edge 119\n\n## Version 1.39\n\nEvergreen browsers update.\n\n### Browser Versions\n\n* Chromium 119.0.6045.9\n* Mozilla Firefox 118.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 118\n* Microsoft Edge 118\n\n## Version 1.38","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":558,"to":593}}}}],["801de11b-dbf4-4e7c-8225-9a2479dec5b7",{"pageContent":"* Chromium 119.0.6045.9\n* Mozilla Firefox 118.0.1\n* WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 118\n* Microsoft Edge 118\n\n## Version 1.38\n\n### Trace Viewer Updates\n\n![Playwright Trace Viewer](https://github.com/microsoft/playwright/assets/746130/0c41e20d-c54b-4600-8ca8-1cbb6393ddef)\n\n1. Zoom into time range.\n1. Network panel redesign.\n\n### New APIs\n\n- [`event: BrowserContext.webError`]\n- [`method: Locator.pressSequentially`]\n\n### Deprecations\n\n* The following methods were deprecated: [`method: Page.type`], [`method: Frame.type`],\n  [`method: Locator.type`] and [`method: ElementHandle.type`].\n  Please use [`method: Locator.fill`] instead which is much faster. Use\n  [`method: Locator.pressSequentially`] only if there is a special keyboard\n  handling on the page, and you need to press keys one-by-one.\n\n### Browser Versions\n\n* Chromium 117.0.5938.62\n* Mozilla Firefox 117.0\n* WebKit 17.0","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":584,"to":619}}}}],["8f481508-64c5-45a9-a032-4295485f6341",{"pageContent":"### Browser Versions\n\n* Chromium 117.0.5938.62\n* Mozilla Firefox 117.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 116\n* Microsoft Edge 116\n\n## Version 1.37\n\n### Highlights\n\n* New [--full-page-screenshot](./test-runners.md#cli-arguments) command line flag allows taking a\nfull page screenshot on failure.\n\n* It is now possible to override the context options for a single test by using the [browser_context_args](./test-runners.md#fixtures) marker.\n\n* `pytest-playwright` is now also getting published [on Anaconda](https://anaconda.org/Microsoft/pytest-playwright/)\n\n### 📚 Debian 12 Bookworm Support\n\nPlaywright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":615,"to":642}}}}],["9d07490d-5e8b-4a5b-983c-ebf576ddf349",{"pageContent":"Playwright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit.\nLet us know if you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ | ✅ |\n\n### Browser Versions\n\n* Chromium 116.0.5845.82\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 115\n* Microsoft Edge 115\n\n## Version 1.36\n\n🏝️ Summer maintenance release.\n\n### Browser Versions\n\n* Chromium 115.0.5790.75\n* Mozilla Firefox 115.0\n* WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.35\n\n### Highlights\n\n* New option `mask_color` for methods [`method: Page.screenshot`] and [`method: Locator.screenshot`] to change default masking color.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":639,"to":680}}}}],["33def50b-4bdc-4d37-b3a6-86b8469d0b29",{"pageContent":"## Version 1.35\n\n### Highlights\n\n* New option `mask_color` for methods [`method: Page.screenshot`] and [`method: Locator.screenshot`] to change default masking color.\n\n* New `uninstall` CLI command to uninstall browser binaries:\n  ```bash\n  $ playwright uninstall # remove browsers installed by this installation\n  $ playwright uninstall --all # remove all ever-install Playwright browsers\n  ```\n\n### Browser Versions\n\n* Chromium 115.0.5790.13\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 114\n* Microsoft Edge 114\n\n## Version 1.34\n\n### Highlights\n\n* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```python\n    button = page.get_by_role(\"button\").and_(page.get_by_title(\"Subscribe\"))\n    ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":676,"to":707}}}}],["0489be26-90da-471a-9a03-ef1407759360",{"pageContent":"### Highlights\n\n* New [`method: Locator.and`] to create a locator that matches both locators.\n\n    ```python\n    button = page.get_by_role(\"button\").and_(page.get_by_title(\"Subscribe\"))\n    ```\n\n* New events [`event: BrowserContext.console`] and [`event: BrowserContext.dialog`] to subscribe to any dialogs\n  and console messages from any page from the given browser context. Use the new methods [`method: ConsoleMessage.page`]\n  and [`method: Dialog.page`] to pin-point event source.\n\n### Browser Versions\n\n* Chromium 114.0.5735.26\n* Mozilla Firefox 113.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":701,"to":726}}}}],["97886149-6f27-4aa4-bd0c-818ecbeb3e54",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 113\n* Microsoft Edge 113\n\n## Version 1.33\n\n### Locators Update\n\n* Use [`method: Locator.or`] to create a locator that matches either of the two locators.\n  Consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead.\n  In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly:\n\n  ```python\n  new_email = page.get_by_role(\"button\", name=\"New email\")\n  dialog = page.get_by_text(\"Confirm security settings\")\n  expect(new_email.or_(dialog)).is_visible()\n  if (dialog.is_visible()):\n    page.get_by_role(\"button\", name=\"Dismiss\").click()\n  new_email.click()\n  ```\n* Use new options [`option: Locator.filter.hasNot`] and [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n  to find elements that **do not match** certain conditions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":719,"to":741}}}}],["0dd49341-108d-431c-bb59-63a9230289c1",{"pageContent":"```python\n  row_locator = page.locator(\"tr\")\n  row_locator.filter(has_not_text=\"text in column 1\").filter(\n      has_not=page.get_by_role(\"button\", name=\"column 2 button\")\n  ).screenshot()\n  ```\n* Use new web-first assertion [`method: LocatorAssertions.toBeAttached`] to ensure that the element\n  is present in the page's DOM. Do not confuse with the [`method: LocatorAssertions.toBeVisible`] that ensures that\n  element is both attached & visible.\n\n### New APIs\n\n- [`method: Locator.or`]\n- New option [`option: Locator.filter.hasNot`] in [`method: Locator.filter`]\n- New option [`option: Locator.filter.hasNotText`] in [`method: Locator.filter`]\n- [`method: LocatorAssertions.toBeAttached`]\n- New option [`option: Route.fetch.timeout`] in [`method: Route.fetch`]\n\n### ⚠️ Breaking change","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":743,"to":761}}}}],["a5a5f3de-bc17-487b-8e84-c7ca8c753b2a",{"pageContent":"### ⚠️ Breaking change\n\n* The `mcr.microsoft.com/playwright/python:v1.33.0` now serves a Playwright image based on Ubuntu Jammy.\n  To use the focal-based image, please use `mcr.microsoft.com/playwright/python:v1.33.0-focal` instead.\n\n### Browser Versions\n\n* Chromium 113.0.5672.53\n* Mozilla Firefox 112.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 112\n* Microsoft Edge 112\n\n\n## Version 1.32\n\n### New APIs\n\n- Custom expect message, see [test assertions documentation](./test-assertions.md#custom-expect-message).\n- New options [`option: Page.routeFromHAR.updateMode`] and [`option: Page.routeFromHAR.updateContent`] in [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`].\n- Chaining existing locator objects, see [locator docs](./locators.md#matching-inside-a-locator) for details.\n- New option [`option: Tracing.startChunk.name`] in method [`method: Tracing.startChunk`].\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":761,"to":787}}}}],["fd4f0a59-1d94-4e62-bc3e-868f199315c9",{"pageContent":"### Browser Versions\n\n* Chromium 112.0.5615.29\n* Mozilla Firefox 111.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 111\n* Microsoft Edge 111\n\n\n## Version 1.31\n\n### New APIs\n\n- New assertion [`method: LocatorAssertions.toBeInViewport`] ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n\n  ```python\n  from playwright.sync_api import expect\n\n  locator = page.get_by_role(\"button\")\n\n  # Make sure at least some part of element intersects viewport.\n  expect(locator).to_be_in_viewport()\n\n  # Make sure element is fully outside of viewport.\n  expect(locator).not_to_be_in_viewport()\n\n  # Make sure that at least half of the element intersects viewport.\n  expect(locator).to_be_in_viewport(ratio=0.5)\n  ```\n\n### Miscellaneous","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":787,"to":821}}}}],["ea0956ef-21f3-4bf4-9918-9eaa49f980d0",{"pageContent":"# Make sure that at least half of the element intersects viewport.\n  expect(locator).to_be_in_viewport(ratio=0.5)\n  ```\n\n### Miscellaneous\n\n- DOM snapshots in trace viewer can be now opened in a separate window.\n- New option [`option: Route.fetch.maxRedirects`] for method [`method: Route.fetch`].\n- Playwright now supports Debian 11 arm64.\n- Official [docker images](./docker.md) now include Node 18 instead of Node 16.\n\n### Browser Versions\n\n* Chromium 111.0.5563.19\n* Mozilla Firefox 109.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 110\n* Microsoft Edge 110\n\n\n## Version 1.30\n\n### Browser Versions\n\n* Chromium 110.0.5481.38\n* Mozilla Firefox 108.0.2\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n### New APIs\n\n- New method [`method: Route.fetch`] and new option `json` for [`method: Route.fulfill`]:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":817,"to":858}}}}],["a7b2603e-506a-4465-a6a8-755707f6ab12",{"pageContent":"* Google Chrome 109\n* Microsoft Edge 109\n\n\n## Version 1.29\n\n### New APIs\n\n- New method [`method: Route.fetch`] and new option `json` for [`method: Route.fulfill`]:\n\n    ```python\n    def handle_route(route: Route):\n      # Fetch original settings.\n      response = route.fetch()\n\n      # Force settings theme to a predefined value.\n      json = response.json()\n      json[\"theme\"] = \"Solorized\"\n\n      # Fulfill with modified data.\n      route.fulfill(json=json)\n\n\n    page.route(\"**/api/settings\", handle_route)\n    ```\n\n- New method [`method: Locator.all`] to iterate over all matching elements:\n\n    ```python\n    # Check all checkboxes!\n    checkboxes = page.get_by_role(\"checkbox\")\n    for checkbox in checkboxes.all():\n      checkbox.check()\n    ```\n\n- [`method: Locator.selectOption`] matches now by value or label:\n\n  ```html\n  <select multiple>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":850,"to":893}}}}],["c7fd4078-ea2b-42d4-b9b6-2e9ff1a1cabe",{"pageContent":"```html\n  <select multiple>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n  ```\n\n  ```python\n  element.select_option(\"Red\")\n  ```\n\n### Miscellaneous\n\n- Option `postData` in method [`method: Route.continue`] now supports [Serializable] values.\n\n### Browser Versions\n\n* Chromium 109.0.5414.46\n* Mozilla Firefox 107.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 108\n* Microsoft Edge 108\n\n## Version 1.28\n\n### Playwright Tools\n\n* **Live Locators in CodeGen.** Generate a locator for any element on the page using \"Explore\" tool.\n\n![Locator Explorer](https://user-images.githubusercontent.com/9798949/202293514-8e2eade6-c809-4b0a-864b-899dfcee3d84.png)\n\n### New APIs\n\n- [`method: Locator.blur`]\n- [`method: Locator.clear`]\n\n### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":887,"to":931}}}}],["33f0a9d2-6dec-43c2-b78b-830199d3f134",{"pageContent":"### New APIs\n\n- [`method: Locator.blur`]\n- [`method: Locator.clear`]\n\n### Browser Versions\n\n* Chromium 108.0.5359.29\n* Mozilla Firefox 106.0\n* WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n### Locators","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":922,"to":941}}}}],["915143c8-60c2-4926-a158-23f572f22014",{"pageContent":"This version was also tested against the following stable channels:\n\n* Google Chrome 107\n* Microsoft Edge 107\n\n\n## Version 1.27\n\n### Locators\n\nWith these new APIs writing locators is a joy:\n- [`method: Page.getByText`] to locate by text content.\n- [`method: Page.getByRole`] to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n- [`method: Page.getByLabel`] to locate a form control by associated label's text.\n- [`method: Page.getByTestId`] to locate an element based on its `data-testid` attribute (other attribute can be configured).\n- [`method: Page.getByPlaceholder`] to locate an input by placeholder.\n- [`method: Page.getByAltText`] to locate an element, usually image, by its text alternative.\n- [`method: Page.getByTitle`] to locate an element by its title.\n\n```python\npage.get_by_label(\"User Name\").fill(\"John\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":933,"to":953}}}}],["08691e6b-64c8-4805-ac9a-840f35fa8139",{"pageContent":"```python\npage.get_by_label(\"User Name\").fill(\"John\")\n\npage.get_by_label(\"Password\").fill(\"secret-password\")\n\npage.get_by_role(\"button\", name=\"Sign in\").click()\n\nexpect(page.get_by_text(\"Welcome, John!\")).to_be_visible()\n```\n\nAll the same methods are also available on [Locator], [FrameLocator] and [Frame] classes.\n\n### Other highlights\n\n- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.\n\n### Behavior Changes\n\n- [`method: LocatorAssertions.toHaveAttribute`] with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.\n\n   ```python\n   expect(page.get_by_role(\"button\")).to_have_attribute(\"disabled\", \"\")\n   ```\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":952,"to":980}}}}],["f77c7b66-a1d6-453d-a4c7-61fe153ca33f",{"pageContent":"```python\n   expect(page.get_by_role(\"button\")).to_have_attribute(\"disabled\", \"\")\n   ```\n\n### Browser Versions\n\n* Chromium 107.0.5304.18\n* Mozilla Firefox 105.0.1\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 106\n* Microsoft Edge 106\n\n\n## Version 1.26\n\n### Assertions\n\n- New option `enabled` for [`method: LocatorAssertions.toBeEnabled`].\n- [`method: LocatorAssertions.toHaveText`] now pierces open shadow roots.\n- New option `editable` for [`method: LocatorAssertions.toBeEditable`].\n- New option `visible` for [`method: LocatorAssertions.toBeVisible`].\n\n### Other highlights\n\n- New option `max_redirects` for [`method: APIRequestContext.get`] and others to limit redirect count.\n- Python 3.11 is now supported.\n\n### Behavior Change\n\nA bunch of Playwright APIs already support the `wait_until: \"domcontentloaded\"` option.\nFor example:\n\n```python\npage.goto(\"https://playwright.dev\", wait_until=\"domcontentloaded\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":972,"to":1009}}}}],["09f578bc-7113-40f6-9e7c-1dc77b739a4e",{"pageContent":"A bunch of Playwright APIs already support the `wait_until: \"domcontentloaded\"` option.\nFor example:\n\n```python\npage.goto(\"https://playwright.dev\", wait_until=\"domcontentloaded\")\n```\n\nPrior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded`\nevent.\n\nTo align with web specification, the `'domcontentloaded'` value only waits for\nthe target frame to fire the `'DOMContentLoaded'` event. Use `wait_until=\"load\"` to wait for all iframes.\n\n### Browser Versions\n\n* Chromium 106.0.5249.30\n* Mozilla Firefox 104.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 105\n* Microsoft Edge 105\n\n## Version 1.25\n\n### Announcements\n\n* 🎁 We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright/python:v1.34.0-jammy`.\n* 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).\n* ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.\n\n### Browser Versions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1004,"to":1036}}}}],["2da5784c-a7e4-4fab-bcd2-bc97263fe5d2",{"pageContent":"### Browser Versions\n\n* Chromium 105.0.5195.19\n* Mozilla Firefox 103.0\n* WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n* Google Chrome 104\n* Microsoft Edge 104\n\n## Version 1.24\n\n<div className=\"embed-youtube\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/9F05o1shxcY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n### 🐂 Debian 11 Bullseye Support\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know\nif you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n### New introduction docs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1036,"to":1066}}}}],["745dc07f-854e-44d0-b4c3-45661b192445",{"pageContent":"|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11\n| :--- | :---: | :---: | :---: | :---: |\n| Chromium | ✅ | ✅ | ✅ |\n| WebKit | ✅ | ✅ | ✅ |\n| Firefox | ✅ | ✅ | ✅ |\n\n### New introduction docs\n\nWe rewrote our Getting Started docs to be more end-to-end testing focused. Check them out on [playwright.dev](https://playwright.dev/python/docs/intro).\n\n## Version 1.23\n\n### Network Replay\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.\n\nTo record network into HAR file:\n\n```bash\nnpx playwright open --save-har=github.har.zip https://github.com/microsoft\n```\n\nAlternatively, you can record HAR programmatically:\n\n```python async\ncontext = await browser.new_context(record_har_path=\"github.har.zip\")\n# ... do stuff ...\nawait context.close()\n```\n\n```python sync\ncontext = browser.new_context(record_har_path=\"github.har.zip\")\n# ... do stuff ...\ncontext.close()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1060,"to":1094}}}}],["85a26db4-60c4-4878-ac7d-f09198306a82",{"pageContent":"```python sync\ncontext = browser.new_context(record_har_path=\"github.har.zip\")\n# ... do stuff ...\ncontext.close()\n```\n\nUse the new methods [`method: Page.routeFromHAR`] or [`method: BrowserContext.routeFromHAR`] to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:\n\n\n```python async\nawait context.route_from_har(\"github.har.zip\")\n```\n\n```python sync\ncontext.route_from_har(\"github.har.zip\")\n```\n\nRead more in [our documentation](./mock.md#mocking-with-har-files).\n\n\n### Advanced Routing\n\nYou can now use [`method: Route.fallback`] to defer routing to other handlers.\n\nConsider the following example:\n\n```python async\n# Remove a header from all requests\nasync def remove_header_handler(route: Route) -> None:\n    headers = await route.request.all_headers()\n    if \"if-none-match\" in headers:\n        del headers[\"if-none-match\"]\n    await route.fallback(headers=headers)\n\nawait page.route(\"**/*\", remove_header_handler)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1090,"to":1124}}}}],["11797611-a87f-46f9-b44f-e2e13f53efea",{"pageContent":"await page.route(\"**/*\", remove_header_handler)\n\n# Abort all images\nasync def abort_images_handler(route: Route) -> None:\n    if route.request.resource_type == \"image\":\n        await route.abort()\n    else:\n        await route.fallback()\n\nawait page.route(\"**/*\", abort_images_handler)\n```\n\n```python sync\n# Remove a header from all requests\ndef remove_header_handler(route: Route) -> None:\n    headers = route.request.all_headers()\n    if \"if-none-match\" in headers:\n        del headers[\"if-none-match\"]\n    route.fallback(headers=headers)\n\npage.route(\"**/*\", remove_header_handler)\n\n# Abort all images\ndef abort_images_handler(route: Route) -> None:\n    if route.request.resource_type == \"image\":\n        route.abort()\n    else:\n        route.fallback()\n\npage.route(\"**/*\", abort_images_handler)\n```\n\nNote that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1124,"to":1158}}}}],["6e45aef0-aa4a-4a04-b963-6ee7689b139c",{"pageContent":"Note that the new methods [`method: Page.routeFromHAR`] and [`method: BrowserContext.routeFromHAR`] also participate in routing and could be deferred to.\n\n### Web-First Assertions Update\n\n* New method [`method: LocatorAssertions.toHaveValues`] that asserts all selected values of `<select multiple>` element.\n* Methods [`method: LocatorAssertions.toContainText`] and [`method: LocatorAssertions.toHaveText`] now accept `ignore_case` option.\n\n### Miscellaneous\n\n* If there's a service worker that's in your way, you can now easily disable it with a new context option `service_workers`:\n\n  ```python async\n  context = await browser.new_context(service_workers=\"block\")\n  page = await context.new_page()\n  ```\n\n  ```python sync\n  context = browser.new_context(service_workers=\"block\")\n  page = context.new_page()\n  ```\n\n* Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1156,"to":1177}}}}],["a07ed676-d62c-4634-b08f-59a69bdc7d76",{"pageContent":"```python sync\n  context = browser.new_context(service_workers=\"block\")\n  page = context.new_page()\n  ```\n\n* Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:\n\n  ```python async\n  context = await browser.new_context(record_har_path=\"github.har.zip\")\n  ```\n\n  ```python sync\n  context = browser.new_context(record_har_path=\"github.har.zip\")\n  ```\n\n* If you intend to edit HAR by hand, consider using the `\"minimal\"` HAR recording mode\n  that only records information that is essential for replaying:\n\n  ```python async\n  context = await browser.new_context(record_har_mode=\"minimal\", record_har_path=\"har.har\")\n  ```\n\n  ```python sync\n  context = browser.new_context(record_har_mode=\"minimal\", record_har_path=\"har.har\")\n  ```\n\n* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64.\n\n\n## Version 1.22\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1172,"to":1203}}}}],["7c4bd48c-c58a-476c-821a-d23b31f7962f",{"pageContent":"* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64.\n\n\n## Version 1.22\n\n### Highlights\n\n- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```py\n  # Click a button with accessible name \"log in\"\n  page.locator(\"role=button[name='log in']\").click()\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n\n- New [`method: Locator.filter`] API to filter an existing locator\n\n  ```py\n  buttons = page.locator(\"role=button\")\n  # ...\n  submit_button = buttons.filter(has_text=\"Submit\")\n  submit_button.click()\n  ```\n\n- Codegen now supports generating Pytest Tests\n\n  ![Graphics](https://user-images.githubusercontent.com/746130/168098384-40784024-6c26-4426-8255-e714862af6fc.png)\n\n\n\n## Version 1.21\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1198,"to":1231}}}}],["7cd87b0b-2066-4f51-8a0c-9841109b2ebf",{"pageContent":"- Codegen now supports generating Pytest Tests\n\n  ![Graphics](https://user-images.githubusercontent.com/746130/168098384-40784024-6c26-4426-8255-e714862af6fc.png)\n\n\n\n## Version 1.21\n\n### Highlights\n\n- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ```python async\n  # Click a button with accessible name \"log in\"\n  await page.locator(\"role=button[name='log in']\").click()\n  ```\n\n  ```python sync\n  # Click a button with accessible name \"log in\"\n  page.locator(\"role=button[name='log in']\").click()\n  ```\n\n  Read more in [our documentation](./locators.md#locate-by-role).\n- New `scale` option in [`method: Page.screenshot`] for smaller sized screenshots.\n- New `caret` option in [`method: Page.screenshot`] to control text caret. Defaults to `\"hide\"`.\n\n### Behavior Changes","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1223,"to":1249}}}}],["2a80f95e-a721-4dec-948b-e8a51f220781",{"pageContent":"### Behavior Changes\n\n- The `mcr.microsoft.com/playwright` docker image no longer contains Python. Please use `mcr.microsoft.com/playwright/python`\n  as a Playwright-ready docker image with pre-installed Python.\n- Playwright now supports large file uploads (100s of MBs) via [`method: Locator.setInputFiles`] API.\n\n### Browser Versions\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n\n## Version 1.20\n\n### Highlights","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1249,"to":1269}}}}],["33d7571b-352b-49ff-b7e2-b7a40bcf287f",{"pageContent":"This version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n\n## Version 1.20\n\n### Highlights\n\n- New options for methods [`method: Page.screenshot`], [`method: Locator.screenshot`] and [`method: ElementHandle.screenshot`]:\n  * Option `animations: \"disabled\"` rewinds all CSS animations and transitions to a consistent state\n  * Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.\n- [Trace Viewer](./trace-viewer) now shows [API testing requests](./api-testing).\n- [`method: Locator.highlight`] visually reveals element(s) for easier debugging.\n\n### Announcements","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1261,"to":1277}}}}],["e6f13a7e-ebc5-436d-9ccc-e5ba3f3629a5",{"pageContent":"### Announcements\n\n- We now ship a designated Python docker image `mcr.microsoft.com/playwright/python`. Please switch over to it if you use\n  Python. This is the last release that includes Python inside our javascript `mcr.microsoft.com/playwright` docker image.\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 99\n- Microsoft Edge 99\n\n## Version 1.19\n\n### Highlights\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:\n\n  ```python async\n  await page.locator(\"article\", has=page.locator(\".highlight\")).click()\n  ```\n\n  ```python sync\n  page.locator(\"article\", has=page.locator(\".highlight\")).click()\n  ```\n\n  Read more in [locator documentation](./api/class-locator#locator-locator)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1277,"to":1308}}}}],["d8e6cbbb-7b81-4b2e-a068-bea81df6923d",{"pageContent":"```python sync\n  page.locator(\"article\", has=page.locator(\".highlight\")).click()\n  ```\n\n  Read more in [locator documentation](./api/class-locator#locator-locator)\n\n- New [`method: Locator.page`]\n- [`method: Page.screenshot`] and [`method: Locator.screenshot`] now automatically hide blinking caret\n- Playwright Codegen now generates locators and frame locators\n\n### Browser Versions\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n\n## Version 1.18\n\n### API Testing\n\nPlaywright for Python 1.18 introduces new [API Testing](./api/class-apirequestcontext) that lets you send requests to the server directly from Python!\nNow you can:\n\n- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1304,"to":1335}}}}],["ad9b304f-546c-4e4c-9791-6d0b1229d94d",{"pageContent":"- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser\n\nTo do a request on behalf of Playwright's Page, use **new [`property: Page.request`] API**:\n\n```python async\n# Do a GET request on behalf of page\nres = await page.request.get(\"http://example.com/foo.json\")\n```\n\n```python sync\n# Do a GET request on behalf of page\nres = page.request.get(\"http://example.com/foo.json\")\n```\n\nRead more in [our documentation](./api/class-apirequestcontext).\n\n### Web-First Assertions\n\nPlaywright for Python 1.18 introduces [Web-First Assertions](./test-assertions).\n\nConsider the following example:\n\n```python async\nfrom playwright.async_api import Page, expect\n\nasync def test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    await page.locator(\"#submit-button\").click()\n    await expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1333,"to":1364}}}}],["07f3ce39-b060-4d5d-a3ff-7157b22dcbeb",{"pageContent":"async def test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    await page.locator(\"#submit-button\").click()\n    await expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n\n```python sync\nfrom playwright.sync_api import Page, expect\n\ndef test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    page.locator(\"#submit-button\").click()\n    expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n\nPlaywright will be re-testing the node with the selector `.status` until\nfetched Node has the `\"Submitted\"` text. It will be re-fetching the node and\nchecking it over and over, until the condition is met or until the timeout is\nreached. You can pass this timeout as an option.\n\nRead more in [our documentation](./test-assertions).\n\n### Locator Improvements\n\n- [`method: Locator.dragTo`]\n- Each locator can now be optionally filtered by the text it contains:\n    ```python async\n    await page.locator(\"li\", has_text=\"my item\").locator(\"button\").click()\n    ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1360,"to":1388}}}}],["87139f69-7dff-4257-aa22-bda4a25036ec",{"pageContent":"```python sync\n    page.locator(\"li\", has_text=\"my item\").locator(\"button\").click()\n    ```\n\n    Read more in [locator documentation](./api/class-locator#locator-locator)\n\n\n### New APIs & changes\n\n- [`accept_downloads`](./api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `True`.\n- [`sources`](./api/class-tracing#tracing-start-option-sources) option to embed sources into traces.\n\n### Browser Versions\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n\n\n## Version 1.17\n\n### Frame Locators\n\nPlaywright 1.17 introduces [frame locators](./api/class-framelocator) - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1390,"to":1419}}}}],["1a581e33-c9e9-461a-84d4-207fb22cecb9",{"pageContent":"![Graphics](https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png)\n\nFrame locators can be created with either [`method: Page.frameLocator`] or [`method: Locator.frameLocator`] method.\n\n```python\nlocator = page.frame_locator(\"my-frame\").locator(\"text=Submit\")\nlocator.click()\n```\n\nRead more at [our documentation](./api/class-framelocator).\n\n### Trace Viewer Update\n\nPlaywright Trace Viewer is now **available online** at https://trace.playwright.dev! Just drag-and-drop your `trace.zip` file to inspect its contents.\n\n> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.\n\n- Playwright Test traces now include sources by default (these could be turned off with tracing option)\n- Trace Viewer now shows test name\n- New trace metadata tab with browser details\n- Snapshots now have URL bar","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1421,"to":1441}}}}],["ca8f2542-d2e8-47d4-b7ac-861112616627",{"pageContent":"![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)\n\n### HTML Report Update\n\n- HTML report now supports dynamic filtering\n- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.\n\n![image](https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png)\n\n### Ubuntu ARM64 support + more\n\n- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.\n- You can now use Playwright to install stable version of Edge on Linux:\n    ```bash\n    npx playwright install msedge\n    ```\n\n### New APIs\n\n- Tracing now supports a [`'title'`](./api/class-tracing#tracing-start-option-title) option\n- Page navigations support a new [`'commit'`](./api/class-page#page-goto) waiting option\n\n\n## Version 1.16\n\n### 🎭 Playwright Library\n\n#### `locator.wait_for`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1443,"to":1470}}}}],["b1066e8d-5ad2-44ff-905b-4bd66e52af7d",{"pageContent":"## Version 1.16\n\n### 🎭 Playwright Library\n\n#### `locator.wait_for`\n\nWait for a locator to resolve to a single element with a given state.\nDefaults to the `state: 'visible'`.\n\nComes especially handy when working with lists:\n\n```python\norder_sent = page.locator(\"#order-sent\")\norder_sent.wait_for()\n```\n\nRead more about [`method: Locator.waitFor`].\n\n### Docker support for Arm64\n\nPlaywright Docker image is now published for Arm64 so it can be used on Apple Silicon.\n\nRead more about [Docker integration](./docker).\n\n### 🎭 Playwright Trace Viewer\n\n- run trace viewer with `npx playwright show-trace` and drop trace files to the trace viewer PWA\n- better visual attribution of action targets\n\nRead more about [Trace Viewer](./trace-viewer).\n\n### Browser Versions\n\n- Chromium 97.0.4666.0\n- Mozilla Firefox 93.0\n- WebKit 15.4\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1466,"to":1510}}}}],["92ce2301-3dd3-4b60-83dc-39b635b87935",{"pageContent":"This version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n## Version 1.15\n\n### 🖱️ Mouse Wheel\n\nBy using [`method: Mouse.wheel`] you are now able to scroll vertically or horizontally.\n\n### 📜 New Headers API\n\nPreviously it was not possible to get multiple header values of a response. This is now  possible and additional helper functions are available:\n\n- [`method: Request.allHeaders`]\n- [`method: Request.headersArray`]\n- [`method: Request.headerValue`]\n- [`method: Response.allHeaders`]\n- [`method: Response.headersArray`]\n- [`method: Response.headerValue`]\n- [`method: Response.headerValues`]\n\n### 🌈 Forced-Colors emulation\n\nIts now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1503,"to":1530}}}}],["ce45ae51-c033-4496-9b2d-0e33706333e5",{"pageContent":"Its now possible to emulate the `forced-colors` CSS media feature by passing it in the [`method: Browser.newContext`] or calling [`method: Page.emulateMedia`].\n\n### New APIs\n\n- [`method: Page.route`] accepts new `times` option to specify how many times this route should be matched.\n- [`method: Page.setChecked`] and [`method: Locator.setChecked`] were introduced to set the checked state of a checkbox.\n- [`method: Request.sizes`] Returns resource size information for given http request.\n- [`method: Tracing.startChunk`] - Start a new trace chunk.\n- [`method: Tracing.stopChunk`] - Stops a new trace chunk.\n\n### Browser Versions\n\n- Chromium 96.0.4641.0\n- Mozilla Firefox 92.0\n- WebKit 15.0\n\n## Version 1.14\n\n#### ⚡️ New \"strict\" mode\n\nSelector ambiguity is a common problem in automation testing. **\"strict\" mode**\nensures that your selector points to a single element and throws otherwise.\n\nPass `strict=true` into your action calls to opt in.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1528,"to":1551}}}}],["0047961c-c576-4f84-8e1a-2e28541aff86",{"pageContent":"Pass `strict=true` into your action calls to opt in.\n\n```py\n# This will throw if you have more than one button!\npage.click(\"button\", strict=True)\n```\n\n#### 📍 New [**Locators API**](./api/class-locator)\n\nLocator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.\n\nThe difference between the [Locator](./api/class-locator) and [ElementHandle](./api/class-elementhandle) is that the latter points to a particular element, while [Locator](./api/class-locator) captures the logic of how to retrieve that element.\n\nAlso, locators are **\"strict\" by default**!\n\n```py\nlocator = page.locator(\"button\")\nlocator.click()\n```\n\nLearn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1551,"to":1573}}}}],["fb7907b2-cfc7-4a73-9c82-fda48d44bc82",{"pageContent":"Learn more in the [documentation](./api/class-locator).\n\n#### 🧩 Experimental [**React**](./other-locators.md#react-locator) and [**Vue**](./other-locators.md#vue-locator) selector engines\n\nReact and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.\n\n```py\npage.locator(\"_react=SubmitButton[enabled=true]\").click()\npage.locator(\"_vue=submit-button[enabled=true]\").click()\n```\n\nLearn more in the [react selectors documentation](./other-locators.md#react-locator) and the [vue selectors documentation](./other-locators.md#vue-locator).\n\n#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1571,"to":1584}}}}],["aecadfb7-b6af-4193-aba4-83a8c54abcc5",{"pageContent":"#### ✨ New [**`nth`**](./other-locators.md#n-th-element-locator) and [**`visible`**](./other-locators.md#css-matching-only-visible-elements) selector engines\n\n- [`nth`](./other-locators.md#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.\n- [`visible`](./other-locators.md#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.\n\n```py\n# select the first button among all buttons\nbutton.click(\"button >> nth=0\")\n# or if you are using locators, you can use first, nth() and last\npage.locator(\"button\").first.click()\n\n# click a visible button\nbutton.click(\"button >> visible=true\")\n```\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n#### Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1584,"to":1608}}}}],["37943a80-f1c3-4a29-a747-366e50a79235",{"pageContent":"# click a visible button\nbutton.click(\"button >> visible=true\")\n```\n\n### Browser Versions\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n\n## Version 1.13\n\n#### Playwright\n\n- **🖖 Programmatic drag-and-drop support** via the [`method: Page.dragAndDrop`] API.\n- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [`method: Browser.newContext`].\n\n#### Tools\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n\n#### New and Overhauled Guides\n\n- [Intro](./intro.md)\n- [Authentication](./auth.md)\n- [Chrome Extensions](./chrome-extensions.md)\n\n\n#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1595,"to":1630}}}}],["ae34fc5b-c67b-4eee-809f-ac7390d181f6",{"pageContent":"#### Browser Versions\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs\n\n- new `baseURL` option in [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`method: Response.securityDetails`] and [`method: Response.serverAddr`]\n- [`method: Page.dragAndDrop`] and [`method: Frame.dragAndDrop`]\n- [`method: Download.cancel`]\n- [`method: Page.inputValue`], [`method: Frame.inputValue`] and [`method: ElementHandle.inputValue`]\n- new `force` option in [`method: Page.fill`], [`method: Frame.fill`], and [`method: ElementHandle.fill`]\n- new `force` option in [`method: Page.selectOption`], [`method: Frame.selectOption`], and [`method: ElementHandle.selectOption`]\n\n## Version 1.12\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1624,"to":1642}}}}],["d5c26173-2744-4655-9c24-b5d05421c597",{"pageContent":"## Version 1.12\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer\n\n[Playwright Trace Viewer](./trace-viewer.md) is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:\n- page DOM before and after each Playwright action\n- page rendering before and after each Playwright action\n- browser network during script execution\n\nTraces are recorded using the new [`property: BrowserContext.tracing`] API:\n\n```python\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True)\n\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\nTraces are examined later with the Playwright CLI:\n\n\n```sh\nplaywright show-trace trace.zip\n```\n\nThat will open the following GUI:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1640,"to":1671}}}}],["8bbe6a8e-8799-4b9e-98cb-b2ee8507d60f",{"pageContent":"Traces are examined later with the Playwright CLI:\n\n\n```sh\nplaywright show-trace trace.zip\n```\n\nThat will open the following GUI:\n\n![image](https://user-images.githubusercontent.com/746130/121109654-d66c4480-c7c0-11eb-8d4d-eb70d2b03811.png)\n\n👉 Read more in [trace viewer documentation](./trace-viewer.md).\n\n\n#### Browser Versions\n\n- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1664,"to":1689}}}}],["09df70fe-57ef-442e-899f-eb6bafafc516",{"pageContent":"- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs\n\n- `reducedMotion` option in [`method: Page.emulateMedia`], [`method: BrowserType.launchPersistentContext`], [`method: Browser.newContext`] and [`method: Browser.newPage`]\n- [`event: BrowserContext.request`]\n- [`event: BrowserContext.requestFailed`]\n- [`event: BrowserContext.requestFinished`]\n- [`event: BrowserContext.response`]\n- `tracesDir` option in [`method: BrowserType.launch`] and [`method: BrowserType.launchPersistentContext`]\n- new [`property: BrowserContext.tracing`] API namespace\n- new [`method: Download.page`] method\n\n## Version 1.11","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1680,"to":1700}}}}],["0f3ae3fc-b885-4ea1-a32e-e7ff9c6a02f2",{"pageContent":"## Version 1.11\n\n🎥  New video: [Playwright: A New Test Automation Framework for the Modern Web](https://youtu.be/_Jla6DyuEu4) ([slides](https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing))\n- We talked about Playwright\n- Showed engineering work behind the scenes\n- Did live demos with new features ✨\n- **Special thanks** to [applitools](http://applitools.com/) for hosting the event and inviting us!\n\n#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1700,"to":1714}}}}],["84c44b8e-6eab-41fe-b3d1-13301880d91d",{"pageContent":"#### Browser Versions\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs\n\n- support for **async predicates** across the API in methods such as [`method: Page.waitForRequest`] and others\n- new **emulation devices**: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4\n- new methods:\n    * [`method: Page.waitForURL`] to await navigations to URL\n    * [`method: Video.delete`] and [`method: Video.saveAs`] to manage screen recording\n- new options:\n    * `screen` option in the [`method: Browser.newContext`] method to emulate `window.screen` dimensions\n    * `position` option in [`method: Page.check`] and [`method: Page.uncheck`] methods\n    * `trial` option to dry-run actions in [`method: Page.check`], [`method: Page.uncheck`], [`method: Page.click`], [`method: Page.dblclick`], [`method: Page.hover`] and [`method: Page.tap`]\n\n## Version 1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1708,"to":1726}}}}],["fa08fa2a-f54d-4042-8a7b-19a4731920e8",{"pageContent":"## Version 1.10\n\n- [Playwright for Java v1.10](https://github.com/microsoft/playwright-java) is **now stable**!\n- Run Playwright against **Google Chrome** and **Microsoft Edge** stable channels with the [new channels API](./browsers).\n- Chromium screenshots are **fast** on Mac & Windows.\n\n#### Bundled Browser Versions\n\n- Chromium 90.0.4430.0\n- Mozilla Firefox 87.0b10\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1726,"to":1748}}}}],["42f9864e-483a-488b-a6b2-45d22d8862ab",{"pageContent":"- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs\n\n- [`method: BrowserType.launch`] now accepts the new `'channel'` option. Read more in [our documentation](./browsers).\n\n\n## Version 1.9\n\n- [Playwright Inspector](./debug.md) is a **new GUI tool** to author and debug your tests.\n  - **Line-by-line debugging** of your Playwright scripts, with play, pause and step-through.\n  - Author new scripts by **recording user actions**.\n  - **Generate element selectors** for your script by hovering over elements.\n  - Set the `PWDEBUG=1` environment variable to launch the Inspector\n\n- **Pause script execution** with [`method: Page.pause`] in headed mode. Pausing the page launches [Playwright Inspector](./debug.md) for debugging.\n\n- **New has-text pseudo-class** for CSS selectors. `:has-text(\"example\")` matches any element containing `\"example\"` somewhere inside, possibly in a child or a descendant element. See [more examples](./other-locators.md#css-matching-by-text).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1740,"to":1758}}}}],["29363262-45f7-4943-9625-81c14a762d88",{"pageContent":"- **Page dialogs are now auto-dismissed** during execution, unless a listener for `dialog` event is configured. [Learn more](./dialogs.md) about this.\n\n- [Playwright for Python](https://github.com/microsoft/playwright-python) is **now stable** with an idiomatic snake case API and pre-built [Docker image](./docker.md) to run tests in CI/CD.\n\n#### Browser Versions\n\n- Chromium 90.0.4421.0\n- Mozilla Firefox 86.0b10\n- WebKit 14.1\n\n#### New APIs\n- [`method: Page.pause`].\n\n\n## Version 1.8\n\n- [Selecting elements based on layout](./other-locators.md#css-matching-elements-based-on-layout) with `:left-of()`, `:right-of()`, `:above()` and `:below()`.\n- Playwright now includes command line interface, former playwright-cli.\n  ```bash python\n  playwright --help\n  ```\n- [`method: Page.selectOption`] now waits for the options to be present.\n- New methods to [assert element state](./actionability#assertions) like [`method: Page.isEditable`].\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1760,"to":1784}}}}],["6b9b37f9-bb12-40a1-a3d2-40fb3f497f94",{"pageContent":"#### New APIs\n\n- [`method: ElementHandle.isChecked`].\n- [`method: ElementHandle.isDisabled`].\n- [`method: ElementHandle.isEditable`].\n- [`method: ElementHandle.isEnabled`].\n- [`method: ElementHandle.isHidden`].\n- [`method: ElementHandle.isVisible`].\n- [`method: Page.isChecked`].\n- [`method: Page.isDisabled`].\n- [`method: Page.isEditable`].\n- [`method: Page.isEnabled`].\n- [`method: Page.isHidden`].\n- [`method: Page.isVisible`].\n- New option `'editable'` in [`method: ElementHandle.waitForElementState`].\n\n#### Browser Versions\n\n- Chromium 90.0.4392.0\n- Mozilla Firefox 85.0b5\n- WebKit 14.1\n\n## Version 1.7","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1784,"to":1806}}}}],["05b49cba-ce0b-47c5-9220-3fd8ad19da19",{"pageContent":"## Version 1.7\n\n- **New Java SDK**: [Playwright for Java](https://github.com/microsoft/playwright-java) is now on par with [JavaScript](https://github.com/microsoft/playwright), [Python](https://github.com/microsoft/playwright-python) and [.NET bindings](https://github.com/microsoft/playwright-dotnet).\n- **Browser storage API**: New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.\n- **New CSS selectors**: We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces [new CSS extensions](./other-locators.md#css-locator) and there's more coming soon.\n- **New website**: The docs website at [playwright.dev](https://playwright.dev/) has been updated and is now built with [Docusaurus](https://v2.docusaurus.io/).\n- **Support for Apple Silicon**: Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.\n\n#### New APIs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1806,"to":1814}}}}],["eef9cbfd-a9bb-4f6a-bb95-04cbdc024ff7",{"pageContent":"#### New APIs\n\n- [`method: BrowserContext.storageState`] to get current state for later reuse.\n- `storageState` option in [`method: Browser.newContext`] and [`method: Browser.newPage`] to setup browser context state.\n\n#### Browser Versions\n\n- Chromium 89.0.4344.0\n- Mozilla Firefox 84.0b9\n- WebKit 14.1","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-release-notes-python.md","title":"src-release-notes-python","url":"https://playwright.dev/docs/src-release-notes-python","loc":{"lines":{"from":1814,"to":1823}}}}],["7063a656-fb3c-4d02-bccf-8d49d700d112",{"pageContent":"---\nid: running-tests\ntitle: \"Running and debugging tests\"\n---\n\n## Introduction\n\nYou can run a single test, a set of tests or all tests. Tests can be run on different browsers. By default, tests are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the `headless` test run parameter.\n\n**You will learn**\n\n- [How to run tests](#running-tests)\n- [How to debug tests](#debugging-tests)\n\n## Running tests\n\n### Run all tests\n\nUse the following command to run all tests.\n\n```bash\ndotnet test\n```\n\n### Run tests in headed mode\n\nUse the following command to run your tests in headed mode opening a browser window for each test.\n\n```bash tab=bash-bash lang=csharp\nHEADED=1 dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset HEADED=1\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:HEADED=\"1\"\ndotnet test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":1,"to":41}}}}],["0a788c44-b377-4d0b-abd1-715985cda69c",{"pageContent":"```batch tab=bash-batch lang=csharp\nset HEADED=1\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:HEADED=\"1\"\ndotnet test\n```\n\n### Run tests on different browsers: Browser env\n\nSpecify which browser you would like to run your tests on via the `BROWSER` environment variable.\n\n```bash tab=bash-bash lang=csharp\nBROWSER=webkit dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset BROWSER=webkit\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:BROWSER=\"webkit\"\ndotnet test\n```\n\n### Run tests on different browsers: launch configuration\n\nSpecify which browser you would like to run your tests on by adjusting the launch configuration options:\n\n```bash\ndotnet test -- Playwright.BrowserName=webkit\n```\n\nTo run your test on multiple browsers or configurations, you need to invoke the `dotnet test` command multiple times. There you can then either specify the `BROWSER` environment variable or set the `Playwright.BrowserName` via the runsettings file:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":33,"to":69}}}}],["b0081353-4d0a-4171-b5cd-5368239adec2",{"pageContent":"```bash\ndotnet test --settings:chromium.runsettings\ndotnet test --settings:firefox.runsettings\ndotnet test --settings:webkit.runsettings\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <RunSettings>\n    <Playwright>\n      <BrowserName>chromium</BrowserName>\n    </Playwright>\n  </RunSettings>\n```\n\nFor more information see [selective unit tests](https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest) in the Microsoft docs.\n\n### Run specific tests\n\nTo run a single test file, use the filter flag followed by the class name of the test you want to run.\n\n```bash\ndotnet test --filter \"ExampleTest\"\n```\n\nTo run a set of test files, use the filter flag followed by the class names of the tests you want to run.\n\n```bash\ndotnet test --filter \"ExampleTest1|ExampleTest2\"\n```\n\nTo run a test with a specific title use the filter flag followed by *Name~* and the title of the test.\n\n```bash\ndotnet test --filter \"Name~GetStartedLink\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":71,"to":106}}}}],["138e5248-c6b6-41ca-9682-f75ef6a9607f",{"pageContent":"To run a test with a specific title use the filter flag followed by *Name~* and the title of the test.\n\n```bash\ndotnet test --filter \"Name~GetStartedLink\"\n```\n\n### Run tests with multiple workers:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```bash\ndotnet test -- NUnit.NumberOfTestWorkers=5\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```bash\ndotnet test -- MSTest.Parallelize.Workers=5\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```bash\ndotnet test -- xUnit.MaxParallelThreads=5\n```\n\nSee [here](https://xunit.net/docs/running-tests-in-parallel.html) for more information to run tests in parallel with xUnit.\n\n:::note\nWe recommend xUnit 2.8+ which uses the [`conservative` parallelism algorithm](https://xunit.net/docs/running-tests-in-parallel.html#algorithms) by default.\n:::\n\n</TabItem>\n</Tabs>\n\n## Debugging Tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":102,"to":148}}}}],["2be7af72-9fb7-45c0-87b1-728f13d93dc0",{"pageContent":"</TabItem>\n</Tabs>\n\n## Debugging Tests\n\nSince Playwright runs in .NET, you can debug it with your debugger of choice in e.g. Visual Studio Code or Visual Studio. Playwright comes with the Playwright Inspector which allows you to step through Playwright API calls, see their debug logs and explore [locators](./locators.md).\n\n```bash tab=bash-bash lang=csharp\nPWDEBUG=1 dotnet test\n```\n\n```batch tab=bash-batch lang=csharp\nset PWDEBUG=1\ndotnet test\n```\n\n```powershell tab=bash-powershell lang=csharp\n$env:PWDEBUG=1\ndotnet test\n```\n\n![debugging tests with playwright inspector](https://github.com/microsoft/playwright/assets/13063165/a1e758d3-d379-414f-be0b-7339f12bb635)\n\nCheck out our [debugging guide](./debug.md) to learn more about the [Playwright Inspector](./debug.md#playwright-inspector) as well as debugging with [Browser Developer tools](./debug.md#browser-developer-tools).\n\n\n## What's Next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":145,"to":171}}}}],["f4667e9c-0d77-4810-9de3-72054fa1a486",{"pageContent":"## What's Next\n\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Run tests on CI](./ci-intro.md)\n- [Learn more about the MSTest and NUnit base classes](./test-runners.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-csharp.md","title":"src-running-tests-csharp","url":"https://playwright.dev/docs/src-running-tests-csharp","loc":{"lines":{"from":171,"to":176}}}}],["7dc971ec-6e76-49f6-b03d-fa43b5ba9305",{"pageContent":"---\nid: running-tests\ntitle: \"Running and debugging tests\"\n---\n\n## Introduction\n\nPlaywright tests can be run in a variety of ways. We recommend hooking it up to your favorite test runner, e.g., [JUnit](./test-runners.md), since it gives you the ability to run tests in parallel, run single test, etc.\n\nYou can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the `launch(new BrowserType.LaunchOptions().setHeadless(false))` option.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-java.md","title":"src-running-tests-java","url":"https://playwright.dev/docs/src-running-tests-java","loc":{"lines":{"from":1,"to":10}}}}],["b76c1f50-cf57-4bbb-bcb3-6ca952eef369",{"pageContent":"In [JUnit](https://junit.org/junit5/), you can initialize [Playwright] and [Browser] in [@BeforeAll](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeAll.html) method and\ndestroy them in [@AfterAll](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/AfterAll.html). In the example below, all three test methods use the same\n[Browser]. Each test uses its own [BrowserContext] and [Page].\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-java.md","title":"src-running-tests-java","url":"https://playwright.dev/docs/src-running-tests-java","loc":{"lines":{"from":12,"to":31}}}}],["bee62ba1-ab9e-470a-a193-5e13ded3172c",{"pageContent":"public class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeAll\n  static void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-java.md","title":"src-running-tests-java","url":"https://playwright.dev/docs/src-running-tests-java","loc":{"lines":{"from":28,"to":64}}}}],["2acd1fbd-2968-4164-b914-013d44509aee",{"pageContent":"@Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```\n\nSee [here](./test-runners.md) for further details on how to run tests in parallel, etc.\n\nSee experimental [JUnit integration](./junit.md) to automatically initialize Playwright objects and more.\n\n### Run tests in headed mode\n\nIf you prefer, you can run your tests in headed mode by using the `launch(new BrowserType.LaunchOptions().setHeadless(false))` option.\n\n## What's Next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-java.md","title":"src-running-tests-java","url":"https://playwright.dev/docs/src-running-tests-java","loc":{"lines":{"from":66,"to":92}}}}],["ff2f297d-c66c-459e-85be-219a08aae09e",{"pageContent":"### Run tests in headed mode\n\nIf you prefer, you can run your tests in headed mode by using the `launch(new BrowserType.LaunchOptions().setHeadless(false))` option.\n\n## What's Next\n\n- [Debugging tests](./debug.md)\n- [Generate tests with Codegen](./codegen.md)\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-java.md","title":"src-running-tests-java","url":"https://playwright.dev/docs/src-running-tests-java","loc":{"lines":{"from":88,"to":96}}}}],["61b7e11c-3d9f-4666-a565-4f300fb3cfdd",{"pageContent":"---\nid: running-tests\ntitle: \"Running and debugging tests\"\n---\n## Introduction\n\nWith Playwright you can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers by using the `--project` flag. Tests are run in parallel by default and are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. However, you can run tests in headed mode by using the `--headed` CLI argument, or you can run your tests in [UI mode](./test-ui-mode.md) by using the `--ui` flag. See a full trace of your tests complete with watch mode, time travel debugging and more.\n\n**You will learn**\n\n- [How to run tests from the command line](/running-tests.md#command-line)\n- [How to debug tests](/running-tests.md#debugging-tests)\n- [How to open the HTML test reporter](/running-tests.md#test-reports)\n\n## Running tests\n### Command line","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":1,"to":16}}}}],["69b0b12c-9193-4f26-8491-4142cc5d344f",{"pageContent":"## Running tests\n### Command line\n\nYou can run your tests with the `playwright test` command. This will run your tests on all browsers as configured in the `playwright.config` file. Tests run in headless mode by default meaning no browser window will be opened while running the tests and results will be seen in the terminal.\n\n```bash\nnpx playwright test\n```\n\n![tests running in command line](https://github.com/microsoft/playwright/assets/13063165/981c1b2b-dc7e-4b85-b241-272b44da6628)\n\n### Run tests in UI mode\n\nWe highly recommend running your tests with [UI Mode](./test-ui-mode.md) for a better developer experience where you can easily walk through each step of the test and visually see what was happening before, during and after each step. UI mode also comes with many other features such as the locator picker, watch mode and more.\n\n```bash\nnpx playwright test --ui\n```\n\n![UI Mode](https://github.com/microsoft/playwright/assets/13063165/c5b501cc-4f5d-485a-87cc-66044c651786)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":15,"to":34}}}}],["9a4dcff2-4d48-4da9-abd5-ec09770726c1",{"pageContent":"```bash\nnpx playwright test --ui\n```\n\n![UI Mode](https://github.com/microsoft/playwright/assets/13063165/c5b501cc-4f5d-485a-87cc-66044c651786)\n\nCheck out or [detailed guide on UI Mode](./test-ui-mode.md) to learn more about its features.\n\n### Run tests in headed mode\n\nTo run your tests in headed mode, use the `--headed` flag. This will give you the ability to visually see how Playwright interacts with the website.\n\n```bash\nnpx playwright test --headed\n```\n\n### Run tests on different browsers\n\nTo specify which browser you would like to run your tests on, use the `--project` flag followed by the name of the browser.\n\n```bash\nnpx playwright test --project webkit\n```\n\nTo specify multiple browsers to run your tests on, use the `--project` flag multiple times followed by the name of each browser.\n\n```bash\nnpx playwright test --project webkit --project firefox\n```\n\n### Run specific tests\n\nTo run a single test file, pass in the name of the test file that you want to run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":30,"to":62}}}}],["528b7164-7160-4034-9760-39625e65f430",{"pageContent":"```bash\nnpx playwright test --project webkit --project firefox\n```\n\n### Run specific tests\n\nTo run a single test file, pass in the name of the test file that you want to run.\n\n```bash\nnpx playwright test landing-page.spec.ts\n```\n\nTo run a set of test files from different directories, pass in the names of the directories that you want to run the tests in.\n\n```bash\nnpx playwright test tests/todo-page/ tests/landing-page/\n```\n\nTo run files that have `landing` or `login` in the file name, simply pass in these keywords to the CLI.\n\n```bash\nnpx playwright test landing login\n```\n\nTo run a test with a specific title, use the `-g` flag followed by the title of the test.\n\n```bash\nnpx playwright test -g \"add a todo item\"\n```\n\n### Run last failed tests\n\nTo run only the tests that failed in the last test run, first run your tests and then run them again with the `--last-failed` flag.\n\n```bash\nnpx playwright test --last-failed\n```\n\n\n### Run tests in VS Code","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":56,"to":95}}}}],["8c83a026-f760-4d81-b1d9-d0a5796b266f",{"pageContent":"```bash\nnpx playwright test --last-failed\n```\n\n\n### Run tests in VS Code\n\nTests can be run right from VS Code using the [VS Code extension](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright). Once installed you can simply click the green triangle next to the test you want to run or run all tests from the testing sidebar. Check out our [Getting Started with VS Code](./getting-started-vscode.md#running-tests) guide for more details.\n\n![Playwright VS Code extension](https://github.com/microsoft/playwright/assets/13063165/47726e70-683b-4bd5-94de-7d03dd45c30f)\n\n## Debugging tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":90,"to":101}}}}],["f61955f7-852c-44f9-9ff4-5fc4d5351228",{"pageContent":"![Playwright VS Code extension](https://github.com/microsoft/playwright/assets/13063165/47726e70-683b-4bd5-94de-7d03dd45c30f)\n\n## Debugging tests\n\nSince Playwright runs in Node.js, you can debug it with your debugger of choice e.g. using `console.log` or inside your IDE or directly in VS Code with the [VS Code Extension](./getting-started-vscode.md). Playwright comes with [UI Mode](./test-ui-mode.md), where you can easily walk through each step of the test, see logs, errors, network requests, inspect the DOM snapshot and more. You can also use the [Playwright Inspector](./debug.md#playwright-inspector), which allows you to step through Playwright API calls, see their debug logs and explore [locators](./locators.md).\n\n### Debug tests in UI mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":99,"to":105}}}}],["0c401d73-0930-441d-b3ba-98abeafbe4fb",{"pageContent":"### Debug tests in UI mode\n\nWe highly recommend debugging your tests with [UI Mode](./test-ui-mode.md) for a better developer experience where you can easily walk through each step of the test and visually see what was happening before, during and after each step. UI mode also comes with many other features such as the locator picker, watch mode and more.\n\n```bash\nnpx playwright test --ui\n```\n\n![showing errors in ui mode](https://github.com/microsoft/playwright/assets/13063165/ffca2fd1-5349-41fb-ade9-ace143bb2c58)\n\nWhile debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator in the locator playground and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":105,"to":115}}}}],["cf13ef32-0635-4885-845a-830b2e6c8166",{"pageContent":"![pick locator in ui mode](https://github.com/microsoft/playwright/assets/13063165/9e7eeb84-bd26-4010-8614-75e24b56c716)\n\nCheck out our [detailed guide on UI Mode](./test-ui-mode.md) to learn more about its features.\n\n### Debug tests with the Playwright Inspector\n\nTo debug all tests, run the Playwright test command followed by the `--debug` flag.\n\n```bash\nnpx playwright test --debug\n```\n\n![Debugging Tests with the Playwright inspector](https://github.com/microsoft/playwright/assets/13063165/6b3b3caa-d258-4cb8-aa05-cd407f501626)\n\nThis command will open up a Browser window as well as the Playwright Inspector. You can use the step over button at the top of the inspector to step through your test. Or, press the play button to run your test from start to finish. Once the test has finished, the browser window will close.\n\nTo debug one test file, run the Playwright test command with the name of the test file that you want to debug followed by the `--debug` flag.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":117,"to":133}}}}],["2ac13863-6e2b-4bb7-b833-d3d2294c1579",{"pageContent":"To debug one test file, run the Playwright test command with the name of the test file that you want to debug followed by the `--debug` flag.\n\n```bash\nnpx playwright test example.spec.ts --debug\n```\n\nTo debug a specific test from the line number where the `test(..` is defined, add a colon followed by the line number at the end of the test file name, followed by the `--debug` flag.\n\n```bash\nnpx playwright test example.spec.ts:10 --debug\n```\n\nWhile debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test.\n\n![Locator picker in the Playwright Inspector](https://github.com/microsoft/playwright/assets/13063165/013d5edb-583e-423a-bb53-9f57bab7f3e1)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":133,"to":147}}}}],["d61456a3-b64e-43dc-9de3-ad28e8816ce3",{"pageContent":"![Locator picker in the Playwright Inspector](https://github.com/microsoft/playwright/assets/13063165/013d5edb-583e-423a-bb53-9f57bab7f3e1)\n\n\nCheck out our [debugging guide](./debug.md) to learn more about debugging with the [VS Code debugger](./debug.md#vs-code-debugger), UI Mode and the [Playwright Inspector](./debug.md#playwright-inspector) as well as debugging with [Browser Developer tools](./debug.md#browser-developer-tools).\n\n\n## Test reports\n\nThe [HTML Reporter](./test-reporters.md#html-reporter) shows you a full report of your tests allowing you to filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests. By default, the HTML report is opened automatically if some of the tests failed, otherwise you can open it with the following command.\n\n```bash\nnpx playwright show-report\n```\n\n![HTML Report](https://github.com/microsoft/playwright/assets/13063165/c5f60e56-fb75-4a2d-a4b6-054b8c5d69c1)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":147,"to":161}}}}],["59012585-bade-466b-9d81-cf60d80c459d",{"pageContent":"```bash\nnpx playwright show-report\n```\n\n![HTML Report](https://github.com/microsoft/playwright/assets/13063165/c5f60e56-fb75-4a2d-a4b6-054b8c5d69c1)\n\nYou can filter and search for tests as well as click on each test to see the tests errors and explore each step of the test.\n\n![HTML Reporter detail view](https://github.com/microsoft/playwright/assets/13063165/f36ada14-4701-4534-a3be-ed22c2b16cf5)\n\n\n## What's next\n\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Explore all the features of UI Mode](./test-ui-mode.md)\n- [Run your tests on CI with GitHub Actions](./ci-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-js.md","title":"src-running-tests-js","url":"https://playwright.dev/docs/src-running-tests-js","loc":{"lines":{"from":157,"to":173}}}}],["383bcc76-b8e8-4479-aca6-9eb5674b2ec0",{"pageContent":"---\nid: running-tests\ntitle: \"Running and debugging tests\"\n---\n## Introduction\n\nYou can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers by using the `--browser` flag. By default, tests are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the `--headed` CLI argument.\n\n**You will learn**\n\n- [How to run tests from the command line](/running-tests.md#command-line)\n- [How to debug tests](/running-tests.md#debugging-tests)\n\n## Running tests\n\n### Command Line\n\nTo run your tests, use the `pytest` command. This will run your tests on the Chromium browser by default. Tests run in headless mode by default meaning no browser window will be opened while running the tests and results will be seen in the terminal.\n\n```bash\npytest\n```\n\n### Run tests in headed mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":1,"to":24}}}}],["4a5e9a88-0143-4c61-b619-50ec303e7f93",{"pageContent":"```bash\npytest\n```\n\n### Run tests in headed mode\n\nTo run your tests in headed mode, use the `--headed` flag. This will open up a browser window while running your tests and once finished the browser window will close.\n\n```bash\npytest --headed\n```\n### Run tests on different browsers\n\nTo specify which browser you would like to run your tests on, use the `--browser` flag followed by the name of the browser.\n\n```bash\npytest --browser webkit\n```\n\nTo specify multiple browsers to run your tests on, use the `--browser` flag multiple times followed by the name of each browser.\n\n\n```bash\npytest --browser webkit --browser firefox\n```\n\n### Run specific tests\n\nTo run a single test file, pass in the name of the test file that you want to run.\n\n  ```bash\n  pytest test_login.py\n  ```\n\nTo run a set of test files, pass in the names of the test files that you want to run.\n\n  ```bash\n  pytest tests/test_todo_page.py tests/test_landing_page.py\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":20,"to":58}}}}],["d262af73-bc32-4c9c-a14c-4cd0e94cfa55",{"pageContent":"To run a set of test files, pass in the names of the test files that you want to run.\n\n  ```bash\n  pytest tests/test_todo_page.py tests/test_landing_page.py\n  ```\n\nTo run a specific test, pass in the function name of the test you want to run.\n\n  ```bash\n  pytest -k test_add_a_todo_item\n  ```\n\n### Run tests in parallel\n\nTo run your tests in parallel, use the `--numprocesses` flag followed by the number of processes you would like to run your tests on. We recommend half of logical CPU cores.\n\n  ```bash\n  pytest --numprocesses 2\n  ```\n\n  (This assumes `pytest-xdist` is installed. For more information see [here](./test-runners.md#parallelism-running-multiple-tests-at-once).)\n\nFor more information, see [Playwright Pytest usage](./test-runners.md) or the Pytest documentation for [general CLI usage](https://docs.pytest.org/en/stable/usage.html).\n\n## Debugging tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":54,"to":78}}}}],["3ad1b653-7342-43c2-85a1-7f4887525c6a",{"pageContent":"For more information, see [Playwright Pytest usage](./test-runners.md) or the Pytest documentation for [general CLI usage](https://docs.pytest.org/en/stable/usage.html).\n\n## Debugging tests\n\nSince Playwright runs in Python, you can debug it with your debugger of choice, e.g., with the [Python extension](https://code.visualstudio.com/docs/python/python-tutorial) in Visual Studio Code. Playwright comes with the Playwright Inspector which allows you to step through Playwright API calls, see their debug logs and explore [locators](./locators.md).\n\nTo debug all tests, run the following command.\n\n```bash tab=bash-bash lang=python\nPWDEBUG=1 pytest -s\n```\n\n```batch tab=bash-batch lang=python\nset PWDEBUG=1\npytest -s\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=1\npytest -s\n```\n\nTo debug one test file, run the command followed by the name of the test file that you want to debug.\n\n```bash tab=bash-bash lang=python\nPWDEBUG=1 pytest -s test_example.py\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":76,"to":102}}}}],["6a02ad0e-2cf7-48da-8ff9-ac9b915a4811",{"pageContent":"To debug one test file, run the command followed by the name of the test file that you want to debug.\n\n```bash tab=bash-bash lang=python\nPWDEBUG=1 pytest -s test_example.py\n```\n\n```batch tab=bash-batch lang=python\nset PWDEBUG=1\npytest -s test_example.py\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=1\npytest -s test_example.py\n```\n\nTo debug a specific test, add `-k` followed by the name of the test that you want to debug.\n\n```bash tab=bash-bash lang=python\nPWDEBUG=1 pytest -s -k test_get_started_link\n```\n\n```batch tab=bash-batch lang=python\nset PWDEBUG=1\npytest -s -k test_get_started_link\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=1\npytest -s -k test_get_started_link\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":98,"to":128}}}}],["fdcb5f18-df44-4b8b-9b65-ef868472198f",{"pageContent":"```batch tab=bash-batch lang=python\nset PWDEBUG=1\npytest -s -k test_get_started_link\n```\n\n```powershell tab=bash-powershell lang=python\n$env:PWDEBUG=1\npytest -s -k test_get_started_link\n```\n\nThis command will open up a Browser window as well as the Playwright Inspector. You can use the step over button at the top of the inspector to step through your test. Or press the play button to run your test from start to finish. Once the test has finished, the browser window will close.\n\nWhile debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test.\n\n![Playwright Inspector](https://github.com/microsoft/playwright/assets/13063165/c94c89c8-f945-460c-a653-7809c6ca50ee)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":120,"to":134}}}}],["2055e122-2f92-4140-897e-7b589de6b2f6",{"pageContent":"![Playwright Inspector](https://github.com/microsoft/playwright/assets/13063165/c94c89c8-f945-460c-a653-7809c6ca50ee)\n\nCheck out our [debugging guide](./debug.md) to learn more about the [Playwright Inspector](./debug.md#playwright-inspector) as well as debugging with [Browser Developer tools](./debug.md#browser-developer-tools).\n\n\n## What's next\n\n- [Generate tests with Codegen](./codegen.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Run your tests on CI with GitHub Actions](./ci-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-running-tests-python.md","title":"src-running-tests-python","url":"https://playwright.dev/docs/src-running-tests-python","loc":{"lines":{"from":134,"to":143}}}}],["70307598-8a98-488f-a453-48c7a230cddb",{"pageContent":"---\nid: screenshots\ntitle: \"Screenshots\"\n---\n\n## Introduction\n\nHere is a quick way to capture a screenshot and save it into a file:\n\n```js\nawait page.screenshot({ path: 'screenshot.png' });\n```\n\n```python async\nawait page.screenshot(path=\"screenshot.png\")\n```\n\n```python sync\npage.screenshot(path=\"screenshot.png\")\n```\n\n```java\npage.screenshot(new Page.ScreenshotOptions()\n      .setPath(Paths.get(\"screenshot.png\")));\n```\n\n```csharp\nawait Page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\",\n});\n```\n\n[Screenshots API](./api/class-page#page-screenshot) accepts many parameters for image format, clip area, quality, etc. Make sure to check them out.\n\n## Full page screenshots\n\nFull page screenshot is a screenshot of a full scrollable page, as if you had a very\ntall screen and the page could fit it entirely.\n\n```js\nawait page.screenshot({ path: 'screenshot.png', fullPage: true });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-screenshots.md","title":"src-screenshots","url":"https://playwright.dev/docs/src-screenshots","loc":{"lines":{"from":1,"to":43}}}}],["302e417b-ae76-4fe3-800e-358abfc6d92b",{"pageContent":"```js\nawait page.screenshot({ path: 'screenshot.png', fullPage: true });\n```\n\n```java\npage.screenshot(new Page.ScreenshotOptions()\n  .setPath(Paths.get(\"screenshot.png\"))\n  .setFullPage(true));\n```\n\n```python async\nawait page.screenshot(path=\"screenshot.png\", full_page=True)\n```\n\n```python sync\npage.screenshot(path=\"screenshot.png\", full_page=True)\n```\n\n```csharp\nawait Page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\",\n    FullPage = true,\n});\n```\n\n## Capture into buffer\n\nRather than writing into a file, you can get a buffer with the image and post-process it or pass it to a third party pixel diff facility.\n\n```js\nconst buffer = await page.screenshot();\nconsole.log(buffer.toString('base64'));\n```\n\n```java\nbyte[] buffer = page.screenshot();\nSystem.out.println(Base64.getEncoder().encodeToString(buffer));\n```\n\n```python async\n# Capture into Image\nscreenshot_bytes = await page.screenshot()\nprint(base64.b64encode(screenshot_bytes).decode())\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-screenshots.md","title":"src-screenshots","url":"https://playwright.dev/docs/src-screenshots","loc":{"lines":{"from":41,"to":85}}}}],["b922bdf3-dc76-4ebf-a2cd-216c17e677d1",{"pageContent":"```python async\n# Capture into Image\nscreenshot_bytes = await page.screenshot()\nprint(base64.b64encode(screenshot_bytes).decode())\n```\n\n```python sync\nscreenshot_bytes = page.screenshot()\nprint(base64.b64encode(screenshot_bytes).decode())\n```\n\n```csharp\nvar bytes = await page.ScreenshotAsync();\nConsole.WriteLine(Convert.ToBase64String(bytes));\n```\n\n\n## Element screenshot\n\nSometimes it is useful to take a screenshot of a single element.\n\n```js\nawait page.locator('.header').screenshot({ path: 'screenshot.png' });\n```\n\n```java\npage.locator(\".header\").screenshot(new Locator.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n```\n\n```python async\nawait page.locator(\".header\").screenshot(path=\"screenshot.png\")\n```\n\n```python sync\npage.locator(\".header\").screenshot(path=\"screenshot.png\")\n```\n\n```csharp\nawait page.Locator(\".header\").ScreenshotAsync(new() { Path = \"screenshot.png\" });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-screenshots.md","title":"src-screenshots","url":"https://playwright.dev/docs/src-screenshots","loc":{"lines":{"from":81,"to":120}}}}],["ebe9bec4-bf35-4a59-bcc5-4ee70d053c68",{"pageContent":"---\nid: selenium-grid\ntitle: \"Selenium Grid (experimental)\"\n---\n\n## Introduction\n\nPlaywright can connect to [Selenium Grid Hub](https://www.selenium.dev/documentation/grid/) that runs Selenium 4 to launch **Google Chrome** or **Microsoft Edge** browser, instead of running browser on the local machine. Note this feature is **experimental** and is prioritized accordingly.\n\n:::warning\nThere is a risk of Playwright integration with Selenium Grid Hub breaking in the future. Make sure you weight risks against benefits before using it.\n\n<details>\n<summary>\n<span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.6'}}>More details</span>\n</summary>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":1,"to":16}}}}],["84ab881d-43ca-4524-8fc2-23ce2d571096",{"pageContent":"<details>\n<summary>\n<span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.6'}}>More details</span>\n</summary>\n\nInternally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 currently exposes this capability. However, this [might not be the case in the future](https://github.com/SeleniumHQ/selenium/issues/11590#issuecomment-1436113950). If Selenium drops this capability, Playwright will stop working with it.\n</details>\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":13,"to":20}}}}],["a61f02c9-f602-470e-b078-63248ec2a1b7",{"pageContent":"Before connecting Playwright to your Selenium Grid, make sure that grid works with [Selenium WebDriver](https://www.selenium.dev/documentation/webdriver/). For example, run [one of the examples](https://github.com/SeleniumHQ/selenium/tree/trunk/javascript/selenium-webdriver/example) and pass `SELENIUM_REMOTE_URL` environment variable. If webdriver example does not work, look for any errors at your Selenium hub/node/standalone output and search [Selenium issues](https://github.com/SeleniumHQ/selenium/issues) for a possible solution.\n\n## Starting Selenium Grid\n\nIf you run distributed Selenium Grid, Playwright needs selenium nodes to be registered with an accessible address, so that it could connect to the browsers. To make sure it works as expected, set `SE_NODE_GRID_URL` environment variable pointing to the hub when running selenium nodes.\n\n```bash\n# Start selenium node\nSE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\" java -jar selenium-server-<version>.jar node\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":22,"to":31}}}}],["aa6e98a2-036b-40e1-83ee-c45662247042",{"pageContent":"```bash\n# Start selenium node\nSE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\" java -jar selenium-server-<version>.jar node\n```\n\n## Connecting Playwright to Selenium Grid\n\nTo connect Playwright to **Selenium Grid 4**, set `SELENIUM_REMOTE_URL` environment variable pointing to your Selenium Grid Hub. Note that this only works for Google Chrome and Microsoft Edge.\n\n```bash js\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test\n```\n\n```bash python\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium\n```\n\n```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test\n```\n\nYou don't have to change your code, just use your testing harness or [`method: BrowserType.launch`] as usual.\n\n### Passing additional capabilities","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":28,"to":55}}}}],["211f100f-ac51-41ab-86b1-d69f4502bd88",{"pageContent":"You don't have to change your code, just use your testing harness or [`method: BrowserType.launch`] as usual.\n\n### Passing additional capabilities\n\nIf your grid requires additional capabilities to be set (for example, you use an external service), you can set `SELENIUM_REMOTE_CAPABILITIES` environment variable to provide JSON-serialized capabilities.\n\n```bash js\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" npx playwright test\n```\n\n```bash python\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" pytest --browser chromium\n```\n\n```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" mvn test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":53,"to":69}}}}],["c936ba04-fb46-4a71-9a0a-da8cfe4d9fdb",{"pageContent":"```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" dotnet test\n```\n\n### Passing additional headers\n\nIf your grid requires additional headers to be set (for example, you should provide authorization token to use browsers in your cloud), you can set `SELENIUM_REMOTE_HEADERS` environment variable to provide JSON-serialized headers.\n\n```bash js\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" npx playwright test\n```\n\n```bash python\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" pytest --browser chromium\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":67,"to":85}}}}],["00a2ea5d-5e37-4529-b849-5e7c7cbc2272",{"pageContent":"```bash python\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" pytest --browser chromium\n```\n\n```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" dotnet test\n```\n\n### Detailed logs\n\nRun with `DEBUG=pw:browser*` environment variable to see how Playwright is connecting to Selenium Grid.\n\n```bash js\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 npx playwright test\n```\n\n```bash python\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 pytest --browser chromium\n```\n\n```bash java\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 mvn test\n```\n\n```bash csharp\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 dotnet test\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":83,"to":113}}}}],["e1577606-e211-491c-bd50-066ddc2bf5e5",{"pageContent":"```bash java\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 mvn test\n```\n\n```bash csharp\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 dotnet test\n```\n\nIf you file an issue, please include this log.\n\n\n\n## Using Selenium Docker\n\nOne easy way to use Selenium Grid is to run official docker containers. Read more in [selenium docker images](https://github.com/SeleniumHQ/docker-selenium) documentation. For image tagging convention, [read more](https://github.com/SeleniumHQ/docker-selenium/wiki/Tagging-Convention#selenium-grid-4x-and-above).\n\n### Standalone mode\n\nHere is an example of running selenium standalone and connecting Playwright to it. Note that hub and node are on the same `localhost`, and we pass `SE_NODE_GRID_URL` environment variable pointing to it.\n\nFirst start Selenium.\n\n```bash\ndocker run -d -p 4444:4444 --shm-size=\"2g\" -e SE_NODE_GRID_URL=\"http://localhost:4444\" selenium/standalone-chromium:latest\n```\n\nThen run Playwright.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":107,"to":133}}}}],["e0de178d-4886-48cd-b8f6-814075016375",{"pageContent":"First start Selenium.\n\n```bash\ndocker run -d -p 4444:4444 --shm-size=\"2g\" -e SE_NODE_GRID_URL=\"http://localhost:4444\" selenium/standalone-chromium:latest\n```\n\nThen run Playwright.\n\n```bash js\nSELENIUM_REMOTE_URL=http://localhost:4444 npx playwright test\n```\n\n```bash python\nSELENIUM_REMOTE_URL=http://localhost:4444 pytest --browser chromium\n```\n\n```bash java\nSELENIUM_REMOTE_URL=http://localhost:4444 mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://localhost:4444 dotnet test\n```\n\n### Hub and nodes mode\n\nHere is an example of running selenium hub and a single selenium node, and connecting Playwright to the hub. Note that hub and node have different IPs, and we pass `SE_NODE_GRID_URL` environment variable pointing to the hub when starting node containers.\n\nFirst start the hub container and one or more node containers.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":127,"to":155}}}}],["8979d3c9-cc44-4511-8bff-e011a19b8b07",{"pageContent":"First start the hub container and one or more node containers.\n\n```bash\ndocker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.25.0\ndocker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\"\n    selenium/node-chromium:4.25.0\n```\n\nThen run Playwright.\n\n```bash js\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test\n```\n\n```bash python\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium\n```\n\n```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test\n```\n\n\n## Selenium 3","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":155,"to":187}}}}],["99f236b4-2d5b-48cc-811a-e49ce029d912",{"pageContent":"```bash java\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test\n```\n\n```bash csharp\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test\n```\n\n\n## Selenium 3\n\nInternally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 exposes this capability, while Selenium 3 does not.\n\nThis means that Selenium 3 is supported in a best-effort manner, where Playwright tries to connect to the grid node directly. Grid nodes must be directly accessible from the machine that runs Playwright.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-selenium-grid.md","title":"src-selenium-grid","url":"https://playwright.dev/docs/src-selenium-grid","loc":{"lines":{"from":178,"to":191}}}}],["466529f6-3dca-4e3b-96c1-0bbba80732b6",{"pageContent":"---\nid: service-workers-experimental\ntitle: \"(Experimental) Service Worker Network Events\"\n---\n\n## Introduction\n\n:::warning\nIf you're looking to do general network mocking, routing, and interception, please see the [Network Guide](./network.md) first. Playwright provides built-in APIs for this use case that don't require the information below. However, if you're interested in requests made by Service Workers themselves, please read below.\n:::\n\n[Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) provide a browser-native method of handling requests made by a page with the native [Fetch API (`fetch`)](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) along with other network-requested assets (like scripts, css, and images).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":1,"to":12}}}}],["71af2bdd-0d5b-4926-8919-0f9de73a8add",{"pageContent":"They can act as a **network proxy** between the page and the external network to perform caching logic or can provide users with an offline experience if the Service Worker adds a [FetchEvent](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent#examples) listener.\n\nMany sites that use Service Workers simply use them as a transparent optimization technique. While users might notice a faster experience, the app's implementation is unaware of their existence. Running the app with or without Service Workers enabled appears functionally equivalent.\n\n## How to Enable\n\nPlaywright's inspection and routing of requests made by Service Workers are **experimental** and disabled by default.\n\nSet the `PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS` environment variable to `1` (or any other value) to enable the feature. Only Chrome/Chromium are currently supported.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":14,"to":22}}}}],["4bc118d5-d581-402c-84c3-d847fca8dbcc",{"pageContent":"Set the `PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS` environment variable to `1` (or any other value) to enable the feature. Only Chrome/Chromium are currently supported.\n\nIf you're using (or are interested in using this feature), please comment on [this issue](https://github.com/microsoft/playwright/issues/15684) letting us know your use case.\n\n## Service Worker Fetch\n\n### Accessing Service Workers and Waiting for Activation\n\nYou can use [`method: BrowserContext.serviceWorkers`] to list the Service [Worker]s, or specifically watch for the Service [Worker] if you anticipate a page will trigger its [registration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register):\n\n```js\nconst serviceWorkerPromise = context.waitForEvent('serviceworker');\nawait page.goto('/example-with-a-service-worker.html');\nconst serviceworker = await serviceWorkerPromise;\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":22,"to":36}}}}],["073845eb-0b27-47ed-a7df-d99b7b6ca652",{"pageContent":"```js\nconst serviceWorkerPromise = context.waitForEvent('serviceworker');\nawait page.goto('/example-with-a-service-worker.html');\nconst serviceworker = await serviceWorkerPromise;\n```\n\n[`event: BrowserContext.serviceWorker`] is fired ***before*** the Service Worker's main script has been evaluated, so ***before*** calling service[`method: Worker.evaluate`] you should wait on its activation.\n\nThere are more idiomatic methods of waiting for a Service Worker to be activated, but the following is an implementation agnostic method:\n\n```js\nawait page.evaluate(async () => {\n  const registration = await window.navigator.serviceWorker.getRegistration();\n  if (registration.active?.state === 'activated')\n    return;\n  await new Promise(res =>\n    window.navigator.serviceWorker.addEventListener('controllerchange', res),\n  );\n});\n```\n\n### Network Events and Routing\n\nAny network request made by the **Service Worker** will have:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":32,"to":55}}}}],["02ace685-a9dc-41c6-92e7-a12a7890c18a",{"pageContent":"### Network Events and Routing\n\nAny network request made by the **Service Worker** will have:\n\n* [`event: BrowserContext.request`] and its corresponding events ([`event: BrowserContext.requestFinished`] and [`event: BrowserContext.response`], or [`event: BrowserContext.requestFailed`])\n* [`method: BrowserContext.route`] will see the request\n* [`method: Request.serviceWorker`] will be set to the Service [Worker] instance, and [`method: Request.frame`] will **throw**\n* [`method: Response.fromServiceWorker`] will return `false`\n\nAdditionally, any network request made by the **Page** (including its sub-[Frame]s) will have:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":53,"to":62}}}}],["5091ef5e-f9ee-46d0-9848-d6278fb7b31a",{"pageContent":"Additionally, any network request made by the **Page** (including its sub-[Frame]s) will have:\n\n* [`event: BrowserContext.request`] and its corresponding events ([`event: BrowserContext.requestFinished`] and [`event: BrowserContext.response`], or [`event: BrowserContext.requestFailed`])\n* [`event: Page.request`] and its corresponding events ([`event: Page.requestFinished`] and [`event: Page.response`], or [`event: Page.requestFailed`])\n* [`method: Page.route`] and [`method: Page.route`] will **not** see the request (if a Service Worker's fetch handler was registered)\n* [`method: Request.serviceWorker`] will be set to `null`, and [`method: Request.frame`] will return the [Frame]\n* [`method: Response.fromServiceWorker`] will return `true` (if a Service Worker's fetch handler was registered)\n\nMany Service Worker implementations simply execute the request from the page (possibly with some custom caching/offline logic omitted for simplicity):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":62,"to":70}}}}],["503cb391-f469-4297-99e8-9979fb5fcee0",{"pageContent":"Many Service Worker implementations simply execute the request from the page (possibly with some custom caching/offline logic omitted for simplicity):\n\n```js title=\"transparent-service-worker.js\"\nself.addEventListener('fetch', event => {\n  // actually make the request\n  const responsePromise = fetch(event.request);\n  // send it back to the page\n  event.respondWith(responsePromise);\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(clients.claim());\n});\n```\n\nIf a page registers the above Service Worker:\n\n```html\n<!-- filename: index.html -->\n<script>\n  window.registrationPromise = navigator.serviceWorker.register('/transparent-service-worker.js');\n</script>\n```\n\nOn the first visit to the page via [`method: Page.goto`], the following Request/Response events would be emitted (along with the corresponding network lifecycle events):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":70,"to":94}}}}],["949f729c-1a26-4523-ad41-67419354a290",{"pageContent":"| Event                             | Owner            | URL                            | Routed | [`method: Response.fromServiceWorker`] |\n| -                                 | -                | -                              | -      | -                                      |\n| [`event: BrowserContext.request`] | [Frame]          | index.html                     | Yes    |                                        |\n| [`event: Page.request`]           | [Frame]          | index.html                     | Yes    |                                        |\n| [`event: BrowserContext.request`] | Service [Worker] | transparent-service-worker.js  | Yes    |                                        |\n| [`event: BrowserContext.request`] | Service [Worker] | data.json                      | Yes    |                                        |\n| [`event: BrowserContext.request`] | [Frame]          | data.json                      |        | Yes                                    |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":96,"to":102}}}}],["d94a24e1-d5e1-480f-8102-b44dbf543f85",{"pageContent":"| [`event: BrowserContext.request`] | [Frame]          | data.json                      |        | Yes                                    |\n| [`event: Page.request`]           | [Frame]          | data.json                      |        | Yes                                    |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":102,"to":103}}}}],["9c32a411-0d4c-44f2-b36f-3f88ee08a17b",{"pageContent":"Since the example Service Worker just acts a basic transparent \"proxy\":\n\n* There's 2 [`event: BrowserContext.request`] events for `data.json`; one [Frame]-owned, the other Service [Worker]-owned.\n* Only the Service [Worker]-owned request for the resource was routable via [`method: BrowserContext.route`]; the [Frame]-owned events for `data.json` are not routeable, as they would not have even had the possibility to hit the external network since the Service Worker has a fetch handler registered.\n\n:::caution\nIt's important to note: calling [`method: Request.frame`] or [`method: Response.frame`] will **throw** an exception, if called on a [Request]/[Response] that has a non-null [`method: Request.serviceWorker`].\n:::\n\n\n#### Advanced Example","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":107,"to":117}}}}],["496aeef4-9a0c-4631-967e-249cbadffb6a",{"pageContent":"#### Advanced Example\n\nWhen a Service Worker handles a page's request, the Service Worker can make 0 to n requests to the external network. The Service Worker might respond directly from a cache, generate a response in memory, rewrite the request, make two requests and then combine into 1, etc.\n\nConsider the code snippets below to understand Playwright's view into the Request/Responses and how it impacts routing in some of these cases.\n\n\n```js title=\"complex-service-worker.js\"\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n      caches.open('v1').then(function(cache) {\n      // 1. Pre-fetches and caches /addressbook.json\n        return cache.add('/addressbook.json');\n      })\n  );\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":117,"to":132}}}}],["991d68e5-4c07-4857-8a8c-33747a8533d7",{"pageContent":"// Opt to handle FetchEvent's from the page\nself.addEventListener('fetch', event => {\n  event.respondWith(\n      (async () => {\n        // 1. Try to first serve directly from caches\n        const response = await caches.match(event.request);\n        if (response)\n          return response;\n\n        // 2. Re-write request for /foo to /bar\n        if (event.request.url.endsWith('foo'))\n          return fetch('./bar');\n\n        // 3. Prevent tracker.js from being retrieved, and returns a placeholder response\n        if (event.request.url.endsWith('tracker.js')) {\n          return new Response('console.log(\"no trackers!\")', {\n            status: 200,\n            headers: { 'Content-Type': 'text/javascript' },\n          });\n        }\n\n        // 4. Otherwise, fallthrough, perform the fetch and respond\n        return fetch(event.request);\n      })()\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(clients.claim());\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":134,"to":164}}}}],["17a25b07-c9b3-4cb8-8ee8-7581bb61b223",{"pageContent":"self.addEventListener('activate', event => {\n  event.waitUntil(clients.claim());\n});\n```\n\nAnd a page that simply registers the Service Worker:\n\n```html\n<!-- filename: index.html -->\n<script>\n  window.registrationPromise = navigator.serviceWorker.register('/complex-service-worker.js');\n</script>\n```\n\nOn the first visit to the page via [`method: Page.goto`], the following Request/Response events would be emitted:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":161,"to":175}}}}],["d7b7b05e-572f-410f-a601-647062e45e20",{"pageContent":"On the first visit to the page via [`method: Page.goto`], the following Request/Response events would be emitted:\n\n| Event                             | Owner            | URL                            | Routed | [`method: Response.fromServiceWorker`] |\n| -                                 | -                | -                              | -      | -                                      |\n| [`event: BrowserContext.request`] | [Frame]          | index.html                     | Yes    |                                        |\n| [`event: Page.request`]           | [Frame]          | index.html                     | Yes    |                                        |\n| [`event: BrowserContext.request`] | Service [Worker] | complex-service-worker.js      | Yes    |                                        |\n| [`event: BrowserContext.request`] | Service [Worker] | addressbook.json               | Yes    |                                        |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":175,"to":182}}}}],["644e7b6f-3630-44ec-9b56-7147d7c0a079",{"pageContent":"It's important to note that [`cache.add`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/add) caused the Service Worker to make a request (Service [Worker]-owned), even before `addressbook.json` was asked for in the page.\n\nOnce the Service Worker is activated and handling FetchEvents, if the page makes the following requests:\n\n```js\nawait page.evaluate(() => fetch('/addressbook.json'));\nawait page.evaluate(() => fetch('/foo'));\nawait page.evaluate(() => fetch('/tracker.js'));\nawait page.evaluate(() => fetch('/fallthrough.txt'));\n```\n\nThe following Request/Response events would be emitted:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":184,"to":195}}}}],["50e6ef8e-fb48-4b2c-a7a7-af3cc02eed28",{"pageContent":"| Event                             | Owner            | URL                            | Routed | [`method: Response.fromServiceWorker`] |\n| -                                 | -                | -                              | -      | -                                      |\n| [`event: BrowserContext.request`] | [Frame]          | addressbook.json               |        | Yes                                    |\n| [`event: Page.request`]           | [Frame]          | addressbook.json               |        | Yes                                    |\n| [`event: BrowserContext.request`] | Service [Worker] | bar                            | Yes    |                                        |\n| [`event: BrowserContext.request`] | [Frame]          | foo                            |        | Yes                                    |\n| [`event: Page.request`]           | [Frame]          | foo                            |        | Yes                                    |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":197,"to":203}}}}],["114d6846-6b4d-4d1e-b70d-3dd9374d5251",{"pageContent":"| [`event: Page.request`]           | [Frame]          | foo                            |        | Yes                                    |\n| [`event: BrowserContext.request`] | [Frame]          | tracker.js                     |        | Yes                                    |\n| [`event: Page.request`]           | [Frame]          | tracker.js                     |        | Yes                                    |\n| [`event: BrowserContext.request`] | Service [Worker] | fallthrough.txt                | Yes    |                                        |\n| [`event: BrowserContext.request`] | [Frame]          | fallthrough.txt                |        | Yes                                    |\n| [`event: Page.request`]           | [Frame]          | fallthrough.txt                |        | Yes                                    |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":203,"to":208}}}}],["1af9c4ec-b36b-4f06-a17c-1456613c24ef",{"pageContent":"It's important to note:\n\n* The page requested `/foo`, but the Service Worker requested `/bar`, so there are only [Frame]-owned events for `/foo`, but not `/bar`.\n* Likewise, the Service Worker never hit the network for `tracker.js`, so only [Frame]-owned events were emitted for that request.\n\n## Routing Service Worker Requests Only\n\n```js\nawait context.route('**', async route => {\n  if (route.request().serviceWorker()) {\n    // NB: calling route.request().frame() here would THROW\n    return route.fulfill({\n      contentType: 'text/plain',\n      status: 200,\n      body: 'from sw',\n    });\n  } else {\n    return route.continue();\n  }\n});\n```\n\n## Known Limitations\n\nRequests for updated Service Worker main script code currently cannot be routed (https://github.com/microsoft/playwright/issues/14711).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-service-workers-experimental-network-events-js.md","title":"src-service-workers-experimental-network-events-js","url":"https://playwright.dev/docs/src-service-workers-experimental-network-events-js","loc":{"lines":{"from":210,"to":234}}}}],["c435ce3b-93c7-41e9-a059-dcca8fa53153",{"pageContent":"---\nid: test-annotations\ntitle: \"Annotations\"\n---\n\n## Introduction\n\nPlaywright supports tags and annotations that are displayed in the test report.\n\nYou can add your own tags and annotations at any moment, but Playwright comes with a few built-in ones:\n- [`method: Test.skip`] marks the test as irrelevant. Playwright does not run such a test. Use this annotation when the test is not applicable in some configuration.\n- [`method: Test.fail`] marks the test as failing. Playwright will run this test and ensure it does indeed fail. If the test does not fail, Playwright will complain.\n- [`method: Test.fixme`] marks the test as failing. Playwright will not run this test, as opposed to the `fail` annotation. Use `fixme` when running the test is slow or crashes.\n- [`method: Test.slow`] marks the test as slow and triples the test timeout.\n\nAnnotations can be added to a single test or a group of tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":1,"to":16}}}}],["60d2e448-b701-4052-83a4-5b4517cff50b",{"pageContent":"Annotations can be added to a single test or a group of tests.\n\nBuilt-in annotations can be conditional, in which case they apply when the condition is truthy, and may depend on test fixtures. There could be multiple annotations on the same test, possibly in different configurations.\n\n## Focus a test\n\nYou can focus some tests. When there are focused tests, only these tests run.\n\n```js\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n## Skip a test\n\nMark a test as skipped.\n\n```js\ntest.skip('skip this test', async ({ page }) => {\n  // This test is not run\n});\n```\n\n## Conditionally skip a test\n\nYou can skip certain test based on the condition.\n\n```js\ntest('skip this test', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n});\n```\n\n## Group tests\n\nYou can group tests to give them a logical name or to scope before/after hooks to the group.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":16,"to":52}}}}],["82128e87-0725-44cf-b505-36683c79db22",{"pageContent":"## Group tests\n\nYou can group tests to give them a logical name or to scope before/after hooks to the group.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Tag tests\n\nSometimes you want to tag your tests as `@fast` or `@slow`, and then filter by tag in the test report. Or you might want to only run tests that have a certain tag.\n\nTo tag a test, either provide an additional details object when declaring a test, or add `@`-token to the test title. Note that tags must start with `@` symbol.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  tag: '@fast',\n}, async ({ page }) => {\n  // ...\n});\n\ntest('test full report @slow', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also tag all tests in a group or provide multiple tags:\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":50,"to":91}}}}],["bb0b631f-3dec-4034-b792-1ac9d866dcd8",{"pageContent":"test('test full report @slow', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also tag all tests in a group or provide multiple tags:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('group', {\n  tag: '@report',\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    tag: ['@slow', '@vrt'],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\nYou can now run tests that have a particular tag with [`--grep`](./test-cli.md#reference) command line option.\n\n```bash tab=bash-bash\nnpx playwright test --grep @fast\n```\n\n```powershell tab=bash-powershell\nnpx playwright test --grep \"@fast\"\n```\n\n```batch tab=bash-batch\nnpx playwright test --grep @fast\n```\n\nOr if you want the opposite, you can skip the tests with a certain tag:\n\n```bash tab=bash-bash\nnpx playwright test --grep-invert @fast\n```\n\n```powershell tab=bash-powershell\nnpx playwright test --grep-invert \"@fast\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":83,"to":130}}}}],["437aa2bf-eebe-4c49-899a-d56ac3c64882",{"pageContent":"```bash tab=bash-bash\nnpx playwright test --grep-invert @fast\n```\n\n```powershell tab=bash-powershell\nnpx playwright test --grep-invert \"@fast\"\n```\n\n```batch tab=bash-batch\nnpx playwright test --grep-invert @fast\n```\n\nTo run tests containing either tag (logical `OR` operator):\n\n```bash tab=bash-bash\nnpx playwright test --grep \"@fast|@slow\"\n```\n\n```powershell tab=bash-powershell\nnpx playwright test --grep --% \"@fast^|@slow\"\n```\n\n```batch tab=bash-batch\nnpx playwright test --grep \"@fast^|@slow\"\n```\n\nOr run tests containing both tags (logical `AND` operator) using regex lookaheads:\n\n```bash\nnpx playwright test --grep \"(?=.*@fast)(?=.*@slow)\"\n```\n\nYou can also filter tests in the configuration file via [`property: TestConfig.grep`] and [`property: TestProject.grep`].\n\n\n\n## Annotate tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":124,"to":160}}}}],["578c3060-3129-4b3d-ac81-4242238c8af1",{"pageContent":"You can also filter tests in the configuration file via [`property: TestConfig.grep`] and [`property: TestProject.grep`].\n\n\n\n## Annotate tests\n\nIf you would like to annotate your tests with something more substantial than a tag, you can do that when declaring a test. Annotations have a `type` and a `description` for more context and available in reporter API. Playwright's built-in HTML reporter shows all annotations, except those where `type` starts with `_` symbol.\n\nFor example, to annotate a test with an issue url:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  // ...\n});\n```\n\nYou can also annotate all tests in a group or provide multiple annotations:\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":156,"to":182}}}}],["f26149a0-d722-47bd-8eba-750b31a38572",{"pageContent":"You can also annotate all tests in a group or provide multiple annotations:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('report tests', {\n  annotation: { type: 'category', description: 'report' },\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    annotation: [\n      { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },\n      { type: 'performance', description: 'very slow test!' },\n    ],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Conditionally skip a group of tests\n\nFor example, you can run a group of tests just in Chromium by passing a callback.\n\n```js title=\"example.spec.ts\"\n\ntest.describe('chromium only', () => {\n  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');\n\n  test.beforeAll(async () => {\n    // This hook is only run in Chromium.\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":179,"to":213}}}}],["cac5fcde-f3d6-4daa-ba4d-2ec9589f4a5e",{"pageContent":"test.describe('chromium only', () => {\n  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');\n\n  test.beforeAll(async () => {\n    // This hook is only run in Chromium.\n  });\n\n  test('test 1', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n\n  test('test 2', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n});\n```\n\n## Use fixme in `beforeEach` hook\n\nTo avoid running `beforeEach` hooks, you can put annotations in the hook itself.\n\n```js title=\"example.spec.ts\"\n\ntest.beforeEach(async ({ page, isMobile }) => {\n  test.fixme(isMobile, 'Settings page does not work in mobile yet');\n\n  await page.goto('http://localhost:3000/settings');\n});\n\ntest('user profile', async ({ page }) => {\n  await page.getByText('My Profile').click();\n  // ...\n});\n```\n\n## Runtime annotations\n\nWhile the test is already running, you can add annotations to [`test.info().annotations`](./api/class-testinfo#test-info-annotations).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":208,"to":245}}}}],["dd992bc9-2d2a-442a-8ee1-bf3617f489a6",{"pageContent":"## Runtime annotations\n\nWhile the test is already running, you can add annotations to [`test.info().annotations`](./api/class-testinfo#test-info-annotations).\n\n\n```js title=\"example.spec.ts\"\n\ntest('example test', async ({ page, browser }) => {\n  test.info().annotations.push({\n    type: 'browser version',\n    description: browser.version(),\n  });\n\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-annotations-js.md","title":"src-test-annotations-js","url":"https://playwright.dev/docs/src-test-annotations-js","loc":{"lines":{"from":243,"to":258}}}}],["9de07ed3-5aad-4c0e-9b2a-3010cefd5ad1",{"pageContent":"# class: Fixtures\n* since: v1.10\n* langs: js\n\nPlaywright Test is based on the concept of the [test fixtures](../test-fixtures.md). Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else.\n\nPlaywright Test looks at each test declaration, analyses the set of fixtures the test needs and prepares those fixtures specifically for the test. Values prepared by the fixtures are merged into a single object that is available to the `test`, hooks, annotations and other fixtures as a first parameter.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  // ...\n});\n```\n\nGiven the test above, Playwright Test will set up the `page` fixture before running the test, and tear it down after the test has finished. `page` fixture provides a [Page] object that is available to the test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fixtures.md","title":"src-test-api-class-fixtures","url":"https://playwright.dev/docs/src-test-api-class-fixtures","loc":{"lines":{"from":1,"to":17}}}}],["cacfb445-8fa5-4298-9206-6c39d94b38e5",{"pageContent":"Playwright Test comes with builtin fixtures listed below, and you can add your own fixtures as well. Playwright Test also [provides options][TestOptions] to  configure [`property: Fixtures.browser`], [`property: Fixtures.context`] and [`property: Fixtures.page`].\n\n## property: Fixtures.browser\n* since: v1.10\n- type: <[Browser]>\n\n[Browser] instance is shared between all tests in the [same worker](../test-parallel.md) - this makes testing efficient. However, each test runs in an isolated [BrowserContext]  and gets a fresh environment.\n\nLearn how to [configure browser](../test-configuration.md) and see [available options][TestOptions].\n\n**Usage**\n\n```js\ntest.beforeAll(async ({ browser }) => {\n  const page = await browser.newPage();\n  // ...\n});\n```\n\n## property: Fixtures.browserName\n* since: v1.10\n- type: <[BrowserName]<\"chromium\"|\"firefox\"|\"webkit\">>\n\nName of the browser that runs tests. Defaults to `'chromium'`. Useful to [annotate tests](../test-annotations.md) based on the browser.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fixtures.md","title":"src-test-api-class-fixtures","url":"https://playwright.dev/docs/src-test-api-class-fixtures","loc":{"lines":{"from":19,"to":42}}}}],["1bacc82c-6793-4983-b66c-cc8d3a67a927",{"pageContent":"Name of the browser that runs tests. Defaults to `'chromium'`. Useful to [annotate tests](../test-annotations.md) based on the browser.\n\n**Usage**\n\n```js\ntest('skip this test in Firefox', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n  // ...\n});\n```\n\n## property: Fixtures.context\n* since: v1.10\n- type: <[BrowserContext]>\n\nIsolated [BrowserContext] instance, created for each test. Since contexts are isolated between each other, every test gets a fresh environment, even when multiple tests run in a single [Browser] for maximum efficiency.\n\nLearn how to [configure context](../test-configuration.md) and see [available options][TestOptions].\n\nDefault [`property: Fixtures.page`] belongs to this context.\n\n**Usage**\n\n```js\ntest('example test', async ({ page, context }) => {\n  await context.route('*external.com/*', route => route.abort());\n  // ...\n});\n```\n\n## property: Fixtures.page\n* since: v1.10\n- type: <[Page]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fixtures.md","title":"src-test-api-class-fixtures","url":"https://playwright.dev/docs/src-test-api-class-fixtures","loc":{"lines":{"from":42,"to":74}}}}],["1b6a14ec-63db-4021-b1bb-9e4570a80beb",{"pageContent":"## property: Fixtures.page\n* since: v1.10\n- type: <[Page]>\n\nIsolated [Page] instance, created for each test. Pages are isolated between tests due to [`property: Fixtures.context`] isolation.\n\nThis is the most common fixture used in a test.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('/signin');\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  // ...\n});\n```\n\n## property: Fixtures.request\n* since: v1.10\n- type: <[APIRequestContext]>\n\nIsolated [APIRequestContext] instance for each test.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ request }) => {\n  await request.post('/signin', {\n    data: {\n      username: 'user',\n      password: 'password'\n    }\n  });\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fixtures.md","title":"src-test-api-class-fixtures","url":"https://playwright.dev/docs/src-test-api-class-fixtures","loc":{"lines":{"from":72,"to":114}}}}],["3cb0e5cf-fdd7-4184-bb0f-aae196cc055f",{"pageContent":"# class: FullConfig\n* since: v1.10\n* langs: js\n\nResolved configuration which is accessible via [`property: TestInfo.config`] and is passed to the test reporters. To see the format of Playwright configuration file, please see [TestConfig] instead.\n\n## property: FullConfig.configFile\n* since: v1.20\n- type: ?<[string]>\n\nPath to the configuration file used to run the tests. The value is an empty string if no config file was used.\n\n## property: FullConfig.forbidOnly\n* since: v1.10\n- type: <[boolean]>\n\nSee [`property: TestConfig.forbidOnly`].\n\n## property: FullConfig.fullyParallel\n* since: v1.20\n- type: <[boolean]>\n\nSee [`property: TestConfig.fullyParallel`].\n\n## property: FullConfig.globalSetup\n* since: v1.10\n- type: <[null]|[string]>\n\nSee [`property: TestConfig.globalSetup`].\n\n## property: FullConfig.globalTeardown\n* since: v1.10\n- type: <[null]|[string]>\n\nSee [`property: TestConfig.globalTeardown`].\n\n## property: FullConfig.globalTimeout\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullconfig.md","title":"src-test-api-class-fullconfig","url":"https://playwright.dev/docs/src-test-api-class-fullconfig","loc":{"lines":{"from":1,"to":39}}}}],["22c2e944-433b-4264-a022-0b2223d89363",{"pageContent":"## property: FullConfig.globalTeardown\n* since: v1.10\n- type: <[null]|[string]>\n\nSee [`property: TestConfig.globalTeardown`].\n\n## property: FullConfig.globalTimeout\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.globalTimeout`].\n\n## property: FullConfig.grep\n* since: v1.10\n- type: <[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestConfig.grep`].\n\n## property: FullConfig.grepInvert\n* since: v1.10\n- type: <[null]|[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestConfig.grepInvert`].\n\n## property: FullConfig.maxFailures\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.maxFailures`].\n\n## property: FullConfig.metadata\n* since: v1.10\n- type: <[Metadata]>\n\nSee [`property: TestConfig.metadata`].\n\n## property: FullConfig.preserveOutput\n* since: v1.10\n- type: <[PreserveOutput]<\"always\"|\"never\"|\"failures-only\">>\n\nSee [`property: TestConfig.preserveOutput`].\n\n## property: FullConfig.projects\n* since: v1.10\n- type: <[Array]<[FullProject]>>\n\nList of resolved projects.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullconfig.md","title":"src-test-api-class-fullconfig","url":"https://playwright.dev/docs/src-test-api-class-fullconfig","loc":{"lines":{"from":31,"to":77}}}}],["2c6999cb-181a-438d-ba1f-b8b58fdbd3bf",{"pageContent":"See [`property: TestConfig.preserveOutput`].\n\n## property: FullConfig.projects\n* since: v1.10\n- type: <[Array]<[FullProject]>>\n\nList of resolved projects.\n\n## property: FullConfig.quiet\n* since: v1.10\n- type: <[boolean]>\n\nSee [`property: TestConfig.quiet`].\n\n## property: FullConfig.reporter\n* since: v1.10\n- type: <[string]|[Array]<[Object]>|[BuiltInReporter]<\"list\"|\"dot\"|\"line\"|\"github\"|\"json\"|\"junit\"|\"null\"|\"html\">>\n  - `0` <[string]> Reporter name or module or file path\n  - `1` <[Object]> An object with reporter options if any\n\nSee [`property: TestConfig.reporter`].\n\n## property: FullConfig.reportSlowTests\n* since: v1.10\n- type: <[null]|[Object]>\n  - `max` <[int]> The maximum number of slow test files to report.\n  - `threshold` <[float]> Test file duration in milliseconds that is considered slow.\n\nSee [`property: TestConfig.reportSlowTests`].\n\n## property: FullConfig.rootDir\n* since: v1.20\n- type: <[string]>\n\nBase directory for all relative paths used in the reporters.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullconfig.md","title":"src-test-api-class-fullconfig","url":"https://playwright.dev/docs/src-test-api-class-fullconfig","loc":{"lines":{"from":71,"to":105}}}}],["a8bf5f3f-48c0-4dcf-a787-fba7fd17ba6f",{"pageContent":"See [`property: TestConfig.reportSlowTests`].\n\n## property: FullConfig.rootDir\n* since: v1.20\n- type: <[string]>\n\nBase directory for all relative paths used in the reporters.\n\n## property: FullConfig.shard\n* since: v1.10\n- type: <[null]|[Object]>\n  - `total` <[int]> The total number of shards.\n  - `current` <[int]> The index of the shard to execute, one-based.\n\nSee [`property: TestConfig.shard`].\n\n## property: FullConfig.updateSnapshots\n* since: v1.10\n- type: <[UpdateSnapshots]<\"all\"|\"changed\"|\"missing\"|\"none\">>\n\nSee [`property: TestConfig.updateSnapshots`].\n\n## property: FullConfig.updateSourceMethod\n* since: v1.50\n- type: <[UpdateSourceMethod]<\"overwrite\"|\"3way\"|\"patch\">>\n\nSee [`property: TestConfig.updateSourceMethod`].\n\n## property: FullConfig.version\n* since: v1.20\n- type: <[string]>\n\nPlaywright version.\n\n## property: FullConfig.webServer\n* since: v1.10\n- type: <[null]|[Object]>\n\nSee [`property: TestConfig.webServer`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullconfig.md","title":"src-test-api-class-fullconfig","url":"https://playwright.dev/docs/src-test-api-class-fullconfig","loc":{"lines":{"from":99,"to":137}}}}],["ca56cd37-9964-4d1a-a519-8bc512b2db40",{"pageContent":"Playwright version.\n\n## property: FullConfig.webServer\n* since: v1.10\n- type: <[null]|[Object]>\n\nSee [`property: TestConfig.webServer`].\n\n## property: FullConfig.workers\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.workers`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullconfig.md","title":"src-test-api-class-fullconfig","url":"https://playwright.dev/docs/src-test-api-class-fullconfig","loc":{"lines":{"from":131,"to":143}}}}],["88929abc-71ab-4685-8562-7de2c252d95f",{"pageContent":"# class: FullProject\n* since: v1.10\n* langs: js\n\nRuntime representation of the test project configuration. It is accessible in the tests via [`property: TestInfo.project`] and [`property: WorkerInfo.project`] and is passed to the test reporters. To see the format of the project in the Playwright configuration file please see [TestProject] instead.\n\n## property: FullProject.dependencies\n* since: v1.31\n- type: <[Array]<[string]>>\n\nSee [`property: TestProject.dependencies`].\n\n## property: FullProject.grep\n* since: v1.10\n- type: <[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestProject.grep`].\n\n## property: FullProject.grepInvert\n* since: v1.10\n- type: <[null]|[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestProject.grepInvert`].\n\n## property: FullProject.metadata\n* since: v1.10\n- type: <[Metadata]>\n\nSee [`property: TestProject.metadata`].\n\n## property: FullProject.name\n* since: v1.10\n- type: <[string]>\n\nSee [`property: TestProject.name`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullproject.md","title":"src-test-api-class-fullproject","url":"https://playwright.dev/docs/src-test-api-class-fullproject","loc":{"lines":{"from":1,"to":35}}}}],["898fc22c-ddca-4e9a-a574-75b5bc950cf0",{"pageContent":"See [`property: TestProject.metadata`].\n\n## property: FullProject.name\n* since: v1.10\n- type: <[string]>\n\nSee [`property: TestProject.name`].\n\n## property: FullProject.snapshotDir\n* since: v1.10\n- type: <[string]>\n\nSee [`property: TestProject.snapshotDir`].\n\n## property: FullProject.outputDir\n* since: v1.10\n- type: <[string]>\n\nSee [`property: TestProject.outputDir`].\n\n## property: FullProject.repeatEach\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestProject.repeatEach`].\n\n## property: FullProject.retries\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestProject.retries`].\n\n## property: FullProject.teardown\n* since: v1.34\n- type: ?<[string]>\n\nSee [`property: TestProject.teardown`].\n\n## property: FullProject.testDir\n* since: v1.10\n- type: <[string]>\n\nSee [`property: TestProject.testDir`].\n\n## property: FullProject.testIgnore\n* since: v1.10\n- type: <[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nSee [`property: TestProject.testIgnore`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullproject.md","title":"src-test-api-class-fullproject","url":"https://playwright.dev/docs/src-test-api-class-fullproject","loc":{"lines":{"from":29,"to":77}}}}],["47d6a1a8-4511-42b4-a46f-d721de926245",{"pageContent":"See [`property: TestProject.testDir`].\n\n## property: FullProject.testIgnore\n* since: v1.10\n- type: <[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nSee [`property: TestProject.testIgnore`].\n\n## property: FullProject.testMatch\n* since: v1.10\n- type: <[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nSee [`property: TestProject.testMatch`].\n\n## property: FullProject.timeout\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestProject.timeout`].\n\n## property: FullProject.use\n* since: v1.10\n- type: <[Fixtures]>\n\nSee [`property: TestProject.use`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-fullproject.md","title":"src-test-api-class-fullproject","url":"https://playwright.dev/docs/src-test-api-class-fullproject","loc":{"lines":{"from":71,"to":95}}}}],["e05f8b3c-417e-4e57-b721-c52abb357895",{"pageContent":"# class: Location\n* since: v1.10\n* langs: js\n\nRepresents a location in the source code where [TestCase] or [Suite] is defined.\n\n## property: Location.file\n* since: v1.10\n- type: <[string]>\n\nPath to the source file.\n\n## property: Location.line\n* since: v1.10\n- type: <[int]>\n\nLine number in the source file.\n\n## property: Location.column\n* since: v1.10\n- type: <[int]>\n\nColumn number in the source file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-location.md","title":"src-test-api-class-location","url":"https://playwright.dev/docs/src-test-api-class-location","loc":{"lines":{"from":1,"to":23}}}}],["b8d10d79-fa2a-48b9-80ce-b1b566376309",{"pageContent":"# class: Test\n* since: v1.10\n* langs: js\n\nPlaywright Test provides a `test` function to declare tests and `expect` function to write assertions.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\n## method: Test.(call)\n* since: v1.10\n\nDeclares a test.\n\n* `test(title, body)`\n* `test(title, details, body)`\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\n**Tags**\n\nYou can tag tests by providing additional test details. Alternatively, you can include tags in the test title. Note that each tag must start with `@` symbol.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1,"to":41}}}}],["99c93798-74d9-4401-aa76-1abe1a0d11ee",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  tag: '@smoke',\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n\ntest('another test @smoke', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\nTest tags are displayed in the test report, and are available to a custom reporter via `TestCase.tags` property.\n\nYou can also filter tests by their tags during test execution:\n* in the [command line](../test-cli.md#reference);\n* in the config with [`property: TestConfig.grep`] and [`property: TestProject.grep`];\n\nLearn more about [tagging](../test-annotations.md#tag-tests).\n\n**Annotations**\n\nYou can annotate tests by providing additional test details.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":40,"to":69}}}}],["040371e6-1e4f-4205-b5cb-d73ad4e9cc85",{"pageContent":"Learn more about [tagging](../test-annotations.md#tag-tests).\n\n**Annotations**\n\nYou can annotate tests by providing additional test details.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\nTest annotations are displayed in the test report, and are available to a custom reporter via `TestCase.annotations` property.\n\nYou can also add annotations during runtime by manipulating [`property: TestInfo.annotations`].\n\nLearn more about [test annotations](../test-annotations.md).\n\n### param: Test.(call).title\n* since: v1.10\n- `title` <[string]>\n\nTest title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":62,"to":92}}}}],["c73bed73-f5f6-4614-b2b0-79ec0b5ccf48",{"pageContent":"Learn more about [test annotations](../test-annotations.md).\n\n### param: Test.(call).title\n* since: v1.10\n- `title` <[string]>\n\nTest title.\n\n### param: Test.(call).details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]> Annotation type, for example `'issue'`.\n    - `description` ?<[string]> Optional annotation description, for example an issue url.\n\nAdditional test details.\n\n### param: Test.(call).body\n* since: v1.10\n- `body` <[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n\n## method: Test.afterAll\n* since: v1.10\n\nDeclares an `afterAll` hook that is executed once per worker after all tests.\n\nWhen called in the scope of a test file, runs after all tests in the file. When called inside a [`method: Test.describe`] group, runs after all tests in the group.\n\n**Details**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":86,"to":119}}}}],["ec84a921-790f-4339-bd6d-edf32b9c54af",{"pageContent":"When called in the scope of a test file, runs after all tests in the file. When called inside a [`method: Test.describe`] group, runs after all tests in the group.\n\n**Details**\n\nWhen multiple `afterAll` hooks are added, they will run in the order of their registration.\n\nNote that worker process is restarted on test failures, and `afterAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries.md).\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n* `test.afterAll(hookFunction)`\n* `test.afterAll(title, hookFunction)`\n\n**Usage**\n\n```js\ntest.afterAll(async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n```js\ntest.afterAll('Teardown', async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\n### param: Test.afterAll.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":117,"to":152}}}}],["22e5a570-a23e-453e-8a02-d3efbd15cd5f",{"pageContent":"```js\ntest.afterAll('Teardown', async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\n### param: Test.afterAll.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.\n\n### param: Test.afterAll.hookFunction\n* since: v1.10\n- `hookFunction` <[function]\\([Fixtures], [TestInfo]\\)>\n\nHook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo].\n\n\n\n## method: Test.afterEach\n* since: v1.10\n\nDeclares an `afterEach` hook that is executed after each test.\n\nWhen called in the scope of a test file, runs after each test in the file. When called inside a [`method: Test.describe`] group, runs after each test in the group.\n\nYou can access all the same [Fixtures] as the test body itself, and also the [TestInfo] object that gives a lot of useful information. For example, you can check whether the test succeeded or failed.\n\n* `test.afterEach(hookFunction)`\n* `test.afterEach(title, hookFunction)`\n\n**Details**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":141,"to":174}}}}],["bb1c2bbd-0ad5-48ac-9894-ce796b41abcc",{"pageContent":"* `test.afterEach(hookFunction)`\n* `test.afterEach(title, hookFunction)`\n\n**Details**\n\nWhen multiple `afterEach` hooks are added, they will run in the order of their registration.\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n**Usage**\n\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({ page }) => {\n  console.log(`Finished ${test.info().title} with status ${test.info().status}`);\n\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n```js title=\"example.spec.ts\"\ntest.afterEach('Status check', async ({ page }) => {\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":171,"to":205}}}}],["920406d2-a7c5-4840-acc7-bbc7b205b1b9",{"pageContent":"### param: Test.afterEach.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.\n\n### param: Test.afterEach.hookFunction\n* since: v1.10\n- `hookFunction` <[function]\\([Fixtures], [TestInfo]\\)>\n\nHook function that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n\n## method: Test.beforeAll\n* since: v1.10\n\nDeclares a `beforeAll` hook that is executed once per worker process before all tests.\n\nWhen called in the scope of a test file, runs before all tests in the file. When called inside a [`method: Test.describe`] group, runs before all tests in the group.\n\nYou can use [`method: Test.afterAll`] to teardown any resources set up in `beforeAll`.\n\n* `test.beforeAll(hookFunction)`\n* `test.beforeAll(title, hookFunction)`\n\n**Details**\n\nWhen multiple `beforeAll` hooks are added, they will run in the order of their registration.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":207,"to":235}}}}],["6bc0b8f5-5af8-427a-9228-b1d964da8f7a",{"pageContent":"* `test.beforeAll(hookFunction)`\n* `test.beforeAll(title, hookFunction)`\n\n**Details**\n\nWhen multiple `beforeAll` hooks are added, they will run in the order of their registration.\n\nNote that worker process is restarted on test failures, and `beforeAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries.md).\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n**Usage**\n\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.beforeAll(async () => {\n  console.log('Before tests');\n});\n\ntest.afterAll(async () => {\n  console.log('After tests');\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\n\nAlternatively, you can declare a hook **with a title**.\n\n```js title=\"example.spec.ts\"\ntest.beforeAll('Setup', async () => {\n  console.log('Before tests');\n});\n```\n\n### param: Test.beforeAll.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":230,"to":273}}}}],["1500fd8e-a27a-46d2-8d40-71b3ce8295fb",{"pageContent":"```js title=\"example.spec.ts\"\ntest.beforeAll('Setup', async () => {\n  console.log('Before tests');\n});\n```\n\n### param: Test.beforeAll.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.\n\n### param: Test.beforeAll.hookFunction\n* since: v1.10\n- `hookFunction` <[function]\\([Fixtures], [TestInfo]\\)>\n\nHook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo].\n\n\n## method: Test.beforeEach\n* since: v1.10\n\nDeclares a `beforeEach` hook that is executed before each test.\n\nWhen called in the scope of a test file, runs before each test in the file. When called inside a [`method: Test.describe`] group, runs before each test in the group.\n\nYou can access all the same [Fixtures] as the test body itself, and also the [TestInfo] object that gives a lot of useful information. For example, you can navigate the page before starting the test.\n\nYou can use [`method: Test.afterEach`] to teardown any resources set up in `beforeEach`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":263,"to":291}}}}],["03323516-0654-4d2b-9d91-5922ce8e0a37",{"pageContent":"You can use [`method: Test.afterEach`] to teardown any resources set up in `beforeEach`.\n\n* `test.beforeEach(hookFunction)`\n* `test.beforeEach(title, hookFunction)`\n\n**Details**\n\nWhen multiple `beforeEach` hooks are added, they will run in the order of their registration.\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n**Usage**\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n\ntest('my test', async ({ page }) => {\n  expect(page.url()).toBe('https://my.start.url/');\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n```js title=\"example.spec.ts\"\ntest.beforeEach('Open start URL', async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":291,"to":324}}}}],["c483e02e-5ba9-43ac-a7a5-4c7c5492f53a",{"pageContent":"```js title=\"example.spec.ts\"\ntest.beforeEach('Open start URL', async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n```\n\n### param: Test.beforeEach.title\n* since: v1.38\n- `title` ?<[string]>\n\nHook title.\n\n### param: Test.beforeEach.hookFunction\n* since: v1.10\n- `hookFunction` <[function]\\([Fixtures], [TestInfo]\\)>\n\nHook function that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n\n## method: Test.describe\n* since: v1.10\n\nDeclares a group of tests.\n\n* `test.describe(title, callback)`\n* `test.describe(callback)`\n* `test.describe(title, details, callback)`\n\n**Usage**\n\nYou can declare a group of tests with a title. The title will be visible in the test report as a part of each test's title.\n\n```js\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n**Anonymous group**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":319,"to":365}}}}],["064e2898-f289-492a-941d-69a38414a365",{"pageContent":"```js\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n**Anonymous group**\n\nYou can also declare a test group without a title. This is convenient to give a group of tests a common option with [`method: Test.use`].\n\n```js\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n**Tags**\n\nYou can tag all tests in a group by providing additional details. Note that each tag must start with `@` symbol.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tagged tests', {\n  tag: '@smoke',\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\nLearn more about [tagging](../test-annotations.md#tag-tests).\n\n**Annotations**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":353,"to":405}}}}],["ac498f65-06c3-455e-8ea4-e49d7160fab5",{"pageContent":"test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\nLearn more about [tagging](../test-annotations.md#tag-tests).\n\n**Annotations**\n\nYou can annotate all tests in a group by providing additional details.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two annotated tests', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\nLearn more about [test annotations](../test-annotations.md).\n\n### param: Test.describe.title\n* since: v1.10\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nAdditional details for all tests in the group.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":397,"to":444}}}}],["ab15e0cd-367a-4a36-95d7-ee019788d68b",{"pageContent":"Additional details for all tests in the group.\n\n### param: Test.describe.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe`]. Any tests declared in this callback will belong to the group.\n\n\n\n## method: Test.describe.configure\n* since: v1.10\n\nConfigures the enclosing scope. Can be executed either on the top level or inside a describe. Configuration applies to the entire scope, regardless of whether it run before or after the test declaration.\n\nLearn more about the execution modes [here](../test-parallel.md).\n\n**Usage**\n\n* Running tests in parallel.\n\n  ```js\n  // Run all the tests in the file concurrently using parallel workers.\n  test.describe.configure({ mode: 'parallel' });\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n  ```\n\n* Running tests in order, retrying each failed test independetly.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":444,"to":472}}}}],["3eeb64ef-0627-40f8-b327-963d3ce175f7",{"pageContent":"* Running tests in order, retrying each failed test independetly.\n\n  This is the default mode. It can be useful to set it explicitly to override project configuration that uses `fullyParallel`.\n\n  ```js\n  // Tests in this file run in order. Retries, if any, run independently.\n  test.describe.configure({ mode: 'default' });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n* Running tests serially, retrying from the start. If one of the serial tests fails, all subsequent tests are skipped.\n\n  :::note\n  Running serially is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n  :::\n\n  ```js\n  // Annotate tests as inter-dependent.\n  test.describe.configure({ mode: 'serial' });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n* Configuring retries and timeout for each test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":472,"to":496}}}}],["856d776d-6fa4-4efc-b84c-cbacfc99680c",{"pageContent":"* Configuring retries and timeout for each test.\n\n  ```js\n  // Each test in the file will be retried twice and have a timeout of 20 seconds.\n  test.describe.configure({ retries: 2, timeout: 20_000 });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n* Run multiple describes in parallel, but tests inside each describe in order.\n\n  ```js\n  test.describe.configure({ mode: 'parallel' });\n\n  test.describe('A, runs in parallel with B', () => {\n    test.describe.configure({ mode: 'default' });\n    test('in order A1', async ({ page }) => {});\n    test('in order A2', async ({ page }) => {});\n  });\n\n  test.describe('B, runs in parallel with A', () => {\n    test.describe.configure({ mode: 'default' });\n    test('in order B1', async ({ page }) => {});\n    test('in order B2', async ({ page }) => {});\n  });\n  ```\n\n### option: Test.describe.configure.mode\n* since: v1.10\n- `mode` <[TestMode]<\"default\"|\"parallel\"|\"serial\">>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":496,"to":525}}}}],["50baef72-a868-4960-acc8-00cad8c5630c",{"pageContent":"### option: Test.describe.configure.mode\n* since: v1.10\n- `mode` <[TestMode]<\"default\"|\"parallel\"|\"serial\">>\n\nExecution mode. Learn more about the execution modes [here](../test-parallel.md).\n\n### option: Test.describe.configure.retries\n* since: v1.28\n- `retries` <[int]>\n\nThe number of retries for each test.\n\n### option: Test.describe.configure.timeout\n* since: v1.28\n- `timeout` <[int]>\n\nTimeout for each test in milliseconds. Overrides [`property: TestProject.timeout`] and [`property: TestConfig.timeout`].\n\n\n## method: Test.describe.fixme\n* since: v1.25\n\nDeclares a test group similarly to [`method: Test.describe`]. Tests in this group are marked as \"fixme\" and will not be executed.\n\n* `test.describe.fixme(title, callback)`\n* `test.describe.fixme(callback)`\n* `test.describe.fixme(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.fixme('broken tests that should be fixed', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":523,"to":559}}}}],["17ead460-2b4f-4e70-9192-555d31fe2055",{"pageContent":"**Usage**\n\n```js\ntest.describe.fixme('broken tests that should be fixed', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.fixme(() => {\n  // ...\n});\n```\n\n### param: Test.describe.fixme.title\n* since: v1.25\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.fixme.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.fixme.callback\n* since: v1.25\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.fixme`]. Any tests added in this callback will belong to the group, and will not be run.\n\n\n\n## method: Test.describe.only\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":551,"to":594}}}}],["8cd225c9-9f84-443d-b9a2-a55f8ea93ae3",{"pageContent":"## method: Test.describe.only\n* since: v1.10\n\nDeclares a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing else.\n\n* `test.describe.only(title, callback)`\n* `test.describe.only(callback)`\n* `test.describe.only(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.only('focused group', () => {\n  test('in the focused group', async ({ page }) => {\n    // This test will run\n  });\n});\ntest('not in the focused group', async ({ page }) => {\n  // This test will not run\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.only(() => {\n  // ...\n});\n```\n\n\n### param: Test.describe.only.title\n* since: v1.10\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.only.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":593,"to":638}}}}],["218d9bd5-f87e-4822-a39c-6e2bedda96e1",{"pageContent":"See [`method: Test.describe`] for details description.\n\n### param: Test.describe.only.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.only`]. Any tests added in this callback will belong to the group.\n\n\n\n## method: Test.describe.parallel\n* since: v1.10\n* discouraged: See [`method: Test.describe.configure`] for the preferred way of configuring the execution mode.\n\nDeclares a group of tests that could be run in parallel. By default, tests in a single test file run one after another, but using [`method: Test.describe.parallel`] allows them to run in parallel.\n\n* `test.describe.parallel(title, callback)`\n* `test.describe.parallel(callback)`\n* `test.describe.parallel(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":638,"to":665}}}}],["d309efef-4326-4f56-ba1e-2c064a1f2d15",{"pageContent":"**Usage**\n\n```js\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\nNote that parallel tests are executed in separate processes and cannot share any state or global variables. Each of the parallel tests executes all relevant hooks.\n\nYou can also omit the title.\n\n```js\ntest.describe.parallel(() => {\n  // ...\n});\n```\n\n### param: Test.describe.parallel.title\n* since: v1.10\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.parallel.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.parallel.callback\n* since: v1.10\n- `callback` <[function]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":658,"to":695}}}}],["2f3e54da-7e5f-46b2-afc2-ce60ec01485c",{"pageContent":"See [`method: Test.describe`] for details description.\n\n### param: Test.describe.parallel.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.parallel`]. Any tests added in this callback will belong to the group.\n\n\n\n## method: Test.describe.parallel.only\n* since: v1.10\n* discouraged: See [`method: Test.describe.configure`] for the preferred way of configuring the execution mode.\n\nDeclares a focused group of tests that could be run in parallel. This is similar to [`method: Test.describe.parallel`], but focuses the group. If there are some focused tests or suites, all of them will be run but nothing else.\n\n* `test.describe.parallel.only(title, callback)`\n* `test.describe.parallel.only(callback)`\n* `test.describe.parallel.only(title, details, callback)`\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":691,"to":711}}}}],["ea4e514e-c4dd-43e1-be6b-adbfc1e83c7e",{"pageContent":"* `test.describe.parallel.only(title, callback)`\n* `test.describe.parallel.only(callback)`\n* `test.describe.parallel.only(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.parallel.only('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.parallel.only(() => {\n  // ...\n});\n```\n\n### param: Test.describe.parallel.only.title\n* since: v1.10\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.parallel.only.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.parallel.only.callback\n* since: v1.10\n- `callback` <[function]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":707,"to":746}}}}],["17750bff-c127-4b3c-a9b5-e54d405661dd",{"pageContent":"See [`method: Test.describe`] for details description.\n\n### param: Test.describe.parallel.only.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.parallel.only`]. Any tests added in this callback will belong to the group.\n\n\n\n## method: Test.describe.serial\n* since: v1.10\n* discouraged: See [`method: Test.describe.configure`] for the preferred way of configuring the execution mode.\n\nDeclares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.\n\n:::note\nUsing serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n:::\n\n* `test.describe.serial(title, callback)`\n* `test.describe.serial(title)`\n* `test.describe.serial(title, details, callback)`\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":742,"to":766}}}}],["803e54a6-f8fd-41b4-ab28-4daacfa796c4",{"pageContent":"* `test.describe.serial(title, callback)`\n* `test.describe.serial(title)`\n* `test.describe.serial(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.serial('group', () => {\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.serial(() => {\n  // ...\n});\n```\n\n### param: Test.describe.serial.title\n* since: v1.10\n- `title` ?<[string]>\n\nGroup title.\n\n### param: Test.describe.serial.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.serial.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.serial`]. Any tests added in this callback will belong to the group.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":762,"to":803}}}}],["c23b5c8f-cb97-4b83-8e45-45871e58ea64",{"pageContent":"A callback that is run immediately when calling [`method: Test.describe.serial`]. Any tests added in this callback will belong to the group.\n\n\n\n## method: Test.describe.serial.only\n* since: v1.10\n* discouraged: See [`method: Test.describe.configure`] for the preferred way of configuring the execution mode.\n\nDeclares a focused group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together. If there are some focused tests or suites, all of them will be run but nothing else.\n\n:::note\nUsing serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n:::\n\n* `test.describe.serial.only(title, callback)`\n* `test.describe.serial.only(title)`\n* `test.describe.serial.only(title, details, callback)`\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":803,"to":821}}}}],["810e46fc-2d10-4cf1-9bf8-76ac121199f3",{"pageContent":"* `test.describe.serial.only(title, callback)`\n* `test.describe.serial.only(title)`\n* `test.describe.serial.only(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.serial.only('group', () => {\n  test('runs first', async ({ page }) => {\n  });\n  test('runs second', async ({ page }) => {\n  });\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.serial.only(() => {\n  // ...\n});\n```\n\n### param: Test.describe.serial.only.title\n* since: v1.10\n- `title` <[string]>\n\nGroup title.\n\n### param: Test.describe.serial.only.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.serial.only.callback\n* since: v1.10\n- `callback` <[function]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":817,"to":858}}}}],["65f65352-7ae4-4bee-b686-8c582efb6c3e",{"pageContent":"See [`method: Test.describe`] for details description.\n\n### param: Test.describe.serial.only.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.serial.only`]. Any tests added in this callback will belong to the group.\n\n\n\n\n## method: Test.describe.skip\n* since: v1.10\n\nDeclares a skipped test group, similarly to [`method: Test.describe`]. Tests in the skipped group are never run.\n\n* `test.describe.skip(title, callback)`\n* `test.describe.skip(title)`\n* `test.describe.skip(title, details, callback)`\n\n**Usage**\n\n```js\ntest.describe.skip('skipped group', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\nYou can also omit the title.\n\n```js\ntest.describe.skip(() => {\n  // ...\n});\n```\n\n### param: Test.describe.skip.title\n* since: v1.10\n- `title` <[string]>\n\nGroup title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":854,"to":896}}}}],["b18e719a-8d6e-4d37-bc87-a14efe8132f7",{"pageContent":"You can also omit the title.\n\n```js\ntest.describe.skip(() => {\n  // ...\n});\n```\n\n### param: Test.describe.skip.title\n* since: v1.10\n- `title` <[string]>\n\nGroup title.\n\n### param: Test.describe.skip.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for details description.\n\n### param: Test.describe.skip.callback\n* since: v1.10\n- `callback` <[function]>\n\nA callback that is run immediately when calling [`method: Test.describe.skip`]. Any tests added in this callback will belong to the group, and will not be run.\n\n\n\n## property: Test.expect\n* since: v1.10\n- type: <[Object]>\n\n`expect` function can be used to create test assertions. Read more about [test assertions](../test-assertions.md).\n\n**Usage**\n\n```js\ntest('example', async ({ page }) => {\n  await test.expect(page).toHaveTitle('Title');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":884,"to":928}}}}],["d0987140-b6d1-48fe-9b3a-e21b80cad47e",{"pageContent":"**Usage**\n\n```js\ntest('example', async ({ page }) => {\n  await test.expect(page).toHaveTitle('Title');\n});\n```\n\n\n\n## method: Test.extend\n* since: v1.10\n- returns: <[Test]>\n\nExtends the `test` object by defining fixtures and/or options that can be used in the tests.\n\n**Usage**\n\nFirst define a fixture and/or an option.\n\n```js tab=js-js title=\"my-test.js\"\nconst base = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\n// Extend basic test by providing a \"defaultItem\" option and a \"todoPage\" fixture.\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Do stuff', { option: true }],","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":922,"to":950}}}}],["05c9b42c-a4f4-4236-8d43-8e2904f1c571",{"pageContent":"// Define a fixture. Note that it can use built-in fixture \"page\"\n  // and a new option \"defaultItem\".\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n```\n\n```js tab=js-ts\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\nexport type Options = { defaultItem: string };\n\n// Extend basic test by providing a \"defaultItem\" option and a \"todoPage\" fixture.\nexport const test = base.extend<Options & { todoPage: TodoPage }>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Do stuff', { option: true }],","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":952,"to":974}}}}],["7e0ce39f-7fd1-4e35-94e0-200d7e83a53e",{"pageContent":"// Define a fixture. Note that it can use built-in fixture \"page\"\n  // and a new option \"defaultItem\".\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n```\n\nThen use the fixture in the test.\n\n```js title=\"example.spec.ts\"\nimport { test } from './my-test';\n\ntest('test 1', async ({ todoPage }) => {\n  await todoPage.addToDo('my todo');\n  // ...\n});\n```\n\nConfigure the option in config file.\n\n```js tab=js-js title=\"playwright.config.ts\"\n// @ts-check\n\nmodule.exports = defineConfig({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\n```js tab=js-ts title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nimport type { Options } from './my-test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":976,"to":1020}}}}],["a152e9bc-c851-47ab-b0bb-242253176249",{"pageContent":"```js tab=js-ts title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nimport type { Options } from './my-test';\n\nexport default defineConfig<Options>({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\nLearn more about [fixtures](../test-fixtures.md) and [parametrizing tests](../test-parameterize.md).\n\n### param: Test.extend.fixtures\n* since: v1.10\n- `fixtures` <[Object]>\n\nAn object containing fixtures and/or options. Learn more about [fixtures format](../test-fixtures.md).\n\n\n\n\n## method: Test.fail\n* since: v1.10\n\nMarks a test as \"should fail\". Playwright runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed.\n\nTo declare a \"failing\" test:\n* `test.fail(title, body)`\n* `test.fail(title, details, body)`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1018,"to":1054}}}}],["415cda92-61c6-4b14-b0f5-df4f62e4858f",{"pageContent":"To declare a \"failing\" test:\n* `test.fail(title, body)`\n* `test.fail(title, details, body)`\n\nTo annotate test as \"failing\" at runtime:\n* `test.fail(condition, description)`\n* `test.fail(callback, description)`\n* `test.fail()`\n\n**Usage**\n\nYou can declare a test as failing, so that Playwright ensures it actually fails.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.fail('not yet ready', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test fails in some configurations, but not all, you can mark the test as failing inside the test body based on some condition. We recommend passing a `description` argument in this case.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('fail in WebKit', async ({ page, browserName }) => {\n  test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1052,"to":1082}}}}],["d8df5d2d-7036-4c70-96de-8be9295d09d2",{"pageContent":"test('fail in WebKit', async ({ page, browserName }) => {\n  test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [`method: Test.describe`] group as \"should fail\" based on some condition with a single `test.fail(callback, description)` call.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');\n\ntest('fail in WebKit 1', async ({ page }) => {\n  // ...\n});\ntest('fail in WebKit 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We recommend declaring a failing test with `test.fail(title, body)` instead.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.fail();\n  // ...\n});\n```\n\n### param: Test.fail.title\n* since: v1.42\n- `title` ?<[string]>\n\nTest title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1078,"to":1114}}}}],["184cbc3c-34e9-4bcc-a88b-60133a4a863b",{"pageContent":"test('less readable', async ({ page }) => {\n  test.fail();\n  // ...\n});\n```\n\n### param: Test.fail.title\n* since: v1.42\n- `title` ?<[string]>\n\nTest title.\n\n### param: Test.fail.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.(call)`] for test details description.\n\n### param: Test.fail.body\n* since: v1.42\n- `body` ?<[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n### param: Test.fail.condition\n* since: v1.10\n- `condition` ?<[boolean]>\n\nTest is marked as \"should fail\" when the condition is `true`.\n\n### param: Test.fail.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1104,"to":1140}}}}],["a3b408a4-cc0a-431f-b120-34403f94e5a0",{"pageContent":"Test is marked as \"should fail\" when the condition is `true`.\n\n### param: Test.fail.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>\n\nA function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n### param: Test.fail.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n\n## method: Test.fail.only\n* since: v1.49\n\nYou can use `test.fail.only` to focus on a specific test that is expected to fail. This is particularly useful when debugging a failing test or working on a specific issue.\n\nTo declare a focused \"failing\" test:\n* `test.fail.only(title, body)`\n* `test.fail.only(title, details, body)`\n\n**Usage**\n\nYou can declare a focused failing test, so that Playwright runs only this test and ensures it actually fails.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1136,"to":1166}}}}],["784afa0e-8bf1-4045-8b55-3820e0c846bc",{"pageContent":"**Usage**\n\nYou can declare a focused failing test, so that Playwright runs only this test and ensures it actually fails.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.fail.only('focused failing test', async ({ page }) => {\n  // This test is expected to fail\n});\ntest('not in the focused group', async ({ page }) => {\n  // This test will not run\n});\n```\n\n### param: Test.fail.only.title\n* since: v1.49\n\n- `title` ?<[string]>\n\nTest title.\n\n### param: Test.fail.only.details\n* since: v1.49\n\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.describe`] for test details description.\n\n### param: Test.fail.only.body\n* since: v1.49\n\n- `body` ?<[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n\n## method: Test.fixme\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1161,"to":1204}}}}],["349d0afd-e4aa-474b-a796-daf6cc67b26c",{"pageContent":"- `body` ?<[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n\n## method: Test.fixme\n* since: v1.10\n\nMark a test as \"fixme\", with the intention to fix it. Playwright will not run the test past the `test.fixme()` call.\n\nTo declare a \"fixme\" test:\n* `test.fixme(title, body)`\n* `test.fixme(title, details, body)`\n\nTo annotate test as \"fixme\" at runtime:\n* `test.fixme(condition, description)`\n* `test.fixme(callback, description)`\n* `test.fixme()`\n\n**Usage**\n\nYou can declare a test as to be fixed, and Playwright will not run it.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.fixme('to be fixed', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1197,"to":1227}}}}],["0d10bde8-59f7-43ab-80b5-d94353e7b971",{"pageContent":"You can declare a test as to be fixed, and Playwright will not run it.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.fixme('to be fixed', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test should be fixed in some configurations, but not all, you can mark the test as \"fixme\" inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.fixme` call.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('to be fixed in Safari', async ({ page, browserName }) => {\n  test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [`method: Test.describe`] group as \"fixme\" based on some condition with a single `test.fixme(callback, description)` call.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1219,"to":1243}}}}],["1783fadb-e9e5-43a8-9ce8-fbaf83bcb57d",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\n\ntest.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');\n\ntest('to be fixed in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('to be fixed in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We recommend using `test.fixme(title, body)` instead.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.fixme();\n  // ...\n});\n```\n\n### param: Test.fixme.title\n* since: v1.10\n- `title` ?<[string]>\n\nTest title.\n\n### param: Test.fixme.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.(call)`] for test details description.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1242,"to":1280}}}}],["4c2b8831-ef78-4ca9-8fba-6b49957ccc3a",{"pageContent":"See [`method: Test.(call)`] for test details description.\n\n### param: Test.fixme.body\n* since: v1.10\n- `body` ?<[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n### param: Test.fixme.condition\n* since: v1.10\n- `condition` ?<[boolean]>\n\nTest is marked as \"should fail\" when the condition is `true`.\n\n### param: Test.fixme.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>\n\nA function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n### param: Test.fixme.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n\n## method: Test.info\n* since: v1.10\n- returns: <[TestInfo]>\n\nReturns information about the currently running test. This method can only be called during the test execution, otherwise it throws.\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1280,"to":1314}}}}],["6e9d96d4-1fab-41b3-b98e-eb67495356f3",{"pageContent":"Returns information about the currently running test. This method can only be called during the test execution, otherwise it throws.\n\n**Usage**\n\n```js\ntest('example test', async ({ page }) => {\n  // ...\n  await test.info().attach('screenshot', {\n    body: await page.screenshot(),\n    contentType: 'image/png',\n  });\n});\n```\n\n\n## method: Test.only\n* since: v1.10\n\nDeclares a focused test. If there are some focused tests or suites, all of them will be run but nothing else.\n\n* `test.only(title, body)`\n* `test.only(title, details, body)`\n\n**Usage**\n\n```js\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n### param: Test.only.title\n* since: v1.10\n- `title` <[string]>\n\nTest title.\n\n### param: Test.only.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1312,"to":1355}}}}],["094a13e7-af1f-4495-af96-21837dbe968c",{"pageContent":"See [`method: Test.(call)`] for test details description.\n\n### param: Test.only.body\n* since: v1.10\n- `body` <[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n\n## method: Test.setTimeout\n* since: v1.10\n\nChanges the timeout for the test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts.md).\n\nTimeout for the currently running test is available through [`property: TestInfo.timeout`].\n\n**Usage**\n\n* Changing test timeout.\n\n  ```js\n  test('very slow test', async ({ page }) => {\n    test.setTimeout(120000);\n    // ...\n  });\n  ```\n\n* Changing timeout from a slow `beforeEach` hook. Note that this affects the test timeout that is shared with `beforeEach` hooks.\n\n  ```js\n  test.beforeEach(async ({ page }, testInfo) => {\n    // Extend timeout for all tests running this hook by 30 seconds.\n    test.setTimeout(testInfo.timeout + 30000);\n  });\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1357,"to":1391}}}}],["e12cd7d8-6bd5-4162-a1ee-7ec093fe4192",{"pageContent":"```js\n  test.beforeEach(async ({ page }, testInfo) => {\n    // Extend timeout for all tests running this hook by 30 seconds.\n    test.setTimeout(testInfo.timeout + 30000);\n  });\n  ```\n\n* Changing timeout for a `beforeAll` or `afterAll` hook. Note this affects the hook's timeout, not the test timeout.\n\n  ```js\n  test.beforeAll(async () => {\n    // Set timeout for this hook.\n    test.setTimeout(60000);\n  });\n  ```\n\n* Changing timeout for all tests in a [`method: Test.describe`] group.\n\n  ```js\n  test.describe('group', () => {\n    // Applies to all tests in this group.\n    test.describe.configure({ timeout: 60000 });\n\n    test('test one', async () => { /* ... */ });\n    test('test two', async () => { /* ... */ });\n    test('test three', async () => { /* ... */ });\n  });\n  ```\n\n### param: Test.setTimeout.timeout\n* since: v1.10\n- `timeout` <[int]>\n\nTimeout in milliseconds.\n\n\n\n## method: Test.skip\n* since: v1.10\n\nSkip a test. Playwright will not run the test past the `test.skip()` call.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1386,"to":1426}}}}],["1e9b58d3-68aa-4562-9928-2e8778868e9b",{"pageContent":"Timeout in milliseconds.\n\n\n\n## method: Test.skip\n* since: v1.10\n\nSkip a test. Playwright will not run the test past the `test.skip()` call.\n\nSkipped tests are not supposed to be ever run. If you intent to fix the test, use [`method: Test.fixme`] instead.\n\nTo declare a skipped test:\n* `test.skip(title, body)`\n* `test.skip(title, details, body)`\n\nTo skip a test at runtime:\n* `test.skip(condition, description)`\n* `test.skip(callback, description)`\n* `test.skip()`\n\n**Usage**\n\nYou can declare a skipped test, and Playwright will not run it.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.skip('never run', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test should be skipped in some configurations, but not all, you can skip the test inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.skip` call.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1419,"to":1454}}}}],["e040b9f0-010e-421d-9c9b-0e76e3a84b7c",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\n\ntest('Safari-only test', async ({ page, browserName }) => {\n  test.skip(browserName !== 'webkit', 'This feature is Safari-only');\n  // ...\n});\n```\n\nYou can skip all tests in a file or [`method: Test.describe`] group based on some condition with a single `test.skip(callback, description)` call.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');\n\ntest('Safari-only test 1', async ({ page }) => {\n  // ...\n});\ntest('Safari-only test 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We recommend using `test.skip(title, body)` instead.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.skip();\n  // ...\n});\n```\n\n### param: Test.skip.title\n* since: v1.10\n- `title` ?<[string]>\n\nTest title.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1453,"to":1492}}}}],["cbb656bc-49db-4463-a678-b16c770d821a",{"pageContent":"test('less readable', async ({ page }) => {\n  test.skip();\n  // ...\n});\n```\n\n### param: Test.skip.title\n* since: v1.10\n- `title` ?<[string]>\n\nTest title.\n\n### param: Test.skip.details\n* since: v1.42\n- `details` ?<[Object]>\n  - `tag` ?<[string]|[Array]<[string]>>\n  - `annotation` ?<[Object]|[Array]<[Object]>>\n    - `type` <[string]>\n    - `description` ?<[string]>\n\nSee [`method: Test.(call)`] for test details description.\n\n### param: Test.skip.body\n* since: v1.10\n- `body` ?<[function]\\([Fixtures], [TestInfo]\\)>\n\nTest body that takes one or two arguments: an object with fixtures and optional [TestInfo].\n\n### param: Test.skip.condition\n* since: v1.10\n- `condition` ?<[boolean]>\n\nTest is marked as \"should fail\" when the condition is `true`.\n\n### param: Test.skip.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1482,"to":1518}}}}],["c3b090ae-14f1-4c28-b244-71588a950202",{"pageContent":"Test is marked as \"should fail\" when the condition is `true`.\n\n### param: Test.skip.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>\n\nA function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n### param: Test.skip.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n\n\n\n## method: Test.slow\n* since: v1.10\n\nMarks a test as \"slow\". Slow test will be given triple the default timeout.\n\nNote that [`method: Test.slow`] cannot be used in a `beforeAll` or `afterAll` hook. Use [`method: Test.setTimeout`] instead.\n\n* `test.slow()`\n* `test.slow(condition, description)`\n* `test.slow(callback, description)`\n\n**Usage**\n\nYou can mark a test as slow by calling `test.slow()` inside the test body.\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1514,"to":1548}}}}],["fbdc6629-c1bb-40f9-8ef3-65eb1ca4a4ba",{"pageContent":"**Usage**\n\nYou can mark a test as slow by calling `test.slow()` inside the test body.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow();\n  // ...\n});\n```\n\nIf your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We recommend passing a `description` argument in this case.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('slow in Safari', async ({ page, browserName }) => {\n  test.slow(browserName === 'webkit', 'This feature is slow in Safari');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [`method: Test.describe`] group as \"slow\" based on some condition by passing a callback.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');\n\ntest('slow in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('fail in Safari 2', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1543,"to":1580}}}}],["40fc29d6-3e8f-46fd-9d63-90b23e1332dc",{"pageContent":"test('slow in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('fail in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\n### param: Test.slow.condition\n* since: v1.10\n- `condition` ?<[boolean]>\n\nTest is marked as \"slow\" when the condition is `true`.\n\n### param: Test.slow.callback\n* since: v1.10\n- `callback` ?<[function]\\([Fixtures]\\):[boolean]>\n\nA function that returns whether to mark as \"slow\", based on test fixtures. Test or tests are marked as \"slow\" when the return value is `true`.\n\n### param: Test.slow.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n\n## async method: Test.step\n* since: v1.10\n- returns: <[any]>\n\nDeclares a test step that is shown in the report.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1574,"to":1616}}}}],["8454ad18-d088-412f-87bc-88a6b52beabb",{"pageContent":"**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n\n  await test.step('Outer step', async () => {\n    // ...\n    // You can nest steps inside each other.\n    await test.step('Inner step', async () => {\n      // ...\n    });\n  });\n});\n```\n\n**Details**\n\nThe method returns the value returned by the step callback.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  const user = await test.step('Log in', async () => {\n    // ...\n    return 'john';\n  });\n  expect(user).toBe('john');\n});\n```\n\n**Decorator**\n\nYou can use TypeScript method decorators to turn a method into a step.\nEach call to the decorated method will show up as a step in the report.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1608,"to":1647}}}}],["444ad107-d8a1-4f28-bc80-c9fd9005d7cf",{"pageContent":"**Decorator**\n\nYou can use TypeScript method decorators to turn a method into a step.\nEach call to the decorated method will show up as a step in the report.\n\n```js\nfunction step(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    });\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @step\n  async login() {\n    const account = { username: 'Alice', password: 's3cr3t' };\n    await this.page.getByLabel('Username or email address').fill(account.username);\n    await this.page.getByLabel('Password').fill(account.password);\n    await this.page.getByRole('button', { name: 'Sign in' }).click();\n    await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n  }\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1644,"to":1670}}}}],["509aaa2b-520c-4e65-9ddd-575f4c0eadb5",{"pageContent":"test('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();\n});\n```\n\n**Boxing**\n\nWhen something inside a step fails, you would usually see the error pointing to the exact action that failed. For example, consider the following login step:\n\n```js\nasync function login(page) {\n  await test.step('login', async () => {\n    const account = { username: 'Alice', password: 's3cr3t' };\n    await page.getByLabel('Username or email address').fill(account.username);\n    await page.getByLabel('Password').fill(account.password);\n    await page.getByRole('button', { name: 'Sign in' }).click();\n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n  });\n}\n\ntest('example', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await login(page);\n});\n```\n\n```txt\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1672,"to":1701}}}}],["b1a5a4c9-a0ef-4e7e-9fc2-39fc03baad05",{"pageContent":"```txt\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n   8 |     await page.getByRole('button', { name: 'Sign in' }).click();\n>  9 |     await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n     |                                                                               ^\n  10 |   });\n```\n\nAs we see above, the test may fail with an error pointing inside the step. If you would like the error to highlight the \"login\" step instead of its internals, use the `box` option. An error inside a boxed step points to the step call site.\n\n```js\nasync function login(page) {\n  await test.step('login', async () => {\n    // ...\n  }, { box: true });  // Note the \"box\" option here.\n}\n```\n\n```txt\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n  14 |   await page.goto('https://github.com/login');\n> 15 |   await login(page);\n     |         ^\n  16 | });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1699,"to":1727}}}}],["bf3ed6b1-877c-4ed8-9011-e9a1189f4b87",{"pageContent":"14 |   await page.goto('https://github.com/login');\n> 15 |   await login(page);\n     |         ^\n  16 | });\n```\n\nYou can also create a TypeScript decorator for a boxed step, similar to a regular step decorator above:\n\n```js\nfunction boxedStep(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    }, { box: true });  // Note the \"box\" option here.\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @boxedStep\n  async login() {\n    // ....\n  }\n}\n\ntest('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();  // <-- Error will be reported on this line.\n});\n```\n\n### param: Test.step.title\n* since: v1.10\n- `title` <[string]>\n\nStep name.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1723,"to":1760}}}}],["8de92262-43a5-49a6-bced-1f5d23645880",{"pageContent":"### param: Test.step.title\n* since: v1.10\n- `title` <[string]>\n\nStep name.\n\n\n### param: Test.step.body\n* since: v1.10\n- `body` <[function]\\([TestStepInfo]\\):[Promise]<[any]>>\n\nStep body.\n\n### option: Test.step.box\n* since: v1.39\n- `box` <boolean>\n\nWhether to box the step in the report. Defaults to `false`. When the step is boxed, errors thrown from the step internals point to the step call site. See below for more details.\n\n### option: Test.step.location\n* since: v1.48\n- `location` <[Location]>\n\nSpecifies a custom location for the step to be shown in test reports and trace viewer. By default, location of the [`method: Test.step`] call is shown.\n\n## async method: Test.step.skip\n* since: v1.50\n- returns: <[void]>\n\nMark a test step as \"skip\" to temporarily disable its execution, useful for steps that are currently failing and planned for a near-term fix. Playwright will not run the step. See also [`method: TestStepInfo.skip#2`].\n\nWe recommend [`method: TestStepInfo.skip#1`] instead.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1756,"to":1787}}}}],["5917ffdd-1be3-424f-81d9-dce4a9d43613",{"pageContent":"We recommend [`method: TestStepInfo.skip#1`] instead.\n\n**Usage**\n\nYou can declare a skipped step, and Playwright will not run it.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }) => {\n  // ...\n  await test.step.skip('not yet ready', async () => {\n    // ...\n  });\n});\n```\n\n### param: Test.step.skip.title\n* since: v1.50\n- `title` <[string]>\n\nStep name.\n\n### param: Test.step.skip.body\n* since: v1.50\n- `body` <[function]\\(\\):[Promise]<[any]>>\n\nStep body.\n\n### option: Test.step.skip.box\n* since: v1.50\n- `box` <boolean>\n\nWhether to box the step in the report. Defaults to `false`. When the step is boxed, errors thrown from the step internals point to the step call site. See below for more details.\n\n### option: Test.step.skip.location\n* since: v1.50\n- `location` <[Location]>\n\nSpecifies a custom location for the step to be shown in test reports and trace viewer. By default, location of the [`method: Test.step`] call is shown.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1787,"to":1826}}}}],["d6accd94-c71a-4492-91fb-d9106a922d7a",{"pageContent":"Specifies a custom location for the step to be shown in test reports and trace viewer. By default, location of the [`method: Test.step`] call is shown.\n\n### option: Test.step.skip.timeout\n* since: v1.50\n- `timeout` <[float]>\n\nMaximum time in milliseconds for the step to finish. Defaults to `0` (no timeout).\n\n### option: Test.step.timeout\n* since: v1.50\n- `timeout` <[float]>\n\nThe maximum time, in milliseconds, allowed for the step to complete. If the step does not complete within the specified timeout, the [`method: Test.step`] method will throw a [TimeoutError]. Defaults to `0` (no timeout).\n\n## method: Test.use\n* since: v1.10\n\nSpecifies options or fixtures to use in a single test file or a [`method: Test.describe`] group. Most useful to set an option, for example set `locale` to configure `context` fixture.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'en-US' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1826,"to":1850}}}}],["4bea11a6-b7be-4e38-b642-8fa2756bd1fa",{"pageContent":"**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'en-US' });\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n**Details**\n\n`test.use` can be called either in the global scope or inside `test.describe`. It is an error to call it within `beforeEach` or `beforeAll`.\n\nIt is also possible to override a fixture by providing a function.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: async ({}, use) => {\n    // Read locale from some configuration file.\n    const locale = await fs.promises.readFile('test-locale', 'utf-8');\n    await use(locale);\n  },\n});\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n### param: Test.use.fixtures\n* since: v1.10\n- `options` <[TestOptions]>\n\nAn object with local options.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-test.md","title":"src-test-api-class-test","url":"https://playwright.dev/docs/src-test-api-class-test","loc":{"lines":{"from":1845,"to":1883}}}}],["9fb00ca7-afb8-4fa8-b253-2fc6a50eda2f",{"pageContent":"# class: TestConfig\n* since: v1.10\n* langs: js\n\nPlaywright Test provides many options to configure how your tests are collected and executed, for example `timeout` or `testDir`. These options are described in the [TestConfig] object in the [configuration file](../test-configuration.md). This type describes format of the configuration file, to access resolved configuration parameters at run time use [FullConfig].\n\nPlaywright Test supports running multiple test projects at the same time. Project-specific options should be put to [`property: TestConfig.projects`], but top-level [TestConfig] can also define base options shared between all projects.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 30000,\n  globalTimeout: 600000,\n  reporter: 'list',\n  testDir: './tests',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":1,"to":18}}}}],["f572598f-e869-4b5e-8151-e1d2f8ad2d3d",{"pageContent":"export default defineConfig({\n  timeout: 30000,\n  globalTimeout: 600000,\n  reporter: 'list',\n  testDir: './tests',\n});\n```\n\n## property: TestConfig.build\n* since: v1.35\n- type: ?<[Object]>\n  - `external` ?<[Array]<[string]>> Paths to exclude from the transpilation expressed as a list of glob patterns. Typically heavy JS bundles that your test uses are listed here.\n\nPlaywright transpiler configuration.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  build: {\n    external: ['**/*bundle.js'],\n  },\n});\n```\n\n## property: TestConfig.captureGitInfo\n* since: v1.51\n- type: ?<[Object]>\n  - `commit` ?<boolean> Whether to capture commit and pull request information such as hash, author, timestamp.\n  - `diff` ?<boolean> Whether to capture commit diff.\n\nThese settings control whether git information is captured and stored in the config [`property: TestConfig.metadata`].\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":12,"to":47}}}}],["e061e972-1a43-4725-92e3-8100c7756e74",{"pageContent":"These settings control whether git information is captured and stored in the config [`property: TestConfig.metadata`].\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  captureGitInfo: { commit: true, diff: true }\n});\n```\n\n**Details**\n\n* Capturing `commit` information is useful when you'd like to see it in your HTML (or a third party) report.\n* Capturing `diff` information is useful to enrich the report with the actual source diff. This information can be used to provide intelligent advice on how to fix the test.\n\n:::note\nDefault values for these settings depend on the environment. When tests run as a part of CI where it is safe to obtain git information, the default value is `true`, `false` otherwise.\n:::\n\n:::note\nThe structure of the git commit metadata is subject to change.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":45,"to":68}}}}],["fc3717c5-0d13-44ad-8827-80aed35aacfc",{"pageContent":"## property: TestConfig.expect\n* since: v1.10\n- type: ?<[Object]>\n  - `timeout` ?<[int]> Default timeout for async expect matchers in milliseconds, defaults to 5000ms.\n  - `toHaveScreenshot` ?<[Object]> Configuration for the [`method: PageAssertions.toHaveScreenshot#1`] method.\n    - `animations` ?<[ScreenshotAnimations]<\"allow\"|\"disabled\">> See [`option: Page.screenshot.animations`] in [`method: Page.screenshot`]. Defaults to `\"disabled\"`.\n    - `caret` ?<[ScreenshotCaret]<\"hide\"|\"initial\">> See [`option: Page.screenshot.caret`] in [`method: Page.screenshot`]. Defaults to `\"hide\"`.\n    - `maxDiffPixels` ?<[int]> An acceptable amount of pixels that could be different, unset by default.\n    - `maxDiffPixelRatio` ?<[float]> An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n    - `scale` ?<[ScreenshotScale]<\"css\"|\"device\">> See [`option: Page.screenshot.scale`] in [`method: Page.screenshot`]. Defaults to `\"css\"`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":71,"to":80}}}}],["39c25491-e966-42c5-b056-b32a48d52064",{"pageContent":"- `scale` ?<[ScreenshotScale]<\"css\"|\"device\">> See [`option: Page.screenshot.scale`] in [`method: Page.screenshot`]. Defaults to `\"css\"`.\n    - `stylePath` ?<[string]|[Array]<[string]>> See [`option: Page.screenshot.style`] in [`method: Page.screenshot`].\n    - `threshold` ?<[float]> An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n    - `pathTemplate` ?<[string]> A template controlling location of the screenshots. See [`property: TestConfig.snapshotPathTemplate`] for details.\n  - `toMatchAriaSnapshot` ?<[Object]> Configuration for the [`method: LocatorAssertions.toMatchAriaSnapshot#2`] method.\n    - `pathTemplate` ?<[string]> A template controlling location of the aria snapshots. See [`property: TestConfig.snapshotPathTemplate`] for details.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":80,"to":85}}}}],["c6fcfa8c-3e81-451d-ac8a-caec733f8b40",{"pageContent":"- `pathTemplate` ?<[string]> A template controlling location of the aria snapshots. See [`property: TestConfig.snapshotPathTemplate`] for details.\n  - `toMatchSnapshot` ?<[Object]> Configuration for the [`method: SnapshotAssertions.toMatchSnapshot#1`] method.\n    - `maxDiffPixels` ?<[int]> An acceptable amount of pixels that could be different, unset by default.\n    - `maxDiffPixelRatio` ?<[float]> An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n    - `threshold` ?<[float]> An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n  - `toPass` ?<[Object]> Configuration for the [expect(value).toPass()](../test-assertions.md#expecttopass) method.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":85,"to":90}}}}],["8698d70d-2209-4433-8cbf-0381b5057dad",{"pageContent":"- `toPass` ?<[Object]> Configuration for the [expect(value).toPass()](../test-assertions.md#expecttopass) method.\n    - `intervals` ?<[Array]<[int]>> Probe intervals for toPass method in milliseconds.\n    - `timeout` ?<[int]> Timeout for toPass method in milliseconds.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":90,"to":92}}}}],["bee2fc25-be87-420a-bc5b-013e825f4db8",{"pageContent":"Configuration for the `expect` assertion library. Learn more about [various timeouts](../test-timeouts.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10000,\n    toMatchSnapshot: {\n      maxDiffPixels: 10,\n    },\n  },\n});\n```\n\n## property: TestConfig.failOnFlakyTests\n* since: v1.52\n- type: ?<[boolean]>\n\nWhether to exit with an error if any tests are marked as flaky. Useful on CI.\n\nAlso available in the [command line](../test-cli.md) with the `--fail-on-flaky-tests` option.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  failOnFlakyTests: !!process.env.CI,\n});\n```\n\n## property: TestConfig.forbidOnly\n* since: v1.10\n- type: ?<[boolean]>\n\nWhether to exit with an error if any tests or groups are marked as [`method: Test.only`] or [`method: Test.describe.only`]. Useful on CI.\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":94,"to":135}}}}],["4ee6d856-a750-4e66-bc5b-b22639038f70",{"pageContent":"Whether to exit with an error if any tests or groups are marked as [`method: Test.only`] or [`method: Test.describe.only`]. Useful on CI.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  forbidOnly: !!process.env.CI,\n});\n```\n\n## property: TestConfig.fullyParallel\n* since: v1.20\n- type: ?<[boolean]>\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time.\nBy default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\nYou can configure entire test run to concurrently execute all tests in all files using this option.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\n## property: TestConfig.globalSetup\n* since: v1.10\n- type: ?<[string]|[Array]<[string]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":133,"to":166}}}}],["034f8a09-e77d-4b62-a869-8fce7ea5f4fd",{"pageContent":"export default defineConfig({\n  fullyParallel: true,\n});\n```\n\n## property: TestConfig.globalSetup\n* since: v1.10\n- type: ?<[string]|[Array]<[string]>>\n\nPath to the global setup file. This file will be required and run before all the tests. It must export a single function that takes a [FullConfig] argument. Pass an array of paths to specify multiple global setup files.\n\nLearn more about [global setup and teardown](../test-global-setup-teardown.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: './global-setup',\n});\n```\n\n## property: TestConfig.globalTeardown\n* since: v1.10\n- type: ?<[string]|[Array]<[string]>>\n\nPath to the global teardown file. This file will be required and run after all the tests. It must export a single function. See also [`property: TestConfig.globalSetup`]. Pass an array of paths to specify multiple global teardown files.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":159,"to":186}}}}],["c8549fbf-b29a-4177-850b-98098557d9e0",{"pageContent":"Learn more about [global setup and teardown](../test-global-setup-teardown.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTeardown: './global-teardown',\n});\n```\n\n## property: TestConfig.globalTimeout\n* since: v1.10\n- type: ?<[int]>\n\nMaximum time in milliseconds the whole test suite can run. Zero timeout (default) disables this behavior. Useful on CI to prevent broken setup from running too long and wasting resources. Learn more about [various timeouts](../test-timeouts.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,\n});\n```\n\n## property: TestConfig.grep\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":188,"to":218}}}}],["e7c3b2c1-be76-4811-802f-39c8380fc1c4",{"pageContent":"export default defineConfig({\n  globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,\n});\n```\n\n## property: TestConfig.grep\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>\n\nFilter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with \"cart\" in the title. Also available in the [command line](../test-cli.md) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.\n\n`grep` option is also useful for [tagging tests](../test-annotations.md#tag-tests).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grep: /smoke/,\n});\n```\n\n## property: TestConfig.grepInvert\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":211,"to":236}}}}],["cc11174c-3977-4d3a-9fe2-70b197862651",{"pageContent":"export default defineConfig({\n  grep: /smoke/,\n});\n```\n\n## property: TestConfig.grepInvert\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>\n\nFilter to only run tests with a title **not** matching one of the patterns. This is the opposite of [`property: TestConfig.grep`]. Also available in the [command line](../test-cli.md) with the `--grep-invert` option.\n\n`grepInvert` option is also useful for [tagging tests](../test-annotations.md#tag-tests).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grepInvert: /manual/,\n});\n```\n\n## property: TestConfig.ignoreSnapshots\n* since: v1.26\n- type: ?<[boolean]>\n\nWhether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  ignoreSnapshots: !process.env.CI,\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":229,"to":266}}}}],["407ca730-acba-4124-9468-284867b34b90",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  ignoreSnapshots: !process.env.CI,\n});\n```\n\n## property: TestConfig.maxFailures\n* since: v1.10\n- type: ?<[int]>\n\nThe maximum number of test failures for the whole test suite run. After reaching this number, testing will stop and exit with an error. Setting to zero (default) disables this behavior.\n\nAlso available in the [command line](../test-cli.md) with the `--max-failures` and `-x` options.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  maxFailures: process.env.CI ? 1 : 0,\n});\n```\n\n## property: TestConfig.metadata\n* since: v1.10\n- type: ?<[Metadata]>\n\nMetadata contains key-value pairs to be included in the report. For example, HTML report will display it as key-value pairs, and JSON report will include metadata serialized as json.\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":258,"to":292}}}}],["58fe7661-0f49-4cf5-b740-101bd5038ae4",{"pageContent":"Metadata contains key-value pairs to be included in the report. For example, HTML report will display it as key-value pairs, and JSON report will include metadata serialized as json.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  metadata: { title: 'acceptance tests' },\n});\n```\n\n## property: TestConfig.name\n* since: v1.10\n- type: ?<[string]>\n\nConfig name is visible in the report and during test execution, unless overridden by [`property: TestProject.name`].\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  name: 'acceptance tests',\n});\n```\n\n## property: TestConfig.outputDir\n* since: v1.10\n- type: ?<[string]>\n\nThe output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":290,"to":327}}}}],["b3575a18-1ff8-41d2-9408-3aba27e9e4df",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  outputDir: './test-results',\n});\n```\n\n**Details**\n\nThis directory is cleaned at the start. When running a test, a unique subdirectory inside the [`property: TestConfig.outputDir`] is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [`property: TestInfo.outputDir`] and [`method: TestInfo.outputPath`].\n\nHere is an example that uses [`method: TestInfo.outputPath`] to create a temporary file.\n\n```js\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":324,"to":348}}}}],["b25bf0a6-2e0f-4c01-bd76-467e4f362d9b",{"pageContent":"test('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\n\n## property: TestConfig.snapshotDir\n* since: v1.10\n* discouraged: Use [`property: TestConfig.snapshotPathTemplate`] to configure snapshot paths.\n- type: ?<[string]>\n\nThe base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [`property: TestConfig.testDir`].\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotDir: './snapshots',\n});\n```\n\n**Details**\n\nThe directory for each test can be accessed by [`property: TestInfo.snapshotDir`] and [`method: TestInfo.snapshotPath`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":344,"to":370}}}}],["4b812e37-c97c-48e7-a3d9-b257b96effbd",{"pageContent":"**Details**\n\nThe directory for each test can be accessed by [`property: TestInfo.snapshotDir`] and [`method: TestInfo.snapshotPath`].\n\nThis path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [`property: TestInfo.snapshotDir`] would resolve to `snapshots/a.spec.js-snapshots`.\n\n## property: TestConfig.snapshotPathTemplate = %%-test-config-snapshot-path-template-%%\n* since: v1.28\n\n## property: TestConfig.preserveOutput\n* since: v1.10\n- type: ?<[PreserveOutput]<\"always\"|\"never\"|\"failures-only\">>\n\nWhether to preserve test output in the [`property: TestConfig.outputDir`]. Defaults to `'always'`.\n* `'always'` - preserve output for all tests;\n* `'never'` - do not preserve output for any tests;\n* `'failures-only'` - only preserve output for failed tests.\n\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  preserveOutput: 'always',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":368,"to":395}}}}],["5a59d28e-7435-4c70-900e-5ce3bebd203a",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  preserveOutput: 'always',\n});\n```\n\n## property: TestConfig.projects\n* since: v1.10\n- type: ?<[Array]<[TestProject]>>\n\nPlaywright Test supports running multiple test projects at the same time. See [TestProject] for more information.\n\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    { name: 'chromium', use: devices['Desktop Chrome'] }\n  ]\n});\n```\n\n## property: TestConfig.quiet\n* since: v1.10\n- type: ?<[boolean]>\n\nWhether to suppress stdio and stderr output from the tests.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  quiet: !!process.env.CI,\n});\n```\n\n## property: TestConfig.repeatEach\n* since: v1.10\n- type: ?<[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":387,"to":434}}}}],["a0c6c8e9-2a1b-42a9-996c-22f649fa7ad9",{"pageContent":"export default defineConfig({\n  quiet: !!process.env.CI,\n});\n```\n\n## property: TestConfig.repeatEach\n* since: v1.10\n- type: ?<[int]>\n\nThe number of times to repeat each test, useful for debugging flaky tests.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  repeatEach: 3,\n});\n```\n\n## property: TestConfig.reporter\n* since: v1.10\n- type: ?<[string]|[Array]<[Object]>|[BuiltInReporter]<\"list\"|\"dot\"|\"line\"|\"github\"|\"json\"|\"junit\"|\"null\"|\"html\">>\n  - `0` <[string]> Reporter name or module or file path\n  - `1` <[Object]> An object with reporter options if any\n\nThe list of reporters to use. Each reporter can be:\n* A builtin reporter name like `'list'` or `'json'`.\n* A module name like `'my-awesome-reporter'`.\n* A relative path to the reporter like `'./reporters/my-awesome-reporter.js'`.\n\nYou can pass options to the reporter in a tuple like `['json', { outputFile: './report.json' }]`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":427,"to":459}}}}],["6206be9d-08ad-4e7d-ba68-6dc48a2cd1e1",{"pageContent":"You can pass options to the reporter in a tuple like `['json', { outputFile: './report.json' }]`.\n\nLearn more in the [reporters guide](../test-reporters.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n## property: TestConfig.reportSlowTests\n* since: v1.10\n- type: ?<[null]|[Object]>\n  - `max` <[int]> The maximum number of slow test files to report. Defaults to `5`.\n  - `threshold` <[float]> Test file duration in milliseconds that is considered slow. Defaults to 5 minutes.\n\nWhether to report slow test files. Pass `null` to disable this feature.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reportSlowTests: null,\n});\n```\n\n**Details**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":459,"to":491}}}}],["ae381a2d-7bd4-4309-86e6-7ba34099fc8d",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reportSlowTests: null,\n});\n```\n\n**Details**\n\nTest files that took more than `threshold` milliseconds are considered slow, and the slowest ones are reported, no more than `max` number of them. Passing zero as `max` reports all test files that exceed the threshold.\n\n## property: TestConfig.respectGitIgnore\n* since: v1.45\n- type: ?<[boolean]>\n\nWhether to skip entries from `.gitignore` when searching for test files. By default, if neither [`property: TestConfig.testDir`] nor [`property: TestProject.testDir`] are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries.\n\n## property: TestConfig.retries\n* since: v1.10\n- type: ?<[int]>\n\nThe maximum number of retry attempts given to failed tests. By default failing tests are not retried. Learn more about [test retries](../test-retries.md#retries).\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":481,"to":507}}}}],["4ad075fa-14cd-4581-a7d3-c2c5c2130355",{"pageContent":"The maximum number of retry attempts given to failed tests. By default failing tests are not retried. Learn more about [test retries](../test-retries.md#retries).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  retries: 2,\n});\n```\n\n## property: TestConfig.shard\n* since: v1.10\n- type: ?<[null]|[Object]>\n  - `current` <[int]> The index of the shard to execute, one-based.\n  - `total` <[int]> The total number of shards.\n\nShard tests and execute only the selected shard. Specify in the one-based form like `{ total: 5, current: 2 }`.\n\nLearn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  shard: { total: 10, current: 3 },\n});\n```\n\n\n## property: TestConfig.testDir\n* since: v1.10\n- type: ?<[string]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":505,"to":540}}}}],["e6b0ca2a-161f-4248-bf56-689098d3bc93",{"pageContent":"export default defineConfig({\n  shard: { total: 10, current: 3 },\n});\n```\n\n\n## property: TestConfig.testDir\n* since: v1.10\n- type: ?<[string]>\n\nDirectory that will be recursively scanned for test files. Defaults to the directory of the configuration file.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests/playwright',\n});\n```\n\n## property: TestConfig.testIgnore\n* since: v1.10\n- type: ?<[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nFiles matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nFor example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testIgnore: '**/test-assets/**',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":532,"to":570}}}}],["dcedc751-07bd-4ead-b7f2-38d6dc260cfd",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testIgnore: '**/test-assets/**',\n});\n```\n\n## property: TestConfig.testMatch\n* since: v1.10\n- type: ?<[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nOnly the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nBy default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `\".test\"` or `\".spec\"` suffix, for example `login-screen.wrong-credentials.spec.ts`.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testMatch: /.*\\.e2e\\.js/,\n});\n```\n\n## property: TestConfig.timeout\n* since: v1.10\n- type: ?<[int]>\n\nTimeout for each test in milliseconds. Defaults to 30 seconds.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":562,"to":594}}}}],["72e74ebc-9b42-433f-a6e9-6070377f4cbc",{"pageContent":"export default defineConfig({\n  testMatch: /.*\\.e2e\\.js/,\n});\n```\n\n## property: TestConfig.timeout\n* since: v1.10\n- type: ?<[int]>\n\nTimeout for each test in milliseconds. Defaults to 30 seconds.\n\nThis is a base timeout for all tests. In addition, each test can configure its own timeout with [`method: Test.setTimeout`]. Learn more about [various timeouts](../test-timeouts.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 5 * 60 * 1000,\n});\n```\n\n## property: TestConfig.tsconfig\n* since: v1.49\n- type: ?<[string]>\n\nPath to a single `tsconfig` applicable to all imported files. By default, `tsconfig` for each imported file is looked up separately. Note that `tsconfig` property has no effect while the configuration file or any of its dependencies are loaded. Ignored when `--tsconfig` command line option is specified.\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":585,"to":614}}}}],["c2ba0488-6cdf-40a6-8d96-41b8ad2850f4",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  tsconfig: './tsconfig.test.json',\n});\n```\n\n## property: TestConfig.updateSnapshots\n* since: v1.10\n- type: ?<[UpdateSnapshots]<\"all\"|\"changed\"|\"missing\"|\"none\">>\n\nWhether to update expected snapshots with the actual results produced by the test run. Defaults to `'missing'`.\n* `'all'` - All tests that are executed will update snapshots.\n* `'changed'` - All tests that are executed will update snapshots that did not match. Matching snapshots will not be updated.\n* `'missing'` - Missing snapshots are created, for example when authoring a new test and running it for the first time. This is the default.\n* `'none'` - No snapshots are updated.\n\nLearn more about [snapshots](../test-snapshots.md).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  updateSnapshots: 'missing',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":614,"to":644}}}}],["cb802480-a87c-4fff-a9c5-c52430c7c8fe",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  updateSnapshots: 'missing',\n});\n```\n\n## property: TestConfig.updateSourceMethod\n* since: v1.50\n- type: ?<[UpdateSourceMethod]<\"overwrite\"|\"3way\"|\"patch\">>\n\nDefines how to update snapshots in the source code.\n* `'patch'` - Create a unified diff file that can be used to update the source code later. This is the default.\n* `'3way'` - Generate merge conflict markers in source code. This allows user to manually pick relevant changes, as if they are resolving a merge conflict in the IDE.\n* `'overwrite'` - Overwrite the source code with the new snapshot values.\n\n## property: TestConfig.use\n* since: v1.10\n- type: ?<[TestOptions]>\n\nGlobal options for all tests, for example [`property: TestOptions.browserName`]. Learn more about [configuration](../test-configuration.md) and see [available options][TestOptions].\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":636,"to":661}}}}],["376221ff-0b0e-42b5-9071-c8481ce4fabf",{"pageContent":"Global options for all tests, for example [`property: TestOptions.browserName`]. Learn more about [configuration](../test-configuration.md) and see [available options][TestOptions].\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'chromium',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":659,"to":671}}}}],["3bf4504c-cc88-4269-9bfa-8947e07f48bb",{"pageContent":"## property: TestConfig.webServer\n* since: v1.10\n- type: ?<[Object]|[Array]<[Object]>>\n  - `command` <[string]> Shell command to start. For example `npm run start`..\n  - `cwd` ?<[string]> Current working directory of the spawned process, defaults to the directory of the configuration file.\n  - `env` ?<[Object]<[string], [string]>> Environment variables to set for the command, `process.env` by default.\n  - `gracefulShutdown` ?<[Object]> How to shut down the process. If unspecified, the process group is forcefully `SIGKILL`ed. If set to `{ signal: 'SIGTERM', timeout: 500 }`, the process group is sent a `SIGTERM` signal, followed by `SIGKILL` if it doesn't exit within 500ms. You can also use `SIGINT` as the signal instead. A `0` timeout means no `SIGKILL` will be sent. Windows doesn't support `SIGTERM` and `SIGINT` signals, so this option is ignored on Windows. Note that shutting down a Docker container requires `SIGTERM`.\n    - `signal` <[\"SIGINT\"|\"SIGTERM\"]>\n    - `timeout` <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":673,"to":681}}}}],["c37566de-f239-45e1-a7c7-ba275ad93a10",{"pageContent":"- `signal` <[\"SIGINT\"|\"SIGTERM\"]>\n    - `timeout` <[int]>\n  - `ignoreHTTPSErrors` ?<[boolean]> Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`.\n  - `name` ?<[string]> Specifies a custom name for the web server. This name will be prefixed to log messages. Defaults to `[WebServer]`.\n  - `port` ?<[int]> The port that your http server is expected to appear on. It does wait until it accepts connections. Either `port` or `url` should be specified.\n  - `reuseExistingServer` ?<[boolean]> If true, it will re-use an existing server on the `port` or `url` when available. If no server is running on that `port` or `url`, it will run the command to start a new server. If `false`, it will throw if an existing process is listening on the `port` or `url`. This should be commonly set to `!process.env.CI` to allow the local dev server when running tests locally.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":680,"to":685}}}}],["86e2a28a-7fe6-4eec-a968-c93296fdfdea",{"pageContent":"- `stderr` ?<[\"pipe\"|\"ignore\"]> Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `\"pipe\"`.\n  - `stdout` ?<[\"pipe\"|\"ignore\"]> If `\"pipe\"`, it will pipe the stdout of the command to the process stdout. If `\"ignore\"`, it will ignore the stdout of the command. Default to `\"ignore\"`.\n  - `timeout` ?<[int]> How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.\n  - `url` ?<[string]> The url on your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections. Redirects (3xx status codes) are being followed and the new location is checked. Either `port` or `url` should be specified.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":686,"to":689}}}}],["d9ad1ad4-3f7a-44bb-b17d-dd606fe1bda2",{"pageContent":"Launch a development web server (or multiple) during the tests.\n\n**Details**\n\nIf the port is specified, Playwright Test will wait for it to be available on `127.0.0.1` or `::1`, before running the tests. If the url is specified, Playwright Test will wait for the URL to return a 2xx, 3xx, 400, 401, 402, or 403 status code before running the tests.\n\nFor continuous integration, you may want to use the `reuseExistingServer: !process.env.CI` option which does not use an existing server on the CI. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable.\n\nThe `port` (but not the `url`) gets passed over to Playwright as a [`property: TestOptions.baseURL`]. For example port `8080` produces `baseURL` equal `http://localhost:8080`. If `webServer` is specified as an array, you must explicitly configure the `baseURL` (even if it only has one entry).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":691,"to":699}}}}],["c299ec17-588b-4d75-b805-4d50b5fd0901",{"pageContent":":::note\nIt is also recommended to specify [`property: TestOptions.baseURL`] in the config, so that tests could use relative urls.\n:::\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\nNow you can use a relative path when navigating the page:\n\n```js title=\"test.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will result in http://localhost:3000/foo\n  await page.goto('/foo');\n});\n```\n\nMultiple web servers (or background processes) can be launched:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":701,"to":733}}}}],["bc38b6f9-0274-442d-a2f0-b768bb257f4f",{"pageContent":"test('test', async ({ page }) => {\n  // This will result in http://localhost:3000/foo\n  await page.goto('/foo');\n});\n```\n\nMultiple web servers (or background processes) can be launched:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://localhost:3000',\n      name: 'Frontend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://localhost:3333',\n      name: 'Backend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n## property: TestConfig.workers\n* since: v1.10\n- type: ?<[int]|[string]>\n\nThe maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":727,"to":764}}}}],["919779b4-1ad8-4005-9648-189284da2f89",{"pageContent":"The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`\n\nPlaywright Test uses worker processes to run tests. There is always at least one worker process, but more can be used to speed up test execution.\n\nDefaults to half of the number of logical CPU cores. Learn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 3,\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testconfig.md","title":"src-test-api-class-testconfig","url":"https://playwright.dev/docs/src-test-api-class-testconfig","loc":{"lines":{"from":764,"to":778}}}}],["7b528da5-7835-490c-889a-a091a46ea314",{"pageContent":"# class: TestInfo\n* since: v1.10\n* langs: js\n\n`TestInfo` contains information about currently running test. It is available to test functions, [`method: Test.beforeEach`], [`method: Test.afterEach`], [`method: Test.beforeAll`] and [`method: Test.afterAll`] hooks, and test-scoped fixtures. `TestInfo` provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  expect(testInfo.title).toBe('basic test');\n  await page.screenshot(testInfo.outputPath('screenshot.png'));\n});\n```\n\n\n## property: TestInfo.annotations\n* since: v1.10\n- type: <[Array]<[Object]>>\n  - `type` <[string]> Annotation type, for example `'skip'` or `'fail'`.\n  - `description` ?<[string]> Optional description.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":1,"to":21}}}}],["7ad3e5c1-3cff-4772-a2a8-3e2941ce1a20",{"pageContent":"The list of annotations applicable to the current test. Includes annotations from the test, annotations from all [`method: Test.describe`] groups the test belongs to and file-level annotations for the test file.\n\nLearn more about [test annotations](../test-annotations.md).\n\n## property: TestInfo.attachments\n* since: v1.10\n- type: <[Array]<[Object]>>\n  - `name` <[string]> Attachment name.\n  - `contentType` <[string]> Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.\n  - `path` ?<[string]> Optional path on the filesystem to the attached file.\n  - `body` ?<[Buffer]> Optional attachment body used instead of a file.\n\nThe list of files or buffers attached to the current test. Some reporters show test attachments.\n\nTo add an attachment, use [`method: TestInfo.attach`] instead of directly pushing onto this array.\n\n## async method: TestInfo.attach\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":23,"to":40}}}}],["6566e500-5e04-4cb3-9e88-a76ea9811724",{"pageContent":"To add an attachment, use [`method: TestInfo.attach`] instead of directly pushing onto this array.\n\n## async method: TestInfo.attach\n* since: v1.10\n\nAttach a value or a file from disk to the current test. Some reporters show test attachments. Either [`option: path`] or [`option: body`] must be specified, but not both.\n\nFor example, you can attach a screenshot to the test:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  await page.goto('https://playwright.dev');\n  const screenshot = await page.screenshot();\n  await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });\n});\n```\n\nOr you can attach files returned by your APIs:\n\n```js\nimport { test, expect } from '@playwright/test';\nimport { download } from './my-custom-helpers';\n\ntest('basic test', async ({}, testInfo) => {\n  const tmpPath = await download('a');\n  await testInfo.attach('downloaded', { path: tmpPath });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":37,"to":66}}}}],["5903cb7b-7ef7-4df6-8ab6-fe737cefb714",{"pageContent":"test('basic test', async ({}, testInfo) => {\n  const tmpPath = await download('a');\n  await testInfo.attach('downloaded', { path: tmpPath });\n});\n```\n\n:::note\n[`method: TestInfo.attach`] automatically takes care of copying attached files to a\nlocation that is accessible to reporters. You can safely remove the attachment\nafter awaiting the attach call.\n:::\n\n### param: TestInfo.attach.name\n* since: v1.10\n- `name` <[string]>\n\nAttachment name. The name will also be sanitized and used as the prefix of file name\nwhen saving to disk.\n\n### option: TestInfo.attach.body\n* since: v1.10\n- `body` <[string]|[Buffer]>\n\nAttachment body. Mutually exclusive with [`option: path`].\n\n### option: TestInfo.attach.contentType\n* since: v1.10\n- `contentType` <[string]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":62,"to":89}}}}],["e21594d8-e4e8-44d6-b37f-0ec9db84aae0",{"pageContent":"Attachment body. Mutually exclusive with [`option: path`].\n\n### option: TestInfo.attach.contentType\n* since: v1.10\n- `contentType` <[string]>\n\nContent type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`. If omitted, content type is inferred based on the [`option: path`], or defaults to `text/plain` for [string] attachments and `application/octet-stream` for [Buffer] attachments.\n\n### option: TestInfo.attach.path\n* since: v1.10\n- `path` <[string]>\n\nPath on the filesystem to the attached file. Mutually exclusive with [`option: body`].\n\n\n## property: TestInfo.column\n* since: v1.10\n- type: <[int]>\n\nColumn number where the currently running test is declared.\n\n\n## property: TestInfo.config\n* since: v1.10\n- type: <[FullConfig]>\n\nProcessed configuration from the [configuration file](../test-configuration.md).\n\n\n## property: TestInfo.duration\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":85,"to":116}}}}],["a95b2f30-5e06-4591-a87e-d5a870ec7a11",{"pageContent":"Processed configuration from the [configuration file](../test-configuration.md).\n\n\n## property: TestInfo.duration\n* since: v1.10\n- type: <[int]>\n\nThe number of milliseconds the test took to finish. Always zero before the test finishes, either successfully or not. Can be used in [`method: Test.afterEach`] hook.\n\n\n## property: TestInfo.error\n* since: v1.10\n- type: ?<[TestInfoError]>\n\nFirst error thrown during test execution, if any. This is equal to the first\nelement in [`property: TestInfo.errors`].\n\n## property: TestInfo.errors\n* since: v1.10\n- type: <[Array]<[TestInfoError]>>\n\nErrors thrown during test execution, if any.\n\n\n## property: TestInfo.expectedStatus\n* since: v1.10\n- type: <[TestStatus]<\"passed\"|\"failed\"|\"timedOut\"|\"skipped\"|\"interrupted\">>\n\nExpected status for the currently running test. This is usually `'passed'`, except for a few cases:\n* `'skipped'` for skipped tests, e.g. with [`method: Test.skip`];\n* `'failed'` for tests marked as failed with [`method: Test.fail`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":111,"to":141}}}}],["73f5bf1a-e4ff-4ae6-b619-99ae854e57f0",{"pageContent":"Expected status is usually compared with the actual [`property: TestInfo.status`]:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n```\n\n## method: TestInfo.fail#1\n* since: v1.10\n\nMarks the currently running test as \"should fail\". Playwright Test runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed. This is similar to [`method: Test.fail`].\n\n## method: TestInfo.fail#2\n* since: v1.10\n\nConditionally mark the currently running test as \"should fail\" with an optional description. This is similar to [`method: Test.fail`].\n\n### param: TestInfo.fail#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nTest is marked as \"should fail\" when the condition is `true`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":143,"to":168}}}}],["29705df3-1f6c-4615-b6b8-0a034191a7ee",{"pageContent":"### param: TestInfo.fail#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nTest is marked as \"should fail\" when the condition is `true`.\n\n### param: TestInfo.fail#2.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n## property: TestInfo.file\n* since: v1.10\n- type: <[string]>\n\nAbsolute path to a file where the currently running test is declared.\n\n\n## method: TestInfo.fixme#1\n* since: v1.10\n\nMark a test as \"fixme\", with the intention to fix it. Test is immediately aborted. This is similar to [`method: Test.fixme`].\n\n## method: TestInfo.fixme#2\n* since: v1.10\n\nConditionally mark the currently running test as \"fixme\" with an optional description. This is similar to [`method: Test.fixme`].\n\n### param: TestInfo.fixme#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nTest is marked as \"fixme\" when the condition is `true`.\n\n### param: TestInfo.fixme#2.description\n* since: v1.10\n- `description` ?<[string]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":164,"to":202}}}}],["4dff7de8-e01e-4306-bfe1-dbddb7babd2a",{"pageContent":"Test is marked as \"fixme\" when the condition is `true`.\n\n### param: TestInfo.fixme#2.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n## property: TestInfo.fn\n* since: v1.10\n- type: <[function]>\n\nTest function as passed to `test(title, testFunction)`.\n\n## property: TestInfo.tags\n* since: v1.43\n- type: <[Array]<[string]>>\n\nTags that apply to the test. Learn more about [tags](../test-annotations.md#tag-tests).\n\n:::note\nAny changes made to this list while the test is running will not be visible to test reporters.\n:::\n\n## property: TestInfo.testId\n* since: v1.32\n- type: <[string]>\n\nTest id matching the test case id in the reporter API.\n\n## property: TestInfo.line\n* since: v1.10\n- type: <[int]>\n\nLine number where the currently running test is declared.\n\n## property: TestInfo.snapshotDir\n* since: v1.10\n- type: <[string]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":198,"to":237}}}}],["4d8585a5-4e54-4ab9-a8ad-ca7905f3e196",{"pageContent":"## property: TestInfo.line\n* since: v1.10\n- type: <[int]>\n\nLine number where the currently running test is declared.\n\n## property: TestInfo.snapshotDir\n* since: v1.10\n- type: <[string]>\n\nAbsolute path to the snapshot output directory for this specific test. Each test suite gets its own directory so they cannot conflict.\n\nThis property does not account for the [`property: TestProject.snapshotPathTemplate`] configuration.\n\n## property: TestInfo.outputDir\n* since: v1.10\n- type: <[string]>\n\nAbsolute path to the output directory for this specific test run. Each test run gets its own directory so they cannot conflict.\n\n## method: TestInfo.outputPath\n* since: v1.10\n- returns: <[string]>\n\nReturns a path inside the [`property: TestInfo.outputDir`] where the test can safely put a temporary file. Guarantees that tests running in parallel will not interfere with each other.\n\n```js\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":229,"to":257}}}}],["75784f82-0165-46d2-9a1a-4615549bb5d3",{"pageContent":"```js\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('dir', 'temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');\n});\n```\n\n> Note that `pathSegments` accepts path segments to the test output directory such as `testInfo.outputPath('relative', 'path', 'to', 'output')`.\n> However, this path must stay within the [`property: TestInfo.outputDir`] directory for each test (i.e. `test-results/a-test-title`), otherwise it will throw.\n\n### param: TestInfo.outputPath.pathSegments\n* since: v1.10\n- `...pathSegments` <[Array]<[string]>>\n\nPath segments to append at the end of the resulting path.\n\n## property: TestInfo.parallelIndex\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":255,"to":276}}}}],["36e54532-2965-491d-849d-5ee2e70010e0",{"pageContent":"Path segments to append at the end of the resulting path.\n\n## property: TestInfo.parallelIndex\n* since: v1.10\n- type: <[int]>\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.\n\nAlso available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.\n\n## property: TestInfo.project\n* since: v1.10\n- type: <[FullProject]>\n\nProcessed project configuration from the [configuration file](../test-configuration.md).\n\n\n## property: TestInfo.repeatEachIndex\n* since: v1.10\n- type: <[int]>\n\nSpecifies a unique repeat index when running in \"repeat each\" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli.md).\n\n## property: TestInfo.retry\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":272,"to":297}}}}],["e210a76a-415c-4fb7-ba76-0323cdbe89cf",{"pageContent":"## property: TestInfo.retry\n* since: v1.10\n- type: <[int]>\n\nSpecifies the retry number when the test is retried after a failure. The first test run has [`property: TestInfo.retry`] equal to zero, the first retry has it equal to one, and so on. Learn more about [retries](../test-retries.md#retries).\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({}, testInfo) => {\n  // You can access testInfo.retry in any hook or fixture.\n  if (testInfo.retry > 0)\n    console.log(`Retrying!`);\n});\n\ntest('my test', async ({ page }, testInfo) => {\n  // Here we clear some server-side state when retrying.\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\n## method: TestInfo.setTimeout\n* since: v1.10\n\nChanges the timeout for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts.md).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":295,"to":321}}}}],["e156c2d6-917b-4173-bda8-98b62b07bfa1",{"pageContent":"## method: TestInfo.setTimeout\n* since: v1.10\n\nChanges the timeout for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts.md).\n\nTimeout is usually specified in the [configuration file](../test-configuration.md), but it could be useful to change the timeout in certain scenarios:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n### param: TestInfo.setTimeout.timeout\n* since: v1.10\n- `timeout` <[int]>\n\nTimeout in milliseconds.\n\n## method: TestInfo.skip#1\n* since: v1.10\n\nUnconditionally skip the currently running test. Test is immediately aborted. This is similar to [`method: Test.skip`].\n\n## method: TestInfo.skip#2\n* since: v1.10\n\nConditionally skips the currently running test with an optional description. This is similar to [`method: Test.skip`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":318,"to":348}}}}],["3834c51f-3f00-4078-9266-6b7c93546d94",{"pageContent":"## method: TestInfo.skip#2\n* since: v1.10\n\nConditionally skips the currently running test with an optional description. This is similar to [`method: Test.skip`].\n\n### param: TestInfo.skip#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nA skip condition. Test is skipped when the condition is `true`.\n\n### param: TestInfo.skip#2.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n## method: TestInfo.slow#1\n* since: v1.10\n\nMarks the currently running test as \"slow\", giving it triple the default timeout. This is similar to [`method: Test.slow`].\n\n## method: TestInfo.slow#2\n* since: v1.10\n\nConditionally mark the currently running test as \"slow\" with an optional description, giving it triple the default timeout. This is similar to [`method: Test.slow`].\n\n### param: TestInfo.slow#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nTest is marked as \"slow\" when the condition is `true`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":345,"to":377}}}}],["9521bc08-448d-490b-96ef-a63e0166059b",{"pageContent":"### param: TestInfo.slow#2.condition\n* since: v1.10\n- `condition` <[boolean]>\n\nTest is marked as \"slow\" when the condition is `true`.\n\n### param: TestInfo.slow#2.description\n* since: v1.10\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.\n\n\n## method: TestInfo.snapshotPath\n* since: v1.10\n- returns: <[string]>\n\nReturns a path to a snapshot file with the given `name`. Pass [`option: kind`] to obtain a specific path:\n* `kind: 'screenshot'` for [`method: PageAssertions.toHaveScreenshot#1`];\n* `kind: 'aria'` for [`method: LocatorAssertions.toMatchAriaSnapshot`];\n* `kind: 'snapshot'` for [`method: SnapshotAssertions.toMatchSnapshot#1`].\n\n**Usage**\n\n```js\nawait expect(page).toHaveScreenshot('header.png');\n// Screenshot assertion above expects screenshot at this path:\nconst screenshotPath = test.info().snapshotPath('header.png', { kind: 'screenshot' });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":373,"to":400}}}}],["88ac95a6-b071-4011-a370-3229264a8c88",{"pageContent":"await expect(page.getByRole('main')).toMatchAriaSnapshot({ name: 'main.aria.yml' });\n// Aria snapshot assertion above expects snapshot at this path:\nconst ariaSnapshotPath = test.info().snapshotPath('main.aria.yml', { kind: 'aria' });\n\nexpect('some text').toMatchSnapshot('snapshot.txt');\n// Snapshot assertion above expects snapshot at this path:\nconst snapshotPath = test.info().snapshotPath('snapshot.txt');\n\nexpect('some text').toMatchSnapshot(['dir', 'subdir', 'snapshot.txt']);\n// Snapshot assertion above expects snapshot at this path:\nconst nestedPath = test.info().snapshotPath('dir', 'subdir', 'snapshot.txt');\n```\n\n### param: TestInfo.snapshotPath.name\n* since: v1.10\n- `...name` <[Array]<[string]>>\n\nThe name of the snapshot or the path segments to define the snapshot file path. Snapshots with the same name in the same test file are expected to be the same.\n\nWhen passing [`option: kind`], multiple name segments are not supported.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":402,"to":421}}}}],["214d8b1d-994e-4ae2-8a08-edcdc4d92c35",{"pageContent":"When passing [`option: kind`], multiple name segments are not supported.\n\n### option: TestInfo.snapshotPath.kind\n* since: v1.53\n- `kind` <[SnapshotKind]<\"snapshot\"|\"screenshot\"|\"aria\">>\n\nThe snapshot kind controls which snapshot path template is used. See [`property: TestConfig.snapshotPathTemplate`] for more details. Defaults to `'snapshot'`.\n\n## property: TestInfo.snapshotSuffix\n* since: v1.10\n- type: <[string]>\n\n:::note\nUse of [`property: TestInfo.snapshotSuffix`] is discouraged. Please use [`property: TestConfig.snapshotPathTemplate`] to configure\nsnapshot paths.\n:::\n\nSuffix used to differentiate snapshots between multiple test configurations. For example, if snapshots depend on the platform, you can set `testInfo.snapshotSuffix` equal to `process.platform`. In this case `expect(value).toMatchSnapshot(snapshotName)` will use different snapshots depending on the platform. Learn more about [snapshots](../test-snapshots.md).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":421,"to":438}}}}],["c5e7f141-118d-4044-8c2d-b721ff18d5cf",{"pageContent":"## property: TestInfo.status\n* since: v1.10\n- type: ?<[TestStatus]<\"passed\"|\"failed\"|\"timedOut\"|\"skipped\"|\"interrupted\">>\n\nActual status for the currently running test. Available after the test has finished in [`method: Test.afterEach`] hook and fixtures.\n\nStatus is usually compared with the [`property: TestInfo.expectedStatus`]:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n```\n\n## property: TestInfo.timeout\n* since: v1.10\n- type: <[int]>\n\nTimeout in milliseconds for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts.md).\n\nTimeout is usually specified in the [configuration file](../test-configuration.md)\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":440,"to":466}}}}],["2ee2dff2-b1c9-4162-9bea-d09d0f20f012",{"pageContent":"Timeout is usually specified in the [configuration file](../test-configuration.md)\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n## property: TestInfo.title\n* since: v1.10\n- type: <[string]>\n\nThe title of the currently running test as passed to `test(title, testFunction)`.\n\n## property: TestInfo.titlePath\n* since: v1.10\n- type: <[Array]<[string]>>\n\nThe full title path starting with the test file name.\n\n## property: TestInfo.workerIndex\n* since: v1.10\n- type: <[int]>\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfo.md","title":"src-test-api-class-testinfo","url":"https://playwright.dev/docs/src-test-api-class-testinfo","loc":{"lines":{"from":463,"to":492}}}}],["7fedeb27-af08-4910-a9d2-85f715fa0400",{"pageContent":"# class: TestInfoError\n* since: v1.10\n* langs: js\n\nInformation about an error thrown during test execution.\n\n## property: TestInfoError.cause\n* since: v1.49\n- type: ?<[TestInfoError]>\n\nError cause. Set when there is a [cause](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause) for the error. Will be `undefined` if there is no cause or if the cause is not an instance of [Error].\n\n## property: TestInfoError.message\n* since: v1.10\n- type: ?<[string]>\n\nError message. Set when [Error] (or its subclass) has been thrown.\n\n## property: TestInfoError.stack\n* since: v1.10\n- type: ?<[string]>\n\nError stack. Set when [Error] (or its subclass) has been thrown.\n\n## property: TestInfoError.value\n* since: v1.10\n- type: ?<[string]>\n\nThe value that was thrown. Set when anything except the [Error] (or its subclass) has been thrown.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testinfoerror.md","title":"src-test-api-class-testinfoerror","url":"https://playwright.dev/docs/src-test-api-class-testinfoerror","loc":{"lines":{"from":1,"to":29}}}}],["b6912910-900a-4986-b07c-4e5c251e6285",{"pageContent":"# class: TestOptions\n* since: v1.10\n* langs: js\n\nPlaywright Test provides many options to configure test environment, [Browser], [BrowserContext] and more.\n\nThese options are usually provided in the [configuration file](../test-configuration.md) through [`property: TestConfig.use`] and [`property: TestProject.use`].\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    headless: false,\n    viewport: { width: 1280, height: 720 },\n    ignoreHTTPSErrors: true,\n    video: 'on-first-retry',\n  },\n});\n```\n\nAlternatively, with [`method: Test.use`] you can override some options for a file.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\n// Run tests in this file with portrait-like viewport.\ntest.use({ viewport: { width: 600, height: 900 } });\n\ntest('my portrait test', async ({ page }) => {\n  // ...\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":1,"to":32}}}}],["b3460b75-67d9-4cd8-9cbe-a7a7336d8de1",{"pageContent":"// Run tests in this file with portrait-like viewport.\ntest.use({ viewport: { width: 600, height: 900 } });\n\ntest('my portrait test', async ({ page }) => {\n  // ...\n});\n```\n\n## property: TestOptions.acceptDownloads = %%-context-option-acceptdownloads-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    acceptDownloads: false,\n  },\n});\n```\n\n## property: TestOptions.baseURL = %%-context-option-baseURL-%%\n* since: v1.10\n\n**Usage**\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n## property: TestOptions.browserName\n* since: v1.10\n- type: <[BrowserName]<\"chromium\"|\"firefox\"|\"webkit\">>\n\nName of the browser that runs tests. Defaults to `'chromium'`. Most of the time you should set `browserName` in your [TestConfig]:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":26,"to":69}}}}],["d7b4c368-8b13-4178-b7b7-caed4f84c76d",{"pageContent":"Name of the browser that runs tests. Defaults to `'chromium'`. Most of the time you should set `browserName` in your [TestConfig]:\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'firefox',\n  },\n});\n```\n\n## property: TestOptions.actionTimeout\n* since: v1.10\n- type: <[int]>\n\nDefault timeout for each Playwright action in milliseconds, defaults to 0 (no timeout).\n\nThis is a default timeout for all Playwright actions, same as configured via [`method: Page.setDefaultTimeout`].\n\n**Usage**\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n    actionTimeout: 0,\n  },\n});\n```\n\nLearn more about [various timeouts](../test-timeouts.md).\n\n## property: TestOptions.bypassCSP = %%-context-option-bypasscsp-%%\n* since: v1.10\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":69,"to":109}}}}],["8c687be6-6bde-4e56-8605-75f31c11e696",{"pageContent":"Learn more about [various timeouts](../test-timeouts.md).\n\n## property: TestOptions.bypassCSP = %%-context-option-bypasscsp-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    bypassCSP: true,\n  }\n});\n```\n\n## property: TestOptions.channel = %%-browser-option-channel-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n  ]\n});\n```\n\n## property: TestOptions.clientCertificates = %%-context-option-clientCertificates-%%\n* since: 1.46\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":104,"to":148}}}}],["94d91396-67fc-4fd3-8f4c-4110b57a6cd2",{"pageContent":"## property: TestOptions.clientCertificates = %%-context-option-clientCertificates-%%\n* since: 1.46\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n});\n```\n\n## property: TestOptions.colorScheme = %%-context-option-colorscheme-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":142,"to":175}}}}],["4f26a38a-4685-4561-b79d-db5e90ec29c6",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n## property: TestOptions.connectOptions\n* since: v1.10\n- type: <[void]|[Object]>\n  - `wsEndpoint` <[string]> A browser websocket endpoint to connect to.\n  - `headers` ?<[void]|[Object]<[string], [string]>> Additional HTTP headers to be sent with web socket connect request. Optional.\n  - `timeout` ?<[int]> Timeout in milliseconds for the connection to be established. Optional, defaults to no timeout.\n  - `exposeNetwork` ?<[string]> Option to expose network available on the connecting client to the browser being connected to. See [`method: BrowserType.connect`] for more details.\n\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    connectOptions: {\n      wsEndpoint: 'ws://localhost:5678',\n    },\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":165,"to":198}}}}],["e696f5f5-dcb9-4cc6-a5bc-c3468dd4feaa",{"pageContent":"export default defineConfig({\n  use: {\n    connectOptions: {\n      wsEndpoint: 'ws://localhost:5678',\n    },\n  },\n});\n```\n\nWhen connect options are specified, default [`property: Fixtures.browser`], [`property: Fixtures.context`] and [`property: Fixtures.page`] use the remote browser instead of launching a browser locally, and any launch options like [`property: TestOptions.headless`] or [`property: TestOptions.channel`] are ignored.\n\n## property: TestOptions.contextOptions\n* since: v1.10\n- type: <[Object]>\n\nOptions used to create the context, as passed to [`method: Browser.newContext`]. Specific options like [`property: TestOptions.viewport`] take priority over this.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    contextOptions: {\n      reducedMotion: 'reduce',\n    },\n  },\n});\n```\n\n## property: TestOptions.deviceScaleFactor = %%-context-option-devicescalefactor-%%\n* since: v1.10\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":191,"to":225}}}}],["e6e80d96-ff6b-4424-9e37-62a2daa1ebb4",{"pageContent":"## property: TestOptions.deviceScaleFactor = %%-context-option-devicescalefactor-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 2560, height: 1440 },\n    deviceScaleFactor: 2,\n  },\n});\n```\n\n## property: TestOptions.extraHTTPHeaders = %%-context-option-extrahttpheaders-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n  },\n});\n```\n\n## property: TestOptions.geolocation = %%-context-option-geolocation-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":222,"to":261}}}}],["ce3a90b8-b367-45ec-a0f9-2277cb151c48",{"pageContent":"## property: TestOptions.geolocation = %%-context-option-geolocation-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n  },\n});\n```\nLearn more about [geolocation](../emulation.md#color-scheme-and-media).\n\n## property: TestOptions.hasTouch = %%-context-option-hastouch-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    hasTouch: true\n  },\n});\n```\n\n## property: TestOptions.headless = %%-browser-option-headless-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    headless: false\n  },\n});\n```\n\n## property: TestOptions.httpCredentials = %%-context-option-httpcredentials-%%\n* since: v1.10\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":255,"to":304}}}}],["56d8f051-93cc-4ffb-9833-95385f8fb3a3",{"pageContent":"export default defineConfig({\n  use: {\n    headless: false\n  },\n});\n```\n\n## property: TestOptions.httpCredentials = %%-context-option-httpcredentials-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n  },\n});\n```\n\n## property: TestOptions.ignoreHTTPSErrors = %%-context-option-ignorehttpserrors-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n});\n```\n\n## property: TestOptions.isMobile = %%-context-option-ismobile-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    isMobile: false,\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":294,"to":347}}}}],["970a003e-b190-4294-91e9-6ab37c2c82f6",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    isMobile: false,\n  },\n});\n```\n\n## property: TestOptions.javaScriptEnabled = %%-context-option-javascriptenabled-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    javaScriptEnabled: false,\n  },\n});\n```\n\n\n## property: TestOptions.launchOptions\n* since: v1.10\n- type: <[Object]>\n\nOptions used to launch the browser, as passed to [`method: BrowserType.launch`]. Specific options [`property: TestOptions.headless`] and [`property: TestOptions.channel`] take priority over this.\n\n:::warning\nUse custom browser args at your own risk, as some of them may break Playwright functionality.\n:::\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":337,"to":378}}}}],["221a03a3-5960-445e-9f25-50b899aabca1",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        launchOptions: {\n          args: ['--start-maximized']\n        }\n      }\n    }\n  ]\n});\n```\n\n## property: TestOptions.locale\n* since: v1.10\n- type: <[string]>\n\nSpecify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to `en-US`. Learn more about emulation in our [emulation guide](../emulation.md#locale--timezone).\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'it-IT',\n  },\n});\n```\n\n## property: TestOptions.navigationTimeout\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":375,"to":415}}}}],["d487c25b-66d1-453b-96bb-42660dde5551",{"pageContent":"export default defineConfig({\n  use: {\n    locale: 'it-IT',\n  },\n});\n```\n\n## property: TestOptions.navigationTimeout\n* since: v1.10\n- type: <[int]>\n\nTimeout for each navigation action in milliseconds. Defaults to 0 (no timeout).\n\nThis is a default navigation timeout, same as configured via [`method: Page.setDefaultNavigationTimeout`].\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    navigationTimeout: 3000,\n  },\n});\n```\n\nLearn more about [various timeouts](../test-timeouts.md).\n\n## property: TestOptions.offline = %%-context-option-offline-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n## property: TestOptions.permissions = %%-context-option-permissions-%%\n* since: v1.10\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":406,"to":453}}}}],["f4f568ee-35ec-4fbf-b497-fbe727c1271b",{"pageContent":"export default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n## property: TestOptions.permissions = %%-context-option-permissions-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    permissions: ['notifications'],\n  },\n});\n```\n\n## property: TestOptions.proxy = %%-browser-option-proxy-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":443,"to":481}}}}],["d11d4382-d101-40c7-a614-a89e8443f963",{"pageContent":"export default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n## property: TestOptions.screenshot\n* since: v1.10\n- type: <[Object]|[ScreenshotMode]<\"off\"|\"on\"|\"only-on-failure\"|\"on-first-failure\">>\n  - `mode` <[ScreenshotMode]<\"off\"|\"on\"|\"only-on-failure\"|\"on-first-failure\">> Automatic screenshot mode.\n  - `fullPage` ?<[boolean]> When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.\n  - `omitBackground` ?<[boolean]> Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":473,"to":488}}}}],["d72b502c-ec30-4792-b374-9f1f65d70bc9",{"pageContent":"Whether to automatically capture a screenshot after each test. Defaults to `'off'`.\n* `'off'`: Do not capture screenshots.\n* `'on'`: Capture screenshot after each test.\n* `'only-on-failure'`: Capture screenshot after each test failure.\n* `'on-first-failure'`: Capture screenshot after each test's first failure.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    screenshot: 'only-on-failure',\n  },\n});\n```\n\nLearn more about [automatic screenshots](../test-use-options.md#recording-options).\n\n## property: TestOptions.storageState = %%-js-python-context-option-storage-state-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    storageState: 'storage-state.json',\n  },\n});\n```\n\n**Details**\n\nWhen storage state is set up in the config, it is possible to reset storage state for a file:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":490,"to":527}}}}],["2f37d850-0dd2-4a7d-8934-17e6ca1243d0",{"pageContent":"**Details**\n\nWhen storage state is set up in the config, it is possible to reset storage state for a file:\n\n```js title=\"not-signed-in.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Reset storage state for this file to avoid being authenticated\ntest.use({ storageState: { cookies: [], origins: [] } });\n\ntest('not signed in test', async ({ page }) => {\n  // ...\n});\n```\n\n## property: TestOptions.testIdAttribute\n* since: v1.27\n\nCustom attribute to be used in [`method: Page.getByTestId`]. `data-testid` is used by default.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```\n\n## property: TestOptions.timezoneId = %%-context-option-timezoneid-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    timezoneId: 'Europe/Rome',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":525,"to":570}}}}],["539d7bd1-dba0-45c9-bc23-dd82cf0935e3",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    timezoneId: 'Europe/Rome',\n  },\n});\n```\n\n## property: TestOptions.trace\n* since: v1.10\n- type: <[Object]|[TraceMode]<\"off\"|\"on\"|\"retain-on-failure\"|\"on-first-retry\"|\"retain-on-first-failure\">>\n  - `mode` <[TraceMode]<\"off\"|\"on\"|\"retain-on-failure\"|\"on-first-retry\"|\"on-all-retries\"|\"retain-on-first-failure\">> Trace recording mode.\n  - `attachments` ?<[boolean]> Whether to include test attachments. Defaults to true. Optional.\n  - `screenshots` ?<[boolean]> Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview. Defaults to true. Optional.\n  - `snapshots` ?<[boolean]> Whether to capture DOM snapshot on every action. Defaults to true. Optional.\n  - `sources` ?<[boolean]> Whether to include source files for trace actions. Defaults to true. Optional.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":560,"to":579}}}}],["29909aeb-80bc-487b-ad61-5d82adb04b8a",{"pageContent":"Whether to record trace for each test. Defaults to `'off'`.\n* `'off'`: Do not record trace.\n* `'on'`: Record trace for each test.\n* `'on-first-retry'`: Record trace only when retrying a test for the first time.\n* `'on-all-retries'`: Record trace only when retrying a test.\n* `'retain-on-failure'`: Record trace for each test. When test run passes, remove the recorded trace.\n* `'retain-on-first-failure'`: Record trace for the first run of each test, but not for retries. When test run passes, remove the recorded trace.\n\nFor more control, pass an object that specifies `mode` and trace features to enable.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    trace: 'on-first-retry'\n  },\n});\n```\n\nLearn more about [recording trace](../test-use-options.md#recording-options).\n\n## property: TestOptions.userAgent = %%-context-option-useragent-%%\n* since: v1.10\n\n**Usage**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":581,"to":608}}}}],["7edc23ee-8e19-4dab-b55e-398dd4ac5f52",{"pageContent":"Learn more about [recording trace](../test-use-options.md#recording-options).\n\n## property: TestOptions.userAgent = %%-context-option-useragent-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n  },\n});\n```\n\n## property: TestOptions.video\n* since: v1.10\n- type: <[Object]|[VideoMode]<\"off\"|\"on\"|\"retain-on-failure\"|\"on-first-retry\">>\n  - `mode` <[VideoMode]<\"off\"|\"on\"|\"retain-on-failure\"|\"on-first-retry\">> Video recording mode.\n  - `size` ?<[Object]> Size of the recorded video. Optional.\n    - `width` <[int]>\n    - `height` <[int]>\n\nWhether to record video for each test. Defaults to `'off'`.\n* `'off'`: Do not record video.\n* `'on'`: Record video for each test.\n* `'retain-on-failure'`: Record video for each test, but remove all videos from successful test runs.\n* `'on-first-retry'`: Record video only when retrying a test for the first time.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":603,"to":632}}}}],["9e5819bb-9641-42a1-b85d-7907b862c5eb",{"pageContent":"To control video size, pass an object with `mode` and `size` properties. If video size is not specified, it will be equal to [`property: TestOptions.viewport`] scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\nLearn more about [recording video](../test-use-options.md#recording-options).\n\n## property: TestOptions.viewport = %%-context-option-viewport-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n## property: TestOptions.serviceWorkers = %%-context-option-service-worker-policy-%%\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":634,"to":666}}}}],["50c0f727-7e43-4223-ba68-ee1442d8d44f",{"pageContent":"export default defineConfig({\n  use: {\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n## property: TestOptions.serviceWorkers = %%-context-option-service-worker-policy-%%\n* since: v1.10\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    serviceWorkers: 'allow'\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testoptions.md","title":"src-test-api-class-testoptions","url":"https://playwright.dev/docs/src-test-api-class-testoptions","loc":{"lines":{"from":658,"to":678}}}}],["0f0aa578-353a-4863-9995-7580fa7c7438",{"pageContent":"# class: TestProject\n* since: v1.10\n* langs: js\n\nPlaywright Test supports running multiple test projects at the same time. This is useful for running tests in multiple configurations. For example, consider running tests against multiple browsers. This type describes format of a project in the configuration file, to access resolved configuration parameters at run time use [FullProject].\n\n`TestProject` encapsulates configuration specific to a single project. Projects are configured in [`property: TestConfig.projects`] specified in the [configuration file](../test-configuration.md). Note that all properties of [TestProject] are available in the top-level [TestConfig], in which case they are shared between all projects.\n\nHere is an example configuration that runs every test in Chromium, Firefox and WebKit, both Desktop and Mobile versions.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":1,"to":12}}}}],["2b2f55a8-9ef7-4745-a530-19da915e6d39",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Options shared for all projects.\n  timeout: 30000,\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n\n  // Options specific to each project.\n  projects: [\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n    },\n    {\n      name: 'Mobile Chrome',\n      use: devices['Pixel 5'],\n    },\n    {\n      name: 'Mobile Safari',\n      use: devices['iPhone 12'],\n    },\n  ],\n});\n```\n\n## property: TestProject.dependencies\n* since: v1.31\n- type: ?<[Array]<[string]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":11,"to":49}}}}],["f122ea89-67b4-4287-aa41-ea032e2cfff7",{"pageContent":"## property: TestProject.dependencies\n* since: v1.31\n- type: ?<[Array]<[string]>>\n\nList of projects that need to run before any test in this project runs. Dependencies can\nbe useful for configuring the global setup actions in a way that every action is\nin a form of a test. Passing `--no-deps` argument ignores the dependencies and\nbehaves as if they were not specified.\n\nUsing dependencies allows global setup to produce traces and other artifacts,\nsee the setup steps in the test report, etc.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":47,"to":62}}}}],["2670bf56-30e3-4a83-aef9-bc58b19e52a6",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":59,"to":87}}}}],["577f7698-c9ff-4906-9f66-bb9afade5734",{"pageContent":"## property: TestProject.expect\n* since: v1.10\n- type: ?<[Object]>\n  - `timeout` ?<[int]> Default timeout for async expect matchers in milliseconds, defaults to 5000ms.\n  - `toHaveScreenshot` ?<[Object]> Configuration for the [`method: PageAssertions.toHaveScreenshot#1`] method.\n    - `threshold` ?<[float]> an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n    - `maxDiffPixels` ?<[int]> an acceptable amount of pixels that could be different, unset by default.\n    - `maxDiffPixelRatio` ?<[float]> an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":89,"to":96}}}}],["27405248-5789-48c4-9def-680d352f9e4d",{"pageContent":"- `maxDiffPixelRatio` ?<[float]> an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n    - `animations` ?<[ScreenshotAnimations]<\"allow\"|\"disabled\">> See [`option: Page.screenshot.animations`] in [`method: Page.screenshot`]. Defaults to `\"disabled\"`.\n    - `caret` ?<[ScreenshotCaret]<\"hide\"|\"initial\">> See [`option: Page.screenshot.caret`] in [`method: Page.screenshot`]. Defaults to `\"hide\"`.\n    - `scale` ?<[ScreenshotScale]<\"css\"|\"device\">> See [`option: Page.screenshot.scale`] in [`method: Page.screenshot`]. Defaults to `\"css\"`.\n    - `stylePath` ?<[string]|[Array]<[string]>> See [`option: Page.screenshot.style`] in [`method: Page.screenshot`].\n    - `pathTemplate` ?<[string]> A template controlling location of the screenshots. See [`property: TestProject.snapshotPathTemplate`] for details.\n  - `toMatchAriaSnapshot` ?<[Object]> Configuration for the [`method: LocatorAssertions.toMatchAriaSnapshot#2`] method.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":96,"to":102}}}}],["b375b2f6-0e99-42be-9cd4-7100e95c1265",{"pageContent":"- `toMatchAriaSnapshot` ?<[Object]> Configuration for the [`method: LocatorAssertions.toMatchAriaSnapshot#2`] method.\n    - `pathTemplate` ?<[string]> A template controlling location of the aria snapshots. See [`property: TestProject.snapshotPathTemplate`] for details.\n  - `toMatchSnapshot` ?<[Object]> Configuration for the [`method: SnapshotAssertions.toMatchSnapshot#1`] method.\n    - `threshold` ?<[float]> an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n    - `maxDiffPixels` ?<[int]> an acceptable amount of pixels that could be different, unset by default.\n    - `maxDiffPixelRatio` ?<[float]> an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":102,"to":107}}}}],["b71697fe-188e-4c27-a568-b8d5bc2a5fdc",{"pageContent":"- `maxDiffPixelRatio` ?<[float]> an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n  - `toPass` ?<[Object]> Configuration for the [expect(value).toPass()](../test-assertions.md) method.\n    - `timeout` ?<[int]> timeout for toPass method in milliseconds.\n    - `intervals` ?<[Array]<[int]>> probe intervals for toPass method in milliseconds.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":107,"to":110}}}}],["aa98d90d-3fae-4172-a7b1-2f7751c8f86e",{"pageContent":"Configuration for the `expect` assertion library.\n\nUse [`property: TestConfig.expect`] to change this option for all projects.\n\n## property: TestProject.fullyParallel\n* since: v1.10\n- type: ?<[boolean]>\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time.\nBy default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\nYou can configure entire test project to concurrently run all tests in all files using this option.\n\n## property: TestProject.grep\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":112,"to":127}}}}],["aae2063b-fc27-4eb9-afbd-5791d0522d6c",{"pageContent":"You can configure entire test project to concurrently run all tests in all files using this option.\n\n## property: TestProject.grep\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>\n\nFilter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with \"cart\" in the title. Also available globally and in the [command line](../test-cli.md) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.\n\n`grep` option is also useful for [tagging tests](../test-annotations.md#tag-tests).\n\n## property: TestProject.grepInvert\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":123,"to":135}}}}],["ce91ab46-0210-4166-ae01-c0c218e23e7f",{"pageContent":"`grep` option is also useful for [tagging tests](../test-annotations.md#tag-tests).\n\n## property: TestProject.grepInvert\n* since: v1.10\n- type: ?<[RegExp]|[Array]<[RegExp]>>\n\nFilter to only run tests with a title **not** matching one of the patterns. This is the opposite of [`property: TestProject.grep`]. Also available globally and in the [command line](../test-cli.md) with the `--grep-invert` option.\n\n`grepInvert` option is also useful for [tagging tests](../test-annotations.md#tag-tests).\n\n## property: TestProject.ignoreSnapshots\n* since: v1.44\n- type: ?<[boolean]>\n\nWhether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.\n\n**Usage**\n\nThe following example will only perform screenshot assertions on Chromium.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":131,"to":152}}}}],["4644d3ff-bd82-47ee-929c-47fc5ccf4b25",{"pageContent":"**Usage**\n\nThe following example will only perform screenshot assertions on Chromium.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      ignoreSnapshots: true,\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      ignoreSnapshots: true,\n    },\n  ],\n});\n```\n\n## property: TestProject.metadata\n* since: v1.10\n- type: ?<[Metadata]>\n\nMetadata that will be put directly to the test report serialized as JSON.\n\n## property: TestProject.name\n* since: v1.10\n- type: ?<[string]>\n\nProject name is visible in the report and during test execution.\n\n:::warning\nPlaywright executes the configuration file multiple times. Do not dynamically produce non-stable values in your configuration.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":147,"to":188}}}}],["b0d0b7cf-7600-4ba4-b01e-d021e9adda93",{"pageContent":":::warning\nPlaywright executes the configuration file multiple times. Do not dynamically produce non-stable values in your configuration.\n:::\n\n## property: TestProject.snapshotDir\n* since: v1.10\n- type: ?<[string]>\n\nThe base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [`property: TestProject.testDir`].\n\nThe directory for each test can be accessed by [`property: TestInfo.snapshotDir`] and [`method: TestInfo.snapshotPath`].\n\nThis path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [`property: TestInfo.snapshotDir`] would resolve to `snapshots/a.spec.js-snapshots`.\n\n## property: TestProject.snapshotPathTemplate = %%-test-config-snapshot-path-template-%%\n* since: v1.28\n\n## property: TestProject.outputDir\n* since: v1.10\n- type: ?<[string]>\n\nThe output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":186,"to":207}}}}],["41565c51-ec99-4049-b026-d98a7042404e",{"pageContent":"## property: TestProject.outputDir\n* since: v1.10\n- type: ?<[string]>\n\nThe output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.\n\nThis directory is cleaned at the start. When running a test, a unique subdirectory inside the [`property: TestProject.outputDir`] is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [`property: TestInfo.outputDir`] and [`method: TestInfo.outputPath`].\n\nHere is an example that uses [`method: TestInfo.outputPath`] to create a temporary file.\n\n```js\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\nUse [`property: TestConfig.outputDir`] to change this option for all projects.\n\n## property: TestProject.repeatEach\n* since: v1.10\n- type: ?<[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":203,"to":227}}}}],["f1245136-ce56-4cae-b58c-744078014aec",{"pageContent":"Use [`property: TestConfig.outputDir`] to change this option for all projects.\n\n## property: TestProject.repeatEach\n* since: v1.10\n- type: ?<[int]>\n\nThe number of times to repeat each test, useful for debugging flaky tests.\n\nUse [`property: TestConfig.repeatEach`] to change this option for all projects.\n\n## property: TestProject.respectGitIgnore\n* since: v1.45\n- type: ?<[boolean]>\n\nWhether to skip entries from `.gitignore` when searching for test files. By default, if neither [`property: TestConfig.testDir`] nor [`property: TestProject.testDir`] are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries. This option allows to override that behavior.\n\n## property: TestProject.retries\n* since: v1.10\n- type: ?<[int]>\n\nThe maximum number of retry attempts given to failed tests. Learn more about [test retries](../test-retries.md#retries).\n\nUse [`method: Test.describe.configure`] to change the number of retries for a specific file or a group of tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":223,"to":245}}}}],["4c9063aa-892f-493e-a4b2-b5f2cdccca5f",{"pageContent":"Use [`method: Test.describe.configure`] to change the number of retries for a specific file or a group of tests.\n\nUse [`property: TestConfig.retries`] to change this option for all projects.\n\n\n## property: TestProject.teardown\n* since: v1.34\n- type: ?<[string]>\n\nName of a project that needs to run after this and all dependent projects have finished. Teardown is useful to cleanup any resources acquired by this project.\n\nPassing `--no-deps` argument ignores [`property: TestProject.teardown`] and behaves as if it was not specified.\n\n**Usage**\n\nA common pattern is a \"setup\" dependency that has a corresponding \"teardown\":\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":245,"to":263}}}}],["21a6ca14-dbad-4a7f-a6ae-3c78d0f243b5",{"pageContent":"**Usage**\n\nA common pattern is a \"setup\" dependency that has a corresponding \"teardown\":\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n      teardown: 'teardown',\n    },\n    {\n      name: 'teardown',\n      testMatch: /global.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n## property: TestProject.testDir\n* since: v1.10\n- type: ?<[string]>\n\nDirectory that will be recursively scanned for test files. Defaults to the directory of the configuration file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":258,"to":299}}}}],["8d7a5c75-14bf-43c8-a233-aaa5f5ad7cb7",{"pageContent":"## property: TestProject.testDir\n* since: v1.10\n- type: ?<[string]>\n\nDirectory that will be recursively scanned for test files. Defaults to the directory of the configuration file.\n\nEach project can use a different directory. Here is an example that runs smoke tests in three browsers and all other tests in stable Chrome browser.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Smoke Chromium',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'chromium',\n      }\n    },\n    {\n      name: 'Smoke WebKit',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'webkit',\n      }\n    },\n    {\n      name: 'Smoke Firefox',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'firefox',\n      }\n    },\n    {\n      name: 'Chrome Stable',\n      testDir: './',\n      use: {\n        browserName: 'chromium',\n        channel: 'chrome',\n      }\n    },\n  ],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":295,"to":339}}}}],["3b700f46-397b-4cf2-adb0-1772073daac7",{"pageContent":"Use [`property: TestConfig.testDir`] to change this option for all projects.\n\n## property: TestProject.testIgnore\n* since: v1.10\n- type: ?<[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nFiles matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nFor example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.\n\nUse [`property: TestConfig.testIgnore`] to change this option for all projects.\n\n## property: TestProject.testMatch\n* since: v1.10\n- type: ?<[string]|[RegExp]|[Array]<[string]|[RegExp]>>\n\nOnly the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":341,"to":357}}}}],["f3face0f-6062-442d-bd76-4790f270eb3f",{"pageContent":"Only the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nBy default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `\".test\"` or `\".spec\"` suffix, for example `login-screen.wrong-credentials.spec.ts`.\n\nUse [`property: TestConfig.testMatch`] to change this option for all projects.\n\n## property: TestProject.timeout\n* since: v1.10\n- type: ?<[int]>\n\nTimeout for each test in milliseconds. Defaults to 30 seconds.\n\nThis is a base timeout for all tests. Each test can configure its own timeout with [`method: Test.setTimeout`]. Each file or a group of tests can configure the timeout with [`method: Test.describe.configure`].\n\nUse [`property: TestConfig.timeout`] to change this option for all projects.\n\n## property: TestProject.use\n* since: v1.10\n- type: ?<[TestOptions]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":357,"to":375}}}}],["b690964c-7cc4-4ce9-99d6-7a3f5b295b10",{"pageContent":"Use [`property: TestConfig.timeout`] to change this option for all projects.\n\n## property: TestProject.use\n* since: v1.10\n- type: ?<[TestOptions]>\n\nOptions for all tests in this project, for example [`property: TestOptions.browserName`]. Learn more about [configuration](../test-configuration.md) and see [available options][TestOptions].\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Chromium',\n      use: {\n        browserName: 'chromium',\n      },\n    },\n  ],\n});\n```\n\nUse [`property: TestConfig.use`] to change this option for all projects.\n\n## property: TestProject.workers\n* since: v1.52\n- type: ?<[int]|[string]>\n\nThe maximum number of concurrent worker processes to use for parallelizing tests from this project. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":371,"to":400}}}}],["ed890694-34e0-4446-8f56-ca8578801d37",{"pageContent":"The maximum number of concurrent worker processes to use for parallelizing tests from this project. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`\n\nThis could be useful, for example, when all tests from a project share a single resource like a test account, and therefore cannot be executed in parallel. Limiting workers to one for such a project will prevent simultaneous use of the shared resource.\n\nNote that the global [`property: TestConfig.workers`] limit applies to the total number of worker processes. However, Playwright will limit the number of workers used for this project by the value of [`property: TestProject.workers`].\n\nBy default, there is no limit per project. See [`property: TestConfig.workers`] for the default of the total worker limit.\n\n**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 10,  // total workers limit","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":400,"to":414}}}}],["cb535148-7816-4ac9-98aa-42c23f34ca93",{"pageContent":"**Usage**\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 10,  // total workers limit\n\n  projects: [\n    {\n      name: 'runs in parallel',\n    },\n    {\n      name: 'one at a time',\n      workers: 1,  // workers limit for this project\n    },\n  ],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-testproject.md","title":"src-test-api-class-testproject","url":"https://playwright.dev/docs/src-test-api-class-testproject","loc":{"lines":{"from":408,"to":426}}}}],["ba67f372-5127-4cdf-aab7-0c268cc4d9dc",{"pageContent":"# class: TestStepInfo\n* since: v1.51\n* langs: js\n\n`TestStepInfo` contains information about currently running test step. It is passed as an argument to the step function. `TestStepInfo` provides utilities to control test step execution.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page, browserName }) => {\n  await test.step('check some behavior', async step => {\n    step.skip(browserName === 'webkit', 'The feature is not available in WebKit');\n    // ... rest of the step code\n  });\n});\n```\n\n## async method: TestStepInfo.attach\n* since: v1.51\n\nAttach a value or a file from disk to the current test step. Some reporters show test step attachments. Either [`option: path`] or [`option: body`] must be specified, but not both. Calling this method will attribute the attachment to the step, as opposed to [`method: TestInfo.attach`] which stores all attachments at the test level.\n\nFor example, you can attach a screenshot to the test step:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-teststepinfo.md","title":"src-test-api-class-teststepinfo","url":"https://playwright.dev/docs/src-test-api-class-teststepinfo","loc":{"lines":{"from":1,"to":23}}}}],["4e914fe4-4e24-476d-9066-dfa3d35df8f6",{"pageContent":"For example, you can attach a screenshot to the test step:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await test.step('check page rendering', async step => {\n    const screenshot = await page.screenshot();\n    await step.attach('screenshot', { body: screenshot, contentType: 'image/png' });\n  });\n});\n```\n\nOr you can attach files returned by your APIs:\n\n```js\nimport { test, expect } from '@playwright/test';\nimport { download } from './my-custom-helpers';\n\ntest('basic test', async ({}) => {\n  await test.step('check download behavior', async step => {\n    const tmpPath = await download('a');\n    await step.attach('downloaded', { path: tmpPath });\n  });\n});\n```\n\n:::note\n[`method: TestStepInfo.attach`] automatically takes care of copying attached files to a\nlocation that is accessible to reporters. You can safely remove the attachment\nafter awaiting the attach call.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-teststepinfo.md","title":"src-test-api-class-teststepinfo","url":"https://playwright.dev/docs/src-test-api-class-teststepinfo","loc":{"lines":{"from":23,"to":55}}}}],["f5f04734-f0c7-4008-a2a1-b0370a806ca8",{"pageContent":"### param: TestStepInfo.attach.name\n* since: v1.51\n- `name` <[string]>\n\nAttachment name. The name will also be sanitized and used as the prefix of file name\nwhen saving to disk.\n\n### option: TestStepInfo.attach.body\n* since: v1.51\n- `body` <[string]|[Buffer]>\n\nAttachment body. Mutually exclusive with [`option: path`].\n\n### option: TestStepInfo.attach.contentType\n* since: v1.51\n- `contentType` <[string]>\n\nContent type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`. If omitted, content type is inferred based on the [`option: path`], or defaults to `text/plain` for [string] attachments and `application/octet-stream` for [Buffer] attachments.\n\n### option: TestStepInfo.attach.path\n* since: v1.51\n- `path` <[string]>\n\nPath on the filesystem to the attached file. Mutually exclusive with [`option: body`].\n\n## method: TestStepInfo.skip#1\n* since: v1.51","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-teststepinfo.md","title":"src-test-api-class-teststepinfo","url":"https://playwright.dev/docs/src-test-api-class-teststepinfo","loc":{"lines":{"from":57,"to":83}}}}],["4e553232-c6ac-42c6-8dbb-59cd787a8646",{"pageContent":"Path on the filesystem to the attached file. Mutually exclusive with [`option: body`].\n\n## method: TestStepInfo.skip#1\n* since: v1.51\n\nAbort the currently running step and mark it as skipped. Useful for steps that are currently failing and planned for a near-term fix.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }) => {\n  await test.step('check expectations', async step => {\n    step.skip();\n    // step body below will not run\n    // ...\n  });\n});\n```\n\n## method: TestStepInfo.skip#2\n* since: v1.51\n\nConditionally abort the currently running step and mark it as skipped with an optional description. Useful for steps that should not be executed in some cases.\n\n**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-teststepinfo.md","title":"src-test-api-class-teststepinfo","url":"https://playwright.dev/docs/src-test-api-class-teststepinfo","loc":{"lines":{"from":80,"to":109}}}}],["d72e44c1-82fc-4c0d-9758-0ec213982762",{"pageContent":"**Usage**\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page, isMobile }) => {\n  await test.step('check desktop expectations', async step => {\n    step.skip(isMobile, 'not present in the mobile layout');\n    // step body below will not run\n    // ...\n  });\n});\n```\n\n### param: TestStepInfo.skip#2.condition\n* since: v1.51\n- `condition` <[boolean]>\n\nA skip condition. Test step is skipped when the condition is `true`.\n\n### param: TestStepInfo.skip#2.description\n* since: v1.51\n- `description` ?<[string]>\n\nOptional description that will be reflected in a test report.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-teststepinfo.md","title":"src-test-api-class-teststepinfo","url":"https://playwright.dev/docs/src-test-api-class-teststepinfo","loc":{"lines":{"from":106,"to":130}}}}],["8513d751-23cd-41c0-86a6-8ad231911d60",{"pageContent":"# class: WorkerInfo\n* since: v1.10\n* langs: js\n\n`WorkerInfo` contains information about the worker that is running tests and is available to worker-scoped fixtures. `WorkerInfo` is a subset of [TestInfo] that is available in many other places.\n\n## property: WorkerInfo.config\n* since: v1.10\n- type: <[FullConfig]>\n\nProcessed configuration from the [configuration file](../test-configuration.md).\n\n\n## property: WorkerInfo.parallelIndex\n* since: v1.10\n- type: <[int]>\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.\n\nAlso available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.\n\n\n## property: WorkerInfo.project\n* since: v1.10\n- type: <[FullProject]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-workerinfo.md","title":"src-test-api-class-workerinfo","url":"https://playwright.dev/docs/src-test-api-class-workerinfo","loc":{"lines":{"from":1,"to":25}}}}],["782b2e5b-5541-4c9a-99f8-ff3dda899574",{"pageContent":"## property: WorkerInfo.project\n* since: v1.10\n- type: <[FullProject]>\n\nProcessed project configuration from the [configuration file](../test-configuration.md).\n\n\n## property: WorkerInfo.workerIndex\n* since: v1.10\n- type: <[int]>\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-api-class-workerinfo.md","title":"src-test-api-class-workerinfo","url":"https://playwright.dev/docs/src-test-api-class-workerinfo","loc":{"lines":{"from":23,"to":36}}}}],["b2f80995-52f0-48d1-9d24-8ce5cc467b45",{"pageContent":"---\nid: test-assertions\ntitle: \"Assertions\"\n---\n\n## List of assertions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":1,"to":6}}}}],["bdf80411-3307-4c66-bfe2-128dfe8e5136",{"pageContent":"| Assertion | Description |\n| :- | :- |\n| [`method: LocatorAssertions.toBeAttached`] | Element is attached |\n| [`method: LocatorAssertions.toBeChecked`] | Checkbox is checked |\n| [`method: LocatorAssertions.toBeDisabled`] | Element is disabled |\n| [`method: LocatorAssertions.toBeEditable`] | Element is editable |\n| [`method: LocatorAssertions.toBeEmpty`] | Container is empty |\n| [`method: LocatorAssertions.toBeEnabled`] | Element is enabled |\n| [`method: LocatorAssertions.toBeFocused`] | Element is focused |\n| [`method: LocatorAssertions.toBeHidden`] | Element is not visible |\n| [`method: LocatorAssertions.toBeInViewport`] | Element intersects viewport |\n| [`method: LocatorAssertions.toBeVisible`] | Element is visible |\n| [`method: LocatorAssertions.toContainClass`] | Element has specified CSS classes |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":8,"to":21}}}}],["52601bb1-12bb-4af4-b8ac-5876a96af6ab",{"pageContent":"| [`method: LocatorAssertions.toContainClass`] | Element has specified CSS classes |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |\n| [`method: LocatorAssertions.toHaveAccessibleDescription`] | Element has a matching [accessible description](https://w3c.github.io/accname/#dfn-accessible-description) |\n| [`method: LocatorAssertions.toHaveAccessibleName`] | Element has a matching [accessible name](https://w3c.github.io/accname/#dfn-accessible-name) |\n| [`method: LocatorAssertions.toHaveAttribute`] | Element has a DOM attribute |\n| [`method: LocatorAssertions.toHaveClass`] | Element has a class property |\n| [`method: LocatorAssertions.toHaveCount`] | List has exact number of children |\n| [`method: LocatorAssertions.toHaveCSS`] | Element has CSS property |\n| [`method: LocatorAssertions.toHaveId`] | Element has an ID |\n| [`method: LocatorAssertions.toHaveJSProperty`] | Element has a JavaScript property |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":20,"to":29}}}}],["66a6d2db-04ee-4f4f-bf00-8c4e314cc496",{"pageContent":"| [`method: LocatorAssertions.toHaveId`] | Element has an ID |\n| [`method: LocatorAssertions.toHaveJSProperty`] | Element has a JavaScript property |\n| [`method: LocatorAssertions.toHaveRole`] | Element has a specific [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles) |\n| [`method: LocatorAssertions.toHaveText`] | Element matches text |\n| [`method: LocatorAssertions.toHaveValue`] | Input has a value |\n| [`method: LocatorAssertions.toHaveValues`] | Select has options selected |\n| [`method: LocatorAssertions.toMatchAriaSnapshot`] | Element matches provided Aria snapshot |\n| [`method: PageAssertions.toHaveTitle`] | Page has a title |\n| [`method: PageAssertions.toHaveURL`] | Page has a URL |\n| [`method: APIResponseAssertions.toBeOK`] | Response has an OK status |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":28,"to":37}}}}],["68e45bae-4259-4a7e-9c97-09df2690b414",{"pageContent":"## Custom Expect Message\n* langs: python\n\nYou can specify a custom expect message as a second argument to the `expect` function, for example:\n\n```python\nexpect(page.get_by_text(\"Name\"), \"should be logged in\").to_be_visible()\n```\n\nWhen expect fails, the error would look like this:\n\n```bash\n    def test_foobar(page: Page) -> None:\n>       expect(page.get_by_text(\"Name\"), \"should be logged in\").to_be_visible()\nE       AssertionError: should be logged in\nE       Actual value: None\nE       Call log:\nE       LocatorAssertions.to_be_visible with timeout 5000ms\nE       waiting for get_by_text(\"Name\")\nE       waiting for get_by_text(\"Name\")\n\ntests/test_foobar.py:22: AssertionError\n```\n\n## Setting a custom timeout\n* langs: python, csharp\n\nYou can specify a custom timeout for assertions either globally or per assertion. The default timeout is 5 seconds.\n\n### Global timeout\n* langs: python\n\n```python title=\"conftest.py\"\nfrom playwright.sync_api import expect","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":39,"to":72}}}}],["f73779b4-69ce-4265-9fe8-ebceef5dad00",{"pageContent":"### Global timeout\n* langs: python\n\n```python title=\"conftest.py\"\nfrom playwright.sync_api import expect\n\nexpect.set_options(timeout=10_000)\n```\n\n### Global timeout\n* langs: csharp\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [OneTimeSetUp]\n    public void GlobalSetup()\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":68,"to":119}}}}],["b0b55a96-5a13-4cba-86da-54277580c841",{"pageContent":"```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class UnitTest1 : PageTest\n{\n    [ClassInitialize]\n    public static void GlobalSetup(TestContext context)\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    UnitTest1()\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n</TabItem>\n</Tabs>\n\n### Per assertion timeout\n\n```python title=\"test_foobar.py\"\nfrom playwright.sync_api import expect\n\ndef test_foobar(page: Page) -> None:\n    expect(page.get_by_text(\"Name\")).to_be_visible(timeout=10_000)\n```\n\n```csharp title=\"UnitTest1.cs\"\nawait Expect(Page.GetByText(\"Name\")).ToBeVisibleAsync(new() { Timeout = 10_000 });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-csharp-java-python.md","title":"src-test-assertions-csharp-java-python","url":"https://playwright.dev/docs/src-test-assertions-csharp-java-python","loc":{"lines":{"from":114,"to":165}}}}],["62bbbd64-5c63-4732-bb7d-0b4e0cc8ff32",{"pageContent":"---\nid: test-assertions\ntitle: \"Assertions\"\n---\n\n## Introduction\n\nPlaywright includes test assertions in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation. There are many [generic matchers](./api/class-genericassertions.md) like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n\n```js\nexpect(success).toBeTruthy();\n```\n\nPlaywright also includes web-specific [async matchers](./api/class-locatorassertions.md) that will wait until\nthe expected condition is met. Consider the following example:\n\n```js\nawait expect(page.getByTestId('status')).toHaveText('Submitted');\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":1,"to":19}}}}],["a5d285c5-99fd-484c-8ede-3bf91ac7afcc",{"pageContent":"```js\nawait expect(page.getByTestId('status')).toHaveText('Submitted');\n```\n\nPlaywright will be re-testing the element with the test id of `status` until the fetched element has the `\"Submitted\"` text. It will re-fetch the element and check it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [`property: TestConfig.expect`] value in the test config.\n\nBy default, the timeout for assertions is set to 5 seconds. Learn more about [various timeouts](./test-timeouts.md).\n\n## Auto-retrying assertions\n\nThe following assertions will retry until the assertion passes, or the assertion timeout is reached.\nNote that retrying assertions are async, so you must `await` them.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":17,"to":28}}}}],["3f9af0e7-1a66-441f-ad18-0f5fc76ec471",{"pageContent":"| Assertion | Description |\n| :- | :- |\n| [await expect(locator).toBeAttached()](./api/class-locatorassertions.md#locator-assertions-to-be-attached) | Element is attached |\n| [await expect(locator).toBeChecked()](./api/class-locatorassertions.md#locator-assertions-to-be-checked) | Checkbox is checked |\n| [await expect(locator).toBeDisabled()](./api/class-locatorassertions.md#locator-assertions-to-be-disabled) | Element is disabled |\n| [await expect(locator).toBeEditable()](./api/class-locatorassertions.md#locator-assertions-to-be-editable) | Element is editable |\n| [await expect(locator).toBeEmpty()](./api/class-locatorassertions.md#locator-assertions-to-be-empty) | Container is empty |\n| [await expect(locator).toBeEnabled()](./api/class-locatorassertions.md#locator-assertions-to-be-enabled) | Element is enabled |\n| [await expect(locator).toBeFocused()](./api/class-locatorassertions.md#locator-assertions-to-be-focused) | Element is focused |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":30,"to":38}}}}],["e770e1eb-8de8-4239-962a-4ab7fc049927",{"pageContent":"| [await expect(locator).toBeFocused()](./api/class-locatorassertions.md#locator-assertions-to-be-focused) | Element is focused |\n| [await expect(locator).toBeHidden()](./api/class-locatorassertions.md#locator-assertions-to-be-hidden) | Element is not visible |\n| [await expect(locator).toBeInViewport()](./api/class-locatorassertions.md#locator-assertions-to-be-in-viewport) | Element intersects viewport |\n| [await expect(locator).toBeVisible()](./api/class-locatorassertions.md#locator-assertions-to-be-visible) | Element is visible |\n| [await expect(locator).toContainText()](./api/class-locatorassertions.md#locator-assertions-to-contain-text) | Element contains text |\n| [await expect(locator).toContainClass()](./api/class-locatorassertions.md#locator-assertions-to-contain-class) | Element has specified CSS classes |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":38,"to":43}}}}],["532a8ebf-2346-4597-8f23-cc5cfc1987dd",{"pageContent":"| [await expect(locator).toContainClass()](./api/class-locatorassertions.md#locator-assertions-to-contain-class) | Element has specified CSS classes |\n| [await expect(locator).toHaveAccessibleDescription()](./api/class-locatorassertions.md#locator-assertions-to-have-accessible-description) | Element has a matching [accessible description](https://w3c.github.io/accname/#dfn-accessible-description) |\n| [await expect(locator).toHaveAccessibleName()](./api/class-locatorassertions.md#locator-assertions-to-have-accessible-name) | Element has a matching [accessible name](https://w3c.github.io/accname/#dfn-accessible-name) |\n| [await expect(locator).toHaveAttribute()](./api/class-locatorassertions.md#locator-assertions-to-have-attribute) | Element has a DOM attribute |\n| [await expect(locator).toHaveClass()](./api/class-locatorassertions.md#locator-assertions-to-have-class) | Element has specified CSS class property |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":43,"to":47}}}}],["7524a8b9-691e-4ef2-b92c-70b28a291b1a",{"pageContent":"| [await expect(locator).toHaveClass()](./api/class-locatorassertions.md#locator-assertions-to-have-class) | Element has specified CSS class property |\n| [await expect(locator).toHaveCount()](./api/class-locatorassertions.md#locator-assertions-to-have-count) | List has exact number of children |\n| [await expect(locator).toHaveCSS()](./api/class-locatorassertions.md#locator-assertions-to-have-css) | Element has CSS property |\n| [await expect(locator).toHaveId()](./api/class-locatorassertions.md#locator-assertions-to-have-id) | Element has an ID |\n| [await expect(locator).toHaveJSProperty()](./api/class-locatorassertions.md#locator-assertions-to-have-js-property) | Element has a JavaScript property |\n| [await expect(locator).toHaveRole()](./api/class-locatorassertions.md#locator-assertions-to-have-role) | Element has a specific [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles) |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":47,"to":52}}}}],["761f6f77-1470-4796-90df-304da8f262a2",{"pageContent":"| [await expect(locator).toHaveRole()](./api/class-locatorassertions.md#locator-assertions-to-have-role) | Element has a specific [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles) |\n| [await expect(locator).toHaveScreenshot()](./api/class-locatorassertions.md#locator-assertions-to-have-screenshot-1) | Element has a screenshot |\n| [await expect(locator).toHaveText()](./api/class-locatorassertions.md#locator-assertions-to-have-text) | Element matches text |\n| [await expect(locator).toHaveValue()](./api/class-locatorassertions.md#locator-assertions-to-have-value) | Input has a value |\n| [await expect(locator).toHaveValues()](./api/class-locatorassertions.md#locator-assertions-to-have-values) | Select has options selected |\n| [await expect(locator).toMatchAriaSnapshot()](./api/class-locatorassertions.md#locator-assertions-to-match-aria-snapshot) | Element matches the Aria snapshot |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":52,"to":57}}}}],["5a4bb4cc-1c2e-42e5-88f5-503bfcdce4d4",{"pageContent":"| [await expect(locator).toMatchAriaSnapshot()](./api/class-locatorassertions.md#locator-assertions-to-match-aria-snapshot) | Element matches the Aria snapshot |\n| [await expect(page).toHaveScreenshot()](./api/class-pageassertions.md#page-assertions-to-have-screenshot-1) | Page has a screenshot |\n| [await expect(page).toHaveTitle()](./api/class-pageassertions.md#page-assertions-to-have-title) | Page has a title |\n| [await expect(page).toHaveURL()](./api/class-pageassertions.md#page-assertions-to-have-url) | Page has a URL |\n| [await expect(response).toBeOK()](./api/class-apiresponseassertions.md#api-response-assertions-to-be-ok) | Response has an OK status |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":57,"to":61}}}}],["6601c430-c946-4ff0-8710-2053df0730ef",{"pageContent":"## Non-retrying assertions\n\nThese assertions allow to test any conditions, but do not auto-retry. Most of the time, web pages show information asynchronously, and using non-retrying assertions can lead to a flaky test.\n\nPrefer [auto-retrying](#auto-retrying-assertions) assertions whenever possible. For more complex assertions that need to be retried, use [`expect.poll`](#expectpoll) or [`expect.toPass`](#expecttopass).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":63,"to":67}}}}],["2f910343-7449-4588-a199-adf4d2acb325",{"pageContent":"| Assertion | Description |\n| :- | :- |\n| [`method: GenericAssertions.toBe`] | Value is the same |\n| [`method: GenericAssertions.toBeCloseTo`] | Number is approximately equal |\n| [`method: GenericAssertions.toBeDefined`] | Value is not `undefined` |\n| [`method: GenericAssertions.toBeFalsy`] | Value is falsy, e.g. `false`, `0`, `null`, etc. |\n| [`method: GenericAssertions.toBeGreaterThan`] | Number is more than |\n| [`method: GenericAssertions.toBeGreaterThanOrEqual`] | Number is more than or equal |\n| [`method: GenericAssertions.toBeInstanceOf`] | Object is an instance of a class |\n| [`method: GenericAssertions.toBeLessThan`] | Number is less than |\n| [`method: GenericAssertions.toBeLessThanOrEqual`] | Number is less than or equal |\n| [`method: GenericAssertions.toBeNaN`] | Value is `NaN` |\n| [`method: GenericAssertions.toBeNull`] | Value is `null` |\n| [`method: GenericAssertions.toBeTruthy`] | Value is truthy, i.e. not `false`, `0`, `null`, etc. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":69,"to":82}}}}],["3e4f1bc0-a89b-4b28-adba-ed25d21ad357",{"pageContent":"| [`method: GenericAssertions.toBeNull`] | Value is `null` |\n| [`method: GenericAssertions.toBeTruthy`] | Value is truthy, i.e. not `false`, `0`, `null`, etc. |\n| [`method: GenericAssertions.toBeUndefined`] | Value is `undefined` |\n| [`method: GenericAssertions.toContain#1`] | String contains a substring |\n| [`method: GenericAssertions.toContain#2`] | Array or set contains an element |\n| [`method: GenericAssertions.toContainEqual`] | Array or set contains a similar element |\n| [`method: GenericAssertions.toEqual`] | Value is similar - deep equality and pattern matching |\n| [`method: GenericAssertions.toHaveLength`] | Array or string has length |\n| [`method: GenericAssertions.toHaveProperty`] | Object has a property |\n| [`method: GenericAssertions.toMatch`] | String matches a regular expression |\n| [`method: GenericAssertions.toMatchObject`] | Object contains specified properties |\n| [`method: GenericAssertions.toStrictEqual`] | Value is similar, including property types |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":81,"to":92}}}}],["1198b002-facf-4158-aa5a-bed14bb60996",{"pageContent":"| [`method: GenericAssertions.toMatchObject`] | Object contains specified properties |\n| [`method: GenericAssertions.toStrictEqual`] | Value is similar, including property types |\n| [`method: GenericAssertions.toThrow`] | Function throws an error |\n| [`method: GenericAssertions.any`] | Matches any instance of a class/primitive |\n| [`method: GenericAssertions.anything`] | Matches anything |\n| [`method: GenericAssertions.arrayContaining`] | Array contains specific elements |\n| [`method: GenericAssertions.closeTo`] | Number is approximately equal |\n| [`method: GenericAssertions.objectContaining`] | Object contains specific properties |\n| [`method: GenericAssertions.stringContaining`] | String contains a substring |\n| [`method: GenericAssertions.stringMatching`] | String matches a regular expression |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":91,"to":100}}}}],["6cbb2e7e-fe7e-44f7-863d-7c2236d15fcd",{"pageContent":"## Negating matchers\n\nIn general, we can expect the opposite to be true by adding a `.not` to the front\nof the matchers:\n\n```js\nexpect(value).not.toEqual(0);\nawait expect(locator).not.toContainText('some text');\n```\n\n## Soft assertions\n\nBy default, failed assertion will terminate test execution. Playwright also\nsupports *soft assertions*: failed soft assertions **do not** terminate test execution,\nbut mark the test as failed.\n\n```js\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\nawait expect.soft(page.getByRole('heading', { name: 'Make another order' })).toBeVisible();\n```\n\nAt any point during test execution, you can check whether there were any\nsoft assertion failures:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":102,"to":129}}}}],["74f1ffd3-ca87-46e1-9e43-f7c8fbc3473c",{"pageContent":"At any point during test execution, you can check whether there were any\nsoft assertion failures:\n\n```js\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// Avoid running further if there were soft assertion failures.\nexpect(test.info().errors).toHaveLength(0);\n```\n\nNote that soft assertions only work with Playwright test runner.\n\n## Custom expect message\n\nYou can specify a custom expect message as a second argument to the `expect` function, for example:\n\n```js\nawait expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n```\n\nThis message will be shown in reporters, both for passing and failing expects, providing more context about the assertion.\n\nWhen expect passes, you might see a successful step like this:\n\n```txt\n✅ should be logged in    @example.spec.ts:18\n```\n\nWhen expect fails, the error would look like this:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":128,"to":158}}}}],["07419a79-0f1a-4554-8d35-d797d82c55d7",{"pageContent":"When expect passes, you might see a successful step like this:\n\n```txt\n✅ should be logged in    @example.spec.ts:18\n```\n\nWhen expect fails, the error would look like this:\n\n```bash\n    Error: should be logged in\n\n    Call log:\n      - expect.toBeVisible with timeout 5000ms\n      - waiting for \"getByText('Name')\"\n\n\n      2 |\n      3 | test('example test', async({ page }) => {\n    > 4 |   await expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n        |                                                                  ^\n      5 | });\n      6 |\n```\n\nSoft assertions also support custom message:\n\n```js\nexpect.soft(value, 'my soft assertion').toBe(56);\n```\n\n## expect.configure\n\nYou can create your own pre-configured `expect` instance to have its own\ndefaults such as `timeout` and `soft`.\n\n```js\nconst slowExpect = expect.configure({ timeout: 10000 });\nawait slowExpect(locator).toHaveText('Submit');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":152,"to":189}}}}],["75b49b19-354a-4b93-8fe9-fe9eb6a9a5bd",{"pageContent":"```js\nconst slowExpect = expect.configure({ timeout: 10000 });\nawait slowExpect(locator).toHaveText('Submit');\n\n// Always do soft assertions.\nconst softExpect = expect.configure({ soft: true });\nawait softExpect(locator).toHaveText('Submit');\n```\n\n## expect.poll\n\nYou can convert any synchronous `expect` to an asynchronous polling one using `expect.poll`.\n\nThe following method will poll given function until it returns HTTP status 200:\n\n```js\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Custom expect message for reporting, optional.\n  message: 'make sure API eventually succeeds',\n  // Poll for 10 seconds; defaults to 5 seconds. Pass 0 to disable timeout.\n  timeout: 10000,\n}).toBe(200);\n```\n\nYou can also specify custom polling intervals:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":187,"to":214}}}}],["9686d3f7-dc9e-4948-9517-e1d539f00d47",{"pageContent":"You can also specify custom polling intervals:\n\n```js\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n}).toBe(200);\n```\n\nYou can combine `expect.configure({ soft: true })` with expect.poll to perform soft assertions in polling logic.\n\n```js\nconst softExpect = expect.configure({ soft: true });\nawait softExpect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {}).toBe(200);\n```\nThis allows the test to continue even if the assertion inside poll fails.\n\n## expect.toPass\n\nYou can retry blocks of code until they are passing successfully.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":214,"to":241}}}}],["652f20c5-be90-4ffa-8feb-e947e52172d0",{"pageContent":"## expect.toPass\n\nYou can retry blocks of code until they are passing successfully.\n\n```js\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass();\n```\n\nYou can also specify custom timeout and retry intervals:\n\n```js\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass({\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n});\n```\n\nNote that by default `toPass` has timeout 0 and does not respect custom [expect timeout](./test-timeouts.md#expect-timeout).\n\n## Add custom matchers using expect.extend\n\nYou can extend Playwright assertions by providing custom matchers. These matchers will be available on the `expect` object.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":239,"to":268}}}}],["3e740df8-8ddb-40c0-a9f0-1f49e7379a62",{"pageContent":"## Add custom matchers using expect.extend\n\nYou can extend Playwright assertions by providing custom matchers. These matchers will be available on the `expect` object.\n\nIn this example we add a custom `toHaveAmount` function. Custom matcher should return a `pass` flag indicating whether the assertion passed, and a `message` callback that's used when the assertion fails.\n\n```js title=\"fixtures.ts\"\nimport { expect as baseExpect } from '@playwright/test';\nimport type { Locator } from '@playwright/test';\n\nexport { test } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":266,"to":276}}}}],["501b867e-c0fa-49c3-b115-ec5eb7cd4599",{"pageContent":"```js title=\"fixtures.ts\"\nimport { expect as baseExpect } from '@playwright/test';\nimport type { Locator } from '@playwright/test';\n\nexport { test } from '@playwright/test';\n\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    const assertionName = 'toHaveAmount';\n    let pass: boolean;\n    let matcherResult: any;\n    try {\n      const expectation = this.isNot ? baseExpect(locator).not : baseExpect(locator);\n      await expectation.toHaveAttribute('data-amount', String(expected), options);\n      pass = true;\n    } catch (e: any) {\n      matcherResult = e.matcherResult;\n      pass = false;\n    }\n\n    if (this.isNot) {\n      pass =!pass;\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":272,"to":294}}}}],["5e2eaf7e-6bb2-4b0b-92f0-a3235e971c24",{"pageContent":"if (this.isNot) {\n      pass =!pass;\n    }\n\n    const message = pass\n      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')\n      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: ${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');\n\n    return {\n      message,\n      pass,\n      name: assertionName,\n      expected,\n      actual: matcherResult?.actual,\n    };\n  },\n});\n```\n\nNow we can use `toHaveAmount` in the test.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from './fixtures';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":292,"to":322}}}}],["99571624-90ad-44b2-a48e-e3179542740c",{"pageContent":"Now we can use `toHaveAmount` in the test.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from './fixtures';\n\ntest('amount', async () => {\n  await expect(page.locator('.cart')).toHaveAmount(4);\n});\n```\n\n### Compatibility with expect library\n\n:::note\nDo not confuse Playwright's `expect` with the [`expect` library](https://jestjs.io/docs/expect). The latter is not fully integrated with Playwright test runner, so make sure to use Playwright's own `expect`.\n:::\n\n### Combine custom matchers from multiple modules\n\nYou can combine custom matchers from multiple files or modules.\n\n```js title=\"fixtures.ts\"\nimport { mergeTests, mergeExpects } from '@playwright/test';\nimport { test as dbTest, expect as dbExpect } from 'database-test-utils';\nimport { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';\n\nexport const expect = mergeExpects(dbExpect, a11yExpect);\nexport const test = mergeTests(dbTest, a11yTest);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":319,"to":346}}}}],["e570641e-c3e8-4356-adc6-1be572882b7d",{"pageContent":"export const expect = mergeExpects(dbExpect, a11yExpect);\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n```js title=\"test.spec.ts\"\nimport { test, expect } from './fixtures';\n\ntest('passes', async ({ database }) => {\n  await expect(database).toHaveDatabaseUser('admin');\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-assertions-js.md","title":"src-test-assertions-js","url":"https://playwright.dev/docs/src-test-assertions-js","loc":{"lines":{"from":344,"to":354}}}}],["9081f5f0-9e15-49b4-b1ad-1ef05bf3ba2a",{"pageContent":"---\nid: test-cli\ntitle: \"Command line\"\n---\n\n## Introduction\n\nHere are the most common options available in the command line.\n\n- Run all the tests\n  ```bash\n  npx playwright test\n  ```\n\n- Run a single test file\n  ```bash\n  npx playwright test tests/todo-page.spec.ts\n  ```\n\n- Run a set of test files\n  ```bash\n  npx playwright test tests/todo-page/ tests/landing-page/\n  ```\n\n- Run files that have `my-spec` or `my-spec-2` in the file name\n  ```bash\n  npx playwright test my-spec my-spec-2\n  ```\n\n- Run tests that are in line 42 in my-spec.ts\n  ```bash\n  npx playwright test my-spec.ts:42\n  ```\n\n- Run the test with the title\n  ```bash\n  npx playwright test -g \"add a todo item\"\n  ```\n\n- Run tests in headed browsers\n  ```bash\n  npx playwright test --headed\n  ```\n\n- Run all the tests against a specific project\n  ```bash\n  npx playwright test --project=chromium\n  ```\n\n- Disable [parallelization](./test-parallel.md)\n  ```bash\n  npx playwright test --workers=1\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":1,"to":53}}}}],["4135a2ff-369f-4291-9c83-c14d3910f8d6",{"pageContent":"- Disable [parallelization](./test-parallel.md)\n  ```bash\n  npx playwright test --workers=1\n  ```\n\n- Choose a [reporter](./test-reporters.md)\n  ```bash\n  npx playwright test --reporter=dot\n  ```\n\n- Run in debug mode with [Playwright Inspector](./debug.md)\n  ```bash\n  npx playwright test --debug\n  ```\n\n- Run tests in interactive UI mode, with a built-in watch mode (Preview)\n  ```bash\n  npx playwright test --ui\n  ```\n\n- Ask for help\n  ```bash\n  npx playwright test --help\n  ```\n\n## Reference\n\nComplete set of Playwright Test options is available in the [configuration file](./test-use-options.md). Following options can be passed to a command line and take priority over the configuration file:\n\n<!-- // Note: packages/playwright/src/program.ts is the source of truth. -->","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":50,"to":79}}}}],["bfb18c7d-7b79-4bbe-ba6f-cf6a0f297934",{"pageContent":"| Option | Description |\n| :- | :- |\n| Non-option arguments | Each argument is treated as a regular expression matched against the full test file path. Only tests from files matching the pattern will be executed. Special symbols like `$` or `*` should be escaped with `\\`. In many shells/terminals you may need to quote the arguments. |\n| `-c <file>` or `--config <file>` | Configuration file, or a test directory with optional \"playwright.config.&#123;m,c&#125;?&#123;js,ts&#125;\". Defaults to `playwright.config.ts` or `playwright.config.js` in the current directory. |\n| `--debug` | Run tests with Playwright Inspector. Shortcut for `PWDEBUG=1` environment variable and `--timeout=0 --max-failures=1 --headed --workers=1` options. |\n| `--fail-on-flaky-tests` | Fail if any test is flagged as flaky (default: false). |\n| `--forbid-only` | Fail if `test.only` is called (default: false). Useful on CI. |\n| `--fully-parallel` | Run all tests in parallel (default: false). |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":81,"to":88}}}}],["e17d7d83-712c-452a-9450-99d48599774b",{"pageContent":"| `--forbid-only` | Fail if `test.only` is called (default: false). Useful on CI. |\n| `--fully-parallel` | Run all tests in parallel (default: false). |\n| `--global-timeout <timeout>` | Maximum time this test suite can run in milliseconds (default: unlimited). |\n| `-g <grep>` or `--grep <grep>` | Only run tests matching this regular expression (default: \".*\"). |\n| `-gv <grep>` or `--grep-invert <grep>` | Only run tests that do not match this regular expression. |\n| `--headed` | Run tests in headed browsers (default: headless). |\n| `--ignore-snapshots` | Ignore screenshot and snapshot expectations. |\n| `--last-failed` | Only re-run the failures. |\n| `--list` | Collect all the tests and report them, but do not run. |\n| `--max-failures <N>` or `-x` | Stop after the first `N` failures. Passing `-x` stops after the first failure. |\n| `--no-deps` | Do not run project dependencies. |\n| `--output <dir>` | Folder for output artifacts (default: \"test-results\"). |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":87,"to":98}}}}],["187021c9-8b27-4a22-991a-2cbaa6fc194d",{"pageContent":"| `--no-deps` | Do not run project dependencies. |\n| `--output <dir>` | Folder for output artifacts (default: \"test-results\"). |\n| `--only-changed [ref]` | Only run test files that have been changed between 'HEAD' and 'ref'. Defaults to running all uncommitted changes. Only supports Git. |\n| `--pass-with-no-tests` | Makes test run succeed even if no tests were found. |\n| `--project <project-name...>` | Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects). |\n| `--quiet` | Suppress stdio. |\n| `--repeat-each <N>` | Run each test `N` times (default: 1). |\n| `--reporter <reporter>` | Reporter to use, comma-separated, can be \"dot\", \"line\", \"list\", or others (default: \"list\"). You can also pass a path to a custom reporter file. |\n| `--retries <retries>` | Maximum retry count for flaky tests, zero for no retries (default: no retries). |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":97,"to":105}}}}],["7c94d0d8-65cf-4851-a29a-f861920c413c",{"pageContent":"| `--retries <retries>` | Maximum retry count for flaky tests, zero for no retries (default: no retries). |\n| `--shard <shard>` | Shard tests and execute only the selected shard, specified in the form \"current/all\", 1-based, e.g., \"3/5\". |\n| `--timeout <timeout>` | Specify test timeout threshold in milliseconds, zero for unlimited (default: 30 seconds). |\n| `--trace <mode>` | Force tracing mode, can be \"on\", \"off\", \"on-first-retry\", \"on-all-retries\", \"retain-on-failure\", \"retain-on-first-failure\". |\n| `--tsconfig <path>` | Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately). |\n| `--ui` | Run tests in interactive UI mode. |\n| `--ui-host <host>` | Host to serve UI on; specifying this option opens UI in a browser tab. |\n| `--ui-port <port>` | Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":105,"to":112}}}}],["1cc7c900-c00a-40e0-a8dc-c8af91a00349",{"pageContent":"| `--ui-port <port>` | Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab. |\n| `-u` or `--update-snapshots [mode]` | Update snapshots with actual results. Possible values are \"all\", \"changed\", \"missing\", and \"none\". Running tests without the flag defaults to \"missing\"; running tests with the flag but without a value defaults to \"changed\". |\n| `--update-source-method [mode]` | Update snapshots with actual results. Possible values are \"patch\" (default), \"3way\" and \"overwrite\". \"Patch\" creates a unified diff file that can be used to update the source code later. \"3way\" generates merge conflict markers in source code. \"Overwrite\" overwrites the source code with the new snapshot values.|\n| `-j <workers>` or `--workers <workers>` | Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%). |\n| `-x` | Stop after the first failure. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-cli-js.md","title":"src-test-cli-js","url":"https://playwright.dev/docs/src-test-cli-js","loc":{"lines":{"from":112,"to":116}}}}],["984e5cd3-1754-41bc-9b81-4c199320e5a5",{"pageContent":"---\nid: test-components\ntitle: \"Components (experimental)\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nPlaywright Test can now test your components.\n\n<LiteYouTube\n    id=\"y3YxX4sFJbM\"\n    title=\"Component testing\"\n/>\n\n## Example\n\nHere is what a typical component test looks like:\n\n```js\ntest('event should work', async ({ mount }) => {\n  let clicked = false;\n\n  // Mount a component. Returns locator pointing to the component.\n  const component = await mount(\n    <Button title=\"Submit\" onClick={() => { clicked = true }}></Button>\n  );\n\n  // As with any Playwright test, assert locator text.\n  await expect(component).toContainText('Submit');\n\n  // Perform locator click. This will trigger the event.\n  await component.click();\n\n  // Assert that respective events have been fired.\n  expect(clicked).toBeTruthy();\n});\n```\n\n## How to get started","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":1,"to":41}}}}],["bb92eefa-2f44-4f6d-84ff-19a7d719697b",{"pageContent":"// Assert that respective events have been fired.\n  expect(clicked).toBeTruthy();\n});\n```\n\n## How to get started\n\nAdding Playwright Test to an existing project is easy. Below are the steps to enable Playwright Test for a React, Vue or Svelte project.\n\n### Step 1: Install Playwright Test for components for your respective framework\n\n<Tabs\n  groupId=\"js-package-manager\"\n  defaultValue=\"npm\"\n  values={[\n    {label: 'npm', value: 'npm'},\n    {label: 'yarn', value: 'yarn'},\n    {label: 'pnpm', value: 'pnpm'},\n  ]\n}>\n<TabItem value=\"npm\">\n\n```bash\nnpm init playwright@latest -- --ct\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```bash\nyarn create playwright --ct\n```\n\n</TabItem>\n\n<TabItem value=\"pnpm\">\n\n```bash\npnpm create playwright --ct\n```\n\n </TabItem>\n\n</Tabs>\n\nThis step creates several files in your workspace:\n\n```html title=\"playwright/index.html\"\n<html lang=\"en\">\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.ts\"></script>\n  </body>\n</html>\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":36,"to":91}}}}],["1ac9d574-9f8c-473a-b33a-c79085612eb4",{"pageContent":"```html title=\"playwright/index.html\"\n<html lang=\"en\">\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.ts\"></script>\n  </body>\n</html>\n```\n\nThis file defines an html file that will be used to render components during testing.\nIt must contain element with `id=\"root\"`, that's where components are mounted. It must\nalso link the script called `playwright/index.{js,ts,jsx,tsx}`.\n\nYou can include stylesheets, apply theme and inject code into the page where\ncomponent is mounted using this script. It can be either a `.js`, `.ts`, `.jsx` or `.tsx` file.\n\n```js title=\"playwright/index.ts\"\n// Apply theme here, add anything your component needs at runtime here.\n```\n\n### Step 2. Create a test file `src/App.spec.{ts,tsx}`\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n<TabItem value=\"react\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":84,"to":115}}}}],["7ba9f9fe-7503-4f5a-82e0-034bad9f0695",{"pageContent":"```js title=\"app.spec.tsx\"\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport App from './App';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />);\n  await expect(component).toContainText('Learn React');\n});\n```\n\n</TabItem>\n\n<TabItem value=\"vue\">\n\n```js title=\"app.spec.ts\"\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport App from './App.vue';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Learn Vue');\n});\n```\n\n```js title=\"app.spec.tsx\"\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport App from './App.vue';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />);\n  await expect(component).toContainText('Learn Vue');\n});\n```\nIf using TypeScript and Vue make sure to add a `vue.d.ts` file to your project:\n\n```js\ndeclare module '*.vue';\n```\n\n</TabItem>\n\n<TabItem value=\"svelte\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":117,"to":158}}}}],["f5e13939-30e9-47a2-8d4c-125ede36b936",{"pageContent":"```js\ndeclare module '*.vue';\n```\n\n</TabItem>\n\n<TabItem value=\"svelte\">\n\n```js title=\"app.spec.ts\"\nimport { test, expect } from '@playwright/experimental-ct-svelte';\nimport App from './App.svelte';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Learn Svelte');\n});\n```\n\n</TabItem>\n\n</Tabs>\n\n### Step 3. Run the tests\n\nYou can run tests using the [VS Code extension](./getting-started-vscode.md) or the command line.\n\n```sh\nnpm run test-ct\n```\n\n### Further reading: configure reporting, browsers, tracing\n\nRefer to [Playwright config](./test-configuration.md) for configuring your project.\n\n## Test stories","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":152,"to":186}}}}],["b3e608bf-9f5a-46dd-ae76-de467415b92d",{"pageContent":"```sh\nnpm run test-ct\n```\n\n### Further reading: configure reporting, browsers, tracing\n\nRefer to [Playwright config](./test-configuration.md) for configuring your project.\n\n## Test stories\n\nWhen Playwright Test is used to test web components, tests run in Node.js, while components run in the real browser. This brings together the best of both worlds: components run in the real browser environment, real clicks are triggered, real layout is executed, visual regression is possible. At the same time, test can use all the powers of Node.js as well as all the Playwright Test features. As a result, the same parallel, parametrized tests with the same post-mortem Tracing story are available during component testing.\n\nThis however, is introducing a number of limitations:\n\n- You can't pass complex live objects to your component. Only plain JavaScript objects and built-in types like strings, numbers, dates etc. can be passed.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":178,"to":192}}}}],["88d0c285-2c6b-422d-af85-f0fb8005eb38",{"pageContent":"- You can't pass complex live objects to your component. Only plain JavaScript objects and built-in types like strings, numbers, dates etc. can be passed.\n\n```js\ntest('this will work', async ({ mount }) => {\n  const component = await mount(<ProcessViewer process={{ name: 'playwright' }}/>);\n});\n\ntest('this will not work', async ({ mount }) => {\n  // `process` is a Node object, we can't pass it to the browser and expect it to work.\n  const component = await mount(<ProcessViewer process={process}/>);\n});\n```\n\n- You can't pass data to your component synchronously in a callback:\n\n```js\ntest('this will not work', async ({ mount }) => {\n  // () => 'red' callback lives in Node. If `ColorPicker` component in the browser calls the parameter function\n  // `colorGetter` it won't get result synchronously. It'll be able to get it via await, but that is not how\n  // components are typically built.\n  const component = await mount(<ColorPicker colorGetter={() => 'red'}/>);\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":192,"to":214}}}}],["7d429b89-7508-4973-afd3-c2ad968882a5",{"pageContent":"Working around these and other limitations is quick and elegant: for every use case of the tested component, create a wrapper of this component designed specifically for test. Not only it will mitigate the limitations, but it will also offer powerful abstractions for testing where you would be able to define environment, theme and other aspects of your component rendering.\n\nLet's say you'd like to test following component:\n\n```js title=\"input-media.tsx\"\nimport React from 'react';\n\ntype InputMediaProps = {\n  // Media is a complex browser object we can't send to Node while testing.\n  onChange(media: Media): void;\n};\n\nexport function InputMedia(props: InputMediaProps) {\n  return <></> as any;\n}\n```\n\nCreate a story file for your component:\n\n```js title=\"input-media.story.tsx\"\nimport React from 'react';\nimport InputMedia from './import-media';\n\ntype InputMediaForTestProps = {\n  onMediaChange(mediaName: string): void;\n};","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":216,"to":241}}}}],["fee47215-5098-4dda-81ce-b56cf64c1109",{"pageContent":"```js title=\"input-media.story.tsx\"\nimport React from 'react';\nimport InputMedia from './import-media';\n\ntype InputMediaForTestProps = {\n  onMediaChange(mediaName: string): void;\n};\n\nexport function InputMediaForTest(props: InputMediaForTestProps) {\n  // Instead of sending a complex `media` object to the test, send the media name.\n  return <InputMedia onChange={media => props.onMediaChange(media.name)} />;\n}\n// Export more stories here.\n```\n\nThen test the component via testing the story:\n\n```js title=\"input-media.spec.tsx\"\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport { InputMediaForTest } from './input-media.story.tsx';\n\ntest('changes the image', async ({ mount }) => {\n  let mediaSelected: string | null = null;\n\n  const component = await mount(\n    <InputMediaForTest\n      onMediaChange={mediaName => {\n        mediaSelected = mediaName;\n      }}\n    />\n  );\n  await component\n    .getByTestId('imageInput')\n    .setInputFiles('src/assets/logo.png');","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":235,"to":268}}}}],["44bb2d95-9992-4a37-af2e-31e289cd553d",{"pageContent":"await expect(component.getByAltText(/selected image/i)).toBeVisible();\n  await expect.poll(() => mediaSelected).toBe('logo.png');\n});\n```\n\nAs a result, for every component you'll have a story file that exports all the stories that are actually tested.\nThese stories live in the browser and \"convert\" complex object into the simple objects that can be accessed in the test.\n\n## Under the hood\n\nHere is how component testing works:\n\n- Once the tests are executed, Playwright creates a list of components that the tests need.\n- It then compiles a bundle that includes these components and serves it using a local static web server.\n- Upon the `mount` call within the test, Playwright navigates to the facade page `/playwright/index.html` of this bundle and tells it to render the component.\n- Events are marshalled back to the Node.js environment to allow verification.\n\nPlaywright is using [Vite](https://vitejs.dev/) to create the components bundle and serve it.\n\n## API reference\n\n### props","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":270,"to":291}}}}],["be8eed72-6f49-49cd-80c5-df8b5a85a4f1",{"pageContent":"Playwright is using [Vite](https://vitejs.dev/) to create the components bundle and serve it.\n\n## API reference\n\n### props\n\nProvide props to a component when mounted.\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n\n<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('props', async ({ mount }) => {\n  const component = await mount(<Component msg=\"greetings\" />);\n});\n```\n\n</TabItem>\n<TabItem value=\"svelte\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('props', async ({ mount }) => {\n  const component = await mount(Component, { props: { msg: 'greetings' } });\n});\n```\n\n</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":287,"to":330}}}}],["b7ae512e-d594-43a3-b241-08297ab2dc70",{"pageContent":"</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('props', async ({ mount }) => {\n  const component = await mount(Component, { props: { msg: 'greetings' } });\n});\n```\n\n```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('props', async ({ mount }) => {\n  const component = await mount(<Component msg=\"greetings\" />);\n});\n```\n\n</TabItem>\n\n</Tabs>\n\n### callbacks / events\n\nProvide callbacks/events to a component when mounted.\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n\n<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":326,"to":367}}}}],["1faf9167-8b8c-42a8-b24c-1a96a71edf8c",{"pageContent":"<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('callback', async ({ mount }) => {\n  const component = await mount(<Component onClick={() => {}} />);\n});\n```\n\n</TabItem>\n<TabItem value=\"svelte\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { click() {} } });\n});\n```\n\n</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { click() {} } });\n});\n```\n\n```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(<Component v-on:click={() => {}} />);\n});\n```\n\n</TabItem>\n\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":364,"to":407}}}}],["617f35b6-2ece-444c-b149-609db7eb609e",{"pageContent":"test('event', async ({ mount }) => {\n  const component = await mount(<Component v-on:click={() => {}} />);\n});\n```\n\n</TabItem>\n\n</Tabs>\n\n### children / slots\n\nProvide children/slots to a component when mounted.\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n\n<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n</TabItem>\n<TabItem value=\"svelte\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\n</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":400,"to":448}}}}],["4d2a050c-845f-4567-a296-3ee385bc3ae4",{"pageContent":"</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\n```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n</TabItem>\n\n</Tabs>\n\n### hooks\n\nYou can use `beforeMount` and `afterMount` hooks to configure your app. This lets you set up things like your app router, fake server etc. giving you the flexibility you need. You can also pass custom configuration from the `mount` call from a test, which is accessible from the `hooksConfig` fixture. This includes any config that needs to be run before or after mounting the component. An example of configuring a router is provided below:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":444,"to":470}}}}],["899a9544-6956-4aca-883b-ce9a659c0cac",{"pageContent":"<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n  <TabItem value=\"react\">\n\n  ```js title=\"playwright/index.tsx\"\n  import { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';\n  import { BrowserRouter } from 'react-router-dom';\n\n  export type HooksConfig = {\n    enableRouting?: boolean;\n  }\n\n  beforeMount<HooksConfig>(async ({ App, hooksConfig }) => {\n    if (hooksConfig?.enableRouting)\n      return <BrowserRouter><App /></BrowserRouter>;\n  });\n  ```\n\n  ```js title=\"src/pages/ProductsPage.spec.tsx\"\n  import { test, expect } from '@playwright/experimental-ct-react';\n  import type { HooksConfig } from '../playwright';\n  import { ProductsPage } from './pages/ProductsPage';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":472,"to":499}}}}],["d5d2299f-0414-452e-82b1-005d2a172b5b",{"pageContent":"test('configure routing through hooks config', async ({ page, mount }) => {\n    const component = await mount<HooksConfig>(<ProductsPage />, {\n      hooksConfig: { enableRouting: true },\n    });\n    await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n  });\n  ```\n\n  </TabItem>\n\n  <TabItem value=\"vue\">\n\n  ```js title=\"playwright/index.ts\"\n  import { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\n  import { router } from '../src/router';\n\n  export type HooksConfig = {\n    enableRouting?: boolean;\n  }\n\n  beforeMount<HooksConfig>(async ({ app, hooksConfig }) => {\n    if (hooksConfig?.enableRouting)\n      app.use(router);\n  });\n  ```\n\n  ```js title=\"src/pages/ProductsPage.spec.ts\"\n  import { test, expect } from '@playwright/experimental-ct-vue';\n  import type { HooksConfig } from '../playwright';\n  import ProductsPage from './pages/ProductsPage.vue';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":501,"to":530}}}}],["b7ca2d33-d963-4b83-aba3-bdea4a0f3b28",{"pageContent":"test('configure routing through hooks config', async ({ page, mount }) => {\n    const component = await mount<HooksConfig>(ProductsPage, {\n      hooksConfig: { enableRouting: true },\n    });\n    await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n  });\n  ```\n\n  </TabItem>\n\n</Tabs>\n\n### unmount\n\nUnmount the mounted component from the DOM. This is useful for testing the component's behavior upon unmounting. Use cases include testing an \"Are you sure you want to leave?\" modal or ensuring proper cleanup of event handlers to prevent memory leaks.\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n\n<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":532,"to":561}}}}],["d5105621-6075-4591-baa3-a4d8b0777470",{"pageContent":"<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n\n</TabItem>\n<TabItem value=\"svelte\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\n</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\n```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":558,"to":595}}}}],["e29b9ff8-55ef-4261-a121-12c46e056866",{"pageContent":"```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n</TabItem>\n\n</Tabs>\n\n### update\n\nUpdate props, slots/children, and/or events/callbacks of a mounted component. These component inputs can change at any time and are typically provided by the parent component, but sometimes it is necessary to ensure that your components behave appropriately to new inputs.\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n\n<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":593,"to":623}}}}],["7d42c714-ad11-4df6-89be-66a2d42e0c22",{"pageContent":"<TabItem value=\"react\">\n\n```js title=\"component.spec.tsx\"\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" onClick={() => {}}>Child</Component>\n  );\n});\n```\n\n</TabItem>\n<TabItem value=\"svelte\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { click() {} },\n    slots: { default: 'Child' }\n  });\n});\n```\n\n</TabItem>\n<TabItem value=\"vue\">\n\n```js title=\"component.spec.ts\"\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { click() {} },\n    slots: { default: 'Child' }\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":620,"to":663}}}}],["7681cafe-48fb-4e7e-88dd-3da594a51c17",{"pageContent":"```js title=\"component.spec.tsx\"\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" v-on:click={() => {}}>Child</Component>\n  );\n});\n```\n\n</TabItem>\n\n</Tabs>\n\n### Handling network requests\n\nPlaywright provides an **experimental** `router` fixture to intercept and handle network requests. There are two ways to use the `router` fixture:\n* Call `router.route(url, handler)` that behaves similarly to [`method: Page.route`]. See the [network mocking guide](./mock.md) for more details.\n* Call `router.use(handlers)` and pass [MSW library](https://mswjs.io/) request handlers to it.\n\nHere is an example of reusing your existing MSW handlers in the test.\n\n```js\nimport { handlers } from '@src/mocks/handlers';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":665,"to":690}}}}],["c793a7d6-fb69-482c-ba6c-e492c8904fcd",{"pageContent":"Here is an example of reusing your existing MSW handlers in the test.\n\n```js\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\nYou can also introduce a one-off handler for a specific test.\n\n```js\nimport { http, HttpResponse } from 'msw';\n\ntest('example test', async ({ mount, router }) => {\n  await router.use(http.get('/data', async ({ request }) => {\n    return HttpResponse.json({ value: 'mocked' });\n  }));\n\n  // test as usual, your handler is active\n  // ...\n});\n```\n\n## Frequently asked questions\n\n### What's the difference between `@playwright/test` and `@playwright/experimental-ct-{react,svelte,vue}`?\n\n```js\ntest('…', async ({ mount, page, context }) => {\n  // …\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":687,"to":726}}}}],["f98e55a2-205e-4240-8788-092a481ec4d7",{"pageContent":"### What's the difference between `@playwright/test` and `@playwright/experimental-ct-{react,svelte,vue}`?\n\n```js\ntest('…', async ({ mount, page, context }) => {\n  // …\n});\n```\n\n`@playwright/experimental-ct-{react,svelte,vue}` wrap `@playwright/test` to provide an additional built-in component-testing specific fixture called `mount`:\n\n<Tabs\n  groupId=\"js-framework\"\n  defaultValue=\"react\"\n  values={[\n    {label: 'React', value: 'react'},\n    {label: 'Svelte', value: 'svelte'},\n    {label: 'Vue', value: 'vue'},\n  ]\n}>\n<TabItem value=\"react\">\n\n```js\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport HelloWorld from './HelloWorld';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<HelloWorld msg=\"greetings\" />);\n  await expect(component).toContainText('Greetings');\n});\n```\n\n</TabItem>\n\n<TabItem value=\"vue\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":720,"to":755}}}}],["eb412c1d-4c79-408a-8fc7-826a9b172485",{"pageContent":"</TabItem>\n\n<TabItem value=\"vue\">\n\n```js\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport HelloWorld from './HelloWorld.vue';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(HelloWorld, {\n    props: {\n      msg: 'Greetings',\n    },\n  });\n  await expect(component).toContainText('Greetings');\n});\n```\n\n</TabItem>\n\n<TabItem value=\"svelte\">\n\n```js\nimport { test, expect } from '@playwright/experimental-ct-svelte';\nimport HelloWorld from './HelloWorld.svelte';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(HelloWorld, {\n    props: {\n      msg: 'Greetings',\n    },\n  });\n  await expect(component).toContainText('Greetings');\n});\n```\n\n</TabItem>\n\n</Tabs>\n\nAdditionally, it adds some config options you can use in your `playwright-ct.config.{ts,js}`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":753,"to":797}}}}],["ae5090aa-c676-4f67-ab36-ac85d2b7aa28",{"pageContent":"</TabItem>\n\n</Tabs>\n\nAdditionally, it adds some config options you can use in your `playwright-ct.config.{ts,js}`.\n\nFinally, under the hood, each test re-uses the `context` and `page` fixture as a speed optimization for Component Testing.\nIt resets them in between each test so it should be functionally equivalent to `@playwright/test`'s guarantee that you get a new, isolated `context` and `page` fixture per-test.\n\n### I have a project that already uses Vite. Can I reuse the config?\n\nAt this point, Playwright is bundler-agnostic, so it is not reusing your existing Vite config. Your config might have a lot of things we won't be able to reuse. So for now, you would copy your path mappings and other high level settings into the `ctViteConfig` property of Playwright config.\n\n```js\nimport { defineConfig } from '@playwright/experimental-ct-react';\n\nexport default defineConfig({\n  use: {\n    ctViteConfig: {\n      // ...\n    },\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":793,"to":816}}}}],["06c971f8-89d8-4b5a-8db9-bcf83557a17f",{"pageContent":"```js\nimport { defineConfig } from '@playwright/experimental-ct-react';\n\nexport default defineConfig({\n  use: {\n    ctViteConfig: {\n      // ...\n    },\n  },\n});\n```\n\nYou can specify plugins via Vite config for testing settings. Note that once you start specifying plugins, you are responsible for specifying the framework plugin as well, `vue()` in this case:\n\n```js\nimport { defineConfig, devices } from '@playwright/experimental-ct-vue';\n\nimport { resolve } from 'path';\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":806,"to":826}}}}],["4dbd072f-2f91-43d8-9749-7936961ffea3",{"pageContent":"import { resolve } from 'path';\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\n\nexport default defineConfig({\n  testDir: './tests/component',\n  use: {\n    trace: 'on-first-retry',\n    ctViteConfig: {\n      plugins: [\n        vue(),\n        AutoImport({\n          imports: [\n            'vue',\n            'vue-router',\n            '@vueuse/head',\n            'pinia',\n            {\n              '@/store': ['useStore'],\n            },\n          ],\n          dts: 'src/auto-imports.d.ts',\n          eslintrc: {\n            enabled: true,\n          },\n        }),\n        Components({\n          dirs: ['src/components'],\n          extensions: ['vue'],\n        }),\n      ],\n      resolve: {\n        alias: {\n          '@': resolve(__dirname, './src'),\n        },\n      },\n    },\n  },\n});\n```\n\n### How do I use CSS imports?","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":823,"to":865}}}}],["9c776496-1ce8-4a77-8a7c-9f8323fdc012",{"pageContent":"### How do I use CSS imports?\n\nIf you have a component that imports CSS, Vite will handle it automatically. You can also use CSS pre-processors such as Sass, Less, or Stylus, and Vite will handle them as well without any additional configuration. However, corresponding CSS pre-processor needs to be installed.\n\nVite has a hard requirement that all CSS Modules are named `*.module.[css extension]`. If you have a custom build config for your project normally and have imports of the form `import styles from 'styles.css'` you must rename your files to properly indicate they are to be treated as modules. You could also write a Vite plugin to handle this for you.\n\nCheck [Vite documentation](https://vite.dev/guide/features#css) for more details.\n\n### How can I test components that uses Pinia?\n\nPinia needs to be initialized in `playwright/index.{js,ts,jsx,tsx}`. If you do this inside a `beforeMount` hook, the `initialState` can be overwritten on a per-test basis:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":865,"to":875}}}}],["c57c3d89-acea-475c-afa5-e07a23ebb6d0",{"pageContent":"Pinia needs to be initialized in `playwright/index.{js,ts,jsx,tsx}`. If you do this inside a `beforeMount` hook, the `initialState` can be overwritten on a per-test basis:\n\n```js title=\"playwright/index.ts\"\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\nimport { createTestingPinia } from '@pinia/testing';\nimport type { StoreState } from 'pinia';\nimport type { useStore } from '../src/store';\n\nexport type HooksConfig = {\n  store?: StoreState<ReturnType<typeof useStore>>;\n}\n\nbeforeMount<HooksConfig>(async ({ hooksConfig }) => {\n  createTestingPinia({\n    initialState: hooksConfig?.store,\n    /**\n     * Use http intercepting to mock api calls instead:\n     * https://playwright.dev/docs/mock#mock-api-requests\n     */\n    stubActions: false,\n    createSpy(args) {\n      console.log('spy', args)\n      return () => console.log('spy-returns')\n    },\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":875,"to":901}}}}],["7c7e0e8e-f5ed-43bd-9e9d-9843200cd312",{"pageContent":"```js title=\"src/pinia.spec.ts\"\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport type { HooksConfig } from '../playwright';\nimport Store from './Store.vue';\n\ntest('override initialState ', async ({ mount }) => {\n  const component = await mount<HooksConfig>(Store, {\n    hooksConfig: {\n      store: { name: 'override initialState' }\n    }\n  });\n  await expect(component).toContainText('override initialState');\n});\n```\n\n### How do I access the component's methods or its instance?","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":903,"to":918}}}}],["2faa74fb-b9a5-449e-9f43-33bc2cdf9693",{"pageContent":"### How do I access the component's methods or its instance?\n\nAccessing a component's internal methods or its instance within test code is neither recommended nor supported. Instead, focus on observing and interacting with the component from a user's perspective, typically by clicking or verifying if something is visible on the page. Tests become less fragile and more valuable when they avoid interacting with internal implementation details, such as the component instance or its methods. Keep in mind that if a test fails when run from a user’s perspective, it likely means the automated test has uncovered a genuine bug in your code.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-components-js.md","title":"src-test-components-js","url":"https://playwright.dev/docs/src-test-components-js","loc":{"lines":{"from":918,"to":920}}}}],["2bf397f0-27dc-405c-8656-e6860972251e",{"pageContent":"---\nid: test-configuration\ntitle: \"Test configuration\"\n---\n\n## Introduction\n\nPlaywright has many options to configure how your tests are run. You can specify these options in the configuration file. Note that test runner options are **top-level**, do not put them into the `use` section.\n\n## Basic Configuration\n\nHere are some of the most common configuration options.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Look for test files in the \"tests\" directory, relative to this configuration file.\n  testDir: 'tests',\n\n  // Run all tests in parallel.\n  fullyParallel: true,\n\n  // Fail the build on CI if you accidentally left test.only in the source code.\n  forbidOnly: !!process.env.CI,\n\n  // Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":1,"to":34}}}}],["27fb97e2-1c83-44f6-9512-3f22dd046540",{"pageContent":"// Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',\n\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://localhost:3000',\n\n    // Collect trace when retrying the failed test.\n    trace: 'on-first-retry',\n  },\n  // Configure projects for major browsers.\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  // Run your local dev server before starting the tests.\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":27,"to":57}}}}],["b7a2465b-a3e7-4e0d-8786-ba10f26ae010",{"pageContent":"| Option | Description |\n| :- | :- |\n| [`property: TestConfig.forbidOnly`] | Whether to exit with an error if any tests are marked as `test.only`. Useful on CI.|\n| [`property: TestConfig.fullyParallel`] | have all tests in all files to run in parallel. See [Parallelism](./test-parallel) and [Sharding](./test-sharding) for more details. |\n| [`property: TestConfig.projects`] | Run tests in multiple configurations or on multiple browsers |\n| [`property: TestConfig.reporter`] | Reporter to use. See [Test Reporters](/test-reporters.md) to learn more about which reporters are available. |\n| [`property: TestConfig.retries`] | The maximum number of retry attempts per test. See [Test Retries](/test-retries.md) to learn more about retries.|\n| [`property: TestConfig.testDir`] | Directory with the test files. |\n| [`property: TestConfig.use`]  | Options with `use{}` |\n| [`property: TestConfig.webServer`] | To launch a server during the tests, use the `webServer` option |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":59,"to":68}}}}],["eb50c1b5-9d8c-4a15-bfb8-3996e56c7b8e",{"pageContent":"| [`property: TestConfig.use`]  | Options with `use{}` |\n| [`property: TestConfig.webServer`] | To launch a server during the tests, use the `webServer` option |\n| [`property: TestConfig.workers`] | The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`. See [Parallelism](./test-parallel) and [Sharding](./test-sharding) for more details. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":67,"to":69}}}}],["949d092a-f752-40c8-80de-61dd21c2881d",{"pageContent":"## Filtering Tests\n\nFilter tests by glob patterns or regular expressions.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Glob patterns or regular expressions to ignore test files.\n  testIgnore: '*test-assets',\n\n  // Glob patterns or regular expressions that match test files.\n  testMatch: '*todo-tests/*.spec.ts',\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestConfig.testIgnore`] | Glob patterns or regular expressions that should be ignored when looking for the test files. For example, `'*test-assets'` |\n| [`property: TestConfig.testMatch`] | Glob patterns or regular expressions that match test files. For example, `'*todo-tests/*.spec.ts'`. By default, Playwright runs <code>.*(test&#124;spec)\\.(js&#124;ts&#124;mjs)</code> files. |\n\n## Advanced Configuration\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":71,"to":95}}}}],["0904d701-0967-45d2-becd-a55c4126ee6a",{"pageContent":"## Advanced Configuration\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Folder for test artifacts such as screenshots, videos, traces, etc.\n  outputDir: 'test-results',\n\n  // path to the global setup files.\n  globalSetup: require.resolve('./global-setup'),\n\n  // path to the global teardown files.\n  globalTeardown: require.resolve('./global-teardown'),\n\n  // Each test is given 30 seconds.\n  timeout: 30000,\n\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":92,"to":111}}}}],["3e2523af-0d2a-41a8-bfd0-e0ba8ee1fc21",{"pageContent":"// path to the global teardown files.\n  globalTeardown: require.resolve('./global-teardown'),\n\n  // Each test is given 30 seconds.\n  timeout: 30000,\n\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestConfig.globalSetup`] | Path to the global setup file. This file will be required and run before all the tests. It must export a single function. |\n| [`property: TestConfig.globalTeardown`] |Path to the global teardown file. This file will be required and run after all the tests. It must export a single function. |\n| [`property: TestConfig.outputDir`] | Folder for test artifacts such as screenshots, videos, traces, etc. |\n| [`property: TestConfig.timeout`] | Playwright enforces a [timeout](./test-timeouts.md) for each test, 30 seconds by default. Time spent by the test function, test fixtures and beforeEach hooks is included in the test timeout. |\n\n## Expect Options\n\nConfiguration for the expect assertion library.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":104,"to":122}}}}],["6ba46d74-0231-44e5-a6bb-a45d8e83aea5",{"pageContent":"## Expect Options\n\nConfiguration for the expect assertion library.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    // Maximum time expect() should wait for the condition to be met.\n    timeout: 5000,\n\n    toHaveScreenshot: {\n      // An acceptable amount of pixels that could be different, unset by default.\n      maxDiffPixels: 10,\n    },\n\n    toMatchSnapshot: {\n      // An acceptable ratio of pixels that are different to the\n      // total amount of pixels, between 0 and 1.\n      maxDiffPixelRatio: 0.1,\n    },\n  },\n\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":120,"to":145}}}}],["c9061a61-635e-4c7f-a85a-0cae7d0561eb",{"pageContent":"toMatchSnapshot: {\n      // An acceptable ratio of pixels that are different to the\n      // total amount of pixels, between 0 and 1.\n      maxDiffPixelRatio: 0.1,\n    },\n  },\n\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestConfig.expect`] | [Web first assertions](./test-assertions.md) like `expect(locator).toHaveText()` have a separate timeout of 5 seconds by default. This is the maximum time the `expect()` should wait for the condition to be met. Learn more about [test and expect timeouts](./test-timeouts.md) and how to set them for a single test. |\n| [`method: PageAssertions.toHaveScreenshot#1`] | Configuration for the `expect(locator).toHaveScreenshot()` method. |\n| [`method: SnapshotAssertions.toMatchSnapshot#1`]| Configuration for the `expect(locator).toMatchSnapshot()` method.|","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-configuration-js.md","title":"src-test-configuration-js","url":"https://playwright.dev/docs/src-test-configuration-js","loc":{"lines":{"from":137,"to":151}}}}],["b028523f-1803-4ae9-b61a-81b45b0293a5",{"pageContent":"---\nid: test-fixtures\ntitle: \"Fixtures\"\n---\n\n## Introduction\n\nPlaywright Test is based on the concept of test fixtures. Test fixtures are used to establish the environment for each test, giving the test everything it needs and nothing else. Test fixtures are isolated between tests. With fixtures, you can group tests based on their meaning, instead of their common setup.\n\n### Built-in fixtures\n\nYou have already used test fixtures in your first test.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  await expect(page).toHaveTitle(/Playwright/);\n});\n```\n\nThe `{ page }` argument tells Playwright Test to set up the `page` fixture and provide it to your test function.\n\nHere is a list of the pre-defined fixtures that you are likely to use most of the time:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":1,"to":26}}}}],["0099e45e-9070-46f1-a74c-974e913868a7",{"pageContent":"Here is a list of the pre-defined fixtures that you are likely to use most of the time:\n\n|Fixture    |Type               |Description                      |\n|:----------|:------------------|:--------------------------------|\n|page       |[Page]             |Isolated page for this test run. |\n|context    |[BrowserContext]   |Isolated context for this test run. The `page` fixture belongs to this context as well. Learn how to [configure context](./test-configuration.md). |\n|browser    |[Browser]          |Browsers are shared across tests to optimize resources. Learn how to [configure browsers](./test-configuration.md). |\n|browserName|[string]           |The name of the browser currently running the test. Either `chromium`, `firefox` or `webkit`.|\n|request    |[APIRequestContext]|Isolated [APIRequestContext](./api/class-apirequestcontext.md) instance for this test run.|\n\n### Without fixtures","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":26,"to":36}}}}],["c87b0657-4509-4869-b02d-78657d6346c1",{"pageContent":"### Without fixtures\n\nHere is how a typical test environment setup differs between the traditional test style and the fixture-based one.\n\n`TodoPage` is a class that helps us interact with a \"todo list\" page of the web app, following the [Page Object Model](./pom.md) pattern. It uses Playwright's `page` internally.\n\n<details>\n  <summary>Click to expand the code for the <code>TodoPage</code></summary>\n  <div>\n\n```js title=\"todo-page.ts\"\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":36,"to":65}}}}],["ca3d4c0b-e974-4b7b-9791-ec177c1c57b0",{"pageContent":"async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n  </div>\n</details>\n\n```js title=\"todo.spec.ts\"\nconst { test } = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\ntest.describe('todo tests', () => {\n  let todoPage;\n\n  test.beforeEach(async ({ page }) => {\n    todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n  });\n\n  test.afterEach(async () => {\n    await todoPage.removeAll();\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":62,"to":101}}}}],["12eeb7e2-08a0-4b1e-ad9b-cb999dd255d5",{"pageContent":"test.afterEach(async () => {\n    await todoPage.removeAll();\n  });\n\n  test('should add an item', async () => {\n    await todoPage.addToDo('my item');\n    // ...\n  });\n\n  test('should remove an item', async () => {\n    await todoPage.remove('item1');\n    // ...\n  });\n});\n```\n\n### With fixtures","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":99,"to":115}}}}],["966fad57-a99a-44a0-a269-1c7ccc066793",{"pageContent":"Fixtures have a number of advantages over before/after hooks:\n- Fixtures **encapsulate** setup and teardown in the same place so it is easier to write. So if you have an after hook that tears down what was created in a before hook, consider turning them into a fixture.\n- Fixtures are **reusable** between test files - you can define them once and use them in all your tests. That's how Playwright's built-in `page` fixture works. So if you have a helper function that is used in multiple tests, consider turning it into a fixture.\n- Fixtures are **on-demand** - you can define as many fixtures as you'd like, and Playwright Test will setup only the ones needed by your test and nothing else.\n- Fixtures are **composable** - they can depend on each other to provide complex behaviors.\n- Fixtures are **flexible**. Tests can use any combination of fixtures to precisely tailor the environment to their needs, without affecting other tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":117,"to":122}}}}],["b862db95-fd9a-4302-a456-3724adfd433f",{"pageContent":"- Fixtures are **flexible**. Tests can use any combination of fixtures to precisely tailor the environment to their needs, without affecting other tests.\n- Fixtures simplify **grouping**. You no longer need to wrap tests in `describe`s that set up their environment, and are free to group your tests by their meaning instead.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":122,"to":123}}}}],["470565aa-0aa1-402f-9c08-df7beb6eb704",{"pageContent":"<details>\n  <summary>Click to expand the code for the <code>TodoPage</code></summary>\n  <div>\n\n```js title=\"todo-page.ts\"\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":125,"to":154}}}}],["5b207d84-5016-451a-a03d-b15c52f97302",{"pageContent":"async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n  </div>\n</details>\n\n```js title=\"example.spec.ts\"\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Extend basic test by providing a \"todoPage\" fixture.\nconst test = base.extend<{ todoPage: TodoPage }>({\n  todoPage: async ({ page }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n\ntest('should add an item', async ({ todoPage }) => {\n  await todoPage.addToDo('my item');\n  // ...\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":150,"to":186}}}}],["3d0a589c-4f3e-4e1d-a80d-17775a0b07f3",{"pageContent":"test('should add an item', async ({ todoPage }) => {\n  await todoPage.addToDo('my item');\n  // ...\n});\n\ntest('should remove an item', async ({ todoPage }) => {\n  await todoPage.remove('item1');\n  // ...\n});\n```\n\n## Creating a fixture\n\nTo create your own fixture, use [`method: Test.extend`] to create a new `test` object that will include it.\n\nBelow we create two fixtures `todoPage` and `settingsPage` that follow the [Page Object Model](./pom.md) pattern.\n\n<details>\n  <summary>Click to expand the code for the <code>TodoPage</code> and <code>SettingsPage</code></summary>\n  <div>\n\n```js title=\"todo-page.ts\"\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":183,"to":214}}}}],["042da158-422a-4186-ac1b-f2461385b677",{"pageContent":"constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\nSettingsPage is similar:\n\n```js title=\"settings-page.ts\"\nimport type { Page } from '@playwright/test';\n\nexport class SettingsPage {\n  constructor(public readonly page: Page) {\n  }\n\n  async switchToDarkMode() {\n    // ...\n  }\n}\n```\n\n  </div>\n</details>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":211,"to":256}}}}],["f897ce86-d1d8-4c11-b408-544c59717056",{"pageContent":"export class SettingsPage {\n  constructor(public readonly page: Page) {\n  }\n\n  async switchToDarkMode() {\n    // ...\n  }\n}\n```\n\n  </div>\n</details>\n\n```js title=\"my-test.ts\"\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\nimport { SettingsPage } from './settings-page';\n\n// Declare the types of your fixtures.\ntype MyFixtures = {\n  todoPage: TodoPage;\n  settingsPage: SettingsPage;\n};\n\n// Extend base test by providing \"todoPage\" and \"settingsPage\".\n// This new \"test\" can be used in multiple test files, and each of them will get the fixtures.\nexport const test = base.extend<MyFixtures>({\n  todoPage: async ({ page }, use) => {\n    // Set up the fixture.\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n\n    // Use the fixture value in the test.\n    await use(todoPage);\n\n    // Clean up the fixture.\n    await todoPage.removeAll();\n  },","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":245,"to":284}}}}],["6f31d35c-10d2-45b3-9710-277af767ccc2",{"pageContent":"// Use the fixture value in the test.\n    await use(todoPage);\n\n    // Clean up the fixture.\n    await todoPage.removeAll();\n  },\n\n  settingsPage: async ({ page }, use) => {\n    await use(new SettingsPage(page));\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n:::note\nCustom fixture names should start with a letter or underscore, and can contain only letters, numbers, and underscores.\n:::\n\n## Using a fixture\n\nJust mention a fixture in your test function argument, and the test runner will take care of it. Fixtures are also available in hooks and other fixtures. If you use TypeScript, fixtures will be type safe.\n\nBelow we use the `todoPage` and `settingsPage` fixtures that we defined above.\n\n```js\nimport { test, expect } from './my-test';\n\ntest.beforeEach(async ({ settingsPage }) => {\n  await settingsPage.switchToDarkMode();\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":279,"to":308}}}}],["4a5a0c42-abc1-41b9-a2cb-6caf1d096934",{"pageContent":"```js\nimport { test, expect } from './my-test';\n\ntest.beforeEach(async ({ settingsPage }) => {\n  await settingsPage.switchToDarkMode();\n});\n\ntest('basic test', async ({ todoPage, page }) => {\n  await todoPage.addToDo('something nice');\n  await expect(page.getByTestId('todo-title')).toContainText(['something nice']);\n});\n```\n\n## Overriding fixtures\n\nIn addition to creating your own fixtures, you can also override existing fixtures to fit your needs. Consider the following example which overrides the `page` fixture by automatically navigating to the `baseURL`:\n\n```js\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  page: async ({ baseURL, page }, use) => {\n    await page.goto(baseURL);\n    await use(page);\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":303,"to":329}}}}],["88885b2c-d16c-4c43-bbb1-da5705526960",{"pageContent":"```js\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  page: async ({ baseURL, page }, use) => {\n    await page.goto(baseURL);\n    await use(page);\n  },\n});\n```\n\nNotice that in this example, the `page` fixture is able to depend on other built-in fixtures such as [`property: TestOptions.baseURL`]. We can now configure `baseURL` in the configuration file, or locally in the test file with [`method: Test.use`].\n\n```js title=\"example.spec.ts\"\n\ntest.use({ baseURL: 'https://playwright.dev' });\n```\n\nFixtures can also be overridden, causing the base fixture to be completely replaced with something different. For example, we could override the [`property: TestOptions.storageState`] fixture to provide our own data.\n\n```js\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  storageState: async ({}, use) => {\n    const cookie = await getAuthCookie();\n    await use({ cookies: [cookie] });\n  },\n});\n```\n\n## Worker-scoped fixtures","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":320,"to":351}}}}],["4a05c367-6b19-4531-acf1-02a2c21918aa",{"pageContent":"export const test = base.extend({\n  storageState: async ({}, use) => {\n    const cookie = await getAuthCookie();\n    await use({ cookies: [cookie] });\n  },\n});\n```\n\n## Worker-scoped fixtures\n\nPlaywright Test uses [worker processes](./test-parallel.md) to run test files. Similar to how test fixtures are set up for individual test runs, worker fixtures are set up for each worker process. That's where you can set up services, run servers, etc. Playwright Test will reuse the worker process for as many test files as it can, provided their worker fixtures match and hence environments are identical.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":343,"to":353}}}}],["508ce83e-3145-4351-9661-72021255b4f6",{"pageContent":"Below we'll create an `account` fixture that will be shared by all tests in the same worker, and override the `page` fixture to log in to this account for each test. To generate unique accounts, we'll use the [`property: WorkerInfo.workerIndex`] that is available to any test or fixture. Note the tuple-like syntax for the worker fixture - we have to pass `{scope: 'worker'}` so that test runner sets this fixture up once per worker.\n\n```js title=\"my-test.ts\"\nimport { test as base } from '@playwright/test';\n\ntype Account = {\n  username: string;\n  password: string;\n};\n\n// Note that we pass worker fixture types as a second template parameter.\nexport const test = base.extend<{}, { account: Account }>({\n  account: [async ({ browser }, use, workerInfo) => {\n    // Unique username.\n    const username = 'user' + workerInfo.workerIndex;\n    const password = 'verysecure';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":355,"to":370}}}}],["68d1c03b-1ca1-49ef-b94b-9cb38a0be677",{"pageContent":"// Create the account with Playwright.\n    const page = await browser.newPage();\n    await page.goto('/signup');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign up').click();\n    // Make sure everything is ok.\n    await expect(page.getByTestId('result')).toHaveText('Success');\n    // Do not forget to cleanup.\n    await page.close();\n\n    // Use the account value.\n    await use({ username, password });\n  }, { scope: 'worker' }],\n\n  page: async ({ page, account }, use) => {\n    // Sign in with our account.\n    const { username, password } = account;\n    await page.goto('/signin');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign in').click();\n    await expect(page.getByTestId('userinfo')).toHaveText(username);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":372,"to":394}}}}],["cd381ed3-9f1b-4558-aa58-1384504c6cee",{"pageContent":"// Use signed-in page in the test.\n    await use(page);\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n## Automatic fixtures\n\nAutomatic fixtures are set up for each test/worker, even when the test does not list them directly. To create an automatic fixture, use the tuple syntax and pass `{ auto: true }`.\n\nHere is an example fixture that automatically attaches debug logs when the test fails, so we can later review the logs in the reporter. Note how it uses the [TestInfo] object that is available in each test/fixture to retrieve metadata about the test being run.\n\n```js title=\"my-test.ts\"\nimport debug from 'debug';\nimport fs from 'fs';\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{ saveLogs: void }>({\n  saveLogs: [async ({}, use, testInfo) => {\n    // Collecting logs during the test.\n    const logs = [];\n    debug.log = (...args) => logs.push(args.map(String).join(''));\n    debug.enable('myserver');\n\n    await use();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":396,"to":421}}}}],["cfb59d98-ab06-47b9-8ff8-574ae231e630",{"pageContent":"await use();\n\n    // After the test we can check whether the test passed or failed.\n    if (testInfo.status !== testInfo.expectedStatus) {\n      // outputPath() API guarantees a unique file name.\n      const logFile = testInfo.outputPath('logs.txt');\n      await fs.promises.writeFile(logFile, logs.join('\\n'), 'utf8');\n      testInfo.attachments.push({ name: 'logs', contentType: 'text/plain', path: logFile });\n    }\n  }, { auto: true }],\n});\nexport { expect } from '@playwright/test';\n```\n\n## Fixture timeout\n\nBy default, the fixture inherits the timeout value of the test. However, for slow fixtures, especially [worker-scoped](#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time.\n\n```js\nimport { test as base, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":421,"to":440}}}}],["02aaf7dc-7ab4-4d57-a470-5b7c94f45182",{"pageContent":"```js\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\n\n## Fixtures-options\n\nPlaywright Test supports running multiple test projects that can be configured separately. You can use \"option\" fixtures to make your configuration options declarative and type safe. Learn more about [parameterizing tests](./test-parameterize.md).\n\nBelow we'll create a `defaultItem` option in addition to the `todoPage` fixture from other examples. This option will be set in the configuration file. Note the tuple syntax and `{ option: true }` argument.\n\n<details>\n  <summary>Click to expand the code for the <code>TodoPage</code></summary>\n  <div>\n\n```js title=\"todo-page.ts\"\nimport type { Page, Locator } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":439,"to":466}}}}],["cbb368c6-d2ab-4357-a646-7f8a9580ef60",{"pageContent":"<details>\n  <summary>Click to expand the code for the <code>TodoPage</code></summary>\n  <div>\n\n```js title=\"todo-page.ts\"\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":461,"to":490}}}}],["57d62456-6c20-45eb-ad1e-b025a1a43fa5",{"pageContent":"async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n  </div>\n</details>\n\n```js title=\"my-test.ts\"\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Declare your options to type-check your configuration.\nexport type MyOptions = {\n  defaultItem: string;\n};\ntype MyFixtures = {\n  todoPage: TodoPage;\n};\n\n// Specify both option and fixture types.\nexport const test = base.extend<MyOptions & MyFixtures>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Something nice', { option: true }],","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":486,"to":520}}}}],["9fcf37eb-a116-4b5f-b993-bb8b73403592",{"pageContent":"// Our \"todoPage\" fixture depends on the option.\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\nWe can now use the `todoPage` fixture as usual, and set the `defaultItem` option in the configuration file.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nimport type { MyOptions } from './my-test';\n\nexport default defineConfig<MyOptions>({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\n**Array as an option value**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":522,"to":554}}}}],["752deea8-c742-4336-b27d-ba270042c285",{"pageContent":"**Array as an option value**\n\nIf the value of your option is an array, for example `[{ name: 'Alice' }, { name: 'Bob' }]`, you'll need to wrap it into an extra array when providing the value. This is best illustrated with an example.\n\n```js\ntype Person = { name: string };\nconst test = base.extend<{ persons: Person[] }>({\n  // Declare the option, default value is an empty array.\n  persons: [[], { option: true }],\n});\n\n// Option value is an array of persons.\nconst actualPersons = [{ name: 'Alice' }, { name: 'Bob' }];\ntest.use({\n  // CORRECT: Wrap the value into an array and pass the scope.\n  persons: [actualPersons, { scope: 'test' }],\n});\n\ntest.use({\n  // WRONG: passing an array value directly will not work.\n  persons: actualPersons,\n});\n```\n\n**Reset an option**\n\nYou can reset an option to the value defined in the config file by setting it to `undefined`. Consider the following config that sets a `baseURL`:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":554,"to":580}}}}],["be73790c-f231-4b5e-9943-58376628b931",{"pageContent":"**Reset an option**\n\nYou can reset an option to the value defined in the config file by setting it to `undefined`. Consider the following config that sets a `baseURL`:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    baseURL: 'https://playwright.dev',\n  },\n});\n```\n\nYou can now configure `baseURL` for a file, and also opt-out for a single test.\n\n```js title=\"intro.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Configure baseURL for this file.\ntest.use({ baseURL: 'https://playwright.dev/docs/intro' });\n\ntest('check intro contents', async ({ page }) => {\n  // This test will use \"https://playwright.dev/docs/intro\" base url as defined above.\n});\n\ntest.describe(() => {\n  // Reset the value to a config-defined one.\n  test.use({ baseURL: undefined });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":578,"to":606}}}}],["9841af7b-fc1f-4f13-899a-8345354d88de",{"pageContent":"test.describe(() => {\n  // Reset the value to a config-defined one.\n  test.use({ baseURL: undefined });\n\n  test('can navigate to intro from the home page', async ({ page }) => {\n    // This test will use \"https://playwright.dev\" base url as defined in the config.\n  });\n});\n```\n\nIf you would like to completely reset the value to `undefined`, use a long-form fixture notation.\n\n```js title=\"intro.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Completely unset baseURL for this file.\ntest.use({\n  baseURL: [async ({}, use) => use(undefined), { scope: 'test' }],\n});\n\ntest('no base url', async ({ page }) => {\n  // This test will not have a base url.\n});\n```\n\n## Execution order\n\nEach fixture has a setup and teardown phase before and after the `await use()` call in the fixture. Setup is executed before the test/hook requiring it is run, and teardown is executed when the fixture is no longer being used by the test/hook.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":604,"to":631}}}}],["3aaf1eb5-cbd2-4027-ac42-284dc0a6eaae",{"pageContent":"Fixtures follow these rules to determine the execution order:\n* When fixture A depends on fixture B: B is always set up before A and torn down after A.\n* Non-automatic fixtures are executed lazily, only when the test/hook needs them.\n* Test-scoped fixtures are torn down after each test, while worker-scoped fixtures are only torn down when the worker process executing tests is torn down.\n\nConsider the following example:\n\n```js\nimport { test as base } from '@playwright/test';\n\nconst test = base.extend<{\n  testFixture: string,\n  autoTestFixture: string,\n  unusedFixture: string,\n}, {\n  workerFixture: string,\n  autoWorkerFixture: string,\n}>({\n  workerFixture: [async ({ browser }) => {\n    // workerFixture setup...\n    await use('workerFixture');\n    // workerFixture teardown...\n  }, { scope: 'worker' }],","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":633,"to":655}}}}],["cd11fcfa-8160-48cc-9579-0fe48cba3c36",{"pageContent":"autoWorkerFixture: [async ({ browser }) => {\n    // autoWorkerFixture setup...\n    await use('autoWorkerFixture');\n    // autoWorkerFixture teardown...\n  }, { scope: 'worker', auto: true }],\n\n  testFixture: [async ({ page, workerFixture }) => {\n    // testFixture setup...\n    await use('testFixture');\n    // testFixture teardown...\n  }, { scope: 'test' }],\n\n  autoTestFixture: [async () => {\n    // autoTestFixture setup...\n    await use('autoTestFixture');\n    // autoTestFixture teardown...\n  }, { scope: 'test', auto: true }],\n\n  unusedFixture: [async ({ page }) => {\n    // unusedFixture setup...\n    await use('unusedFixture');\n    // unusedFixture teardown...\n  }, { scope: 'test' }],\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":657,"to":680}}}}],["a72e1520-9857-430e-adea-6c9bc5359173",{"pageContent":"unusedFixture: [async ({ page }) => {\n    // unusedFixture setup...\n    await use('unusedFixture');\n    // unusedFixture teardown...\n  }, { scope: 'test' }],\n});\n\ntest.beforeAll(async () => { /* ... */ });\ntest.beforeEach(async ({ page }) => { /* ... */ });\ntest('first test', async ({ page }) => { /* ... */ });\ntest('second test', async ({ testFixture }) => { /* ... */ });\ntest.afterEach(async () => { /* ... */ });\ntest.afterAll(async () => { /* ... */ });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":675,"to":688}}}}],["e4db2848-f1a5-4e5b-b870-3bbc4137d95b",{"pageContent":"Normally, if all tests pass and no errors are thrown, the order of execution is as following.\n* worker setup and `beforeAll` section:\n  * `browser` setup because it is required by `autoWorkerFixture`.\n  * `autoWorkerFixture` setup because automatic worker fixtures are always set up before anything else.\n  * `beforeAll` runs.\n* `first test` section:\n  * `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.\n  * `page` setup because it is required in `beforeEach` hook.\n  * `beforeEach` runs.\n  * `first test` runs.\n  * `afterEach` runs.\n  * `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  * `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n* `second test` section:\n  * `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":690,"to":704}}}}],["241fc3cb-3f49-433f-83ee-d268c22c36cc",{"pageContent":"* `second test` section:\n  * `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.\n  * `page` setup because it is required in `beforeEach` hook.\n  * `beforeEach` runs.\n  * `workerFixture` setup because it is required by `testFixture` that is required by the `second test`.\n  * `testFixture` setup because it is required by the `second test`.\n  * `second test` runs.\n  * `afterEach` runs.\n  * `testFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  * `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  * `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n* `afterAll` and worker teardown section:\n  * `afterAll` runs.\n  * `workerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":703,"to":716}}}}],["b5ad6872-de12-4e0a-a46f-55ae1228e70c",{"pageContent":"* `afterAll` and worker teardown section:\n  * `afterAll` runs.\n  * `workerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.\n  * `autoWorkerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.\n  * `browser` teardown because it is a workers-scoped fixture and should be torn down once at the end.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":714,"to":718}}}}],["d873c0be-7156-49c2-a41c-1e7f9e193d5b",{"pageContent":"A few observations:\n* `page` and `autoTestFixture` are set up and torn down for each test, as test-scoped fixtures.\n* `unusedFixture` is never set up because it is not used by any tests/hooks.\n* `testFixture` depends on `workerFixture` and triggers its setup.\n* `workerFixture` is lazily set up before the second test, but torn down once during worker shutdown, as a worker-scoped fixture.\n* `autoWorkerFixture` is set up for `beforeAll` hook, but `autoTestFixture` is not.\n\n## Combine custom fixtures from multiple modules\n\nYou can merge test fixtures from multiple files or modules:\n\n```js title=\"fixtures.ts\"\nimport { mergeTests } from '@playwright/test';\nimport { test as dbTest } from 'database-test-utils';\nimport { test as a11yTest } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n```js title=\"test.spec.ts\"\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n## Box fixtures","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":720,"to":747}}}}],["09131feb-0e9c-48fc-a705-3ea6f5d60aea",{"pageContent":"```js title=\"test.spec.ts\"\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n## Box fixtures\n\nUsually, custom fixtures are reported as separate steps in the UI mode, Trace Viewer and various test reports. They also appear in error messages from the test runner. For frequently used fixtures, this can mean lots of noise. You can stop the fixtures steps from being shown in the UI by \"boxing\" it.\n\n```js\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  helperFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { box: true }],\n});\n```\n\nThis is useful for non-interesting helper fixtures. For example, an [automatic](./test-fixtures.md#automatic-fixtures) fixture that sets up some common data can be safely hidden from a test report.\n\n## Custom fixture title","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":739,"to":763}}}}],["b0b7b3ae-e104-4d7c-81b0-4d8a607800fa",{"pageContent":"## Custom fixture title\n\nInstead of the usual fixture name, you can give fixtures a custom title that will be shown in test reports and error messages.\n\n```js\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  innerFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { title: 'my fixture' }],\n});\n```\n\n## Adding global beforeEach/afterEach hooks\n\n[`method: Test.beforeEach`] and [`method: Test.afterEach`] hooks run before/after each test declared in the same file and same [`method: Test.describe`] block (if any). If you want to declare hooks that run before/after each test globally, you can declare them as auto fixtures like this:\n\n```js title=\"fixtures.ts\"\nimport { test as base } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":763,"to":782}}}}],["fe03e2d4-0d0d-4c28-af48-7b36ba41f09b",{"pageContent":"```js title=\"fixtures.ts\"\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{ forEachTest: void }>({\n  forEachTest: [async ({ page }, use) => {\n    // This code runs before every test.\n    await page.goto('http://localhost:8000');\n    await use();\n    // This code runs after every test.\n    console.log('Last URL:', page.url());\n  }, { auto: true }],  // automatically starts for every test.\n});\n```\n\nAnd then import the fixtures in all your tests:\n\n```js title=\"mytest.spec.ts\"\nimport { test } from './fixtures';\nimport { expect } from '@playwright/test';\n\ntest('basic', async ({ page }) => {\n  expect(page).toHaveURL('http://localhost:8000');\n  await page.goto('https://playwright.dev');\n});\n```\n\n## Adding global beforeAll/afterAll hooks","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":781,"to":807}}}}],["0b263615-f7a9-4c5b-a347-5cda172dd00f",{"pageContent":"test('basic', async ({ page }) => {\n  expect(page).toHaveURL('http://localhost:8000');\n  await page.goto('https://playwright.dev');\n});\n```\n\n## Adding global beforeAll/afterAll hooks\n\n[`method: Test.beforeAll`] and [`method: Test.afterAll`] hooks run before/after all tests declared in the same file and same [`method: Test.describe`] block (if any), once per worker process. If you want to declare hooks\nthat run before/after all tests in every file, you can declare them as auto fixtures with `scope: 'worker'` as follows:\n\n```js title=\"fixtures.ts\"\nimport { test as base } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":801,"to":813}}}}],["ade9bd6d-e44b-4d1f-bfae-d73f8ae2fd31",{"pageContent":"```js title=\"fixtures.ts\"\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{}, { forEachWorker: void }>({\n  forEachWorker: [async ({}, use) => {\n    // This code runs before all the tests in the worker process.\n    console.log(`Starting test worker ${test.info().workerIndex}`);\n    await use();\n    // This code runs after all the tests in the worker process.\n    console.log(`Stopping test worker ${test.info().workerIndex}`);\n  }, { scope: 'worker', auto: true }],  // automatically starts for every worker.\n});\n```\n\nAnd then import the fixtures in all your tests:\n\n```js title=\"mytest.spec.ts\"\nimport { test } from './fixtures';\nimport { expect } from '@playwright/test';\n\ntest('basic', async ({ }) => {\n  // ...\n});\n```\nNote that the fixtures will still run once per [worker process](./test-parallel.md#worker-processes), but you don't need to redeclare them in every file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-fixtures-js.md","title":"src-test-fixtures-js","url":"https://playwright.dev/docs/src-test-fixtures-js","loc":{"lines":{"from":812,"to":836}}}}],["e1295374-f3e1-4621-a1a8-77bf002e7d5e",{"pageContent":"---\nid: test-global-setup-teardown\ntitle: \"Global setup and teardown\"\n---\n\n## Introduction\n\nThere are two ways to configure global setup and teardown: using a global setup file and setting it in the config under [`globalSetup`](#option-2-configure-globalsetup-and-globalteardown) or using [project dependencies](#option-1-project-dependencies). With project dependencies, you define a project that runs before all other projects. This is the recommended approach, as it integrates better with the Playwright test runner: your HTML report will include the global setup, traces will be recorded, and fixtures can be used. For a detailed comparison of the two approaches, see the table below.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":1,"to":8}}}}],["d6a25fc2-d34f-479a-8d45-94e351a99bc9",{"pageContent":"| Feature                          | Project Dependencies (recommended) | `globalSetup` (config option)      |\n|----------------------------------|-------------------------------------|-----------------------------------|\n| Runs before all tests            | ✅ Yes                              | ✅ Yes         |\n| HTML report visibility           | ✅ Shown as a separate project      | ❌ Not shown                       |\n| Trace recording                  | ✅ Full trace available             | ❌ Not supported                   |\n| Playwright fixtures              | ✅ Fully supported                  | ❌ Not supported                   |\n| Browser management               | ✅ Via `browser` fixture            | ❌ Fully manual via `browserType.launch()` |\n| Parallelism and retries          | ✅ Supported via standard config    | ❌ Not applicable                  |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":10,"to":17}}}}],["319edcf3-a468-4fdc-b4aa-bc95243dab60",{"pageContent":"| Parallelism and retries          | ✅ Supported via standard config    | ❌ Not applicable                  |\n| Config options like `headless` or `testIdAttribute`  | ✅ Automatically applied            | ❌ Ignored                              |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":17,"to":18}}}}],["e47a7541-bf33-4072-bb52-db973333fbf2",{"pageContent":"## Option 1: Project Dependencies\n\n[Project dependencies](./api/class-testproject#test-project-dependencies) are a list of projects that need to run before the tests in another project run. They can be useful for configuring the global setup actions so that one project depends on this running first. Using dependencies allows global setup to produce traces and other artifacts.\n\n### Setup\n\nFirst we add a new project with the name 'setup db'. We then give it a [`property: TestProject.testMatch`] property in order to match the file called `global.setup.ts`:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":21,"to":30}}}}],["04a6a2f7-a764-4eef-9538-f83f61990e6f",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    // {\n    //   other project\n    // }\n  ]\n});\n```\nThen we add the [`property: TestProject.dependencies`] property to our projects that depend on the setup project and pass into the array the name of our dependency project, which we defined in the previous step:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    {\n      name: 'chromium with db',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":29,"to":66}}}}],["499b7778-79b2-4da2-ad8b-df1ad10038dc",{"pageContent":"In this example the 'chromium with db' project depends on the 'setup db' project. We then create a setup test, stored at root level of your project (note that setup and teardown code must be defined as regular tests by calling [test()](./api/class-test#test-call) function):\n\n```js title=\"tests/global.setup.ts\"\nimport { test as setup } from '@playwright/test';\n\nsetup('create new database', async ({ }) => {\n  console.log('creating new database...');\n  // Initialize the database\n});\n```\n\n```js title=\"tests/menu.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('menu', async ({ page }) => {\n  // Your test that depends on the database\n});\n```\n\n### Teardown\n\nYou can teardown your setup by adding a [`property: TestProject.teardown`] property to your setup project. This will run after all dependent projects have run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":68,"to":89}}}}],["e9006fe1-a637-4fba-ad53-d6be2f1cbe33",{"pageContent":"### Teardown\n\nYou can teardown your setup by adding a [`property: TestProject.teardown`] property to your setup project. This will run after all dependent projects have run.\n\nFirst we add the [`property: TestProject.teardown`] property to our setup project with the name 'cleanup db' which is the name we gave to our teardown project in the previous step:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n      teardown: 'cleanup db',\n    },\n    {\n      name: 'cleanup db',\n      testMatch: /global\\.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```\n\nThen we create a `global.teardown.ts` file in the tests directory of your project. This will be used to delete the data from the database after all tests have run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":87,"to":118}}}}],["2c5e551f-4d19-41c0-b83c-2292e6f4144e",{"pageContent":"Then we create a `global.teardown.ts` file in the tests directory of your project. This will be used to delete the data from the database after all tests have run.\n\n```js title=\"tests/global.teardown.ts\"\nimport { test as teardown } from '@playwright/test';\n\nteardown('delete database', async ({ }) => {\n  console.log('deleting test database...');\n  // Delete the database\n});\n```\n\n### Test filtering\n\nAll test filtering options, such as `--grep`/`--grep-invert`, `--shard`, filtering directly by location in the command line, or using [`test.only()`](./api/class-test.md#test-only), directly select the primary tests to be run. If those tests belong to a project with dependencies, all tests from those dependencies will also run.\n\nYou can pass `--no-deps` command line option to ignore all dependencies and teardowns. Only your directly selected projects will run.\n\n### More examples","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":118,"to":135}}}}],["afe24828-7340-4af8-8a02-c312fbc6d8d4",{"pageContent":"You can pass `--no-deps` command line option to ignore all dependencies and teardowns. Only your directly selected projects will run.\n\n### More examples\n\nFor more detailed examples check out:\n- our [authentication](./auth.md) guide\n- our blog post [A better global setup in Playwright reusing login with project dependencies](https://dev.to/playwright/a-better-global-setup-in-playwright-reusing-login-with-project-dependencies-14)\n- [v1.31 release video](https://youtu.be/PI50YAPTAs4) to see the demo\n\n## Option 2: Configure globalSetup and globalTeardown\n\nYou can use the `globalSetup` option in the [configuration file](./test-configuration.md#advanced-configuration) to set something up once before running all tests. The global setup file must export a single function that takes a config object. This function will be run once before all the tests.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":133,"to":144}}}}],["5690f169-1f1b-4111-90d9-023752007d93",{"pageContent":"Similarly, use `globalTeardown` to run something once after all the tests. Alternatively, let `globalSetup` return a function that will be used as a global teardown. You can pass data such as port number, authentication tokens, etc. from your global setup to your tests using environment variables.\n\n:::note\nBeware that `globalSetup` and `globalTeardown` lack some features — see the [intro](#introduction) section for a detailed comparison. Consider using [project dependencies](#option-1-project-dependencies) instead to get full feature support.\n:::\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  globalTeardown: require.resolve('./global-teardown'),\n});\n```\n\n### Example\n\nHere is a global setup example that authenticates once and reuses authentication state in tests. It uses the `baseURL` and `storageState` options from the configuration file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":146,"to":163}}}}],["894831e3-e36a-4a35-98df-bbd22978dd80",{"pageContent":"### Example\n\nHere is a global setup example that authenticates once and reuses authentication state in tests. It uses the `baseURL` and `storageState` options from the configuration file.\n\n```js title=\"global-setup.ts\"\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto(baseURL!);\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  await page.context().storageState({ path: storageState as string });\n  await browser.close();\n}\n\nexport default globalSetup;\n```\n\nSpecify `globalSetup`, `baseURL` and `storageState` in the configuration file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":161,"to":183}}}}],["e3c9cdab-90e3-4cb1-a9a8-53a59e1bddab",{"pageContent":"export default globalSetup;\n```\n\nSpecify `globalSetup`, `baseURL` and `storageState` in the configuration file.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  use: {\n    baseURL: 'http://localhost:3000/',\n    storageState: 'state.json',\n  },\n});\n```\n\nTests start already authenticated because we specify `storageState` that was populated by global setup.\n\n```js\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('/');\n  // You are signed in!\n});\n```\n\nYou can make arbitrary data available in your tests from your global setup file by setting them as environment variables via `process.env`.\n\n```js title=\"global-setup.ts\"\nimport type { FullConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":180,"to":210}}}}],["6efac490-842c-4738-b56f-11a73f093ec7",{"pageContent":"```js title=\"global-setup.ts\"\nimport type { FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  process.env.FOO = 'some data';\n  // Or a more complicated data structure as JSON:\n  process.env.BAR = JSON.stringify({ some: 'data' });\n}\n\nexport default globalSetup;\n```\n\nTests have access to the `process.env` properties set in the global setup.\n\n```js\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // environment variables which are set in globalSetup are only available inside test().\n  const { FOO, BAR } = process.env;\n\n  // FOO and BAR properties are populated.\n  expect(FOO).toEqual('some data');\n\n  const complexData = JSON.parse(BAR);\n  expect(BAR).toEqual({ some: 'data' });\n});\n```\n\n### Capturing trace of failures during global setup","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":209,"to":238}}}}],["98cd1793-c860-4596-9b59-b41921ee5544",{"pageContent":"const complexData = JSON.parse(BAR);\n  expect(BAR).toEqual({ some: 'data' });\n});\n```\n\n### Capturing trace of failures during global setup\n\nIn some instances, it may be useful to capture a trace of failures encountered during the global setup. In order to do this, you must [start tracing](./api/class-tracing.md#tracing-start) in your setup, and you must ensure that you [stop tracing](./api/class-tracing.md#tracing-stop) if an error occurs before that error is thrown. This can be achieved by wrapping your setup in a `try...catch` block.  Here is an example that expands the global setup example to capture a trace.\n\n```js title=\"global-setup.ts\"\nimport { chromium, type FullConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":233,"to":243}}}}],["307c6b6f-cedd-48db-b7b0-dac687222695",{"pageContent":"```js title=\"global-setup.ts\"\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await context.tracing.start({ screenshots: true, snapshots: true });\n    await page.goto(baseURL!);\n    await page.getByLabel('User Name').fill('user');\n    await page.getByLabel('Password').fill('password');\n    await page.getByText('Sign in').click();\n    await context.storageState({ path: storageState as string });\n    await context.tracing.stop({\n      path: './test-results/setup-trace.zip',\n    });\n    await browser.close();\n  } catch (error) {\n    await context.tracing.stop({\n      path: './test-results/failed-setup-trace.zip',\n    });\n    await browser.close();\n    throw error;\n  }\n}\n\nexport default globalSetup;\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-global-setup-teardown-js.md","title":"src-test-global-setup-teardown-js","url":"https://playwright.dev/docs/src-test-global-setup-teardown-js","loc":{"lines":{"from":242,"to":271}}}}],["c5816d9b-b24a-4683-94ac-7e8bf479b99b",{"pageContent":"---\nid: test-parallel\ntitle: \"Parallelism\"\n---\n\n## Introduction\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\n- You can configure tests using [`test.describe.configure`](#parallelize-tests-in-a-single-file) to run **tests in a single file** in parallel.\n- You can configure **entire project** to have all tests in all files to run in parallel using [`property: TestProject.fullyParallel`] or [`property: TestConfig.fullyParallel`].\n- To **disable** parallelism limit the number of [workers to one](#disable-parallelism).\n\nYou can control the number of [parallel worker processes](#limit-workers) and [limit the number of failures](#limit-failures-and-fail-fast) in the whole test suite for efficiency.\n\n## Worker processes","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":1,"to":16}}}}],["4a8cd97b-bd7e-402b-aa00-44246abcfd8b",{"pageContent":"## Worker processes\n\nAll tests run in worker processes. These processes are OS processes, running independently, orchestrated by the test runner. All workers have identical environments and each starts its own browser.\n\nYou can't communicate between the workers. Playwright Test reuses a single worker as much as it can to make testing faster, so multiple test files are usually run in a single worker one after another.\n\nWorkers are always shutdown after a [test failure](./test-retries.md#failures) to guarantee pristine environment for following tests.\n\n## Limit workers\n\nYou can control the maximum number of parallel worker processes via [command line](./test-cli.md) or in the [configuration file](./test-configuration.md).\n\nFrom the command line:\n```bash\nnpx playwright test --workers 4\n```\n\nIn the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":16,"to":36}}}}],["95b61cf1-4be2-4ce8-a101-39d4b6402191",{"pageContent":"From the command line:\n```bash\nnpx playwright test --workers 4\n```\n\nIn the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of workers on CI, use default locally\n  workers: process.env.CI ? 2 : undefined,\n});\n```\n\n## Disable parallelism\n\nYou can disable any parallelism by allowing just a single worker at any time. Either set `workers: 1` option in the configuration file or pass `--workers=1` to the command line.\n\n```bash\nnpx playwright test --workers=1\n```\n\n## Parallelize tests in a single file\n\nBy default, tests in a single file are run in order. If you have many independent tests in a single file, you might want to run them in parallel with [`method: Test.describe.configure`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":28,"to":54}}}}],["47a41dc8-8685-4051-8918-c850efe16b83",{"pageContent":"By default, tests in a single file are run in order. If you have many independent tests in a single file, you might want to run them in parallel with [`method: Test.describe.configure`].\n\nNote that parallel tests are executed in separate worker processes and cannot share any state or global variables. Each test executes all relevant hooks just for itself, including `beforeAll` and `afterAll`.\n\n```js\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\nAlternatively, you can opt-in all tests into this fully-parallel mode in the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\nYou can also opt in for fully-parallel mode for just a few projects:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":54,"to":77}}}}],["c18b8771-0572-4720-a1b3-02eb26dc5310",{"pageContent":"export default defineConfig({\n  fullyParallel: true,\n});\n```\n\nYou can also opt in for fully-parallel mode for just a few projects:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // runs all tests in all files of a specific project in parallel\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      fullyParallel: true,\n    },\n  ]\n});\n```\n\n## Serial mode\n\nYou can annotate inter-dependent tests as serial. If one of the serial tests\nfails, all subsequent tests are skipped. All tests in a group are retried together.\n\n:::note\nUsing serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n:::\n\n```js\nimport { test, type Page } from '@playwright/test';\n\n// Annotate entire file as serial.\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":72,"to":113}}}}],["723f31a7-b20b-48cb-8364-7acc5866e6dd",{"pageContent":"// Annotate entire file as serial.\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n## Opt out of fully parallel mode\n\nIf your configuration applies parallel mode to all tests using [`property: TestConfig.fullyParallel`], you might still want to run some tests with default settings. You can override the mode per describe: \n```js\ntest.describe('runs in parallel with other describes', () => {\n  test.describe.configure({ mode: 'default' });\n  test('in order 1', async ({ page }) => {});\n  test('in order 2', async ({ page }) => {});\n});\n```\n\n## Shard tests between multiple machines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":106,"to":139}}}}],["b487ce20-1d62-4d4f-b86b-8a22984f2671",{"pageContent":"## Shard tests between multiple machines\n\nPlaywright Test can shard a test suite, so that it can be executed on multiple machines.\nSee [sharding guide](./test-sharding.md) for more details.\n\n```bash\nnpx playwright test --shard=2/3\n```\n\n## Limit failures and fail fast\n\nYou can limit the number of failed tests in the whole test suite by setting `maxFailures` config option or passing `--max-failures` command line flag.\n\nWhen running with \"max failures\" set, Playwright Test will stop after reaching this number of failed tests and skip any tests that were not executed yet. This is useful to avoid wasting resources on broken test suites.\n\nPassing command line option:\n```bash\nnpx playwright test --max-failures=10\n```\n\nSetting in the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of failures on CI to save resources\n  maxFailures: process.env.CI ? 10 : undefined,\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":139,"to":168}}}}],["032a3b2d-adb1-4577-a667-9838711bbf7d",{"pageContent":"export default defineConfig({\n  // Limit the number of failures on CI to save resources\n  maxFailures: process.env.CI ? 10 : undefined,\n});\n```\n\n## Worker index and parallel index\n\nEach worker process is assigned two ids: a unique worker index that starts with 1, and a parallel index that is between `0` and `workers - 1`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex` and a new `workerIndex`.\n\nYou can read an index from environment variables `process.env.TEST_WORKER_INDEX` and `process.env.TEST_PARALLEL_INDEX`, or access them through [`property: TestInfo.workerIndex`] and [`property: TestInfo.parallelIndex`].\n\n### Isolate test data between parallel workers\n\nYou can leverage `process.env.TEST_WORKER_INDEX` or [`property: TestInfo.workerIndex`] mentioned above to\nisolate user data in the database between tests running on different workers. All tests run by the worker\nreuse the same user.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":164,"to":180}}}}],["1c60103a-9142-401a-9dff-30229c7e09bb",{"pageContent":"Create `playwright/fixtures.ts` file that will [create `dbUserName` fixture](./test-fixtures#creating-a-fixture)\nand initialize a new user in the test database. Use [`property: TestInfo.workerIndex`] to differentiate\nbetween workers.\n\n```js title=\"playwright/fixtures.ts\"\nimport { test as baseTest, expect } from '@playwright/test';\n// Import project utils for managing users in the test database.\nimport { createUserInTestDatabase, deleteUserFromTestDatabase } from './my-db-utils';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":182,"to":189}}}}],["52e375d4-0357-4afe-a9c2-72f563ea1a5d",{"pageContent":"export * from '@playwright/test';\nexport const test = baseTest.extend<{}, { dbUserName: string }>({\n  // Returns db user name unique for the worker.\n  dbUserName: [async ({ }, use) => {\n    // Use workerIndex as a unique identifier for each worker.\n    const userName = `user-${test.info().workerIndex}`;\n    // Initialize user in the database.\n    await createUserInTestDatabase(userName);\n    await use(userName);\n    // Clean up after the tests are done.\n    await deleteUserFromTestDatabase(userName);\n  }, { scope: 'worker' }],\n});\n```\n\nNow, each test file should import `test` from our fixtures file instead of `@playwright/test`.\n\n```js title=\"tests/example.spec.ts\"\n// Important: import our fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\ntest('test', async ({ dbUserName }) => {\n  // Use the user name in the test.\n});\n```\n\n\n## Control test order","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":191,"to":218}}}}],["2035d81b-6e18-4676-adad-01893bc8b695",{"pageContent":"test('test', async ({ dbUserName }) => {\n  // Use the user name in the test.\n});\n```\n\n\n## Control test order\n\nPlaywright Test runs tests from a single file in the order of declaration, unless you [parallelize tests in a single file](#parallelize-tests-in-a-single-file).\n\nThere is no guarantee about the order of test execution across the files, because Playwright Test runs test files in parallel by default. However, if you [disable parallelism](#disable-parallelism), you can control test order by either naming your files in alphabetical order or using a \"test list\" file.\n\n### Sort test files alphabetically\n\nWhen you **disable parallel test execution**, Playwright Test runs test files in alphabetical order. You can use some naming convention to control the test order, for example `001-user-signin-flow.spec.ts`, `002-create-new-document.spec.ts` and so on.\n\n### Use a \"test list\" file","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":212,"to":228}}}}],["0f9fa5f9-056e-4a5b-9a57-4fd58934db91",{"pageContent":"### Use a \"test list\" file\n\n:::warning\nTests lists are discouraged and supported as a best-effort only. Some features such as VS Code Extension and tracing may not work properly with test lists.\n:::\n\nYou can put your tests in helper functions in multiple files. Consider the following example where tests are not defined directly in the file, but rather in a wrapper function.\n\n```js title=\"feature-a.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test('feature-a example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n\n```\n\n```js title=\"feature-b.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test.use({ viewport: { width: 500, height: 500 } });\n\n  test('feature-b example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":228,"to":257}}}}],["947dc75a-74e1-4039-b013-746b2209a122",{"pageContent":"export default function createTests() {\n  test.use({ viewport: { width: 500, height: 500 } });\n\n  test('feature-b example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n```\n\nYou can create a test list file that will control the order of tests - first run `feature-b` tests, then `feature-a` tests. Note how each test file is wrapped in a `test.describe()` block that calls the function where tests are defined. This way `test.use()` calls only affect tests from a single file.\n\n\n```js title=\"test.list.ts\"\nimport { test } from '@playwright/test';\nimport featureBTests from './feature-b.spec.ts';\nimport featureATests from './feature-a.spec.ts';\n\ntest.describe(featureBTests);\ntest.describe(featureATests);\n```\n\nNow **disable parallel execution** by setting workers to one, and specify your test list file.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 1,\n  testMatch: 'test.list.ts',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":250,"to":280}}}}],["a4378f23-d685-45ee-80a6-7c266734e21b",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 1,\n  testMatch: 'test.list.ts',\n});\n```\n\n:::note\nDo not define your tests directly in a helper file. This could lead to unexpected results because your\ntests are now dependent on the order of `import`/`require` statements. Instead, wrap tests in a function that will be explicitly called by a test list file, as in the example above.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parallel-js.md","title":"src-test-parallel-js","url":"https://playwright.dev/docs/src-test-parallel-js","loc":{"lines":{"from":273,"to":285}}}}],["fbeb9ac8-cf5f-4a32-9980-d81fb7bc8555",{"pageContent":"---\nid: test-parameterize\ntitle: \"Parameterize tests\"\n---\n## Introduction\n\nYou can either parameterize tests on a test level or on a project level.\n\n## Parameterized Tests\n\n```js title=\"example.spec.ts\"\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\n### Before and after hooks\n\nMost of the time you should put `beforeEach`, `beforeAll`, `afterEach` and `afterAll` hooks outside of `forEach`, so that hooks are executed just once:\n\n```js title=\"example.spec.ts\"\ntest.beforeEach(async ({ page }) => {\n  // ...\n});\n\ntest.afterEach(async ({ page }) => {\n  // ...\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":1,"to":36}}}}],["880ff080-66fc-4703-aa4f-069343fa69a7",{"pageContent":"```js title=\"example.spec.ts\"\ntest.beforeEach(async ({ page }) => {\n  // ...\n});\n\ntest.afterEach(async ({ page }) => {\n  // ...\n});\n\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\nIf you want to have hooks for each test, you can put them inside a `describe()` - so they are executed for each iteration / each individual test:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":29,"to":50}}}}],["3e4c60d7-2303-4490-9dd0-74cb81310f08",{"pageContent":"If you want to have hooks for each test, you can put them inside a `describe()` - so they are executed for each iteration / each individual test:\n\n```js title=\"example.spec.ts\"\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test.describe(() => {\n    test.beforeEach(async ({ page }) => {\n      await page.goto(`https://example.com/greet?name=${name}`);\n    });\n    test(`testing with ${expected}`, async ({ page }) => {\n      await expect(page.getByRole('heading')).toHaveText(expected);\n    });\n  });\n});\n```\n\n## Parameterized Projects\n\nPlaywright Test supports running multiple test projects at the same time. In the following example, we'll run two projects with different options.\n\nWe declare the option `person` and set the value in the config. The first project runs with the value `Alice` and the second with the value `Bob`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":50,"to":73}}}}],["a5c10816-aa71-4eed-8cae-de490d4a8cc6",{"pageContent":"We declare the option `person` and set the value in the config. The first project runs with the value `Alice` and the second with the value `Bob`.\n\n```js tab=js-js title=\"my-test.js\"\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\n```js tab=js-ts title=\"my-test.ts\"\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\nWe can use this option in the test, similarly to [fixtures](./test-fixtures.md).\n\n```js title=\"example.spec.ts\"\nimport { test } from './my-test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":73,"to":102}}}}],["8adc608b-858a-46ae-8ed4-8a620c783261",{"pageContent":"We can use this option in the test, similarly to [fixtures](./test-fixtures.md).\n\n```js title=\"example.spec.ts\"\nimport { test } from './my-test';\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n```\n\nNow, we can run tests in multiple configurations by using projects.\n\n```js tab=js-js title=\"playwright.config.ts\"\n// @ts-check\n\nmodule.exports = defineConfig({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\n```js tab=js-ts title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nimport type { TestOptions } from './my-test';\n\nexport default defineConfig<TestOptions>({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":99,"to":146}}}}],["3cbb471d-4d3b-4f74-8779-bd5fb15026af",{"pageContent":"export default defineConfig<TestOptions>({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\nWe can also use the option in a fixture. Learn more about [fixtures](./test-fixtures.md).\n\n```js tab=js-js title=\"my-test.js\"\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":134,"to":168}}}}],["32d01de2-5e59-4c14-94ee-fc9e944f22f8",{"pageContent":"```js tab=js-ts title=\"my-test.ts\"\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```\n\n:::note\nParameterized projects behavior has changed in version 1.18. [Learn more](./release-notes#breaking-change-custom-config-options).\n:::\n\n## Passing Environment Variables\n\nYou can use environment variables to configure tests from the command line.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":170,"to":200}}}}],["dc3805e3-d785-4201-b8cc-705b42561d03",{"pageContent":"## Passing Environment Variables\n\nYou can use environment variables to configure tests from the command line.\n\nFor example, consider the following test file that needs a username and a password. It is usually a good idea not to store your secrets in the source code, so we'll need a way to pass secrets from outside.\n\n```js title=\"example.spec.ts\"\ntest(`example test`, async ({ page }) => {\n  // ...\n  await page.getByLabel('User Name').fill(process.env.USER_NAME);\n  await page.getByLabel('Password').fill(process.env.PASSWORD);\n});\n```\n\nYou can run this test with your secret username and password set in the command line.\n\n```bash tab=bash-bash\nUSER_NAME=me PASSWORD=secret npx playwright test\n```\n\n```batch tab=bash-batch\nset USER_NAME=me\nset PASSWORD=secret\nnpx playwright test\n```\n\n```powershell tab=bash-powershell\n$env:USER_NAME=me\n$env:PASSWORD=secret\nnpx playwright test\n```\n\nSimilarly, configuration file can also read environment variables passed through the command line.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":198,"to":230}}}}],["1eefdece-ab54-4a88-827b-13e603c4aa7a",{"pageContent":"```powershell tab=bash-powershell\n$env:USER_NAME=me\n$env:PASSWORD=secret\nnpx playwright test\n```\n\nSimilarly, configuration file can also read environment variables passed through the command line.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\nNow, you can run tests against a staging or a production environment:\n\n```bash tab=bash-bash\nSTAGING=1 npx playwright test\n```\n\n```batch tab=bash-batch\nset STAGING=1\nnpx playwright test\n```\n\n```powershell tab=bash-powershell\n$env:STAGING=1\nnpx playwright test\n```\n\n### .env files\n\nTo make environment variables easier to manage, consider something like `.env` files. Here is an example that uses [`dotenv`](https://www.npmjs.com/package/dotenv) package to read environment variables directly in the configuration file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":224,"to":260}}}}],["6409a0db-49b2-4f22-a8c2-af85db074f10",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nimport dotenv from 'dotenv';\nimport path from 'path';\n\n// Read from \".env\" file.\ndotenv.config({ path: path.resolve(__dirname, '.env') });\n\n// Alternatively, read from \"../my.env\" file.\ndotenv.config({ path: path.resolve(__dirname, '..', 'my.env') });\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\nNow, you can just edit `.env` file to set any variables you'd like.\n\n```bash\n# .env file\nSTAGING=0\nUSER_NAME=me\nPASSWORD=secret\n```\n\nRun tests as usual, your environment variables should be picked up.\n\n```bash\nnpx playwright test\n```\n\n## Create tests via a CSV file\n\nThe Playwright test-runner runs in Node.js, this means you can directly read files from the file system and parse them with your preferred CSV library.\n\nSee for example this CSV file, in our example `input.csv`:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":262,"to":299}}}}],["cb9eedc7-0e10-4677-9e36-5dbb4f5e31f6",{"pageContent":"See for example this CSV file, in our example `input.csv`:\n\n```txt\n\"test_case\",\"some_value\",\"some_other_value\"\n\"value 1\",\"value 11\",\"foobar1\"\n\"value 2\",\"value 22\",\"foobar21\"\n\"value 3\",\"value 33\",\"foobar321\"\n\"value 4\",\"value 44\",\"foobar4321\"\n```\n\nBased on this we'll generate some tests by using the [csv-parse](https://www.npmjs.com/package/csv-parse) library from NPM:\n\n```js title=\"test.spec.ts\"\nimport fs from 'fs';\nimport path from 'path';\nimport { test } from '@playwright/test';\nimport { parse } from 'csv-parse/sync';\n\nconst records = parse(fs.readFileSync(path.join(__dirname, 'input.csv')), {\n  columns: true,\n  skip_empty_lines: true\n});\n\nfor (const record of records) {\n  test(`foo: ${record.test_case}`, async ({ page }) => {\n    console.log(record.test_case, record.some_value, record.some_other_value);\n  });\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-parameterize-js.md","title":"src-test-parameterize-js","url":"https://playwright.dev/docs/src-test-parameterize-js","loc":{"lines":{"from":299,"to":327}}}}],["00acb2dd-aeb5-4cfe-88f2-974c135c8fa9",{"pageContent":"---\nid: test-projects\ntitle: \"Projects\"\n---\n\n## Introduction\n\nA project is logical group of tests running with the same configuration. We use projects so we can run tests on different browsers and devices. Projects are configured in the `playwright.config.ts` file and once configured you can then run your tests on all projects or only on a specific project. You can also use projects to run the same tests in different configurations. For example, you can run the same tests in a logged-in and logged-out state.\n\nBy setting up projects you can also run a group of tests with different timeouts or retries or a group of tests against different environments such as staging and production, splitting tests per package/functionality and more.\n\n## Configure projects for multiple browsers","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":1,"to":12}}}}],["d629bb68-7462-4914-8270-41326a08d51f",{"pageContent":"## Configure projects for multiple browsers\n\nBy using **projects** you can run your tests in multiple browsers such as chromium, webkit and firefox as well as branded browsers such as Google Chrome and Microsoft Edge. Playwright can also run on emulated tablet and mobile devices. See the [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) for a complete list of selected desktop, tablet and mobile devices.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":12,"to":34}}}}],["fd4f7856-ae90-4f79-b1a9-c9e6b87cbf7d",{"pageContent":"{\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n\n    /* Test against branded browsers. */\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n    {\n      name: 'Google Chrome',\n      use: {\n        ...devices['Desktop Chrome'],\n        channel: 'chrome'\n      },\n    },\n  ],\n});\n```\n\n## Run projects\n\nPlaywright will run all projects by default.\n\n```bash\nnpx playwright test\n\nRunning 7 tests using 5 workers","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":26,"to":72}}}}],["79e1fd33-00e9-4303-9fa2-a7556fffa17d",{"pageContent":"## Run projects\n\nPlaywright will run all projects by default.\n\n```bash\nnpx playwright test\n\nRunning 7 tests using 5 workers\n\n  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)\n```\n\nUse the `--project` command line option to run a single project.\n\n```bash\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":65,"to":91}}}}],["398e11ad-f2c2-4b68-99dd-a60236670e0c",{"pageContent":"```bash\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```\n\nThe VS Code test runner runs your tests on the default browser of Chrome. To run on other/multiple browsers click the play button's dropdown from the testing sidebar and choose another profile or modify the default profile by clicking **Select Default Profile** and select the browsers you wish to run your tests on.\n\n<img width=\"1464\" alt=\"selecting browsers\" src=\"https://user-images.githubusercontent.com/13063165/221136731-9d4bc18f-38a4-4adb-997b-5b98c98aec7f.png\" />\n\nChoose a specific profile, various profiles or all profiles to run tests on.\n\n<img width=\"1536\" alt=\"choosing default profiles\" src=\"https://user-images.githubusercontent.com/13063165/221669537-e5df8672-f50d-4ff1-96f9-141cd67e12f8.png\" />\n\n\n## Configure projects for multiple environments","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":85,"to":102}}}}],["19b6b76d-4a16-4958-b3fa-7662a5b34033",{"pageContent":"## Configure projects for multiple environments\n\nBy setting up projects we can also run a group of tests with different timeouts or retries or run a group of tests against different environments. For example we can run our tests against a staging environment with 2 retries as well as against a production environment with 0 retries.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'staging',\n      use: {\n        baseURL: 'staging.example.com',\n      },\n      retries: 2,\n    },\n    {\n      name: 'production',\n      use: {\n        baseURL: 'production.example.com',\n      },\n      retries: 0,\n    },\n  ],\n});\n```\n\n## Splitting tests into projects","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":102,"to":130}}}}],["6cc942bf-72ff-4f72-a1c3-94cb2701388a",{"pageContent":"## Splitting tests into projects\n\nWe can split tests into projects and use filters to run a subset of tests. For example, we can create a project that runs tests using a filter matching all tests with a specific file name. We can then have another group of tests that ignore specific test files.\n\nHere is an example that defines a common timeout and two projects. The \"Smoke\" project runs a small subset of tests without retries, and \"Default\" project runs all other tests with retries.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'Smoke',\n      testMatch: /.*smoke.spec.ts/,\n      retries: 0,\n    },\n    {\n      name: 'Default',\n      testIgnore: /.*smoke.spec.ts/,\n      retries: 2,\n    },\n  ],\n});\n```\n\n## Dependencies","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":130,"to":156}}}}],["80e6d92d-981d-4723-af58-aff469fe1a96",{"pageContent":"## Dependencies\n\nDependencies are a list of projects that need to run before the tests in another project run. They can be useful for configuring the global setup actions so that one project depends on this running first. When using project dependencies, [test reporters](./test-reporters.md) will show the setup tests and the [trace viewer](/trace-viewer.md) will record traces of the setup. You can use the inspector to inspect the DOM snapshot of the trace of your setup tests and you can also use [fixtures](./test-fixtures.md) inside your setup.\n\nIn this example the chromium, firefox and webkit projects depend on the setup project.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":156,"to":163}}}}],["8621bb8f-2f64-4345-b143-ae8ab5b63a85",{"pageContent":"In this example the chromium, firefox and webkit projects depend on the setup project.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: '**/*.setup.ts',\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n### Running Sequence\n\nWhen working with tests that have a dependency, the dependency will always run first and once all tests from this project have passed, then the other projects will run in parallel.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":160,"to":192}}}}],["5bae59a2-7bf4-4d37-b1e8-a0452b548e5f",{"pageContent":"When working with tests that have a dependency, the dependency will always run first and once all tests from this project have passed, then the other projects will run in parallel.\n\nRunning order:\n1. Tests in the 'setup' project run. Once all tests from this project have passed, then the tests from the dependent projects will start running.\n\n2. Tests in the 'chromium', 'webkit' and 'firefox' projects run together. By default, these projects will [run in parallel](./test-parallel.md), subject to the maximum workers limit.\n\n<img width=\"70%\" style={{display: 'flex', margin: 'auto'}} alt=\"chromium, webkit and firefox projects depend on setup project\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/225937080-327b1e63-431f-40e0-90d7-35f21d7a92cb.jpg\" />\n\nIf there are more than one dependency then these project dependencies will be run first and in parallel. If the tests from a dependency fails then the tests that rely on this project will not be run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":192,"to":201}}}}],["8d32adde-e89e-486e-8e17-c31c6824e5f7",{"pageContent":"Running order:\n1. Tests in the 'Browser Login' and 'DataBase' projects run in parallel:\n  - 'Browser Login' passes\n  - ❌ 'DataBase' fails!\n\n1. The 'e2e tests' project is not run!\n\n<img width=\"70%\" style={{display: 'flex', margin: 'auto'}} alt=\"Browser login project is blue, database is red and e2e tests relies on both\" loading=\"lazy\" src=\"https://user-images.githubusercontent.com/13063165/225938262-33c1b78f-f092-4762-a478-7f8cbc1e3b21.jpg\" />\n\n### Teardown\n\nYou can also teardown your setup by adding a [`property: TestProject.teardown`] property to your setup project. Teardown will run after all dependent projects have run. See the [teardown guide](./test-global-setup-teardown.md#teardown) for more information.\n\n\n<img style={{display: 'flex', margin: 'auto'}} alt=\"global setup and teardown\" loading=\"lazy\" src=\"https://github.com/microsoft/playwright/assets/13063165/dfcf10a9-f601-4d0c-bd8d-9490e6efbf7a\" />\n\n### Test filtering","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":203,"to":219}}}}],["b07cbf98-a30d-43a4-b4ad-c3c42fd17207",{"pageContent":"### Test filtering\n\nAll test filtering options, such as `--grep`/`--grep-invert`, `--shard`, filtering directly by location in the command line, or using [`test.only()`](./api/class-test.md#test-only), directly select the primary tests to be run. If those tests belong to a project with dependencies, all tests from those dependencies will also run.\n\nYou can pass `--no-deps` command line option to ignore all dependencies and teardowns. Only your directly selected projects will run.\n\n## Custom project parameters\n\nProjects can be also used to parametrize tests with your custom configuration - take a look at [this separate guide](./test-parameterize.md#parameterized-projects).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-projects-js.md","title":"src-test-projects-js","url":"https://playwright.dev/docs/src-test-projects-js","loc":{"lines":{"from":219,"to":227}}}}],["93baf2c0-c52c-45c3-abbf-c774ca2563cb",{"pageContent":"# class: Reporter\n* since: v1.10\n* langs: js\n\nTest runner notifies the reporter about various events during test execution. All methods of the reporter are optional.\n\nYou can create a custom reporter by implementing a class with some of the reporter methods. Make sure to export this class as default.\n\n```js tab=js-js title=\"my-awesome-reporter.js\"\n// @ts-check\n\n/** @implements {import('@playwright/test/reporter').Reporter} */\nclass MyReporter {\n  constructor(options) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config, suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test, result) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nmodule.exports = MyReporter;\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":1,"to":36}}}}],["42673f4b-6fb5-4de2-bbab-6c51746725e3",{"pageContent":"onEnd(result) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nmodule.exports = MyReporter;\n```\n\n```js tab=js-ts title=\"my-awesome-reporter.ts\"\nimport type {\n  Reporter, FullConfig, Suite, TestCase, TestResult, FullResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  constructor(options: { customOption?: string } = {}) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\nexport default MyReporter;\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":30,"to":65}}}}],["c26e4d54-8621-4f1b-ad48-2d1c63e83931",{"pageContent":"onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\nexport default MyReporter;\n```\n\nNow use this reporter with [`property: TestConfig.reporter`]. Learn more about [using reporters](../test-reporters.md).\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['./my-awesome-reporter.ts', { customOption: 'some value' }]],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":60,"to":75}}}}],["66746d64-0ef1-438f-b7ef-a29f7d03a254",{"pageContent":"Here is a typical order of reporter calls:\n* [`method: Reporter.onBegin`] is called once with a root suite that contains all other suites and tests. Learn more about [suites hierarchy][Suite].\n* [`method: Reporter.onTestBegin`] is called for each test run. It is given a [TestCase] that is executed, and a [TestResult] that is almost empty. Test result will be populated while the test runs (for example, with steps and stdio) and will get final `status` once the test finishes.\n* [`method: Reporter.onStepBegin`] and [`method: Reporter.onStepEnd`] are called for each executed step inside the test. When steps are executed, test run has not finished yet.\n* [`method: Reporter.onTestEnd`] is called when test run has finished. By this time, [TestResult] is complete and you can use [`property: TestResult.status`], [`property: TestResult.error`] and more.\n* [`method: Reporter.onEnd`] is called once after all tests that should run had finished.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":77,"to":82}}}}],["727ab950-6925-40dd-99b8-bb6b3368a454",{"pageContent":"* [`method: Reporter.onEnd`] is called once after all tests that should run had finished.\n* [`method: Reporter.onExit`] is called immediately before the test runner exits.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":82,"to":83}}}}],["da14923b-4754-4018-a779-54b626a5b669",{"pageContent":"Additionally, [`method: Reporter.onStdOut`] and [`method: Reporter.onStdErr`] are called when standard output is produced in the worker process, possibly during a test execution,\nand [`method: Reporter.onError`] is called when something went wrong outside of the test execution.\n\nIf your custom reporter does not print anything to the terminal, implement [`method: Reporter.printsToStdio`] and return `false`. This way, Playwright will use one of the standard terminal reporters in addition to your custom reporter to enhance user experience.\n\n**Merged report API notes**\n\nWhen merging multiple [`blob`](../test-reporters#blob-reporter) reports via [`merge-reports`](../test-sharding#merge-reports-cli) CLI\ncommand, the same [Reporter] API is called to produce final reports and all existing reporters\nshould work without any changes. There some subtle differences though which might affect some custom\nreporters.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":85,"to":95}}}}],["728412e1-d841-43fc-85e4-293ab8cdcda9",{"pageContent":"* Projects from different shards are always kept as separate [TestProject] objects. E.g. if project 'Desktop Chrome' was sharded across 5 machines then there will be 5 instances of projects with the same name in the config passed to [`method: Reporter.onBegin`].\n\n## optional method: Reporter.onBegin\n* since: v1.10\n\nCalled once before running tests. All tests have been already discovered and put into a hierarchy of [Suite]s.\n\n### param: Reporter.onBegin.config\n* since: v1.10\n- `config` <[FullConfig]>\n\nResolved configuration.\n\n### param: Reporter.onBegin.suite\n* since: v1.10\n- `suite` <[Suite]>\n\nThe root suite that contains all projects, files and test cases.\n\n## optional async method: Reporter.onEnd\n* since: v1.10\n- `result` ?<[Object]>\n  - `status` ?<[FullStatus]<\"passed\"|\"failed\"|\"timedout\"|\"interrupted\">>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":97,"to":119}}}}],["07907991-3903-4609-8982-34fb147d44c2",{"pageContent":"## optional async method: Reporter.onEnd\n* since: v1.10\n- `result` ?<[Object]>\n  - `status` ?<[FullStatus]<\"passed\"|\"failed\"|\"timedout\"|\"interrupted\">>\n\nCalled after all tests have been run, or testing has been interrupted. Note that this method may return a [Promise] and Playwright Test will await it.\nReporter is allowed to override the status and hence affect the exit code of the test runner.\n\n### param: Reporter.onEnd.result\n* since: v1.10\n- `result` <[Object]>\n  - `status` <[FullStatus]<\"passed\"|\"failed\"|\"timedout\"|\"interrupted\">> Test run status.\n  - `startTime` <[Date]> Test run start wall time.\n  - `duration` <[int]> Test run duration in milliseconds.\n\nResult of the full test run, `status` can be one of:\n* `'passed'` - Everything went as expected.\n* `'failed'` - Any test has failed.\n* `'timedout'` - The [`property: TestConfig.globalTimeout`] has been reached.\n* `'interrupted'` - Interrupted by the user.\n\n## optional method: Reporter.onError\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":116,"to":138}}}}],["9079afd4-5e76-428c-90d0-79d7593d5650",{"pageContent":"## optional method: Reporter.onError\n* since: v1.10\n\nCalled on some global error, for example unhandled exception in the worker process.\n\n### param: Reporter.onError.error\n* since: v1.10\n- `error` <[TestError]>\n\nThe error.\n\n## optional async method: Reporter.onExit\n* since: v1.33\n\nCalled immediately before test runner exists. At this point all the reporters\nhave received the [`method: Reporter.onEnd`] signal, so all the reports should\nbe build. You can run the code that uploads the reports in this hook.\n\n## optional method: Reporter.onStdErr\n* since: v1.10\n\nCalled when something has been written to the standard error in the worker process.\n\n### param: Reporter.onStdErr.chunk\n* since: v1.10\n- `chunk` <[string]|[Buffer]>\n\nOutput chunk.\n\n### param: Reporter.onStdErr.test\n* since: v1.10\n- `test` <[void]|[TestCase]>\n\nTest that was running. Note that output may happen when no test is running, in which case this will be [void].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":137,"to":170}}}}],["3bf63704-8798-46b3-b833-d3e9d9ce2a3a",{"pageContent":"### param: Reporter.onStdErr.test\n* since: v1.10\n- `test` <[void]|[TestCase]>\n\nTest that was running. Note that output may happen when no test is running, in which case this will be [void].\n\n### param: Reporter.onStdErr.result\n* since: v1.10\n- `result` <[void]|[TestResult]>\n\nResult of the test run, this object gets populated while the test runs.\n\n\n## optional method: Reporter.onStdOut\n* since: v1.10\n\nCalled when something has been written to the standard output in the worker process.\n\n### param: Reporter.onStdOut.chunk\n* since: v1.10\n- `chunk` <[string]|[Buffer]>\n\nOutput chunk.\n\n### param: Reporter.onStdOut.test\n* since: v1.10\n- `test` <[void]|[TestCase]>\n\nTest that was running. Note that output may happen when no test is running, in which case this will be [void].\n\n### param: Reporter.onStdOut.result\n* since: v1.10\n- `result` <[void]|[TestResult]>\n\nResult of the test run, this object gets populated while the test runs.\n\n## optional method: Reporter.onStepBegin\n* since: v1.10","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":166,"to":203}}}}],["a8751233-75a5-467d-bd02-b071e8c9522b",{"pageContent":"Result of the test run, this object gets populated while the test runs.\n\n## optional method: Reporter.onStepBegin\n* since: v1.10\n\nCalled when a test step started in the worker process.\n\n### param: Reporter.onStepBegin.test\n* since: v1.10\n- `test` <[TestCase]>\n\nTest that the step belongs to.\n\n### param: Reporter.onStepBegin.result\n* since: v1.10\n- `result` <[TestResult]>\n\nResult of the test run, this object gets populated while the test runs.\n\n### param: Reporter.onStepBegin.step\n* since: v1.10\n- `step` <[TestStep]>\n\nTest step instance that has started.\n\n## optional method: Reporter.onStepEnd\n* since: v1.10\n\nCalled when a test step finished in the worker process.\n\n### param: Reporter.onStepEnd.test\n* since: v1.10\n- `test` <[TestCase]>\n\nTest that the step belongs to.\n\n### param: Reporter.onStepEnd.result\n* since: v1.10\n- `result` <[TestResult]>\n\nResult of the test run.\n\n### param: Reporter.onStepEnd.step\n* since: v1.10\n- `step` <[TestStep]>\n\nTest step instance that has finished.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":200,"to":246}}}}],["39ca2ff3-901c-4cc8-93f4-b1ee21112791",{"pageContent":"Result of the test run.\n\n### param: Reporter.onStepEnd.step\n* since: v1.10\n- `step` <[TestStep]>\n\nTest step instance that has finished.\n\n## optional method: Reporter.onTestBegin\n* since: v1.10\n\nCalled after a test has been started in the worker process.\n\n### param: Reporter.onTestBegin.test\n* since: v1.10\n- `test` <[TestCase]>\n\nTest that has been started.\n\n### param: Reporter.onTestBegin.result\n* since: v1.10\n- `result` <[TestResult]>\n\nResult of the test run, this object gets populated while the test runs.\n\n\n## optional method: Reporter.onTestEnd\n* since: v1.10\n\nCalled after a test has been finished in the worker process.\n\n### param: Reporter.onTestEnd.test\n* since: v1.10\n- `test` <[TestCase]>\n\nTest that has been finished.\n\n### param: Reporter.onTestEnd.result\n* since: v1.10\n- `result` <[TestResult]>\n\nResult of the test run.\n\n\n## optional method: Reporter.printsToStdio\n* since: v1.10\n- returns: <[boolean]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":240,"to":286}}}}],["1d74e90c-fc5b-42bf-91a3-a87abcd33441",{"pageContent":"### param: Reporter.onTestEnd.result\n* since: v1.10\n- `result` <[TestResult]>\n\nResult of the test run.\n\n\n## optional method: Reporter.printsToStdio\n* since: v1.10\n- returns: <[boolean]>\n\nWhether this reporter uses stdio for reporting. When it does not, Playwright Test could add some output to enhance user experience. If your reporter does not print to the terminal, it is strongly recommended to return `false`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-reporter.md","title":"src-test-reporter-api-class-reporter","url":"https://playwright.dev/docs/src-test-reporter-api-class-reporter","loc":{"lines":{"from":277,"to":288}}}}],["00241f58-130b-42ab-b012-73f9555bcf74",{"pageContent":"# class: Suite\n* since: v1.10\n* langs: js\n\n`Suite` is a group of tests. All tests in Playwright Test form the following hierarchy:\n\n* Root suite has a child suite for each [FullProject].\n  * Project suite #1. Has a child suite for each test file in the project.\n    * File suite #1\n      * [TestCase] #1\n      * [TestCase] #2\n      * Suite corresponding to a [`method: Test.describe`] group\n        * [TestCase] #1 in a group\n        * [TestCase] #2 in a group\n      * < more test cases ... >\n    * File suite #2\n    * < more file suites ... >\n  * Project suite #2\n  * < more project suites ... >\n\nReporter is given a root suite in the [`method: Reporter.onBegin`] method.\n\n## method: Suite.allTests\n* since: v1.10\n- returns: <[Array]<[TestCase]>>\n\nReturns the list of all test cases in this suite and its descendants, as opposite to [`property: Suite.tests`].\n\n## method: Suite.entries\n* since: v1.44\n- type: <[Array]<[TestCase]|[Suite]>>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-suite.md","title":"src-test-reporter-api-class-suite","url":"https://playwright.dev/docs/src-test-reporter-api-class-suite","loc":{"lines":{"from":1,"to":31}}}}],["3c4f37da-a690-4785-80ee-3a8fd85a0bea",{"pageContent":"Returns the list of all test cases in this suite and its descendants, as opposite to [`property: Suite.tests`].\n\n## method: Suite.entries\n* since: v1.44\n- type: <[Array]<[TestCase]|[Suite]>>\n\nTest cases and suites defined directly in this suite. The elements are returned in their declaration order. You can differentiate between various entry types by using [`property: TestCase.type`] and [`property: Suite.type`].\n\n## property: Suite.location\n* since: v1.10\n- type: ?<[Location]>\n\nLocation in the source where the suite is defined. Missing for root and project suites.\n\n## property: Suite.parent\n* since: v1.10\n- type: ?<[Suite]>\n\nParent suite, missing for the root suite.\n\n## method: Suite.project\n* since: v1.10\n- returns: <[FullProject]|[undefined]>\n\nConfiguration of the project this suite belongs to, or [void] for the root suite.\n\n## property: Suite.suites\n* since: v1.10\n- type: <[Array]<[Suite]>>\n\nChild suites. See [Suite] for the hierarchy of suites.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-suite.md","title":"src-test-reporter-api-class-suite","url":"https://playwright.dev/docs/src-test-reporter-api-class-suite","loc":{"lines":{"from":27,"to":57}}}}],["40de3bb6-26fb-4697-b6ef-90b3acb03bc0",{"pageContent":"## property: Suite.suites\n* since: v1.10\n- type: <[Array]<[Suite]>>\n\nChild suites. See [Suite] for the hierarchy of suites.\n\n## property: Suite.tests\n* since: v1.10\n- type: <[Array]<[TestCase]>>\n\nTest cases in the suite. Note that only test cases defined directly in this suite are in the list. Any test cases defined in nested [`method: Test.describe`] groups are listed\nin the child [`property: Suite.suites`].\n\n## property: Suite.title\n* since: v1.10\n- type: <[string]>\n\nSuite title.\n* Empty for root suite.\n* Project name for project suite.\n* File path for file suite.\n* Title passed to [`method: Test.describe`] for a group suite.\n\n## method: Suite.titlePath\n* since: v1.10\n- returns: <[Array]<[string]>>\n\nReturns a list of titles from the root down to this suite.\n\n## property: Suite.type\n* since: v1.44\n- returns: <[SuiteType]<\"root\"|\"project\"|\"file\"|\"describe\">>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-suite.md","title":"src-test-reporter-api-class-suite","url":"https://playwright.dev/docs/src-test-reporter-api-class-suite","loc":{"lines":{"from":53,"to":84}}}}],["d94c2080-6ac6-4a23-8744-958f00a34f29",{"pageContent":"Returns a list of titles from the root down to this suite.\n\n## property: Suite.type\n* since: v1.44\n- returns: <[SuiteType]<\"root\"|\"project\"|\"file\"|\"describe\">>\n\nReturns the type of the suite. The Suites form the following hierarchy:\n`root` -> `project` -> `file` -> `describe` -> ...`describe` -> `test`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-suite.md","title":"src-test-reporter-api-class-suite","url":"https://playwright.dev/docs/src-test-reporter-api-class-suite","loc":{"lines":{"from":80,"to":87}}}}],["552b8951-dec0-45e5-85ee-bbba95920ddd",{"pageContent":"# class: TestCase\n* since: v1.10\n* langs: js\n\n`TestCase` corresponds to every [`method: Test.(call)`] call in a test file. When a single [`method: Test.(call)`] is running in multiple projects or repeated multiple times, it will have multiple `TestCase` objects in corresponding projects' suites.\n\n## property: TestCase.annotations\n* since: v1.10\n- type: <[Array]<[Object]>>\n  - `type` <[string]> Annotation type, for example `'skip'` or `'fail'`.\n  - `description` ?<[string]> Optional description.\n\n[`property: TestResult.annotations`] of the last test run.\n\n## property: TestCase.expectedStatus\n* since: v1.10\n- type: <[TestStatus]<\"passed\"|\"failed\"|\"timedOut\"|\"skipped\"|\"interrupted\">>\n\nExpected test status.\n* Tests marked as [`method: Test.skip`] or [`method: Test.fixme`] are expected to be `'skipped'`.\n* Tests marked as [`method: Test.fail`] are expected to be `'failed'`.\n* Other tests are expected to be `'passed'`.\n\nSee also [`property: TestResult.status`] for the actual status.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testcase.md","title":"src-test-reporter-api-class-testcase","url":"https://playwright.dev/docs/src-test-reporter-api-class-testcase","loc":{"lines":{"from":1,"to":24}}}}],["286ef22e-c088-4360-bcb1-66a733ae9103",{"pageContent":"See also [`property: TestResult.status`] for the actual status.\n\n## property: TestCase.id\n* since: v1.25\n- type: <[string]>\n\nA test ID that is computed based on the test file name, test title and project name. The ID is unique within Playwright session.\n\n## property: TestCase.location\n* since: v1.10\n- type: <[Location]>\n\nLocation in the source where the test is defined.\n\n## method: TestCase.ok\n* since: v1.10\n- returns: <[boolean]>\n\nWhether the test is considered running fine. Non-ok tests fail the test run with non-zero exit code.\n\n## method: TestCase.outcome\n* since: v1.10\n- returns: <[TestOutcome]<\"skipped\"|\"expected\"|\"unexpected\"|\"flaky\">>\n\nTesting outcome for this test. Note that outcome is not the same as [`property: TestResult.status`]:\n* Test that is expected to fail and actually fails is `'expected'`.\n* Test that passes on a second retry is `'flaky'`.\n\n## property: TestCase.parent\n* since: v1.10\n- type: <[Suite]>\n\nSuite this test case belongs to.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testcase.md","title":"src-test-reporter-api-class-testcase","url":"https://playwright.dev/docs/src-test-reporter-api-class-testcase","loc":{"lines":{"from":24,"to":56}}}}],["ad1b4a09-fa3e-4ffb-88e3-de34e5a9dcb8",{"pageContent":"## property: TestCase.parent\n* since: v1.10\n- type: <[Suite]>\n\nSuite this test case belongs to.\n\n## property: TestCase.repeatEachIndex\n* since: v1.10\n- type: <[int]>\n\nContains the repeat index when running in \"repeat each\" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli.md).\n\n## property: TestCase.results\n* since: v1.10\n- type: <[Array]<[TestResult]>>\n\nResults for each run of this test.\n\n## property: TestCase.retries\n* since: v1.10\n- type: <[int]>\n\nThe maximum number of retries given to this test in the configuration.\n\nLearn more about [test retries](../test-retries.md#retries).\n\n## property: TestCase.tags\n* since: v1.42\n- type: <[Array]<[string]>>\n\nThe list of tags defined on the test or suite via [`method: Test.(call)`] or [`method: Test.describe`], as well as `@`-tokens extracted from test and suite titles.\n\nLearn more about [test tags](../test-annotations.md#tag-tests).\n\n## property: TestCase.timeout\n* since: v1.10\n- type: <[float]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testcase.md","title":"src-test-reporter-api-class-testcase","url":"https://playwright.dev/docs/src-test-reporter-api-class-testcase","loc":{"lines":{"from":52,"to":88}}}}],["8144bb17-837f-4313-bf26-46abceb4dbf5",{"pageContent":"Learn more about [test tags](../test-annotations.md#tag-tests).\n\n## property: TestCase.timeout\n* since: v1.10\n- type: <[float]>\n\nThe timeout given to the test. Affected by [`property: TestConfig.timeout`], [`property: TestProject.timeout`], [`method: Test.setTimeout`], [`method: Test.slow`] and [`method: TestInfo.setTimeout`].\n\n## property: TestCase.title\n* since: v1.10\n- type: <[string]>\n\nTest title as passed to the [`method: Test.(call)`] call.\n\n## method: TestCase.titlePath\n* since: v1.10\n- returns: <[Array]<[string]>>\n\nReturns a list of titles from the root down to this test.\n\n## property: TestCase.type\n* since: v1.44\n- returns: <[TestCaseType]<\"test\">>\n\nReturns \"test\". Useful for detecting test cases in [`method: Suite.entries`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testcase.md","title":"src-test-reporter-api-class-testcase","url":"https://playwright.dev/docs/src-test-reporter-api-class-testcase","loc":{"lines":{"from":84,"to":108}}}}],["131e6ae8-957c-49cf-879f-99c629ff8a5e",{"pageContent":"# class: TestError\n* since: v1.10\n* langs: js\n\nInformation about an error thrown during test execution.\n\n## property: TestError.cause\n* since: v1.49\n- type: ?<[TestError]>\n\nError cause. Set when there is a [cause](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause) for the error. Will be `undefined` if there is no cause or if the cause is not an instance of [Error].\n\n## property: TestError.message\n* since: v1.10\n- type: ?<[string]>\n\nError message. Set when [Error] (or its subclass) has been thrown.\n\n## property: TestError.stack\n* since: v1.10\n- type: ?<[string]>\n\nError stack. Set when [Error] (or its subclass) has been thrown.\n\n## property: TestError.value\n* since: v1.10\n- type: ?<[string]>\n\nThe value that was thrown. Set when anything except the [Error] (or its subclass) has been thrown.\n\n## property: TestError.location\n* since: v1.30\n- type: ?<[Location]>\n\nError location in the source code.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testerror.md","title":"src-test-reporter-api-class-testerror","url":"https://playwright.dev/docs/src-test-reporter-api-class-testerror","loc":{"lines":{"from":1,"to":35}}}}],["7f5a0f65-847f-4434-b921-6a4bc0c0946c",{"pageContent":"## property: TestError.location\n* since: v1.30\n- type: ?<[Location]>\n\nError location in the source code.\n\n## property: TestError.snippet\n* since: v1.33\n- type: ?<[string]>\n\nSource code snippet with highlighted error.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testerror.md","title":"src-test-reporter-api-class-testerror","url":"https://playwright.dev/docs/src-test-reporter-api-class-testerror","loc":{"lines":{"from":31,"to":41}}}}],["987200ae-bdd5-43a7-b88d-aa2e7efae426",{"pageContent":"# class: TestResult\n* since: v1.10\n* langs: js\n\nA result of a single [TestCase] run.\n\n## property: TestResult.attachments\n* since: v1.10\n- type: <[Array]<[Object]>>\n  - `name` <[string]> Attachment name.\n  - `contentType` <[string]> Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.\n  - `path` ?<[string]> Optional path on the filesystem to the attached file.\n  - `body` ?<[Buffer]> Optional attachment body used instead of a file.\n\nThe list of files or buffers attached during the test execution through [`property: TestInfo.attachments`].\n\n## property: TestResult.annotations\n* since: v1.52\n- type: <[Array]<[Object]>>\n  - `type` <[string]> Annotation type, for example `'skip'` or `'fail'`.\n  - `description` ?<[string]> Optional description.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testresult.md","title":"src-test-reporter-api-class-testresult","url":"https://playwright.dev/docs/src-test-reporter-api-class-testresult","loc":{"lines":{"from":1,"to":21}}}}],["52180b2b-766b-4c4b-939d-aa5fe325ca3d",{"pageContent":"The list of annotations applicable to the current test. Includes:\n* annotations defined on the test or suite via [`method: Test.(call)`] and [`method: Test.describe`];\n* annotations implicitly added by methods [`method: Test.skip`], [`method: Test.fixme`] and [`method: Test.fail`];\n* annotations appended to [`property: TestInfo.annotations`] during the test execution.\n\nAnnotations are available during test execution through [`property: TestInfo.annotations`].\n\nLearn more about [test annotations](../test-annotations.md).\n\n## property: TestResult.duration\n* since: v1.10\n- type: <[float]>\n\nRunning time in milliseconds.\n\n## property: TestResult.error\n* since: v1.10\n- type: ?<[TestError]>\n\nFirst error thrown during test execution, if any. This is equal to the first\nelement in [`property: TestResult.errors`].\n\n## property: TestResult.errors\n* since: v1.10\n- type: <[Array]<[TestError]>>\n\nErrors thrown during the test execution.\n\n## property: TestResult.retry\n* since: v1.10\n- type: <[int]>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testresult.md","title":"src-test-reporter-api-class-testresult","url":"https://playwright.dev/docs/src-test-reporter-api-class-testresult","loc":{"lines":{"from":23,"to":53}}}}],["9e1d1e08-66f9-4340-b16f-5a88fba0c695",{"pageContent":"## property: TestResult.errors\n* since: v1.10\n- type: <[Array]<[TestError]>>\n\nErrors thrown during the test execution.\n\n## property: TestResult.retry\n* since: v1.10\n- type: <[int]>\n\nWhen test is retries multiple times, each retry attempt is given a sequential number.\n\nLearn more about [test retries](../test-retries.md#retries).\n\n## property: TestResult.startTime\n* since: v1.10\n- type: <[Date]>\n\nStart time of this particular test run.\n\n## property: TestResult.status\n* since: v1.10\n- type: <[TestStatus]<\"passed\"|\"failed\"|\"timedOut\"|\"skipped\"|\"interrupted\">>\n\nThe status of this test result. See also [`property: TestCase.expectedStatus`].\n\n## property: TestResult.stderr\n* since: v1.10\n- type: <[Array]<[string]|[Buffer]>>\n\nAnything written to the standard error during the test run.\n\n## property: TestResult.stdout\n* since: v1.10\n- type: <[Array]<[string]|[Buffer]>>\n\nAnything written to the standard output during the test run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testresult.md","title":"src-test-reporter-api-class-testresult","url":"https://playwright.dev/docs/src-test-reporter-api-class-testresult","loc":{"lines":{"from":45,"to":81}}}}],["f274c859-5b11-4439-95d1-534a29830db4",{"pageContent":"## property: TestResult.stdout\n* since: v1.10\n- type: <[Array]<[string]|[Buffer]>>\n\nAnything written to the standard output during the test run.\n\n## property: TestResult.steps\n* since: v1.10\n- type: <[Array]<[TestStep]>>\n\nList of steps inside this test run.\n\n## property: TestResult.workerIndex\n* since: v1.10\n- type: <[int]>\n\nIndex of the worker where the test was run. If the test was not run a single time, for example when the user interrupted testing, the only result will have a `workerIndex` equal to `-1`.\n\nLearn more about [parallelism and sharding](../test-parallel.md) with Playwright Test.\n\n## property: TestResult.parallelIndex\n* since: v1.30\n- type: <[int]>\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-testresult.md","title":"src-test-reporter-api-class-testresult","url":"https://playwright.dev/docs/src-test-reporter-api-class-testresult","loc":{"lines":{"from":77,"to":101}}}}],["9ad8e96d-d9e1-4790-8141-ea64152a1577",{"pageContent":"# class: TestStep\n* since: v1.10\n* langs: js\n\nRepresents a step in the [TestRun].\n\n## property: TestStep.category\n* since: v1.10\n- type: <[string]>\n\nStep category to differentiate steps with different origin and verbosity. Built-in categories are:\n* `hook` for fixtures and hooks initialization and teardown\n* `expect` for expect calls\n* `pw:api` for Playwright API calls.\n* `test.step` for test.step API calls.\n\n## property: TestStep.duration\n* since: v1.10\n- type: <[float]>\n\nRunning time in milliseconds.\n\n## property: TestStep.location\n* since: v1.10\n- type: ?<[Location]>\n\nOptional location in the source where the step is defined.\n\n## property: TestStep.error\n* since: v1.10\n- type: ?<[TestError]>\n\nError thrown during the step execution, if any.\n\n## property: TestStep.parent\n* since: v1.10\n- type: ?<[TestStep]>\n\nParent step, if any.\n\n## property: TestStep.startTime\n* since: v1.10\n- type: <[Date]>\n\nStart time of this particular test step.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-teststep.md","title":"src-test-reporter-api-class-teststep","url":"https://playwright.dev/docs/src-test-reporter-api-class-teststep","loc":{"lines":{"from":1,"to":45}}}}],["c2357e84-5175-49bc-9631-a64c43665c45",{"pageContent":"## property: TestStep.parent\n* since: v1.10\n- type: ?<[TestStep]>\n\nParent step, if any.\n\n## property: TestStep.startTime\n* since: v1.10\n- type: <[Date]>\n\nStart time of this particular test step.\n\n## property: TestStep.steps\n* since: v1.10\n- type: <[Array]<[TestStep]>>\n\nList of steps inside this step.\n\n## property: TestStep.annotations\n* since: v1.51\n- type: <[Array]<[Object]>>\n  - `type` <[string]> Annotation type, for example `'skip'`.\n  - `description` ?<[string]> Optional description.\n\nThe list of annotations applicable to the current test step.\n\n## property: TestStep.attachments\n* since: v1.50\n- type: <[Array]<[Object]>>\n  - `name` <[string]> Attachment name.\n  - `contentType` <[string]> Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.\n  - `path` ?<[string]> Optional path on the filesystem to the attached file.\n  - `body` ?<[Buffer]> Optional attachment body used instead of a file.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-teststep.md","title":"src-test-reporter-api-class-teststep","url":"https://playwright.dev/docs/src-test-reporter-api-class-teststep","loc":{"lines":{"from":35,"to":67}}}}],["6d9b978d-1875-4050-be36-30c463e9f991",{"pageContent":"The list of files or buffers attached in the step execution through [`method: TestInfo.attach`].\n\n## property: TestStep.title\n* since: v1.10\n- type: <[string]>\n\nUser-friendly test step title.\n\n## method: TestStep.titlePath\n* since: v1.10\n- returns: <[Array]<[string]>>\n\nReturns a list of step titles from the root step down to this step.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporter-api-class-teststep.md","title":"src-test-reporter-api-class-teststep","url":"https://playwright.dev/docs/src-test-reporter-api-class-teststep","loc":{"lines":{"from":69,"to":81}}}}],["780f1c56-6ff1-49f6-9d1b-749a155fe571",{"pageContent":"---\nid: test-reporters\ntitle: \"Reporters\"\n---\n\n## Introduction\n\nPlaywright Test comes with a few built-in reporters for different needs and ability to provide custom reporters. The easiest way to try out built-in reporters is to pass `--reporter` [command line option](./test-cli.md).\n\n\n```bash\nnpx playwright test --reporter=line\n```\n\nFor more control, you can specify reporters programmatically in the [configuration file](./test-configuration.md).\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n### Multiple reporters\n\nYou can use multiple reporters at the same time. For example  you can use `'list'` for nice terminal output and `'json'` to get a comprehensive json file with the test results.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":1,"to":30}}}}],["3f573252-48cb-4422-a2d9-43b9dcfa2a7b",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [\n    ['list'],\n    ['json', {  outputFile: 'test-results.json' }]\n  ],\n});\n```\n\n### Reporters on CI\n\nYou can use different reporters locally and on CI. For example, using concise `'dot'` reporter avoids too much output. This is the default on CI.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Concise 'dot' for CI, default 'list' when running locally\n  reporter: process.env.CI ? 'dot' : 'list',\n});\n```\n\n## Built-in reporters\n\nAll built-in reporters show detailed information about failures, and mostly differ in verbosity for successful runs.\n\n### List reporter\n\nList reporter is default (except on CI where the `dot` reporter is default). It prints a line for each test being run.\n\n```bash\nnpx playwright test --reporter=list\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":29,"to":63}}}}],["96233c5d-c005-4ee6-92c2-dd680d99639c",{"pageContent":"### List reporter\n\nList reporter is default (except on CI where the `dot` reporter is default). It prints a line for each test being run.\n\n```bash\nnpx playwright test --reporter=list\n```\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'list',\n});\n```\n\nHere is an example output in the middle of a test run. Failures will be listed at the end.\n```bash\nnpx playwright test --reporter=list\nRunning 124 tests using 6 workers\n\n 1  ✓ should access error in env (438ms)\n 2  ✓ handle long test names (515ms)\n 3  x 1) render expected (691ms)\n 4  ✓ should timeout (932ms)\n 5    should repeat each:\n 6  ✓ should respect enclosing .gitignore (569ms)\n 7    should teardown env after timeout:\n 8    should respect excluded tests:\n 9  ✓ should handle env beforeEach error (638ms)\n10    should respect enclosing .gitignore:\n```\n\nYou can opt into the step rendering via passing the following config option:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":57,"to":90}}}}],["d2a0f3eb-e646-4ea2-967e-a86857707105",{"pageContent":"You can opt into the step rendering via passing the following config option:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['list', { printSteps: true }]],\n});\n```\n\nList report supports the following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_LIST_PRINT_STEPS` | `printSteps` | Whether to print each step on its own line. | `false`\n| `PLAYWRIGHT_FORCE_TTY` | | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width.  | `true` when terminal is in TTY mode, `false` otherwise.\n| `FORCE_COLOR` | | Whether to produce colored output. | `true` when terminal is in TTY mode, `false` otherwise.\n\n\n### Line reporter","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":90,"to":109}}}}],["2859e370-a629-4485-a865-48b4e27c1bcf",{"pageContent":"### Line reporter\n\nLine reporter is more concise than the list reporter. It uses a single line to report last finished test, and prints failures when they occur. Line reporter is useful for large test suites where it shows the progress but does not spam the output by listing all the tests.\n\n```bash\nnpx playwright test --reporter=line\n```\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\nHere is an example output in the middle of a test run. Failures are reported inline.\n```bash\nnpx playwright test --reporter=line\nRunning 124 tests using 6 workers\n  1) dot-reporter.spec.ts:20:1 › render expected ===================================================\n\n    Error: expect(received).toBe(expected) // Object.is equality\n\n    Expected: 1\n    Received: 0\n\n[23/124] gitignore.spec.ts - should respect nested .gitignore\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":109,"to":137}}}}],["f5492fbc-eb83-4f71-ae01-496b4511d348",{"pageContent":"Error: expect(received).toBe(expected) // Object.is equality\n\n    Expected: 1\n    Received: 0\n\n[23/124] gitignore.spec.ts - should respect nested .gitignore\n```\n\nLine report supports the following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_FORCE_TTY` | | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width.  | `true` when terminal is in TTY mode, `false` otherwise.\n| `FORCE_COLOR` | | Whether to produce colored output. | `true` when terminal is in TTY mode, `false` otherwise.\n\n\n### Dot reporter\n\nDot reporter is very concise - it only produces a single character per successful test run. It is the default on CI and useful where you don't want a lot of output.\n\n```bash\nnpx playwright test --reporter=dot\n```\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":131,"to":156}}}}],["680d133c-fe96-4dde-8267-1da886944489",{"pageContent":"```bash\nnpx playwright test --reporter=dot\n```\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'dot',\n});\n```\n\nHere is an example output in the middle of a test run. Failures will be listed at the end.\n```bash\nnpx playwright test --reporter=dot\nRunning 124 tests using 6 workers\n······F·············································\n```\n\nOne character is displayed for each test that has run, indicating its status:\n\n| Character | Description\n|---|---|\n| `·` | Passed\n| `F` | Failed\n| `×` | Failed or timed out - and will be retried\n| `±` | Passed on retry (flaky)\n| `T` | Timed out\n| `°` | Skipped\n\nDot report supports the following configuration options and environment variables:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":151,"to":181}}}}],["210f6d56-3790-47e5-b9e1-d3d11878eebd",{"pageContent":"Dot report supports the following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_FORCE_TTY` | | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width.  | `true` when terminal is in TTY mode, `false` otherwise.\n| `FORCE_COLOR` | | Whether to produce colored output. | `true` when terminal is in TTY mode, `false` otherwise.\n\n### HTML reporter\n\nHTML reporter produces a self-contained folder that contains report for the test run that can be served as a web page.\n\n```bash\nnpx playwright test --reporter=html\n```\n\nBy default, HTML report is opened automatically if some of the tests failed. You can control this behavior via the\n`open` property in the Playwright config or the `PLAYWRIGHT_HTML_OPEN` environmental variable. The possible values for that property are `always`, `never` and `on-failure`\n(default).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":181,"to":198}}}}],["eb028a96-02b2-4c27-9d56-7b3ea889f6a3",{"pageContent":"You can also configure `host` and `port` that are used to serve the HTML report.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { open: 'never' }]],\n});\n```\n\nBy default, report is written into the `playwright-report` folder in the current working directory. One can override\nthat location using the `PLAYWRIGHT_HTML_OUTPUT_DIR` environment variable or a reporter configuration.\n\nIn configuration file, pass options directly:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { outputFolder: 'my-report' }]],\n});\n```\n\nIf you are uploading attachments from data folder to other location, you can use `attachmentsBaseURL` option to let html report where to look for them.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":200,"to":226}}}}],["f268c3e8-1051-4dd8-866c-307fabd96cff",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { attachmentsBaseURL: 'https://external-storage.com/' }]],\n});\n```\n\nA quick way of opening the last test run report is:\n\n```bash\nnpx playwright show-report\n```\n\nOr if there is a custom folder name:\n\n```bash\nnpx playwright show-report my-report\n```\n\nHTML report supports the following configuration options and environment variables:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":225,"to":245}}}}],["44b0e975-d746-4fc9-b079-c04f3cdf20c9",{"pageContent":"| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_HTML_TITLE` | `title` | A title to display in the generated report. | No title is displayed by default\n| `PLAYWRIGHT_HTML_OUTPUT_DIR` | `outputFolder` | Directory to save the report to. | `playwright-report`\n| `PLAYWRIGHT_HTML_OPEN` | `open` | When to open the html report in the browser, one of `'always'`, `'never'` or `'on-failure'` | `'on-failure'`\n| `PLAYWRIGHT_HTML_HOST` | `host` | When report opens in the browser, it will be served bound to this hostname. | `localhost`\n| `PLAYWRIGHT_HTML_PORT` | `port` | When report opens in the browser, it will be served on this port. | `9323` or any available port when `9323` is not available.\n| `PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL` | `attachmentsBaseURL` | A separate location where attachments from the `data` subdirectory are uploaded. Only needed when you upload report and `data` separately to different locations. | `data/`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":247,"to":254}}}}],["5380a6da-b237-4974-965f-83390f067ec3",{"pageContent":"### Blob reporter\n\nBlob reports contain all the details about the test run and can be used later to produce any other report. Their primary function is to facilitate the merging of reports from [sharded tests](./test-sharding.md).\n\n```bash\nnpx playwright test --reporter=blob\n```\n\nBy default, the report is written into the `blob-report` directory in the package.json directory or current working directory (if no package.json is found). The report file name looks like `report-<hash>.zip` or `report-<hash>-<shard_number>.zip` when [sharding](./test-sharding.md) is used. The hash is an optional value computed from `--grep`, `--grepInverted`, `--project` and file filters passed as command line arguments. The hash guarantees that running Playwright with different command line options will produce different but stable between runs report names. The output file name can be overridden in the configuration file or pass as `'PLAYWRIGHT_BLOB_OUTPUT_FILE'` environment variable.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":256,"to":264}}}}],["b4b74550-4412-49ea-8cfd-9e2f8a7638d9",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['blob', { outputFile: `./blob-report/report-${os.platform()}.zip` }]],\n});\n```\n\nBlob report supports following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_BLOB_OUTPUT_DIR` | `outputDir` | Directory to save the output. Existing content is deleted before writing the new report. | `blob-report`\n| `PLAYWRIGHT_BLOB_OUTPUT_NAME` | `fileName` | Report file name. | `report-<project>-<hash>-<shard_number>.zip`\n| `PLAYWRIGHT_BLOB_OUTPUT_FILE` | `outputFile` | Full path to the output file. If defined, `outputDir` and `fileName` will be ignored. | `undefined`\n\n### JSON reporter\n\nJSON reporter produces an object with all information about the test run.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":266,"to":284}}}}],["bc512cd2-3ae2-4301-9f61-3948653f157d",{"pageContent":"### JSON reporter\n\nJSON reporter produces an object with all information about the test run.\n\nMost likely you want to write the JSON to a file. When running with `--reporter=json`, use `PLAYWRIGHT_JSON_OUTPUT_NAME` environment variable:\n\n```bash tab=bash-bash\nPLAYWRIGHT_JSON_OUTPUT_NAME=results.json npx playwright test --reporter=json\n```\n\n```batch tab=bash-batch\nset PLAYWRIGHT_JSON_OUTPUT_NAME=results.json\nnpx playwright test --reporter=json\n```\n\n```powershell tab=bash-powershell\n$env:PLAYWRIGHT_JSON_OUTPUT_NAME=\"results.json\"\nnpx playwright test --reporter=json\n```\n\nIn configuration file, pass options directly:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['json', { outputFile: 'results.json' }]],\n});\n```\n\nJSON report supports following configuration options and environment variables:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":282,"to":312}}}}],["a5421c82-711d-4fce-8dad-4f0ef92108c0",{"pageContent":"export default defineConfig({\n  reporter: [['json', { outputFile: 'results.json' }]],\n});\n```\n\nJSON report supports following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_JSON_OUTPUT_DIR` | | Directory to save the output file. Ignored if output file is specified. | `cwd` or config directory.\n| `PLAYWRIGHT_JSON_OUTPUT_NAME` | `outputFile` | Base file name for the output, relative to the output dir. | JSON report is printed to the stdout.\n| `PLAYWRIGHT_JSON_OUTPUT_FILE` | `outputFile` | Full path to the output file. If defined, `PLAYWRIGHT_JSON_OUTPUT_DIR` and `PLAYWRIGHT_JSON_OUTPUT_NAME` will be ignored. | JSON report is printed to the stdout.\n\n### JUnit reporter\n\nJUnit reporter produces a JUnit-style xml report.\n\nMost likely you want to write the report to an xml file. When running with `--reporter=junit`, use `PLAYWRIGHT_JUNIT_OUTPUT_NAME` environment variable:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":307,"to":324}}}}],["d6e17164-753d-4375-8a3d-8270fa877017",{"pageContent":"Most likely you want to write the report to an xml file. When running with `--reporter=junit`, use `PLAYWRIGHT_JUNIT_OUTPUT_NAME` environment variable:\n\n```bash tab=bash-bash\nPLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml npx playwright test --reporter=junit\n```\n\n```batch tab=bash-batch\nset PLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml\nnpx playwright test --reporter=junit\n```\n\n```powershell tab=bash-powershell\n$env:PLAYWRIGHT_JUNIT_OUTPUT_NAME=\"results.xml\"\nnpx playwright test --reporter=junit\n```\n\nIn configuration file, pass options directly:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['junit', { outputFile: 'results.xml' }]],\n});\n```\n\nJUnit report supports following configuration options and environment variables:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":324,"to":350}}}}],["1ab7e70b-89b4-465f-b1c8-fe93f80456b0",{"pageContent":"| Environment Variable Name | Reporter Config Option| Description | Default\n|---|---|---|---|\n| `PLAYWRIGHT_JUNIT_OUTPUT_DIR` | | Directory to save the output file. Ignored if output file is not specified. | `cwd` or config directory.\n| `PLAYWRIGHT_JUNIT_OUTPUT_NAME` | `outputFile` | Base file name for the output, relative to the output dir. | JUnit report is printed to the stdout.\n| `PLAYWRIGHT_JUNIT_OUTPUT_FILE` | `outputFile` | Full path to the output file. If defined, `PLAYWRIGHT_JUNIT_OUTPUT_DIR` and `PLAYWRIGHT_JUNIT_OUTPUT_NAME` will be ignored. | JUnit report is printed to the stdout.\n| `PLAYWRIGHT_JUNIT_STRIP_ANSI` | `stripANSIControlSequences` | Whether to remove ANSI control sequences from the text before writing it in the report. | By default output text is added as is.\n| `PLAYWRIGHT_JUNIT_INCLUDE_PROJECT_IN_TEST_NAME` | `includeProjectInTestName` | Whether to include Playwright project name in every test case as a name prefix. | By default not included.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":352,"to":358}}}}],["f13e4512-7e43-449a-944e-76addf5b60ea",{"pageContent":"| `PLAYWRIGHT_JUNIT_INCLUDE_PROJECT_IN_TEST_NAME` | `includeProjectInTestName` | Whether to include Playwright project name in every test case as a name prefix. | By default not included.\n| `PLAYWRIGHT_JUNIT_SUITE_ID` |  | Value of the `id` attribute on the root `<testsuites/>` report entry. | Empty string.\n| `PLAYWRIGHT_JUNIT_SUITE_NAME` |  | Value of the `name` attribute on the root `<testsuites/>` report entry. | Empty string.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":358,"to":360}}}}],["83489b78-d538-4dee-a4ff-33128a010ba0",{"pageContent":"### GitHub Actions annotations\n\nYou can use the built in `github` reporter to get automatic failure annotations when running in GitHub actions.\n\nNote that all other reporters work on GitHub Actions as well, but do not provide annotations. Also, it is not recommended to\nuse this annotation type if running your tests with a matrix strategy as the stack trace failures will multiply and obscure the\nGitHub file view.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // 'github' for GitHub Actions CI to generate annotations, plus a concise 'dot'\n  // default 'list' when running locally\n  reporter: process.env.CI ? 'github' : 'list',\n});\n```\n\n## Custom reporters\n\nYou can create a custom reporter by implementing a class with some of the reporter methods. Learn more about the [Reporter] API.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":362,"to":382}}}}],["e99cc406-343d-42f3-bca2-37c986331d4b",{"pageContent":"## Custom reporters\n\nYou can create a custom reporter by implementing a class with some of the reporter methods. Learn more about the [Reporter] API.\n\n```js title=\"my-awesome-reporter.ts\"\nimport type {\n  FullConfig, FullResult, Reporter, Suite, TestCase, TestResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nexport default MyReporter;\n```\n\nNow use this reporter with [`property: TestConfig.reporter`].\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":380,"to":413}}}}],["f1b635cf-054b-417c-858a-655b796bdebc",{"pageContent":"export default MyReporter;\n```\n\nNow use this reporter with [`property: TestConfig.reporter`].\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: './my-awesome-reporter.ts',\n});\n```\n\nOr just pass the reporter file path as `--reporter` command line option:\n\n```bash\nnpx playwright test --reporter=\"./myreporter/my-awesome-reporter.ts\"\n```\n\nHere's a short list of open source reporter implementations that you can take a look at when writing your own reporter:\n\n* [Allure Reporter](https://github.com/allure-framework/allure-js/tree/main/packages/allure-playwright)\n* [Github Actions Reporter](https://github.com/estruyf/playwright-github-actions-reporter)\n* [Mail Reporter](https://github.com/estruyf/playwright-mail-reporter)\n* [ReportPortal](https://github.com/reportportal/agent-js-playwright)\n* [Monocart](https://github.com/cenfun/monocart-reporter)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-reporters-js.md","title":"src-test-reporters-js","url":"https://playwright.dev/docs/src-test-reporters-js","loc":{"lines":{"from":407,"to":432}}}}],["187a9fca-00e2-4b68-84c8-2874fc1d281b",{"pageContent":"---\nid: test-retries\ntitle: \"Retries\"\n---\n\n## Introduction\n\nTest retries are a way to automatically re-run a test when it fails. This is useful when a test is flaky and fails intermittently. Test retries are configured in the [configuration file](./test-configuration.md).\n\n## Failures\n\nPlaywright Test runs tests in worker processes. These processes are OS processes, running independently, orchestrated by the test runner. All workers have identical environments and each starts its own browser.\n\nConsider the following snippet:\n\n```js\nimport { test } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test.beforeAll(async () => { /* ... */ });\n  test('first good', async ({ page }) => { /* ... */ });\n  test('second flaky', async ({ page }) => { /* ... */ });\n  test('third good', async ({ page }) => { /* ... */ });\n  test.afterAll(async () => { /* ... */ });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":1,"to":26}}}}],["cfa26371-68b7-4d3f-a187-26fc6b85e8d7",{"pageContent":"When **all tests pass**, they will run in order in the same worker process.\n* Worker process starts\n  * `beforeAll` hook runs\n  * `first good` passes\n  * `second flaky` passes\n  * `third good` passes\n  * `afterAll` hook runs\n\nShould **any test fail**, Playwright Test will discard the entire worker process along with the browser and will start a new one. Testing will continue in the new worker process starting with the next test.\n* Worker process #1 starts\n  * `beforeAll` hook runs\n  * `first good` passes\n  * `second flaky` fails\n  * `afterAll` hook runs\n* Worker process #2 starts\n  * `beforeAll` hook runs again\n  * `third good` passes\n  * `afterAll` hook runs","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":28,"to":45}}}}],["d89e30f1-0289-4d9e-ad23-d972dc5d3b30",{"pageContent":"If you **enable [retries](#retries)**, second worker process will start by retrying the failed test and continue from there.\n* Worker process #1 starts\n  * `beforeAll` hook runs\n  * `first good` passes\n  * `second flaky` fails\n  * `afterAll` hook runs\n* Worker process #2 starts\n  * `beforeAll` hook runs again\n  * `second flaky` is retried and passes\n  * `third good` passes\n  * `afterAll` hook runs\n\nThis scheme works perfectly for independent tests and guarantees that failing tests can't affect healthy ones.\n\n## Retries\n\nPlaywright supports **test retries**. When enabled, failing tests will be retried multiple times until they pass, or until the maximum number of retries is reached. By default failing tests are not retried.\n\n```bash\n# Give failing tests 3 retry attempts\nnpx playwright test --retries=3\n```\n\nYou can configure retries in the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":47,"to":73}}}}],["946b60fd-d70c-4a89-a78b-1ead777e6cd6",{"pageContent":"You can configure retries in the configuration file:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Give failing tests 3 retry attempts\n  retries: 3,\n});\n```\n\nPlaywright Test will categorize tests as follows:\n- \"passed\" - tests that passed on the first run;\n- \"flaky\" - tests that failed on the first run, but passed when retried;\n- \"failed\" - tests that failed on the first run and failed all retries.\n\n```bash\nRunning 3 tests using 1 worker\n\n  ✓ example.spec.ts:4:2 › first passes (438ms)\n  x example.spec.ts:5:2 › second flaky (691ms)\n  ✓ example.spec.ts:5:2 › second flaky (522ms)\n  ✓ example.spec.ts:6:2 › third passes (932ms)\n\n  1 flaky\n    example.spec.ts:5:2 › second flaky\n  2 passed (4s)\n```\n\nYou can detect retries at runtime with [`property: TestInfo.retry`], which is accessible to any test, hook or fixture. Here is an example that clears some server-side state before a retry.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":70,"to":99}}}}],["0eb4080b-9b55-4a02-b9fa-7441105b7b58",{"pageContent":"You can detect retries at runtime with [`property: TestInfo.retry`], which is accessible to any test, hook or fixture. Here is an example that clears some server-side state before a retry.\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }, testInfo) => {\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\nYou can specify retries for a specific group of tests or a single file with [`method: Test.describe.configure`].\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe(() => {\n  // All tests in this describe group will get 2 retry attempts.\n  test.describe.configure({ retries: 2 });\n\n  test('test 1', async ({ page }) => {\n    // ...\n  });\n\n  test('test 2', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Serial mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":99,"to":130}}}}],["4db73f91-e841-49cb-8e7b-9414d3dbd499",{"pageContent":"test('test 1', async ({ page }) => {\n    // ...\n  });\n\n  test('test 2', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Serial mode\n\nUse [`method: Test.describe.serial`] to group dependent tests to ensure they will always run together and in order. If one of the tests fails, all subsequent tests are skipped. All tests in the group are retried together.\n\nConsider the following snippet that uses `test.describe.serial`:\n\n```js\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\ntest.beforeAll(async () => { /* ... */ });\ntest('first good', async ({ page }) => { /* ... */ });\ntest('second flaky', async ({ page }) => { /* ... */ });\ntest('third good', async ({ page }) => { /* ... */ });\n```\n\nWhen running without [retries](#retries), all tests after the failure are skipped:\n* Worker process #1:\n  * `beforeAll` hook runs\n  * `first good` passes\n  * `second flaky` fails\n  * `third good` is skipped entirely","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":120,"to":152}}}}],["b7cf8e26-a86b-4de7-b74e-99b461910d78",{"pageContent":"When running with [retries](#retries), all tests are retried together:\n* Worker process #1:\n  * `beforeAll` hook runs\n  * `first good` passes\n  * `second flaky` fails\n  * `third good` is skipped\n* Worker process #2:\n  * `beforeAll` hook runs again\n  * `first good` passes again\n  * `second flaky` passes\n  * `third good` passes\n\n:::note\nIt is usually better to make your tests isolated, so they can be efficiently run and retried independently.\n:::\n\n## Reuse single page between tests\n\nPlaywright Test creates an isolated [Page] object for each test. However, if you'd like to reuse a single [Page] object between multiple tests, you can create your own in [`method: Test.beforeAll`] and close it in [`method: Test.afterAll`].\n\n```js tab=js-js title=\"example.spec.js\"\n// @ts-check\n\nconst { test } = require('@playwright/test');\n\ntest.describe.configure({ mode: 'serial' });\n\n/** @type {import('@playwright/test').Page} */\nlet page;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":154,"to":182}}}}],["99a5a360-1686-4204-9245-fb71083c01bf",{"pageContent":"const { test } = require('@playwright/test');\n\ntest.describe.configure({ mode: 'serial' });\n\n/** @type {import('@playwright/test').Page} */\nlet page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n```js tab=js-ts title=\"example.spec.ts\"\nimport { test, type Page } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-retries-js.md","title":"src-test-retries-js","url":"https://playwright.dev/docs/src-test-retries-js","loc":{"lines":{"from":177,"to":223}}}}],["7112d828-ced0-435d-bfc1-14b79116b2e7",{"pageContent":"---\nid: test-runners\ntitle: \"Test Runners\"\n---\n\n## Introduction\n\nWhile Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience the easiest way of getting started is by using the base classes we provide for MSTest, NUnit, or xUnit. These classes support running tests on multiple browser engines, adjusting launch/context options and getting a [Page]/[BrowserContext] instance per test out of the box. \n\nPlaywright and Browser instances will be reused between tests for better performance. We\nrecommend running each test case in a new BrowserContext, this way browser state will be\nisolated between the tests.\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":1,"to":23}}}}],["853c0d40-8aa3-4007-ae74-4dc1e870f2e9",{"pageContent":"Playwright provides base classes to write tests with NUnit via the [`Microsoft.Playwright.NUnit`](https://www.nuget.org/packages/Microsoft.Playwright.NUnit) package.\n\n</TabItem>\n<TabItem value=\"mstest\">\n\nPlaywright provides base classes to write tests with MSTest via the [`Microsoft.Playwright.MSTest`](https://www.nuget.org/packages/Microsoft.Playwright.MSTest) package.\n\n</TabItem>\n<TabItem value=\"xunit\">\n\nPlaywright provides base classes to write tests with xUnit via the [`Microsoft.Playwright.Xunit`](https://www.nuget.org/packages/Microsoft.Playwright.Xunit) package.\n\n</TabItem>\n</Tabs>\n\nCheck out the [installation guide](./intro.md) to get started.\n\n## Running tests in Parallel\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":25,"to":53}}}}],["0fc70018-cfca-4923-acde-f40f1d6ea700",{"pageContent":"By default NUnit will run all test files in parallel, while running tests inside each file sequentially (`ParallelScope.Self`). It will create as many processes as there are cores on the host system. You can adjust this behavior using the NUnit.NumberOfTestWorkers parameter.\nOnly `ParallelScope.Self` is supported.\n\nFor CPU-bound tests, we recommend using as many workers as there are cores on your system, divided by 2. For IO-bound tests you can use as many workers as you have cores.\n\n```bash\ndotnet test -- NUnit.NumberOfTestWorkers=5\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\nBy default MSTest will run all classes in parallel, while running tests inside each class sequentially (`ExecutionScope.ClassLevel`). It will create as many processes as there are cores on the host system. You can adjust this behavior by using the following CLI parameter or using a `.runsettings` file, see below.\nRunning tests in parallel at the method level (`ExecutionScope.MethodLevel`) is not supported.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":55,"to":68}}}}],["3c400348-7b8a-4235-9c8f-0dc5cfa89c73",{"pageContent":"```bash\ndotnet test --settings:.runsettings -- MSTest.Parallelize.Workers=4\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\nBy default xUnit will run all classes in parallel, while running tests inside each class sequentially.\nIt will create by default as many processes as there are cores on the system. You can adjust this behavior by using the following CLI parameter or using a `.runsettings` file, see below.\n\n```bash\ndotnet test -- xUnit.MaxParallelThreads=5\n```\n\n:::note\nWe recommend xUnit 2.8+ which uses the [`conservative` parallelism algorithm](https://xunit.net/docs/running-tests-in-parallel.html#algorithms) by default.\n:::\n\n</TabItem>\n</Tabs>\n\n\n## Customizing [BrowserContext] options\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":70,"to":103}}}}],["cfb65f54-14ec-4275-a605-8ec109bc3b53",{"pageContent":"To customize context options, you can override the `ContextOptions` method of your test class derived from `Microsoft.Playwright.MSTest.PageTest` or `Microsoft.Playwright.MSTest.ContextTest`. See the following example:\n\n```csharp\nusing Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class MyTest : PageTest\n{\n    [Test]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":105,"to":137}}}}],["37a3611e-2fc8-4fb4-9eb6-8f8c81e63e5e",{"pageContent":"</TabItem>\n<TabItem value=\"mstest\">\n\nTo customize context options, you can override the `ContextOptions` method of your test class derived from `Microsoft.Playwright.MSTest.PageTest` or `Microsoft.Playwright.MSTest.ContextTest`. See the following example:\n\n```csharp\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":139,"to":160}}}}],["fb701753-65ed-4caf-ab51-2cb920c69bc3",{"pageContent":"public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n}\n\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\nTo customize context options, you can override the `ContextOptions` method of your test class derived from `Microsoft.Playwright.Xunit.PageTest` or `Microsoft.Playwright.Xunit.ContextTest`. See the following example:\n\n```csharp\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":162,"to":188}}}}],["7cdafb04-e3a0-469d-9a87-0ecdb92fb7a7",{"pageContent":"```csharp\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1 : PageTest\n{\n    [Fact]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n}\n```\n\n</TabItem>\n</Tabs>\n\n\n## Customizing [Browser]/launch options\n\n[Browser]/launch options can be overridden either using a run settings file or by setting the run settings options directly via the\nCLI. See the following example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":184,"to":221}}}}],["530c610e-8d42-4521-ae2b-c5fc24b803ee",{"pageContent":"[Browser]/launch options can be overridden either using a run settings file or by setting the run settings options directly via the\nCLI. See the following example:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n```bash\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge\n```\n\n## Using Verbose API Logs\n\nWhen you have enabled the [verbose API log](./debug.md#verbose-api-logs), via the `DEBUG` environment variable, you will see the messages in the standard error stream. Within Visual Studio, that will be the `Tests` pane of the `Output` window. It will also be displayed in the `Test Log` for each test.\n\n## Using the .runsettings file","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":220,"to":244}}}}],["9e9773e6-9ace-4a43-b5a2-288e98c78e81",{"pageContent":"## Using the .runsettings file\n\nWhen running tests from Visual Studio, you can take advantage of the `.runsettings` file. The following shows a reference of the supported values.\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\nFor example, to specify the number of workers you can use `NUnit.NumberOfTestWorkers` or to enable `DEBUG` logs `RunConfiguration.EnvironmentVariables`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":244,"to":259}}}}],["0b9287e1-df37-4452-89ea-bad053f3f6bb",{"pageContent":"For example, to specify the number of workers you can use `NUnit.NumberOfTestWorkers` or to enable `DEBUG` logs `RunConfiguration.EnvironmentVariables`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <!-- NUnit adapter -->  \n  <NUnit>\n    <NumberOfTestWorkers>24</NumberOfTestWorkers>\n  </NUnit>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n</TabItem>\n<TabItem value=\"mstest\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":259,"to":288}}}}],["5b607bee-e1f9-4fd5-8336-7d5cc0672a4c",{"pageContent":"</TabItem>\n<TabItem value=\"mstest\">\n\nFor example, to specify the number of workers, you can use `MSTest.Parallelize.Workers`. You can also enable `DEBUG` logs using `RunConfiguration.EnvironmentVariables`.\n\n```xml\n<RunSettings>\n  <!-- MSTest adapter -->  \n  <MSTest>\n    <Parallelize>\n      <Workers>4</Workers>\n      <Scope>ClassLevel</Scope>\n    </Parallelize>\n  </MSTest>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n</TabItem>\n<TabItem value=\"xunit\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":287,"to":321}}}}],["a2c68204-d449-420a-a9d4-8882bcb861d0",{"pageContent":"</TabItem>\n<TabItem value=\"xunit\">\n\nFor example, to specify the number of workers, you can use `xUnit.MaxParallelThreads`. You can also enable `DEBUG` logs using `RunConfiguration.EnvironmentVariables`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <!-- See https://xunit.net/docs/runsettings -->\n  <xUnit>\n    <MaxParallelThreads>1</MaxParallelThreads>\n  </xUnit>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n</TabItem>\n</Tabs>\n\n## Base classes for Playwright","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":320,"to":353}}}}],["e5815e4e-1800-45e5-be11-c7c8903e2d73",{"pageContent":"## Base classes for Playwright\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\nThere are a few base classes available to you in `Microsoft.Playwright.NUnit` namespace:\n\n</TabItem>\n<TabItem value=\"mstest\">\n\nThere are a few base classes available to you in `Microsoft.Playwright.MSTest` namespace:\n\n</TabItem>\n<TabItem value=\"xunit\">\n\nThere are a few base classes available to you in `Microsoft.Playwright.Xunit` namespace:\n\n</TabItem>\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":353,"to":379}}}}],["e44a5198-57fc-4d74-9e09-294fe7b51b4c",{"pageContent":"|Test          |Description|\n|--------------|-----------|\n|PageTest      |Each test gets a fresh copy of a web [Page] created in its own unique [BrowserContext]. Extending this class is the simplest way of writing a fully-functional Playwright test.<br></br><br></br>Note: You can override the `ContextOptions` method in each test file to control context options, the ones typically passed into the [`method: Browser.newContext`] method. That way you can specify all kinds of emulation options for your test file individually.|","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":381,"to":383}}}}],["92f0eb63-b8fd-406b-8eeb-c770ec08cbdc",{"pageContent":"|ContextTest   |Each test will get a fresh copy of a [BrowserContext]. You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.<br></br><br></br>Note: You can override the `ContextOptions` method in each test file to control context options, the ones typically passed into the [`method: Browser.newContext`] method. That way you can specify all kinds of emulation options for your test file individually.|\n|BrowserTest   |Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created.|\n|PlaywrightTest|This gives each test a Playwright object so that the test could start and stop as many browsers as it likes.|","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-csharp.md","title":"src-test-runners-csharp","url":"https://playwright.dev/docs/src-test-runners-csharp","loc":{"lines":{"from":384,"to":386}}}}],["9c571d70-3678-4bd0-8d05-0c0e6160310a",{"pageContent":"---\nid: test-runners\ntitle: \"Test Runners\"\n---\n\n## Introduction\n\nWith a few lines of code, you can hook up Playwright to your favorite Java test runner.\n\nPlaywright and Browser instances can be reused between tests for better performance. We\nrecommend running each test case in a new BrowserContext, this way browser state will be\nisolated between the tests.\n\n## JUnit\n\nIn [JUnit](https://junit.org/junit5/) you can initialize [Playwright] and [Browser] in [@BeforeAll](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeAll.html) method and\ndestroy them in [@AfterAll](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/AfterAll.html). In the example below all three test methods use the same\n[Browser]. Each test uses its own [BrowserContext] and [Page].\n\n```java\npackage org.example;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":1,"to":21}}}}],["bdfff2a4-9f7b-4f01-8f42-ece797d29ff0",{"pageContent":"```java\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeAll\n  static void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":20,"to":61}}}}],["520dd139-df46-4c38-8ec2-03f337a6eee3",{"pageContent":"@BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":52,"to":86}}}}],["20901edc-49d0-4632-a110-29a51677e2ed",{"pageContent":"See experimental [JUnit integration](./junit.md) to automatically initialize Playwright objects and more.\n\n### Running Tests in Parallel\n\nBy default JUnit will run all tests sequentially on a single thread. Since JUnit 5.3 you can change this behavior to run tests in parallel\nto speed up execution (see [this page](https://junit.org/junit5/docs/snapshot/user-guide/index.html#writing-tests-parallel-execution)).\nSince it is not safe to use same Playwright objects from multiple threads without extra synchronization we recommend you create Playwright\ninstance per thread and use it on that thread exclusively. Here is an example how to run multiple test classes in parallel.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":88,"to":95}}}}],["931c8c84-c670-47fc-aa89-5af052ac4d96",{"pageContent":"Use [`@TestInstance(TestInstance.Lifecycle.PER_CLASS)`](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/TestInstance.html)\nannotation to make JUnit create one instance of a class for all test methods within that class (by default each JUnit will create a new instance of the class\nfor each test method). Store [Playwright] and [Browser] objects in instance fields. They will be shared between tests. Each instance of the class will use its\nown copy of Playwright.\n\n\n```java\n// Subclasses will inherit PER_CLASS behavior.\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass TestFixtures {\n  // Shared between all tests in the class.\n  Playwright playwright;\n  Browser browser;\n\n  @BeforeAll\n  void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  void closeBrowser() {\n    playwright.close();\n  }\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":97,"to":124}}}}],["c06c883e-b168-49c1-bf11-d4525a75bec2",{"pageContent":"@AfterAll\n  void closeBrowser() {\n    playwright.close();\n  }\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n}\n\nclass Test1 extends TestFixtures {\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":117,"to":151}}}}],["3d1c5096-e74c-44e3-ab7d-5a73fd5197e2",{"pageContent":"@Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n\nclass Test2 extends TestFixtures {\n  @Test\n  void shouldReturnInnerHTML() {\n    page.setContent(\"<div>hello</div>\");\n    assertEquals(\"hello\", page.innerHTML(\"css=div\"));\n  }\n\n  @Test\n  void shouldClickButton() {\n    Page popup = page.waitForPopup(() -> {\n      page.evaluate(\"window.open('about:blank');\");\n    });\n    assertEquals(\"about:blank\", popup.url());\n  }\n}\n```\n\n\nConfigure JUnit to run tests in each class sequentially and run multiple classes on parallel threads (with max\nnumber of thread equal to 1/2 of the number of CPU cores):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":153,"to":182}}}}],["615da532-0b46-45ea-9607-bcfacbf64262",{"pageContent":"Configure JUnit to run tests in each class sequentially and run multiple classes on parallel threads (with max\nnumber of thread equal to 1/2 of the number of CPU cores):\n\n```bash\njunit.jupiter.execution.parallel.enabled = true\njunit.jupiter.execution.parallel.mode.default = same_thread\njunit.jupiter.execution.parallel.mode.classes.default = concurrent\njunit.jupiter.execution.parallel.config.strategy=dynamic\njunit.jupiter.execution.parallel.config.dynamic.factor=0.5\n```\n\n### Using Gradle\n\nYou can use a Gradle build configuration script, written in Groovy or Kotlin.\n\n<Tabs\n  groupId=\"jvm-language\"\n  defaultValue=\"groovy\"\n  values={[\n    {label: 'Groovy', value: 'groovy'},\n    {label: 'Kotlin', value: 'kotlin'}\n  ]\n}>\n<TabItem value=\"groovy\">\n\n```groovy title=\"build.gradle\"\nplugins {\n  application\n  id 'java'\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'com.microsoft.playwright:playwright:%%VERSION%%'\n}\n\napplication {\n  mainClass = 'org.example.App'\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":181,"to":222}}}}],["73ace45a-ac9b-43ba-8268-015b7faefd8b",{"pageContent":"repositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'com.microsoft.playwright:playwright:%%VERSION%%'\n}\n\napplication {\n  mainClass = 'org.example.App'\n}\n\n// Usage: ./gradlew playwright --args=\"help\"\ntask playwright(type: JavaExec) {\n  classpath sourceSets.test.runtimeClasspath\n  mainClass = 'com.microsoft.playwright.CLI'\n}\n\ntest {\n  useJUnitPlatform()\n}\n```\n\n</TabItem>\n<TabItem value=\"kotlin\">\n\n```groovy title=\"build.gradle.kts\"\nplugins {\n  application\n  id(\"java\")\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation(\"com.microsoft.playwright:playwright:%%VERSION%%\")\n}\n\napplication {\n  mainClass.set(\"org.example.App\")\n}\n\n// Usage: ./gradlew playwright --args=\"help\"\ntasks.register<JavaExec>(\"playwright\") {\n  classpath(sourceSets[\"test\"].runtimeClasspath)\n  mainClass.set(\"com.microsoft.playwright.CLI\")\n}\n\ntasks.test {\n  useJUnitPlatform()\n  testLogging {\n    events(\"passed\", \"skipped\", \"failed\")\n  }\n}\n```\n\n</TabItem>\n</Tabs>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":212,"to":271}}}}],["a88cec45-1a37-40b4-9a08-cf758e681125",{"pageContent":"tasks.test {\n  useJUnitPlatform()\n  testLogging {\n    events(\"passed\", \"skipped\", \"failed\")\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\nTests can then be launched as follows:\n\n```bash\n./gradlew run\n```\n\nAlso, Playwright command line tools can be run with :\n\n```bash\n./gradlew playwright --args=\"help\"\n```\n\n## TestNG\n\nIn [TestNG](https://testng.org/) you can initialize [Playwright] and [Browser] in [@BeforeClass](https://javadoc.io/doc/org.testng/testng/latest/org/testng/annotations/BeforeClass.html) method and\ndestroy them in [@AfterClass](https://javadoc.io/doc/org.testng/testng/latest/org/testng/annotations/AfterClass.html). In the example below all three test methods use the same\n[Browser]. Each test uses its own [BrowserContext] and [Page].\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.testng.annotations.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":262,"to":298}}}}],["236f3b34-f779-4c0e-9cbf-1db5206b092b",{"pageContent":"import static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  Playwright playwright;\n  Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeClass\n  void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterClass\n  void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeMethod\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterMethod\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":300,"to":339}}}}],["43f633e0-edfd-41a7-bce9-6042cedbc74d",{"pageContent":"@Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-java.md","title":"src-test-runners-java","url":"https://playwright.dev/docs/src-test-runners-java","loc":{"lines":{"from":341,"to":357}}}}],["1c1f7701-a757-4cc4-9859-05b497d27984",{"pageContent":"---\nid: test-runners\ntitle: \"Pytest Plugin Reference\"\n---\n\n## Introduction\n\nPlaywright provides a [Pytest](https://docs.pytest.org/en/stable/) plugin to write end-to-end tests. To get started with it, refer to the [getting started guide](./intro.md).\n\n## Usage\n\nTo run your tests, use [Pytest](https://docs.pytest.org/en/stable/) CLI.\n\n```bash\npytest --browser webkit --headed\n```\n\nIf you want to add the CLI arguments automatically without specifying them, you can use the [pytest.ini](https://docs.pytest.org/en/stable/reference.html#ini-options-ref) file:\n\n```ini\n# content of pytest.ini\n[pytest]\n# Run firefox with UI\naddopts = --headed --browser firefox\n```\n\n## CLI arguments\n\nNote that CLI arguments are only applied to the default `browser`, `context` and `page` fixtures.\nIf you create a browser, a context or a page with the API call like [`method: Browser.newContext`], the CLI arguments are not applied.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":1,"to":30}}}}],["2eda1660-cc1e-4af2-b75d-54da2949d402",{"pageContent":"- `--headed`: Run tests in headed mode (default: headless).\n- `--browser`: Run tests in a different browser `chromium`, `firefox`, or `webkit`. It can be specified multiple times (default: `chromium`).\n- `--browser-channel` [Browser channel](./browsers.md) to be used.\n- `--slowmo` Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on (default: 0).\n- `--device` [Device](./emulation.md) to be emulated.\n- `--output` Directory for artifacts produced by tests (default: `test-results`).\n- `--tracing` Whether to record a [trace](./trace-viewer.md) for each test. `on`, `off`, or `retain-on-failure` (default: `off`).\n- `--video` Whether to record video for each test. `on`, `off`, or `retain-on-failure` (default: `off`).\n- `--screenshot` Whether to automatically capture a screenshot after each test. `on`, `off`, or `only-on-failure` (default: `off`).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":32,"to":40}}}}],["3c41c36a-f3d9-4475-92bd-46aa0ae7a5f0",{"pageContent":"- `--screenshot` Whether to automatically capture a screenshot after each test. `on`, `off`, or `only-on-failure` (default: `off`).\n- `--full-page-screenshot` Whether to take a full page screenshot on failure. By default, only the viewport is captured. Requires `--screenshot` to be enabled (default: `off`).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":40,"to":41}}}}],["4c85b47b-6ae9-4d1e-9a76-9e9f2b8f8986",{"pageContent":"## Fixtures\n\nThis plugin configures Playwright-specific [fixtures for pytest](https://docs.pytest.org/en/latest/fixture.html). To use these fixtures, use the fixture name as an argument to the test function.\n\n```py\ndef test_my_app_is_working(fixture_name):\n    pass\n    # Test using fixture_name\n    # ...\n```\n\n**Function scope**: These fixtures are created when requested in a test function and destroyed when the test ends.\n\n- `context`: New [browser context](./browser-contexts) for a test.\n- `page`: New [browser page](./pages) for a test.\n- `new_context`: Allows creating different [browser contexts](./browser-contexts) for a test. Useful for multi-user scenarios. Accepts the same parameters as [`method: Browser.newContext`].\n\n**Session scope**: These fixtures are created when requested in a test function and destroyed when all tests end.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":43,"to":60}}}}],["0482c89b-a89a-4136-bd21-671f2a725327",{"pageContent":"**Session scope**: These fixtures are created when requested in a test function and destroyed when all tests end.\n\n- `playwright`: [Playwright](./api/class-playwright) instance.\n- `browser_type`: [BrowserType](./api/class-browsertype) instance of the current browser.\n- `browser`: [Browser](./api/class-browser) instance launched by Playwright.\n- `browser_name`: Browser name as string.\n- `browser_channel`: Browser channel as string.\n- `is_chromium`, `is_webkit`, `is_firefox`: Booleans for the respective browser types.\n\n**Customizing fixture options**: For `browser` and `context` fixtures, use the following fixtures to define custom launch options.\n\n- `browser_type_launch_args`: Override launch arguments for [`method: BrowserType.launch`]. It should return a Dict.\n- `browser_context_args`: Override the options for [`method: Browser.newContext`]. It should return a Dict.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":60,"to":72}}}}],["12218a50-43fe-4543-9faf-357b2c75d77d",{"pageContent":"Its also possible to override the context options ([`method: Browser.newContext`]) for a single test by using the `browser_context_args` marker:\n\n```python\nimport pytest\n\n@pytest.mark.browser_context_args(timezone_id=\"Europe/Berlin\", locale=\"en-GB\")\ndef test_browser_context_args(page):\n    assert page.evaluate(\"window.navigator.userAgent\") == \"Europe/Berlin\"\n    assert page.evaluate(\"window.navigator.languages\") == [\"de-DE\"]\n```\n\n## Parallelism: Running Multiple Tests at Once\n\nIf your tests are running on a machine with a lot of CPUs, you can speed up the overall execution time of your test suite by using [`pytest-xdist`](https://pypi.org/project/pytest-xdist/) to run multiple tests at once:\n\n```bash\n# install dependency\npip install pytest-xdist\n# use the --numprocesses flag\npytest --numprocesses auto\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":74,"to":94}}}}],["7744736c-8031-451f-b700-ad677bb06e83",{"pageContent":"```bash\n# install dependency\npip install pytest-xdist\n# use the --numprocesses flag\npytest --numprocesses auto\n```\n\nDepending on the hardware and nature of your tests, you can set `numprocesses` to be anywhere from `2` to the number of CPUs on the machine. If set too high, you may notice unexpected behavior.\n\nSee [Running Tests](./running-tests.md) for general information on `pytest` options.\n\n## Examples\n\n### Configure typings for auto-completion\n\n```py title=\"test_my_application.py\"\nfrom playwright.sync_api import Page\n\ndef test_visit_admin_dashboard(page: Page):\n    page.goto(\"/admin\")\n    # ...\n```\n\nIf you're using VSCode with Pylance, these types can be inferred by enabling the `python.testing.pytestEnabled` setting so you don't need the type annotation.\n\n### Using multiple contexts\n\nIn order to simulate multiple users, you can create multiple [`BrowserContext`](./browser-contexts) instances.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":89,"to":116}}}}],["ee74e794-fce1-42ae-bcde-2ce5b8978aa8",{"pageContent":"### Using multiple contexts\n\nIn order to simulate multiple users, you can create multiple [`BrowserContext`](./browser-contexts) instances.\n\n```py title=\"test_my_application.py\"\nfrom playwright.sync_api import Page, BrowserContext\nfrom pytest_playwright.pytest_playwright import CreateContextCallback\n\ndef test_foo(page: Page, new_context: CreateContextCallback) -> None:\n    page.goto(\"https://example.com\")\n    context = new_context()\n    page2 = context.new_page()\n    # page and page2 are in different contexts\n```\n\n### Skip test by browser\n\n```py title=\"test_my_application.py\"\nimport pytest\n\n@pytest.mark.skip_browser(\"firefox\")\ndef test_visit_example(page):\n    page.goto(\"https://example.com\")\n    # ...\n```\n\n### Run on a specific browser\n\n```py title=\"conftest.py\"\nimport pytest\n\n@pytest.mark.only_browser(\"chromium\")\ndef test_visit_example(page):\n    page.goto(\"https://example.com\")\n    # ...\n```\n\n### Run with a custom browser channel like Google Chrome or Microsoft Edge","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":114,"to":151}}}}],["0c6ad1fd-a164-4c4e-aea3-b8afc72ed3ef",{"pageContent":"@pytest.mark.only_browser(\"chromium\")\ndef test_visit_example(page):\n    page.goto(\"https://example.com\")\n    # ...\n```\n\n### Run with a custom browser channel like Google Chrome or Microsoft Edge\n\n```bash\npytest --browser-channel chrome\n```\n\n```python title=\"test_my_application.py\"\ndef test_example(page):\n    page.goto(\"https://example.com\")\n```\n\n### Configure base-url\n\nStart Pytest with the `base-url` argument. The [`pytest-base-url`](https://github.com/pytest-dev/pytest-base-url) plugin is used\nfor that which allows you to set the base url from the config, CLI arg or as a fixture.\n\n```bash\npytest --base-url http://localhost:8080\n```\n\n```py title=\"test_my_application.py\"\ndef test_visit_example(page):\n    page.goto(\"/admin\")\n    # -> Will result in http://localhost:8080/admin\n```\n\n### Ignore HTTPS errors\n\n```py title=\"conftest.py\"\nimport pytest","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":145,"to":180}}}}],["f66e06c4-3207-4085-a7db-cd6bfa114ea8",{"pageContent":"### Ignore HTTPS errors\n\n```py title=\"conftest.py\"\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        \"ignore_https_errors\": True\n    }\n```\n\n### Use custom viewport size\n\n```py title=\"conftest.py\"\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        \"viewport\": {\n            \"width\": 1920,\n            \"height\": 1080,\n        }\n    }\n```\n\n### Device emulation / BrowserContext option overrides\n\n```py title=\"conftest.py\"\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args, playwright):\n    iphone_11 = playwright.devices['iPhone 11 Pro']\n    return {\n        **browser_context_args,\n        **iphone_11,\n    }\n```\n\nOr via the CLI `--device=\"iPhone 11 Pro\"`\n\n### Using with `unittest.TestCase`","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":177,"to":222}}}}],["54c2f58d-f4a9-4d94-a2c1-39799edb0eb1",{"pageContent":"Or via the CLI `--device=\"iPhone 11 Pro\"`\n\n### Using with `unittest.TestCase`\n\nSee the following example for using it with `unittest.TestCase`. This has a limitation,\nthat only a single browser can be specified and no matrix of multiple browsers gets\ngenerated when specifying multiple.\n\n```py\nimport pytest\nimport unittest\n\nfrom playwright.sync_api import Page\n\n\nclass MyTest(unittest.TestCase):\n    @pytest.fixture(autouse=True)\n    def setup(self, page: Page):\n        self.page = page\n\n    def test_foobar(self):\n        self.page.goto(\"https://microsoft.com\")\n        self.page.locator(\"#foobar\").click()\n        assert self.page.evaluate(\"1 + 1\") == 2\n```\n\n## Debugging\n\n### Use with pdb\n\nUse the `breakpoint()` statement in your test code to pause execution and get a [pdb](https://docs.python.org/3/library/pdb.html) REPL.\n\n```py\ndef test_bing_is_working(page):\n    page.goto(\"https://bing.com\")\n    breakpoint()\n    # ...\n```\n\n## Deploy to CI","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":220,"to":259}}}}],["ec973bc8-4a17-4ef9-9ebf-82404e1fe6b4",{"pageContent":"```py\ndef test_bing_is_working(page):\n    page.goto(\"https://bing.com\")\n    breakpoint()\n    # ...\n```\n\n## Deploy to CI\n\nSee the [guides for CI providers](./ci.md) to deploy your tests to CI/CD.\n\n## Async Fixtures\n\nTo use async fixtures, install [`pytest-playwright-asyncio`](https://pypi.org/project/pytest-playwright-asyncio/).\n\nEnsure you are using `pytest-asyncio>=0.26.0` and set [`asyncio_default_test_loop_scope = session`](https://pytest-asyncio.readthedocs.io/en/v0.26.0/how-to-guides/change_default_test_loop.html) in your configuration (`pytest.ini/pyproject.toml/setup.cfg`).\n\n\n```python\nimport pytest\nfrom playwright.async_api import Page\n\n@pytest.mark.asyncio(loop_scope=\"session\")\nasync def test_foo(page: Page):\n    await page.goto(\"https://github.com\")\n    # ...\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-runners-python.md","title":"src-test-runners-python","url":"https://playwright.dev/docs/src-test-runners-python","loc":{"lines":{"from":252,"to":278}}}}],["a59d1d49-2b02-446e-b5e5-dd0e769076c7",{"pageContent":"---\nid: test-sharding\ntitle: \"Sharding\"\n---\n\n## Introduction\n\nBy default, Playwright runs test files in [parallel](./test-parallel.md) and strives for optimal utilization of CPU cores on your machine. In order to achieve even greater parallelisation, you can further scale Playwright test execution by running tests on multiple machines simultaneously. We call this mode of operation \"sharding\". Sharding in Playwright means splitting your tests into smaller parts called \"shards\". Each shard is like a separate job that can run independently. The whole purpose is to divide your tests to speed up test runtime.\n\nWhen you shard your tests, each shard can run on its own, utilizing the available CPU cores. This helps speed up the testing process by doing tasks simultaneously.\n\nIn a CI pipeline, each shard can run as a separate job, making use of the hardware resources available in your CI pipeline, like CPU cores, to run tests faster.\n\n## Sharding tests between multiple machines","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":1,"to":14}}}}],["b6989894-9d88-4b5b-b9d4-d11d702a0b6f",{"pageContent":"## Sharding tests between multiple machines\n\nTo shard the test suite, pass `--shard=x/y` to the command line. For example, to split the suite into four shards, each running one fourth of the tests:\n\n```bash\nnpx playwright test --shard=1/4\nnpx playwright test --shard=2/4\nnpx playwright test --shard=3/4\nnpx playwright test --shard=4/4\n```\n\nNow, if you run these shards in parallel on different jobs, your test suite completes four times faster.\n\nNote that Playwright can only shard tests that can be run in parallel. By default, this means Playwright will shard test files. Learn about other options in the [parallelism guide](./test-parallel.md).\n\n\n## Balancing Shards\n\nSharding can be done at two levels of granularity depending on whether you use the [`property: TestProject.fullyParallel`] option or not. This affects how the tests are balanced across the shards.\n\n**Sharding with fullyParallel**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":14,"to":34}}}}],["24cdf0fd-e3bc-4972-b0aa-56ab62004c03",{"pageContent":"**Sharding with fullyParallel**\n\nWhen `fullyParallel: true` is enabled, Playwright Test runs individual tests in parallel across multiple shards, ensuring each shard receives an even distribution of tests. This allows for test-level granularity, meaning each shard will attempt to balance the number of individual tests it runs. This is the preferred mode for ensuring even load distribution when sharding, as Playwright can optimize shard execution based on the total number of tests.\n\n**Sharding without fullyParallel**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":34,"to":38}}}}],["824ed2d6-fe74-4c3e-aa28-155616f3d131",{"pageContent":"**Sharding without fullyParallel**\n\nWithout the fullyParallel setting, Playwright Test defaults to file-level granularity, meaning entire test files are assigned to shards (note that the same file may be assigned to different shards across different projects). In this case, the number of tests per file can greatly influence shard distribution. If your test files are not evenly sized (i.e., some files contain many more tests than others), certain shards may end up running significantly more tests, while others may run fewer or even none.\n\n**Key Takeaways:**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":38,"to":42}}}}],["efe25dd7-a182-4367-8d8e-41836e544d01",{"pageContent":"**Key Takeaways:**\n\n- **With** `fullyParallel: true`: Tests are split at the individual test level, leading to more balanced shard execution.\n- **Without** `fullyParallel`: Tests are split at the file level, so to balance the shards, it's important to keep your test files small and evenly sized.\n- To ensure the most effective use of sharding, especially in CI environments, it is recommended to use `fullyParallel: true` when aiming for balanced distribution across shards. Otherwise, you may need to manually organize your test files to avoid imbalances.\n\n## Merging reports from multiple shards\n\nIn the previous example, each test shard has its own test report. If you want to have a combined report showing all the test results from all the shards, you can merge them.\n\nStart with adding `blob` reporter to the config when running on CI:\n\n```js title=\"playwright.config.ts\"\nexport default defineConfig({\n  testDir: './tests',\n  reporter: process.env.CI ? 'blob' : 'html',\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":42,"to":59}}}}],["1063db8e-91eb-46ab-8bfe-cafb948cf51d",{"pageContent":"```js title=\"playwright.config.ts\"\nexport default defineConfig({\n  testDir: './tests',\n  reporter: process.env.CI ? 'blob' : 'html',\n});\n```\n\nBlob report contains information about all the tests that were run and their results as well as all test attachments such as traces and screenshot diffs. Blob reports can be merged and converted to any other Playwright report. By default, blob report will be generated into `blob-report` directory.\n\nTo merge reports from multiple shards, put the blob report files into a single directory, for example `all-blob-reports`. Blob report names contain shard number, so they will not clash.\n\nAfterwards, run `npx playwright merge-reports` command:\n\n```bash\nnpx playwright merge-reports --reporter html ./all-blob-reports\n```\n\nThis will produce a standard HTML report into `playwright-report` directory.\n\n## GitHub Actions example","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":54,"to":73}}}}],["cf37f1cf-495f-40e0-9990-faab6c2eb001",{"pageContent":"```bash\nnpx playwright merge-reports --reporter html ./all-blob-reports\n```\n\nThis will produce a standard HTML report into `playwright-report` directory.\n\n## GitHub Actions example\n\nGitHub Actions supports [sharding tests between multiple jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs) using the [`jobs.<job_id>.strategy.matrix`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix) option. The `matrix` option will run a separate job for every possible combination of the provided options.\n\nThe following example shows you how to configure a job to run your tests on four machines in parallel and then merge the reports into a single report. Don't forget to add `reporter: process.env.CI ? 'blob' : 'html',` to your `playwright.config.ts` file as in the example above.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":67,"to":77}}}}],["d1a6c17c-f8f7-4acc-82a3-2b66b49ee389",{"pageContent":"1. First we add a `matrix` option to our job configuration with the `shardTotal: [4]` option containing the total number of shards we want to create and `shardIndex: [1, 2, 3, 4]` with an array of the shard numbers.\n\n1. Then we run our Playwright tests with the `--shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}` option. This will run our test command for each shard.\n\n1. Finally we upload our blob report to the GitHub Actions Artifacts. This will make the blob report available to other jobs in the workflow.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":79,"to":83}}}}],["23489110-5f68-4627-a349-82591b659e3b",{"pageContent":"1. Finally we upload our blob report to the GitHub Actions Artifacts. This will make the blob report available to other jobs in the workflow.\n\n\n\n```yaml title=\".github/workflows/playwright.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright-tests:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        shardIndex: [1, 2, 3, 4]\n        shardTotal: [4]\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright browsers\n      run: npx playwright install --with-deps\n\n    - name: Run Playwright tests\n      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":83,"to":114}}}}],["f28ae86f-2e50-4f34-bf14-4aac27724ebf",{"pageContent":"- name: Run Playwright tests\n      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}\n\n    - name: Upload blob report to GitHub Actions Artifacts\n      if: ${{ !cancelled() }}\n      uses: actions/upload-artifact@v4\n      with:\n        name: blob-report-${{ matrix.shardIndex }}\n        path: blob-report\n        retention-days: 1\n```\n\n1. After all shards have completed, you can run a separate job that will merge the reports and produce a combined [HTML report](./test-reporters.md#html-reporter). To ensure the execution order, we make the `merge-reports` job [depend](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs) on our sharded `playwright-tests` job by adding `needs: [playwright-tests]`.\n\n```yaml title=\".github/workflows/playwright.yml\"\njobs:\n...\n  merge-reports:\n    # Merge reports after playwright-tests, even if some shards have failed\n    if: ${{ !cancelled() }}\n    needs: [playwright-tests]","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":113,"to":133}}}}],["c0d759ed-b6d1-4122-8a21-57bdfe8f1032",{"pageContent":"runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Download blob reports from GitHub Actions Artifacts\n      uses: actions/download-artifact@v4\n      with:\n        path: all-blob-reports\n        pattern: blob-report-*\n        merge-multiple: true\n\n    - name: Merge into HTML Report\n      run: npx playwright merge-reports --reporter html ./all-blob-reports\n\n    - name: Upload HTML report\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-report--attempt-${{ github.run_attempt }}\n        path: playwright-report\n        retention-days: 14\n```\n\nYou can now see the reports have been merged and a combined HTML report is available in the GitHub Actions Artifacts tab.\n\n<img width=\"875\" alt=\"image\" src=\"https://github.com/microsoft/playwright/assets/9798949/b69dac59-fc19-4b98-8f49-814b1c29ca02\" />\n\n\n## Merge-reports CLI","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":135,"to":167}}}}],["3cb60164-c557-4f97-b950-f937ae9a8054",{"pageContent":"<img width=\"875\" alt=\"image\" src=\"https://github.com/microsoft/playwright/assets/9798949/b69dac59-fc19-4b98-8f49-814b1c29ca02\" />\n\n\n## Merge-reports CLI\n\n`npx playwright merge-reports path/to/blob-reports-dir` reads all blob reports from the passed directory and merges them into a single report.\n\nWhen merging reports from different OS'es you'll have to provide an explicit merge config to disambiguate which directory should be used as tests root.\n\nSupported options:\n- `--reporter reporter-to-use`\n\n  Which report to produce. Can be multiple reporters separated by comma.\n\n  Example:\n\n  ```bash\n  npx playwright merge-reports --reporter=html,github ./blob-reports\n  ```\n\n- `--config path/to/config/file`\n\n  Specifies the Playwright configuration file with output reporters. Use this option to pass\n  additional configuration to the output reporter. This configuration file can differ from\n  the one used during the creation of blob reports.\n\n  Example:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":164,"to":190}}}}],["8c2d9904-4fbe-451e-9fb4-02f87b8086cb",{"pageContent":"Example:\n\n  ```bash\n  npx playwright merge-reports --config=merge.config.ts ./blob-reports\n  ```\n\n  ```js title=\"merge.config.ts\"\n  export default {\n    testDir: 'e2e',\n    reporter: [['html', { open: 'never' }]],\n  };\n  ```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-sharding-js.md","title":"src-test-sharding-js","url":"https://playwright.dev/docs/src-test-sharding-js","loc":{"lines":{"from":190,"to":201}}}}],["c1e31392-261d-4c88-bc66-982055a5271f",{"pageContent":"---\nid: test-snapshots\ntitle: \"Visual comparisons\"\n---\n\n## Introduction\n\nPlaywright Test includes the ability to produce and visually compare screenshots using `await expect(page).toHaveScreenshot()`. On first execution, Playwright test will generate reference screenshots. Subsequent runs will compare against the reference.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot();\n});\n```\n\n:::warning\nBrowser rendering can vary based on the host OS, version, settings, hardware, power source (battery vs. power adapter), headless mode, and other factors. For consistent screenshots, run tests in the same environment where the baseline screenshots were generated.\n:::\n\n## Generating screenshots\n\nWhen you run above for the first time, test runner will say:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":1,"to":25}}}}],["02a0f8ea-6fe3-4368-b662-5aa33ffae8cf",{"pageContent":"## Generating screenshots\n\nWhen you run above for the first time, test runner will say:\n\n```txt\nError: A snapshot doesn't exist at example.spec.ts-snapshots/example-test-1-chromium-darwin.png, writing actual.\n```\n\nThat's because there was no golden file yet. This method took a bunch of screenshots until two consecutive\nscreenshots matched, and saved the last screenshot to file system. It is now ready to be added to the repository.\n\nThe name of the folder with the golden expectations starts with the name of your test file:\n\n```bash\ndrwxr-xr-x  5 user  group  160 Jun  4 11:46 .\ndrwxr-xr-x  6 user  group  192 Jun  4 11:45 ..\n-rw-r--r--  1 user  group  231 Jun  4 11:16 example.spec.ts\ndrwxr-xr-x  3 user  group   96 Jun  4 11:46 example.spec.ts-snapshots\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":23,"to":41}}}}],["f9a20896-cc07-46a7-a553-48070b1d9a94",{"pageContent":"The snapshot name `example-test-1-chromium-darwin.png` consists of a few parts:\n- `example-test-1.png` - an auto-generated name of the snapshot. Alternatively you can specify snapshot name as the first argument of the `toHaveScreenshot()` method:\n    ```js\n    await expect(page).toHaveScreenshot('landing.png');\n    ```\n\n- `chromium-darwin` - the browser name and the platform. Screenshots differ between browsers and platforms due to different rendering, fonts and more, so you will need different snapshots for them. If you use multiple projects in your [configuration file](./test-configuration.md), project name will be used instead of `chromium`.\n\nThe snapshot name and path can be configured with [`property: TestConfig.snapshotPathTemplate`] in the playwright config.\n\n## Updating screenshots\n\nSometimes you need to update the reference screenshot, for example when the page has changed. Do this with the  `--update-snapshots` flag.\n\n```bash\nnpx playwright test --update-snapshots\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":43,"to":59}}}}],["9abccf38-6fa5-4d86-8588-46f74ef96f35",{"pageContent":"Sometimes you need to update the reference screenshot, for example when the page has changed. Do this with the  `--update-snapshots` flag.\n\n```bash\nnpx playwright test --update-snapshots\n```\n\n> Note that `snapshotName` also accepts an array of path segments to the snapshot file such as `expect().toHaveScreenshot(['relative', 'path', 'to', 'snapshot.png'])`.\n> However, this path must stay within the snapshots directory for each test file (i.e. `a.spec.js-snapshots`), otherwise it will throw.\n\n## Options\n\n### maxDiffPixels\n\nPlaywright Test uses the [pixelmatch](https://github.com/mapbox/pixelmatch) library. You can [pass various options](./api/class-pageassertions.md#page-assertions-to-have-screenshot-1) to modify its behavior:\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ maxDiffPixels: 100 });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":55,"to":77}}}}],["81cfa5bb-3758-4607-ae9b-f625edb20cf9",{"pageContent":"test('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ maxDiffPixels: 100 });\n});\n```\n\nIf you'd like to share the default value among all the tests in the project, you can specify it in the playwright config, either globally or per project:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: { maxDiffPixels: 100 },\n  },\n});\n```\n\n### stylePath\n\nYou can apply a custom stylesheet to your page while taking screenshot. This\nallows filtering out dynamic or volatile elements, hence improving the screenshot\ndeterminism.\n\n```css title=\"screenshot.css\"\niframe {\n  visibility: hidden;\n}\n```\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":73,"to":103}}}}],["5e26356c-b531-49ec-ab58-7b630f002cc6",{"pageContent":"```css title=\"screenshot.css\"\niframe {\n  visibility: hidden;\n}\n```\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ stylePath: path.join(__dirname, 'screenshot.css') });\n});\n```\n\nIf you'd like to share the default value among all the tests in the project, you can specify it in the playwright config, either globally or per project:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: {\n      stylePath: './screenshot.css'\n    },\n  },\n});\n```\n\n## Non-image snapshots\n\nApart from screenshots, you can use `expect(value).toMatchSnapshot(snapshotName)` to compare text or arbitrary binary data. Playwright Test auto-detects the content type and uses the appropriate comparison algorithm.\n\nHere we compare text content against the reference.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":96,"to":128}}}}],["e8980808-0e48-40d0-9c4f-1f6740339c62",{"pageContent":"Here we compare text content against the reference.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  expect(await page.textContent('.hero__title')).toMatchSnapshot('hero.txt');\n});\n```\n\nSnapshots are stored next to the test file, in a separate directory. For example, `my.spec.ts` file will produce and store snapshots in the `my.spec.ts-snapshots` directory. You should commit this directory to your version control (e.g. `git`), and review any changes to it.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-snapshots-js.md","title":"src-test-snapshots-js","url":"https://playwright.dev/docs/src-test-snapshots-js","loc":{"lines":{"from":128,"to":139}}}}],["d5394ffe-ed20-459b-9335-1f40f35856be",{"pageContent":"---\nid: test-timeouts\ntitle: \"Timeouts\"\n---\n\nPlaywright Test has multiple configurable timeouts for various tasks.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":1,"to":6}}}}],["8e6854d5-7e2e-4ffe-8cba-0c0ac3ab00d8",{"pageContent":"Playwright Test has multiple configurable timeouts for various tasks.\n\n|Timeout    |Default             |Description                      |\n|:----------|:----------------|:--------------------------------|\n|Test timeout|30_000 ms|Timeout for each test<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in config</span><br/><code>{`{ timeout: 60_000 }`}</code><br/><span style={{textTransform: 'uppercase',fontSize: 'smaller', fontWeight: 'bold', opacity: '0.7'}}>Override in test</span><br/>`test.setTimeout(120_000)` |\n|Expect timeout|5_000 ms|Timeout for each assertion<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in config</span><br/><code>{`{ expect: { timeout: 10_000 } }`}</code><br/><span style={{textTransform: 'uppercase',fontSize: 'smaller', fontWeight: 'bold', opacity: '0.7'}}>Override in test</span><br/>`expect(locator).toBeVisible({ timeout: 10_000 })` |\n\n## Test timeout","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":6,"to":13}}}}],["f641d83f-5d38-4bf6-b343-b3cc6001aee6",{"pageContent":"## Test timeout\n\nPlaywright Test enforces a timeout for each test, 30 seconds by default. Time spent by the test function, fixture setups, and `beforeEach` hooks is included in the test timeout.\n\nTimed out test produces the following error:\n\n```txt\nexample.spec.ts:3:1 › basic test ===========================\n\nTimeout of 30000ms exceeded.\n```\n\nAdditional separate timeout, of the same value, is shared between fixture teardowns and `afterEach` hooks, after the test function has finished.\n\nThe same timeout value also applies to `beforeAll` and `afterAll` hooks, but they do not share time with any test.\n\n### Set test timeout in the config\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 120_000,\n});\n```\n\nAPI reference: [`property: TestConfig.timeout`].\n\n### Set timeout for a single test\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":13,"to":44}}}}],["07a298d5-2fb0-4c28-af22-e84ec5ec568e",{"pageContent":"API reference: [`property: TestConfig.timeout`].\n\n### Set timeout for a single test\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow(); // Easy way to triple the default timeout\n  // ...\n});\n\ntest('very slow test', async ({ page }) => {\n  test.setTimeout(120_000);\n  // ...\n});\n```\n\nAPI reference: [`method: Test.setTimeout`] and [`method: Test.slow`].\n\n### Change timeout from a `beforeEach` hook\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30_000);\n});\n```\n\nAPI reference: [`method: TestInfo.setTimeout`].\n\n### Change timeout for `beforeAll`/`afterAll` hook","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":39,"to":72}}}}],["8eaeaf93-9ec7-4737-8247-12319d770d9c",{"pageContent":"API reference: [`method: TestInfo.setTimeout`].\n\n### Change timeout for `beforeAll`/`afterAll` hook\n\n`beforeAll` and `afterAll` hooks have a separate timeout, by default equal to test timeout. You can change it separately for each hook by calling [`method: TestInfo.setTimeout`] inside the hook.\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.beforeAll(async () => {\n  // Set timeout for this hook.\n  test.setTimeout(60000);\n});\n```\n\nAPI reference: [`method: TestInfo.setTimeout`].\n\n## Expect timeout\n\nAuto-retrying assertions like [`method: LocatorAssertions.toHaveText`] have a separate timeout, 5 seconds by default. Assertion timeout is unrelated to the test timeout. It produces the following error:\n\n```txt\nexample.spec.ts:3:1 › basic test ===========================\n\nError: expect(received).toHaveText(expected)\n\nExpected string: \"my text\"\nReceived string: \"\"\nCall log:\n  - expect.toHaveText with timeout 5000ms\n  - waiting for \"locator('button')\"\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":70,"to":101}}}}],["a8d309aa-66fb-4977-b7f7-2ace567063bb",{"pageContent":"Error: expect(received).toHaveText(expected)\n\nExpected string: \"my text\"\nReceived string: \"\"\nCall log:\n  - expect.toHaveText with timeout 5000ms\n  - waiting for \"locator('button')\"\n```\n\n### Set expect timeout in the config\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10_000,\n  },\n});\n```\n\nAPI reference: [`property: TestConfig.expect`].\n\n### Specify expect timeout for a single assertion\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('example', async ({ page }) => {\n  await expect(locator).toHaveText('hello', { timeout: 10_000 });\n});\n```\n\n## Global timeout\n\nPlaywright Test supports a timeout for the whole test run. This prevents excess resource usage when everything went wrong. There is no default global timeout, but you can set a reasonable one in the config, for example one hour. Global timeout produces the following error:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":94,"to":129}}}}],["21b1d261-3ff4-47a2-9a1f-8bc9e7c318ff",{"pageContent":"```txt\nRunning 1000 tests using 10 workers\n\n  514 skipped\n  486 passed\n  Timed out waiting 3600s for the entire test run\n```\n\nYou can set global timeout in the config.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: 3_600_000,\n});\n```\n\nAPI reference: [`property: TestConfig.globalTimeout`].\n\n## Advanced: low level timeouts\n\nThese are the low-level timeouts that are pre-configured by the test runner, you should not need to change these.\nIf you happen to be in this section because your test are flaky, it is very likely that you should be looking for the solution elsewhere.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":131,"to":154}}}}],["21ac5c81-efc6-4801-9501-532948914c98",{"pageContent":"|Timeout    |Default             |Description                      |\n|:----------|:----------------|:--------------------------------|\n|Action timeout| no timeout |Timeout for each action<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in config</span><br/><code>{`{ use: { actionTimeout: 10_000 } }`}</code><br/><span style={{textTransform: 'uppercase',fontSize: 'smaller', fontWeight: 'bold', opacity: '0.7'}}>Override in test</span><br/>`locator.click({ timeout: 10_000 })` |\n|Navigation timeout| no timeout |Timeout for each navigation action<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in config</span><br/><code>{`{ use: { navigationTimeout: 30_000 } }`}</code><br/><span style={{textTransform: 'uppercase',fontSize: 'smaller', fontWeight: 'bold', opacity: '0.7'}}>Override in test</span><br/>`page.goto('/', { timeout: 30_000 })` |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":156,"to":159}}}}],["b15f572a-aaf8-4cb7-aa5d-5e77f9e183f9",{"pageContent":"|Global timeout|no timeout |Global timeout for the whole test run<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in config</span><br/>`{ globalTimeout: 3_600_000 }`<br/> |\n|`beforeAll`/`afterAll` timeout|30_000 ms|Timeout for the hook<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in hook</span><br/>`test.setTimeout(60_000)`<br/> |\n|Fixture timeout|no timeout |Timeout for an individual fixture<br/><span style={{textTransform:'uppercase',fontSize:'smaller',fontWeight:'bold',opacity:'0.7'}}>Set in fixture</span><br/>`{ scope: 'test', timeout: 30_000 }`<br/> |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":160,"to":162}}}}],["1b418dda-88ee-4e37-8184-e186c5281ec2",{"pageContent":"### Set action and navigation timeouts in the config\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    actionTimeout: 10 * 1000,\n    navigationTimeout: 30 * 1000,\n  },\n});\n```\n\nAPI reference: [`property: TestOptions.actionTimeout`] and [`property: TestOptions.navigationTimeout`].\n\n### Set timeout for a single action\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev', { timeout: 30000 });\n  await page.getByText('Get Started').click({ timeout: 10000 });\n});\n```\n\n## Fixture timeout\n\nBy default, [fixture](./test-fixtures) shares timeout with the test. However, for slow fixtures, especially [worker-scoped](./test-fixtures#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":165,"to":193}}}}],["79045207-9655-4200-a314-5790fa9830f5",{"pageContent":"```js title=\"example.spec.ts\"\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60_000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\nAPI reference: [`method: Test.extend`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-timeouts-js.md","title":"src-test-timeouts-js","url":"https://playwright.dev/docs/src-test-timeouts-js","loc":{"lines":{"from":195,"to":210}}}}],["4b95465d-c5eb-4f0c-9168-924fbf7a5b44",{"pageContent":"---\nid: test-typescript\ntitle: \"TypeScript\"\n---\n\n## Introduction\n\nPlaywright supports TypeScript out of the box. You just write tests in TypeScript, and Playwright will read them, transform to JavaScript and run.\n\nNote that Playwright does not check the types and will run tests even if there are non-critical TypeScript compilation errors. We recommend you run TypeScript compiler alongside Playwright. For example on GitHub actions:\n\n```yaml\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    ...\n    - name: Run type checks\n      run: npx tsc -p tsconfig.json --noEmit\n    - name: Run Playwright tests\n      run: npx playwright test\n```\n\nFor local development, you can run `tsc` in [watch](https://www.typescriptlang.org/docs/handbook/configuring-watch.html) mode like this:\n```sh\nnpx tsc -p tsconfig.json --noEmit -w\n```\n\n## tsconfig.json","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-typescript-js.md","title":"src-test-typescript-js","url":"https://playwright.dev/docs/src-test-typescript-js","loc":{"lines":{"from":1,"to":29}}}}],["3691d6ef-1ff4-4fa2-8878-56cdfbefdd8c",{"pageContent":"## tsconfig.json\n\nPlaywright will pick up `tsconfig.json` for each source file it loads. Note that Playwright **only supports** the following tsconfig options: `allowJs`, `baseUrl`, `paths` and `references`.\n\nWe recommend setting up a separate `tsconfig.json` in the tests directory so that you can change some preferences specifically for the tests. Here is an example directory structure.\n\n```txt\nsrc/\n    source.ts\n\ntests/\n    tsconfig.json  # test-specific tsconfig\n    example.spec.ts\n\ntsconfig.json  # generic tsconfig for all typescript sources\n\nplaywright.config.ts\n```\n\n### tsconfig path mapping\n\nPlaywright supports [path mapping](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping) declared in the `tsconfig.json`. Make sure that `baseUrl` is also set.\n\nHere is an example `tsconfig.json` that works with Playwright:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-typescript-js.md","title":"src-test-typescript-js","url":"https://playwright.dev/docs/src-test-typescript-js","loc":{"lines":{"from":29,"to":52}}}}],["7e1dc098-8e03-4a1c-87f4-94ebb2f941f9",{"pageContent":"Here is an example `tsconfig.json` that works with Playwright:\n\n```json title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@myhelper/*\": [\"packages/myhelper/*\"] // This mapping is relative to \"baseUrl\".\n    }\n  }\n}\n```\n\nYou can now import using the mapped paths:\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from '@playwright/test';\nimport { username, password } from '@myhelper/credentials';\n\ntest('example', async ({ page }) => {\n  await page.getByLabel('User Name').fill(username);\n  await page.getByLabel('Password').fill(password);\n});\n```\n\n### tsconfig resolution\n\nBy default, Playwright will look up a closest tsconfig for each imported file by going up the directory structure and looking for `tsconfig.json` or `jsconfig.json`. This way, you can create a `tests/tsconfig.json` file that will be used only for your tests and Playwright will pick it up automatically.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-typescript-js.md","title":"src-test-typescript-js","url":"https://playwright.dev/docs/src-test-typescript-js","loc":{"lines":{"from":52,"to":79}}}}],["c39b4c93-0c6b-482f-b376-ce720b16f2ab",{"pageContent":"```sh\n# Playwright will choose tsconfig automatically\nnpx playwright test\n```\n\nAlternatively, you can specify a single tsconfig file to use in the command line, and Playwright will use it for all imported files, not only test files.\n\n```sh\n# Pass a specific tsconfig\nnpx playwright test --tsconfig=tsconfig.test.json\n```\n\nYou can specify a single tsconfig file in the config file, that will be used for loading test files, reporters, etc. However, it will not be used while loading the playwright config itself or any files imported from it.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  tsconfig: './tsconfig.test.json',\n});\n```\n\n## Manually compile tests with TypeScript\n\nSometimes, Playwright Test will not be able to transform your TypeScript code correctly, for example when you are using experimental or very recent features of TypeScript, usually configured in `tsconfig.json`.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-typescript-js.md","title":"src-test-typescript-js","url":"https://playwright.dev/docs/src-test-typescript-js","loc":{"lines":{"from":81,"to":105}}}}],["dc255899-e924-47f9-b545-7c8910e6fee9",{"pageContent":"In this case, you can perform your own TypeScript compilation before sending the tests to Playwright.\n\nFirst add a `tsconfig.json` file inside the tests directory:\n\n```json\n{\n    \"compilerOptions\": {\n        \"target\": \"ESNext\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"Node\",\n        \"sourceMap\": true,\n        \"outDir\": \"../tests-out\",\n    }\n}\n```\n\nIn `package.json`, add two scripts:\n\n```json\n{\n  \"scripts\": {\n    \"pretest\": \"tsc --incremental -p tests/tsconfig.json\",\n    \"test\": \"playwright test -c tests-out\"\n  }\n}\n```\n\nThe `pretest` script runs typescript on the tests. `test` will run the tests that have been generated to the `tests-out` directory. The `-c` argument configures the test runner to look for tests inside the `tests-out` directory.\n\nThen `npm run test` will build the tests and run them.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-typescript-js.md","title":"src-test-typescript-js","url":"https://playwright.dev/docs/src-test-typescript-js","loc":{"lines":{"from":107,"to":136}}}}],["278d8ffc-4c78-415e-a110-f679c21b8581",{"pageContent":"---\nid: test-ui-mode\ntitle: \"UI Mode\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nUI Mode lets you explore, run, and debug tests with a time travel experience complete with a watch mode. All test files are displayed in the testing sidebar, allowing you to expand each file and describe block to individually run, view, watch, and debug each test. Filter tests by **name**, [**projects**](./test-projects) (set in your `playwright.config` file), **@tag**, or by the execution status of **passed**, **failed**, and **skipped**. See a full trace of your tests and hover back and forward over each action to see what was happening during each step. You can also pop out the DOM snapshot of a given moment into a separate window for a better debugging experience.\n\n<LiteYouTube\n    id=\"d0u6XhXknzU\"\n    title=\"Playwrights UI Mode\"\n/>\n\n## Opening UI Mode\n\nTo open UI mode, run the following command in your terminal:\n\n```bash\nnpx playwright test --ui\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":1,"to":23}}}}],["4937618e-8ce1-40cc-abd1-9226c8e211f1",{"pageContent":"<LiteYouTube\n    id=\"d0u6XhXknzU\"\n    title=\"Playwrights UI Mode\"\n/>\n\n## Opening UI Mode\n\nTo open UI mode, run the following command in your terminal:\n\n```bash\nnpx playwright test --ui\n```\n\n## Running your tests\n\nOnce you launch UI Mode you will see a list of all your test files. You can run all your tests by clicking the triangle icon in the sidebar. You can also run a single test file, a block of tests or a single test by hovering over the name and clicking on the triangle next to it.\n\n![running tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/6b87712f-64a5-4d73-a91d-6562b864712c)\n\n## Filtering tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":12,"to":31}}}}],["a3851703-2537-4406-bb61-7ada3fd01b3c",{"pageContent":"![running tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/6b87712f-64a5-4d73-a91d-6562b864712c)\n\n## Filtering tests\n\nFilter tests by text or `@tag` or by passed, failed or skipped tests. You can also filter by [projects](./test-projects) as set in your `playwright.config` file. If you are using project dependencies make sure to run your setup tests first before running the tests that depend on them. The UI mode will not take into consideration the setup tests and therefore you will have to manually run them first.\n\n![filtering tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/6f05e589-036d-45d5-9078-38134e1261e4)\n\n## Timeline view","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":29,"to":37}}}}],["4e8a5969-d7bf-4fad-a85e-b46c0de73ff1",{"pageContent":"![filtering tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/6f05e589-036d-45d5-9078-38134e1261e4)\n\n## Timeline view\n\nAt the top of the trace you can see a timeline view of your test with different colors to highlight navigation and actions. Hover back and forth to see an image snapshot for each action. Double click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.\n\n![timeline view in ui mode](https://github.com/microsoft/playwright/assets/13063165/811a9985-32aa-4a3e-9869-de32053cf468)\n\n## Actions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":35,"to":43}}}}],["be98f2f2-fe0d-49e7-93ed-8c3e4ffa0c25",{"pageContent":"![timeline view in ui mode](https://github.com/microsoft/playwright/assets/13063165/811a9985-32aa-4a3e-9869-de32053cf468)\n\n## Actions\n\nIn the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.\n![use before and after actions in ui mode](https://github.com/microsoft/playwright/assets/13063165/7b22fab5-7346-4b98-8fdd-a78ed280647f)\n\n## Pop out and inspect the DOM","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":41,"to":48}}}}],["1ac96dbc-ec4b-462d-aa11-894126eef3b2",{"pageContent":"## Pop out and inspect the DOM\n\nPop out the DOM snapshot into its own window for a better debugging experience by clicking on the pop out icon above the DOM snapshot. From there you can open the browser DevTools and inspect the HTML, CSS, Console etc. Go back to UI Mode and click on another action and pop that one out to easily compare the two side by side or debug each individually.\n\n![pop out dom snapshot in ui mode](https://github.com/microsoft/playwright/assets/13063165/f9f43a0c-78d7-4574-9a58-c69d2ec53c8f)\n\n## Pick locator\n\nClick on the pick locator button and hover over the DOM snapshot to see the locator for each element highlighted as you hover. Click on an element to add the locator playground. You can modify the locator in the playground and see if your modified locator matches any locators in the DOM snapshot. Once you are satisfied with the locator you can use the copy button to copy the locator and paste it into your test.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":48,"to":56}}}}],["1e78a897-d32e-4227-ad62-fc4de2d2e5c5",{"pageContent":"![pick locator in ui mode](https://github.com/microsoft/playwright/assets/13063165/9e7eeb84-bd26-4010-8614-75e24b56c716)\n\n## Source\n\nAs you hover over each action of your test the line of code for that action is highlighted in the source panel. The button \"Open in VSCode\" is at the top-right of this section. Upon clicking the button, it will open your test in VS Code right at the line of code that you clicked on.\n\n![showing source code of tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/49b9fa2a-8a57-4044-acaa-0a2ea4784c5c)\n\n## Call\n\nThe call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.\n\n![showing call tab in ui mode](https://github.com/microsoft/playwright/assets/13063165/442314c3-0b16-4400-bf25-c198f8654849)\n\n## Log","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":58,"to":72}}}}],["b4ffbd7e-160e-4ad4-b4ec-d5c038ed62c4",{"pageContent":"![showing call tab in ui mode](https://github.com/microsoft/playwright/assets/13063165/442314c3-0b16-4400-bf25-c198f8654849)\n\n## Log\n\nSee a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.\n\n![showing log of tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/1d214ee5-2c07-414d-a342-f88d0864ac89)\n\n## Errors\n\nIf your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.\n\n![showing errors in ui mode](https://github.com/microsoft/playwright/assets/13063165/ffca2fd1-5349-41fb-ade9-ace143bb2c58)\n\n## Console","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":70,"to":84}}}}],["d903f5af-961f-4520-9ec0-1fab52dfb498",{"pageContent":"![showing errors in ui mode](https://github.com/microsoft/playwright/assets/13063165/ffca2fd1-5349-41fb-ade9-ace143bb2c58)\n\n## Console\n\nSee console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.\n\n![showing console logs from tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/b6a44763-da04-4152-bbac-3369ca4a60ac)\n\n## Network\n\nThe Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.\n\n![showing network requests from tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/946c2722-447a-4005-9518-b4e9b73a8240)\n\n## Attachments","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":82,"to":96}}}}],["f1269a5a-2f44-43c7-9aee-911fb1ce0231",{"pageContent":"![showing network requests from tests in ui mode](https://github.com/microsoft/playwright/assets/13063165/946c2722-447a-4005-9518-b4e9b73a8240)\n\n## Attachments\n\nThe \"Attachments\" tab allows you to explore attachments. If you're doing [visual regression testing](./test-snapshots.md), you'll be able to compare screenshots by examining the image diff, the actual image and the expected image. When you click on the expected image you can use the slider to slide one image over the other so you can easily see the differences in your screenshots.\n\n![ui mode with attachments](https://github.com/microsoft/playwright/assets/13063165/bb83b406-84ed-4380-a96c-0e62d1388093)\n\n## Metadata\n\nNext to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.\n\n![metadata tab in ui mode](https://github.com/microsoft/playwright/assets/13063165/befff46e-381a-41c2-8259-e47442add425)\n\n## Watch mode","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":94,"to":108}}}}],["1f23ef0a-f831-4a4b-93ea-1e9567d4ffc4",{"pageContent":"![metadata tab in ui mode](https://github.com/microsoft/playwright/assets/13063165/befff46e-381a-41c2-8259-e47442add425)\n\n## Watch mode\n\nNext to the name of each test in the sidebar you will find an eye icon. Clicking on the icon will activate watch mode which will re-run the test when you make changes to it. You can watch a number of tests at the same time be clicking the eye icon next to each one or all tests by clicking the eye icon at the top of the sidebar.\n\n![watch mode in ui mode](https://github.com/microsoft/playwright/assets/13063165/20d7d44c-b52d-43ff-8871-8b828671f3da)\n\n## Docker & GitHub Codespaces\n\nFor Docker and GitHub Codespaces environments, you can run UI mode in the browser. In order for an endpoint to be accessible outside of the container, it needs to be bound to the `0.0.0.0` interface:\n\n```bash\nnpx playwright test --ui-host=0.0.0.0\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":106,"to":120}}}}],["ee45436a-dcf5-4a3d-8ac5-aa1ab3a9400a",{"pageContent":"```bash\nnpx playwright test --ui-host=0.0.0.0\n```\n\nIn the case of GitHub Codespaces, the port gets [forwarded automatically](https://docs.github.com/en/codespaces/developing-in-codespaces/forwarding-ports-in-your-codespace#about-forwarded-ports), so you can open UI mode in the browser by clicking on the link in the terminal.\n\nTo have a static port, you can pass the `--ui-port` flag:\n\n```bash\nnpx playwright test --ui-port=8080 --ui-host=0.0.0.0\n```\n\n:::note\nBe aware that when specifying the `--ui-host=0.0.0.0` flag, UI Mode with your traces, the passwords and secrets is accessible from other machines inside your network. In the case of GitHub Codespaces, the ports are only accessible from your account by default.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-ui-mode-js.md","title":"src-test-ui-mode-js","url":"https://playwright.dev/docs/src-test-ui-mode-js","loc":{"lines":{"from":118,"to":132}}}}],["99611482-40f8-4a41-a7eb-c941a329591d",{"pageContent":"---\nid: test-use-options\ntitle: \"Test use options\"\n---\n\n## Introduction\n\nIn addition to configuring the test runner you can also configure [Emulation](#emulation-options), [Network](#network-options) and [Recording](#recording-options) for the [Browser] or [BrowserContext]. These options are passed to the `use: {}` object in the Playwright config.\n\n### Basic Options\n\nSet the base URL and storage state for all tests:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://localhost:3000',\n\n    // Populates context with given storage state.\n    storageState: 'state.json',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":1,"to":26}}}}],["ace70e12-34a9-46b7-a867-5ec4e4a3ee51",{"pageContent":"// Populates context with given storage state.\n    storageState: 'state.json',\n  },\n});\n```\n\n\n| Option | Description |\n| :- | :- |\n| [`property: TestOptions.baseURL`] | Base URL used for all pages in the context. Allows navigating by using just the path, for example `page.goto('/settings')`. |\n| [`property: TestOptions.storageState`] | Populates context with given storage state. Useful for easy authentication, [learn more](./auth.md). |\n\n### Emulation Options\n\nWith Playwright you can emulate a real device such as a mobile phone or tablet. See our [guide on projects](./test-projects.md) for more info on emulating devices. You can also emulate the `\"geolocation\"`, `\"locale\"` and `\"timezone\"` for all tests or for a specific test as well as set the `\"permissions\"` to show notifications or change the `\"colorScheme\"`. See our [Emulation](./emulation.md) guide to learn more.\n\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":22,"to":40}}}}],["9434f2b1-85eb-4790-8ae4-eaa1271b715a",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates `'prefers-colors-scheme'` media feature.\n    colorScheme: 'dark',\n\n    // Context geolocation.\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n\n    // Emulates the user locale.\n    locale: 'en-GB',\n\n    // Grants specified permissions to the browser context.\n    permissions: ['geolocation'],\n\n    // Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n\n    // Viewport used for all pages in the context.\n    viewport: { width: 1280, height: 720 },\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":39,"to":63}}}}],["d356e8b4-3988-4b55-bd76-17624d4d0419",{"pageContent":"// Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n\n    // Viewport used for all pages in the context.\n    viewport: { width: 1280, height: 720 },\n  },\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestOptions.colorScheme`] | [Emulates](./emulation.md#color-scheme-and-media) `'prefers-colors-scheme'` media feature, supported values are `'light'` and `'dark'` |\n| [`property: TestOptions.geolocation`] | Context [geolocation](./emulation.md#geolocation). |\n| [`property: TestOptions.locale`] | [Emulates](./emulation.md#locale--timezone) the user locale, for example `en-GB`, `de-DE`, etc. |\n| [`property: TestOptions.permissions`] | A list of [permissions](./emulation.md#permissions) to grant to all pages in the context. |\n| [`property: TestOptions.timezoneId`] | Changes the [timezone](./emulation.md#locale--timezone) of the context. |\n| [`property: TestOptions.viewport`] | [Viewport](./emulation.md#viewport) used for all pages in the context. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":56,"to":72}}}}],["3c7b7648-809e-429f-b1e6-72b3de5f139c",{"pageContent":"### Network Options\n\nAvailable options to configure networking:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Whether to automatically download all the attachments.\n    acceptDownloads: false,\n\n    // An object containing additional HTTP headers to be sent with every request.\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n\n    // Credentials for HTTP authentication.\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n\n    // Whether to ignore HTTPS errors during navigation.\n    ignoreHTTPSErrors: true,\n\n    // Whether to emulate network being offline.\n    offline: true,\n\n    // Proxy settings used for all pages in the test.\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":74,"to":110}}}}],["46278b8f-36ad-4405-ab84-2a7f3fdffad2",{"pageContent":"// Proxy settings used for all pages in the test.\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestOptions.acceptDownloads`] | Whether to automatically download all the attachments, defaults to `true`. [Learn more](./downloads.md) about working with downloads. |\n| [`property: TestOptions.extraHTTPHeaders`] | An object containing additional HTTP headers to be sent with every request. All header values must be strings. |\n| [`property: TestOptions.httpCredentials`] | Credentials for [HTTP authentication](./network.md#http-authentication). |\n| [`property: TestOptions.ignoreHTTPSErrors`] | Whether to ignore HTTPS errors during navigation. |\n| [`property: TestOptions.offline`] | Whether to emulate network being offline. |\n| [`property: TestOptions.proxy`] | [Proxy settings](./network.md#http-proxy) used for all pages in the test. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":103,"to":119}}}}],["17f8d9cf-5e07-45fa-b64d-fde61976d11e",{"pageContent":":::note\nYou don't have to configure anything to mock network requests. Just define a custom [Route] that mocks the network for a browser context. See our [network mocking guide](./network.md) to learn more.\n:::\n\n### Recording Options\n\nWith Playwright you can capture screenshots, record videos as well as traces of your test. By default these are turned off but you can enable them by setting the `screenshot`, `video` and `trace` options in your `playwright.config.js` file.\n\nTrace files, screenshots and videos will appear in the test output directory, typically `test-results`.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Capture screenshot after each test failure.\n    screenshot: 'only-on-failure',\n\n    // Record trace only when retrying a test for the first time.\n    trace: 'on-first-retry',\n\n    // Record video only when retrying a test for the first time.\n    video: 'on-first-retry'\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":122,"to":147}}}}],["6f181158-4f3e-40a3-a854-559a316b5534",{"pageContent":"// Record video only when retrying a test for the first time.\n    video: 'on-first-retry'\n  },\n});\n```\n\n| Option | Description |\n| :- | :- |\n| [`property: TestOptions.screenshot`] | Capture [screenshots](./screenshots.md) of your test. Options include `'off'`, `'on'` and `'only-on-failure'` |\n| [`property: TestOptions.trace`] | Playwright can produce test traces while running the tests. Later on, you can view the trace and get detailed information about Playwright execution by opening [Trace Viewer](./trace-viewer.md). Options include: `'off'`, `'on'`, `'retain-on-failure'` and `'on-first-retry'`  |\n| [`property: TestOptions.video`] | Playwright can record [videos](./videos.md) for your tests. Options include: `'off'`, `'on'`, `'retain-on-failure'` and `'on-first-retry'` |\n\n\n### Other Options\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":143,"to":159}}}}],["e9b8e6be-2464-4915-abd0-1a60c09f1c7c",{"pageContent":"### Other Options\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Maximum time each action such as `click()` can take. Defaults to 0 (no limit).\n    actionTimeout: 0,\n\n    // Name of the browser that runs tests. For example `chromium`, `firefox`, `webkit`.\n    browserName: 'chromium',\n\n    // Toggles bypassing Content-Security-Policy.\n    bypassCSP: true,\n\n    // Channel to use, for example \"chrome\", \"chrome-beta\", \"msedge\", \"msedge-beta\".\n    channel: 'chrome',\n\n    // Run browser in headless mode.\n    headless: false,\n\n    // Change the default data-testid attribute.\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":156,"to":182}}}}],["a93731e3-4adf-4b97-9092-2bf74c556212",{"pageContent":"| Option | Description |\n| :- | :- |\n| [`property: TestOptions.actionTimeout`] | Timeout for each Playwright action in milliseconds. Defaults to `0` (no timeout). Learn more about [timeouts](./test-timeouts.md) and how to set them for a single test. |\n| [`property: TestOptions.browserName`] | Name of the browser that runs tests. Defaults to 'chromium'. Options include `chromium`, `firefox`, or `webkit`. |\n| [`property: TestOptions.bypassCSP`] |Toggles bypassing Content-Security-Policy. Useful when CSP includes the production origin. Defaults to `false`. |\n| [`property: TestOptions.channel`] | Browser channel to use. [Learn more](./browsers.md) about different browsers and channels. |\n| [`property: TestOptions.headless`] | Whether to run the browser in headless mode meaning no browser is shown when running tests. Defaults to `true`. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":184,"to":190}}}}],["66e7ab64-1dac-4f20-bf17-4f1b08db4388",{"pageContent":"| [`property: TestOptions.headless`] | Whether to run the browser in headless mode meaning no browser is shown when running tests. Defaults to `true`. |\n| [`property: TestOptions.testIdAttribute`] | Changes the default [`data-testid` attribute](./locators.md#locate-by-test-id) used by Playwright locators. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":190,"to":191}}}}],["694000a1-4590-4ec4-af9a-11ec35e78306",{"pageContent":"### More browser and context options\n\nAny options accepted by [`method: BrowserType.launch`], [`method: Browser.newContext`] or [`method: BrowserType.connect`] can be put into `launchOptions`, `contextOptions` or `connectOptions` respectively in the `use` section.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    launchOptions: {\n      slowMo: 50,\n    },\n  },\n});\n```\n\nHowever, most common ones like `headless` or `viewport` are available directly in the `use` section - see [basic options](#basic-options), [emulation](#emulation-options) or [network](#network-options).\n\n### Explicit Context Creation and Option Inheritance\n\nIf using the built-in `browser` fixture, calling [`method: Browser.newContext`] will create a context with options inherited from the config:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":193,"to":216}}}}],["8b956693-26aa-4e83-878a-b619a3ada1d8",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\nAn example test illustrating the initial context options are set:\n\n```js\ntest('should inherit use options on context when using built-in browser fixture', async ({\n  browser,\n}) => {\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  expect(await page.evaluate(() => navigator.userAgent)).toBe('some custom ua');\n  expect(await page.evaluate(() => window.innerWidth)).toBe(100);\n  await context.close();\n});\n```\n\n### Configuration Scopes","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":215,"to":240}}}}],["bad1c9ff-af42-44d5-9e5c-bbb00ff04879",{"pageContent":"### Configuration Scopes\n\nYou can configure Playwright globally, per project, or per test. For example, you can set the locale to be used globally by adding `locale` to the `use` option of the Playwright config, and then override it for a specific project using the `project` option in the config. You can also override it for a specific test by adding `test.use({})` in the test file and passing in the options.\n\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'en-GB'\n  },\n});\n```\n\nYou can override options for a specific project using the `project` option in the Playwright config.\n\n```js\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        locale: 'de-DE',\n      },\n    },\n  ],\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":240,"to":271}}}}],["2366204c-e3ee-47cf-8b03-b35a03553170",{"pageContent":"export default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        locale: 'de-DE',\n      },\n    },\n  ],\n});\n```\n\nYou can override options for a specific test file by using the `test.use()` method and passing in the options. For example to run tests with the French locale for a specific test:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'fr-FR' });\n\ntest('example', async ({ page }) => {\n  // ...\n});\n```\n\nThe same works inside a describe block. For example to run tests in a describe block with the French locale:\n\n```js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('french language block', () => {\n\n  test.use({ locale: 'fr-FR' });\n\n  test('example', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n### Reset an option\n\nYou can reset an option to the value defined in the config file. Consider the following config that sets a `baseURL`:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":260,"to":302}}}}],["412ace7a-c100-4d8e-9e1e-b0ec10e9e415",{"pageContent":"### Reset an option\n\nYou can reset an option to the value defined in the config file. Consider the following config that sets a `baseURL`:\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    baseURL: 'https://playwright.dev',\n  },\n});\n```\n\nYou can now configure `baseURL` for a file, and also opt-out for a single test.\n\n```js title=\"intro.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Configure baseURL for this file.\ntest.use({ baseURL: 'https://playwright.dev/docs/intro' });\n\ntest('check intro contents', async ({ page }) => {\n  // This test will use \"https://playwright.dev/docs/intro\" base url as defined above.\n});\n\ntest.describe(() => {\n  // Reset the value to a config-defined one.\n  test.use({ baseURL: undefined });\n\n  test('can navigate to intro from the home page', async ({ page }) => {\n    // This test will use \"https://playwright.dev\" base url as defined in the config.\n  });\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":300,"to":334}}}}],["294d3c49-08ef-4add-844a-69a0140dbeef",{"pageContent":"test('can navigate to intro from the home page', async ({ page }) => {\n    // This test will use \"https://playwright.dev\" base url as defined in the config.\n  });\n});\n```\n\nIf you would like to completely reset the value to `undefined`, use a long-form fixture notation.\n\n```js title=\"intro.spec.ts\"\nimport { test } from '@playwright/test';\n\n// Completely unset baseURL for this file.\ntest.use({\n  baseURL: [async ({}, use) => use(undefined), { scope: 'test' }],\n});\n\ntest('no base url', async ({ page }) => {\n  // This test will not have a base url.\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-use-options-js.md","title":"src-test-use-options-js","url":"https://playwright.dev/docs/src-test-use-options-js","loc":{"lines":{"from":330,"to":349}}}}],["deb772a2-5b9e-48d9-b520-f7c5055ad6d5",{"pageContent":"---\nid: test-webserver\ntitle: \"Web server\"\n---\n\n## Introduction\n\nPlaywright comes with a `webserver` option in the config file which gives you the ability to launch a local dev server before running your tests. This is ideal for when writing your tests during development and when you don't have a staging or production url to test against.\n\n## Configuring a web server\n\nUse the `webserver` property in your Playwright config to launch a development web server during the tests.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'ignore',\n    stderr: 'pipe',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":1,"to":27}}}}],["3ea28450-dbe4-4f60-8052-98764ea2a289",{"pageContent":"| Property | Description |\n| :- | :- |\n| [`property: TestConfig.webServer`] | Launch a development web server (or multiple) during the tests. |\n| `command`| Shell command to start the local dev server of your app. |\n| `cwd` | Current working directory of the spawned process, defaults to the directory of the configuration file. |\n| `env` | Environment variables to set for the command, `process.env` by default. |\n| `gracefulShutdown` | How to shut down the process. If unspecified, the process group is forcefully `SIGKILL`ed. If set to `{ signal: 'SIGTERM', timeout: 500 }`, the process group is sent a `SIGTERM` signal, followed by `SIGKILL` if it doesn't exit within 500ms. You can also use `SIGINT` as the signal instead. A `0` timeout means no `SIGKILL` will be sent. Windows doesn't support `SIGTERM` and `SIGINT` signals, so this option is ignored on Windows. Note that shutting down a Docker container requires `SIGTERM`. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":29,"to":35}}}}],["cfac9379-8eba-4eff-bd85-e6ec19e197a6",{"pageContent":"| `ignoreHTTPSErrors` | Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`. |\n| `name` | Specifies a custom name for the web server. This name will be prefixed to log messages. Defaults to `[WebServer]`. |\n| `reuseExistingServer`| If `true`, it will re-use an existing server on the url when available. If no server is running on that url, it will run the command to start a new server. If `false`, it will throw if an existing process is listening on the url. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable. |\n| `stderr` | Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `\"pipe\"`. |\n| `stdout` | If `\"pipe\"`, it will pipe the stdout of the command to the process stdout. If `\"ignore\"`, it will ignore the stdout of the command. Default to `\"ignore\"`. |\n| `timeout` | How long to wait for the process to start up and be available in milliseconds. Defaults to 60000. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":36,"to":41}}}}],["b87bf453-fa33-4092-8981-502183c57bdf",{"pageContent":"| `timeout` | How long to wait for the process to start up and be available in milliseconds. Defaults to 60000. |\n| `url`| URL of your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections. |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":41,"to":42}}}}],["b0c69b57-c3f3-4f6a-8967-b18202fce573",{"pageContent":"## Adding a server timeout\n\nWebservers can sometimes take longer to boot up. In this case, you can increase the timeout to wait for the server to start.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120 * 1000,\n  },\n});\n```\n\n## Adding a baseURL\n\nIt is also recommended to specify the `baseURL` in the `use: {}` section of your config, so that tests can use relative urls and you don't have to specify the full URL over and over again.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":44,"to":66}}}}],["be8cccb7-a70a-4065-8ce0-493f0ff3ceab",{"pageContent":"It is also recommended to specify the `baseURL` in the `use: {}` section of your config, so that tests can use relative urls and you don't have to specify the full URL over and over again. \n\nWhen using [`method: Page.goto`], [`method: Page.route`], [`method: Page.waitForURL`], [`method: Page.waitForRequest`], or [`method: Page.waitForResponse`] it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. For Example, by setting the baseURL to `http://localhost:3000` and navigating to `/login` in your tests, Playwright will run the test using `http://localhost:3000/login`.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":66,"to":74}}}}],["42fd7e6f-f7d6-4e95-838c-1adcf207254c",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\nNow you can use a relative path when navigating the page:\n\n```js title=\"test.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will navigate to http://localhost:3000/login\n  await page.goto('./login');\n});\n```\n\n## Multiple web servers\n\nMultiple web servers (or background processes) can be launched simultaneously by providing an array of `webServer` configurations. See [`property: TestConfig.webServer`] for more info.\n\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":70,"to":105}}}}],["27e7a2bb-d4c6-42ce-8db1-1de18345c9af",{"pageContent":"```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://localhost:3000',\n      name: 'Frontend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://localhost:3333',\n      name: 'Backend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-test-webserver-js.md","title":"src-test-webserver-js","url":"https://playwright.dev/docs/src-test-webserver-js","loc":{"lines":{"from":104,"to":128}}}}],["80712229-3d8e-4018-ae20-e5172a785313",{"pageContent":"---\nid: testing-library\ntitle: \"Migrating from Testing Library\"\n---\n\n## Migration principles\n\nThis guide describes migration to Playwright's [Experimental Component Testing](./test-components) from [DOM Testing Library](https://testing-library.com/docs/dom-testing-library/intro/), [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/), [Vue Testing Library](https://testing-library.com/docs/vue-testing-library/intro) and [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/intro).\n\n:::note\nIf you use DOM Testing Library in the browser (for example, you bundle end-to-end tests with webpack), you can switch directly to Playwright Test. Examples below are focused on component tests, but for end-to-end test you just need to replace `await mount` with `await page.goto('http://localhost:3000/')` to open the page under test.\n:::\n\n## Cheat Sheet","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":1,"to":14}}}}],["d36acf1c-3cd3-4d5c-92cd-1c76dddeab87",{"pageContent":"| Testing Library                                                                 | Playwright                                                             |\n| ------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| [screen](https://testing-library.com/docs/queries/about#screen)                 | [page](./api/class-page) and [component](./api/class-locator)          |\n| [queries](https://testing-library.com/docs/queries/about)                       | [locators](./locators)                                                 |\n| [async helpers](https://testing-library.com/docs/dom-testing-library/api-async) | [assertions](./test-assertions)                                        |\n| [user events](https://testing-library.com/docs/user-event/intro)                | [actions](./api/class-locator)                                         |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":16,"to":21}}}}],["e34f51b6-4851-482e-bfef-0bf052c48179",{"pageContent":"| [user events](https://testing-library.com/docs/user-event/intro)                | [actions](./api/class-locator)                                         |\n| `await user.click(screen.getByText('Click me'))`                                | `await component.getByText('Click me').click()`                        |\n| `await user.click(await screen.findByText('Click me'))`                         | `await component.getByText('Click me').click()`                        |\n| `await user.type(screen.getByLabelText('Password'), 'secret')`                  | `await component.getByLabel('Password').fill('secret')`                |\n| `expect(screen.getByLabelText('Password')).toHaveValue('secret')`               | `await expect(component.getByLabel('Password')).toHaveValue('secret')` |\n| `screen.getByRole('button', { pressed: true })`                                 | `component.getByRole('button', { pressed: true })`                     |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":21,"to":26}}}}],["c6c829bc-c554-4dd6-915b-c81bfd715572",{"pageContent":"| `screen.getByRole('button', { pressed: true })`                                 | `component.getByRole('button', { pressed: true })`                     |\n| `screen.getByLabelText('...')`                                                  | `component.getByLabel('...')`                                          |\n| `screen.queryByPlaceholderText('...')`                                          | `component.getByPlaceholder('...')`                                    |\n| `screen.findByText('...')`                                                      | `component.getByText('...')`                                           |\n| `screen.getByTestId('...')`                                                     | `component.getByTestId('...')`                                         |\n| `render(<Component />);`                                                        | `mount(<Component />);`                                                |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":26,"to":31}}}}],["522d7071-bc5d-4d34-af78-bc93734c3e2a",{"pageContent":"| `render(<Component />);`                                                        | `mount(<Component />);`                                                |\n| `const { unmount } = render(<Component />);`                                    | `const { unmount } = await mount(<Component />);`                      |\n| `const { rerender } = render(<Component />);`                                   | `const { update } = await mount(<Component />);`                       |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":31,"to":33}}}}],["5f0634a1-6424-49e6-b433-48faa2790c2a",{"pageContent":"## Example\n\nTesting Library:\n\n```js\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest('sign in', async () => {\n  // Setup the page.\n  const user = userEvent.setup();\n  render(<SignInPage />);\n\n  // Perform actions.\n  await user.type(screen.getByLabelText('Username'), 'John');\n  await user.type(screen.getByLabelText('Password'), 'secret');\n  await user.click(screen.getByRole('button', { name: 'Sign in' }));\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  expect(await screen.findByText('Welcome, John')).toBeInTheDocument();\n});\n```\n\nLine-by-line migration to Playwright Test:\n\n```js\nconst { test, expect } = require('@playwright/experimental-ct-react'); // 1\n\ntest('sign in', async ({ mount }) => { // 2\n  // Setup the page.\n  const component = await mount(<SignInPage />); // 3","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":36,"to":67}}}}],["86289ea9-a8ee-4104-b886-94422dd3f19c",{"pageContent":"test('sign in', async ({ mount }) => { // 2\n  // Setup the page.\n  const component = await mount(<SignInPage />); // 3\n\n  // Perform actions.\n  await component.getByLabel('Username').fill('John'); // 4\n  await component.getByLabel('Password').fill('secret');\n  await component.getByRole('button', { name: 'Sign in' }).click();\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  await expect(component.getByText('Welcome, John')).toBeVisible(); // 5\n});\n```\n\nMigration highlights (see inline comments in the Playwright Test code snippet):","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":65,"to":79}}}}],["86a7d411-8413-4d2d-969f-5345be8565bb",{"pageContent":"Migration highlights (see inline comments in the Playwright Test code snippet):\n\n1. Import everything from `@playwright/experimental-ct-react` (or -vue, -svelte) for component tests, or from `@playwright/test` for end-to-end tests.\n1. Test function is given a `page` that is isolated from other tests, and `mount` that renders a component in this page. These are two of the [useful fixtures](./api/class-fixtures) in Playwright Test.\n1. Replace `render` with `mount` that returns a [component locator](./locators).\n1. Use locators created with [`method: Locator.locator`] or [`method: Page.locator`] to perform most of the actions.\n1. Use [assertions](./test-assertions) to verify the state.\n\n## Migrating queries","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":79,"to":87}}}}],["519806b0-9c57-4578-8303-69df4a5248d4",{"pageContent":"## Migrating queries\n\nAll queries like `getBy...`, `findBy...`, `queryBy...` and their multi-element counterparts are replaced with `component.getBy...` locators. Locators always auto-wait and retry when needed, so you don't have to worry about choosing the right method. When you want to do a [list operation](./locators#lists), e.g. assert a list of texts, Playwright automatically performs multi-element operations.\n\n## Replacing `waitFor`\n\nPlaywright includes [assertions](./test-assertions) that automatically wait for the condition, so you don't usually need an explicit `waitFor`/`waitForElementToBeRemoved` call.\n\n```js\n// Testing Library\nawait waitFor(() => {\n  expect(getByText('the lion king')).toBeInTheDocument();\n});\nawait waitForElementToBeRemoved(() => queryByText('the mummy'));\n\n// Playwright\nawait expect(page.getByText('the lion king')).toBeVisible();\nawait expect(page.getByText('the mummy')).toBeHidden();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":87,"to":105}}}}],["db36a43b-9c6b-4f0a-a167-f81fdb641a7a",{"pageContent":"// Playwright\nawait expect(page.getByText('the lion king')).toBeVisible();\nawait expect(page.getByText('the mummy')).toBeHidden();\n```\n\nWhen you cannot find a suitable assertion, use [`expect.poll`](./test-assertions#expectpoll) instead.\n\n```js\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}).toBe(200);\n```\n\n## Replacing `within`\n\nYou can create a locator inside another locator with [`method: Locator.locator`] method.\n\n```js\n// Testing Library\nconst messages = document.getElementById('messages');\nconst helloMessage = within(messages).getByText('hello');\n\n// Playwright\nconst messages = component.getByTestId('messages');\nconst helloMessage = messages.getByText('hello');\n```\n\n## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":102,"to":132}}}}],["af16badd-2c37-482c-b48a-96d70f00aada",{"pageContent":"## Playwright Test Super Powers\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](./api/class-frame), [tabs and contexts](./pages)\n- Run tests in isolation in parallel across multiple browsers\n- Built-in test [artifact collection](./test-use-options.md#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n- [Visual Studio Code integration](./getting-started-vscode.md)\n- [UI mode](./test-ui-mode.md) for debugging tests with a time travel experience complete with watch mode.\n- [Playwright Inspector](./debug.md#playwright-inspector)\n- [Playwright Test Code generation](./codegen-intro.md)\n- [Playwright Tracing](./trace-viewer.md) for post-mortem debugging\n\n## Further Reading\n\nLearn more about Playwright Test runner:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":130,"to":149}}}}],["82c407ba-dae2-499d-bf2e-6377546781ef",{"pageContent":"## Further Reading\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](./intro)\n- [Experimental Component Testing](./test-components)\n- [Locators](./locators.md)\n- [Assertions](./test-assertions)\n- [Auto-waiting](./actionability)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-testing-library-js.md","title":"src-testing-library-js","url":"https://playwright.dev/docs/src-testing-library-js","loc":{"lines":{"from":147,"to":155}}}}],["ef8fdf74-67a6-42ec-92c9-7955fc5e1ba0",{"pageContent":"---\nid: multithreading\ntitle: \"Multithreading\"\n---\n\n## Introduction\n\nPlaywright Java is not thread safe, i.e. all its methods as well as methods on all objects created by it (such as [BrowserContext], [Browser], [Page] etc.) are expected to be called on the same thread where the Playwright object was created or proper synchronization should be implemented to ensure only one thread calls Playwright methods at any given time. Having said that it's okay to create multiple Playwright instances each on its own thread.\n\nHere is an example where three playwright instances are created each on its own thread. Each instance launches its own browser process and runs the test against it.\n\n```java\npackage org.example;\n\nimport com.microsoft.playwright.*;\n\nimport java.nio.file.Paths;\n\nimport static java.util.Arrays.asList;\n\npublic class PlaywrightThread extends Thread {\n  private final String browserName;\n\n  private PlaywrightThread(String browserName) {\n    this.browserName = browserName;\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-threading-java.md","title":"src-threading-java","url":"https://playwright.dev/docs/src-threading-java","loc":{"lines":{"from":1,"to":26}}}}],["1d1169d8-44db-4d83-a8e2-51fd81eda4fd",{"pageContent":"public class PlaywrightThread extends Thread {\n  private final String browserName;\n\n  private PlaywrightThread(String browserName) {\n    this.browserName = browserName;\n  }\n\n  public static void main(String[] args) throws InterruptedException {\n    // Create separate playwright thread for each browser.\n    for (String browserName: asList(\"chromium\", \"webkit\", \"firefox\")) {\n      Thread thread = new PlaywrightThread(browserName);\n      thread.start();\n    }\n  }\n\n  @Override\n  public void run() {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType browserType = getBrowserType(playwright, browserName);\n      Browser browser = browserType.launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://playwright.dev/\");\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"user-agent-\" + browserName + \".png\")));\n    }\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-threading-java.md","title":"src-threading-java","url":"https://playwright.dev/docs/src-threading-java","loc":{"lines":{"from":21,"to":45}}}}],["b018e164-a5c6-40f0-b8ed-5ed32977c114",{"pageContent":"private static BrowserType getBrowserType(Playwright playwright, String browserName) {\n    switch (browserName) {\n      case \"chromium\":\n        return playwright.chromium();\n      case \"webkit\":\n        return playwright.webkit();\n      case \"firefox\":\n        return playwright.firefox();\n      default:\n        throw new IllegalArgumentException();\n    }\n  }\n}\n```\n\n## Synchronous API and event dispatching\n\nIn the synchronous Playwright API all events are dispatched only when Playwright is running its message loop.\nThis happens automatically when you call any of the API methods and doesn't happen if there are no active\nPlaywright calls on the stack. If you need to wait for an event the best way to do this is via one of the\n`waitFor*` methods.\n\n### Page.waitForTimeout() vs. Thread.sleep()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-threading-java.md","title":"src-threading-java","url":"https://playwright.dev/docs/src-threading-java","loc":{"lines":{"from":47,"to":69}}}}],["b6894d12-3b51-43bc-84db-02d80bdb1152",{"pageContent":"### Page.waitForTimeout() vs. Thread.sleep()\n\nOne consequence of the synchronous API is that if you for whatever reason call `Thread.sleep()` no events will\nbe fired while the thread is sleeping. If you want events from the browser to be dispatched while the program\nexecution is paused use [`method: Page.waitForTimeout`] or [`method: Frame.waitForTimeout`]:\n\n```java\npage.onResponse(response -> System.out.println(response.url()));\npage.navigate(\"https://playwright.dev\");\nSystem.out.println(\"-- did navigate --\");\n// Block current thread for 60s and ensure the events are dispatched.\npage.waitForTimeout(60_000);\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-threading-java.md","title":"src-threading-java","url":"https://playwright.dev/docs/src-threading-java","loc":{"lines":{"from":69,"to":81}}}}],["89834fe8-8632-4377-84d3-e390496408fd",{"pageContent":"---\nid: touch-events\ntitle: \"Touch events (legacy)\"\n---\n\n## Introduction\n\nWeb applications that handle legacy [touch events](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events) to respond to gestures like swipe, pinch, and tap can be tested by manually dispatching [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)s to the page. The examples below demonstrate how to use [`method: Locator.dispatchEvent`] and pass [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) points as arguments.\n\nNote that [`method: Locator.dispatchEvent`] does not set [`Event.isTrusted`](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted) property. If your web page relies on it, make sure to disable `isTrusted` check during the test.\n\n### Emulating pan gesture","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":1,"to":12}}}}],["2c4280b5-d129-4904-8836-34b87e218f56",{"pageContent":"### Emulating pan gesture\n\nIn the example below, we emulate pan gesture that is expected to move the map. The app under test only uses `clientX/clientY` coordinates of the touch point, so we initialize just that. In a more complex scenario you may need to also set `pageX/pageY/screenX/screenY`, if your app needs them.\n\n```js\nimport { test, expect, devices, type Locator } from '@playwright/test';\n\ntest.use({ ...devices['Pixel 7'] });\n\nasync function pan(locator: Locator, deltaX?: number, deltaY?: number, steps?: number) {\n  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {\n    const bounds = target.getBoundingClientRect();\n    const centerX = bounds.left + bounds.width / 2;\n    const centerY = bounds.top + bounds.height / 2;\n    return { centerX, centerY };\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":12,"to":27}}}}],["8f52d5e5-9004-4262-90f7-403e98c32209",{"pageContent":"// Providing only clientX and clientY as the app only cares about those.\n  const touches = [{\n    identifier: 0,\n    clientX: centerX,\n    clientY: centerY,\n  }];\n  await locator.dispatchEvent('touchstart',\n      { touches, changedTouches: touches, targetTouches: touches });\n\n  steps = steps ?? 5;\n  deltaX = deltaX ?? 0;\n  deltaY = deltaY ?? 0;\n  for (let i = 1; i <= steps; i++) {\n    const touches = [{\n      identifier: 0,\n      clientX: centerX + deltaX * i / steps,\n      clientY: centerY + deltaY * i / steps,\n    }];\n    await locator.dispatchEvent('touchmove',\n        { touches, changedTouches: touches, targetTouches: touches });\n  }\n\n  await locator.dispatchEvent('touchend');\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":29,"to":52}}}}],["096132e7-4860-4de8-a192-b56b75f7b684",{"pageContent":"await locator.dispatchEvent('touchend');\n}\n\ntest(`pan gesture to move the map`, async ({ page }) => {\n  await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z',\n      { waitUntil: 'commit' });\n  await page.getByRole('button', { name: 'Keep using web' }).click();\n  await expect(page.getByRole('button', { name: 'Keep using web' })).not.toBeVisible();\n  // Get the map element.\n  const met = page.locator('[data-test-id=\"met\"]');\n  for (let i = 0; i < 5; i++)\n    await pan(met, 200, 100);\n  // Ensure the map has been moved.\n  await expect(met).toHaveScreenshot();\n});\n```\n\n```csharp\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":51,"to":71}}}}],["b67effc9-304c-483f-864b-dd6829866ccf",{"pageContent":"```csharp\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class TouchEvents\n{\n    public static async Task Main(string[] args)\n    {\n        using var playwright = await Playwright.CreateAsync();\n        var browser = await playwright.Chromium.LaunchAsync();\n        var context = await browser.NewContextAsync(playwright.Devices[\"Pixel 7\"]);\n        var page = await context.NewPageAsync();\n\n        await page.GotoAsync(\n            \"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\",\n            new PageGotoOptions { WaitUntil = WaitUntilState.Commit }\n        );\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).ClickAsync();\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" })\n            .WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":68,"to":88}}}}],["b7bea22d-1c83-4dbe-b9c4-57b9e3d70bdc",{"pageContent":"var met = page.Locator(\"[data-test-id='met']\");\n        for (int i = 0; i < 5; i++)\n        {\n            await Pan(met, 200, 100);\n        }\n        await page.ScreenshotAsync(new PageScreenshotOptions { Path = \"screenshot.png\" });\n    }\n\n    public static async Task Pan(ILocator locator, int deltaX, int deltaY, int steps = 5)\n    {\n        var bounds = await locator.BoundingBoxAsync();\n        double centerX = bounds.X + bounds.Width / 2;\n        double centerY = bounds.Y + bounds.Height / 2;\n\n        var touches = new List<Dictionary<string, object>>\n        {\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 0 },\n                { \"clientX\", centerX },\n                { \"clientY\", centerY }\n            }\n        };\n        await locator.DispatchEventAsync(\"touchstart\", new { touches, changedTouches = touches, targetTouches = touches });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":90,"to":113}}}}],["292269e6-7bba-45a0-a3ad-74da84b39390",{"pageContent":"for (int i = 1; i <= steps; i++)\n        {\n            touches = new List<Dictionary<string, object>>\n            {\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 0 },\n                    { \"clientX\", centerX + deltaX * i / steps },\n                    { \"clientY\", centerY + deltaY * i / steps }\n                }\n            };\n            await locator.DispatchEventAsync(\"touchmove\", new { touches, changedTouches = touches, targetTouches = touches });\n        }\n\n        await locator.DispatchEventAsync(\"touchend\");\n    }\n}\n```\n\n```java\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.*;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":115,"to":136}}}}],["1a2ced63-e302-4847-87a8-7d4a16fa31f0",{"pageContent":"await locator.DispatchEventAsync(\"touchend\");\n    }\n}\n```\n\n```java\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.*;\n\npublic class TouchEvents {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch();\n      BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n        .setViewportSize(412, 839)\n        .setDeviceScaleFactor(2.625)\n        .setUserAgent(\"Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36\" +\n          \" (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36\")\n        .setHasTouch(true)\n        .setIsMobile(true)\n      );\n      Page page = context.newPage();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":129,"to":150}}}}],["644a3f30-8c2f-4159-88ba-875324f7bcb0",{"pageContent":"page.navigate(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).click();\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).waitFor(\n        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));\n\n      Locator met = page.locator(\"[data-test-id='met']\");\n      for (int i = 0; i < 5; i++) {\n        pan(met, 200, 100);\n      }\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n    }\n  }\n\n  public static void pan(Locator locator, int deltaX, int deltaY) {\n    pan(locator, deltaX, deltaY, 5);\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":152,"to":167}}}}],["e717bb53-ddeb-41a9-9336-742256551576",{"pageContent":"public static void pan(Locator locator, int deltaX, int deltaY) {\n    pan(locator, deltaX, deltaY, 5);\n  }\n\n  public static void pan(Locator locator, int deltaX, int deltaY, int steps) {\n    BoundingBox bounds = locator.boundingBox();\n    double centerX = bounds.x + bounds.width / 2;\n    double centerY = bounds.y + bounds.height / 2;\n\n    List<Map<String, Object>> touches = List.of(Map.of(\n      \"identifier\", 0,\n      \"clientX\", centerX,\n      \"clientY\", centerY\n    ));\n    locator.dispatchEvent(\"touchstart\", Map.of(\n      \"touches\", touches,\n      \"changedTouches\", touches,\n      \"targetTouches\", touches\n    ));\n\n    for (int i = 1; i <= steps; i++) {\n      touches = List.of(Map.of(\n        \"identifier\", 0,\n        \"clientX\", centerX + deltaX * i / steps,\n        \"clientY\", centerY + deltaY * i / steps\n      ));\n      locator.dispatchEvent(\"touchmove\", Map.of(\n        \"touches\", touches,\n        \"changedTouches\", touches,\n        \"targetTouches\", touches\n      ));\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":165,"to":196}}}}],["ae1257d5-6a03-46dd-9a3f-82ca48b63f59",{"pageContent":"locator.dispatchEvent(\"touchend\");\n  }\n}\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, expect\n\ndef pan(locator, deltaX=0, deltaY=0, steps=5):\n    bounds = locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    touches = [{\n        'identifier': 0,\n        'clientX': centerX,\n        'clientY': centerY,\n    }]\n    locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        touches = [{\n            'identifier': 0,\n            'clientX': centerX + deltaX * i / steps,\n            'clientY': centerY + deltaY * i / steps,\n        }]\n        locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    locator.dispatch_event('touchend')","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":198,"to":234}}}}],["6f1abc5f-d636-4e33-b3b0-669359a65fc7",{"pageContent":"locator.dispatch_event('touchend')\n\ndef test_pan_gesture_to_move_the_map(page):\n    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    page.get_by_role('button', name='Keep using web').click()\n    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        pan(met, 200, 100)\n    page.screenshot(path=\"screenshot.png\")\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    context = browser.new_context(**p.devices['Pixel 7'])\n    page = context.new_page()\n    test_pan_gesture_to_move_the_map(page)\n    browser.close()\n```\n\n```python async\nfrom playwright.async_api import async_playwright, expect\n\nasync def pan(locator, deltaX=0, deltaY=0, steps=5):\n    bounds = await locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":234,"to":259}}}}],["b412a9c1-8a76-4392-873d-49f5b557a533",{"pageContent":"async def pan(locator, deltaX=0, deltaY=0, steps=5):\n    bounds = await locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    touches = [{\n        'identifier': 0,\n        'clientX': centerX,\n        'clientY': centerY,\n    }]\n    await locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        touches = [{\n            'identifier': 0,\n            'clientX': centerX + deltaX * i / steps,\n            'clientY': centerY + deltaY * i / steps,\n        }]\n        await locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    await locator.dispatch_event('touchend')","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":256,"to":284}}}}],["2d20772d-ff42-42c9-bef8-17722c357a9f",{"pageContent":"await locator.dispatch_event('touchend')\n\nasync def test_pan_gesture_to_move_the_map(page):\n    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    await page.get_by_role('button', name='Keep using web').click()\n    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        await pan(met, 200, 100)\n    await page.screenshot(path=\"screenshot.png\")\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        context = await browser.new_context(**p.devices['Pixel 7'])\n        page = await context.new_page()\n        await test_pan_gesture_to_move_the_map(page)\n        await browser.close()\n\nimport asyncio\nasyncio.run(main())\n```\n\n\n### Emulating pinch gesture","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":284,"to":308}}}}],["557c95b7-0d21-42c4-8a95-dd6fc86f2da5",{"pageContent":"import asyncio\nasyncio.run(main())\n```\n\n\n### Emulating pinch gesture\n\nIn the example below, we emulate pinch gesture, i.e. two touch points moving closer to each other. It is expected to zoom out the map. The app under test only uses `clientX/clientY` coordinates of touch points, so we initialize just that. In a more complex scenario you may need to also set `pageX/pageY/screenX/screenY`, if your app needs them.\n\n```js\nimport { test, expect, devices, type Locator } from '@playwright/test';\n\ntest.use({ ...devices['Pixel 7'] });\n\nasync function pinch(locator: Locator,\n  arg: { deltaX?: number, deltaY?: number, steps?: number, direction?: 'in' | 'out' }) {\n  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {\n    const bounds = target.getBoundingClientRect();\n    const centerX = bounds.left + bounds.width / 2;\n    const centerY = bounds.top + bounds.height / 2;\n    return { centerX, centerY };\n  });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":303,"to":324}}}}],["a1a7da15-3275-4fa2-8194-a2c9495b6576",{"pageContent":"const deltaX = arg.deltaX ?? 50;\n  const steps = arg.steps ?? 5;\n  const stepDeltaX = deltaX / (steps + 1);\n\n  // Two touch points equally distant from the center of the element.\n  const touches = [\n    {\n      identifier: 0,\n      clientX: centerX - (arg.direction === 'in' ? deltaX : stepDeltaX),\n      clientY: centerY,\n    },\n    {\n      identifier: 1,\n      clientX: centerX + (arg.direction === 'in' ? deltaX : stepDeltaX),\n      clientY: centerY,\n    },\n  ];\n  await locator.dispatchEvent('touchstart',\n      { touches, changedTouches: touches, targetTouches: touches });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":326,"to":344}}}}],["70e80156-ba54-42a2-85f1-02f5c73443d1",{"pageContent":"// Move the touch points towards or away from each other.\n  for (let i = 1; i <= steps; i++) {\n    const offset = (arg.direction === 'in' ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1)));\n    const touches = [\n      {\n        identifier: 0,\n        clientX: centerX - offset,\n        clientY: centerY,\n      },\n      {\n        identifier: 0,\n        clientX: centerX + offset,\n        clientY: centerY,\n      },\n    ];\n    await locator.dispatchEvent('touchmove',\n        { touches, changedTouches: touches, targetTouches: touches });\n  }\n\n  await locator.dispatchEvent('touchend', { touches: [], changedTouches: [], targetTouches: [] });\n}","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":346,"to":366}}}}],["f2b85167-838a-4a92-a1db-6bacf2385e24",{"pageContent":"await locator.dispatchEvent('touchend', { touches: [], changedTouches: [], targetTouches: [] });\n}\n\ntest(`pinch in gesture to zoom out the map`, async ({ page }) => {\n  await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z',\n      { waitUntil: 'commit' });\n  await page.getByRole('button', { name: 'Keep using web' }).click();\n  await expect(page.getByRole('button', { name: 'Keep using web' })).not.toBeVisible();\n  // Get the map element.\n  const met = page.locator('[data-test-id=\"met\"]');\n  for (let i = 0; i < 5; i++)\n    await pinch(met, { deltaX: 40, direction: 'in' });\n  // Ensure the map has been zoomed out.\n  await expect(met).toHaveScreenshot();\n});\n```\n\n```csharp\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":365,"to":385}}}}],["e2a389e0-6ca3-4bc0-b4da-48fcb9d487bb",{"pageContent":"```csharp\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class TouchEvents\n{\n    public static async Task Pinch(ILocator locator, int deltaX = 50, int steps = 5, string direction = \"in\")\n    {\n        var bounds = await locator.BoundingBoxAsync();\n        double centerX = bounds.X + bounds.Width / 2;\n        double centerY = bounds.Y + bounds.Height / 2;\n        double stepDeltaX = deltaX / (steps + 1.0);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":382,"to":394}}}}],["afcc4428-fefa-4c26-aeeb-2df59d04357d",{"pageContent":"var touches = new List<Dictionary<string, object>>\n        {\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 0 },\n                { \"clientX\", centerX - (direction == \"in\" ? deltaX : stepDeltaX) },\n                { \"clientY\", centerY }\n            },\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 1 },\n                { \"clientX\", centerX + (direction == \"in\" ? deltaX : stepDeltaX) },\n                { \"clientY\", centerY }\n            }\n        };\n        await locator.DispatchEventAsync(\"touchstart\", new { touches, changedTouches = touches, targetTouches = touches });","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":396,"to":411}}}}],["f3529cdd-8e22-4ec5-84cd-5ce205d167db",{"pageContent":"for (int i = 1; i <= steps; i++)\n        {\n            double offset = direction == \"in\" ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));\n            touches = new List<Dictionary<string, object>>\n            {\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 0 },\n                    { \"clientX\", centerX - offset },\n                    { \"clientY\", centerY }\n                },\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 1 },\n                    { \"clientX\", centerX + offset },\n                    { \"clientY\", centerY }\n                }\n            };\n            await locator.DispatchEventAsync(\"touchmove\", new { touches, changedTouches = touches, targetTouches = touches });\n        }\n\n        await locator.DispatchEventAsync(\"touchend\", new { touches = new List<object>(), changedTouches = new List<object>(), targetTouches = new List<object>() });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":413,"to":435}}}}],["685e91fb-788d-4a1e-b6d8-63953c954fc0",{"pageContent":"await locator.DispatchEventAsync(\"touchend\", new { touches = new List<object>(), changedTouches = new List<object>(), targetTouches = new List<object>() });\n    }\n\n    public static async Task TestPinchInGestureToZoomOutTheMap(IPage page)\n    {\n        await page.GotoAsync(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new PageGotoOptions { WaitUntil = WaitUntilState.Commit });\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).ClickAsync();\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });\n\n        var met = page.Locator(\"[data-test-id='met']\");\n        for (int i = 0; i < 5; i++)\n        {\n            await Pinch(met, 40, 5, \"in\");\n        }\n        await page.ScreenshotAsync(new PageScreenshotOptions { Path = \"screenshot.png\" });\n    }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":434,"to":451}}}}],["20dfc6cc-d669-4817-9794-97e758431845",{"pageContent":"```java\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.*;\n\npublic class TouchEvents {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch();\n      BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n        .setViewportSize(412, 839)\n        .setDeviceScaleFactor(2.625)\n        .setUserAgent(\"Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36\" +\n          \" (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36\")\n        .setHasTouch(true)\n        .setIsMobile(true)\n      );\n      Page page = context.newPage();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":453,"to":469}}}}],["544f3143-a1ae-4325-8293-6724a47d9ab5",{"pageContent":"page.navigate(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).click();\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).waitFor(\n        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));\n\n      Locator met = page.locator(\"[data-test-id='met']\");\n      for (int i = 0; i < 5; i++) {\n        pinch(met, 40, \"in\");\n      }\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n    }\n  }\n\n  public static void pinch(Locator locator, int deltaX, String direction) {\n    pinch(locator, deltaX, direction, 5);\n  }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":471,"to":486}}}}],["c4042b89-7d2d-424e-a680-d0c4c30131d9",{"pageContent":"public static void pinch(Locator locator, int deltaX, String direction) {\n    pinch(locator, deltaX, direction, 5);\n  }\n\n  public static void pinch(Locator locator, int deltaX, String direction, int steps) {\n    BoundingBox bounds = locator.boundingBox();\n    double centerX = bounds.x + bounds.width / 2;\n    double centerY = bounds.y + bounds.height / 2;\n    double stepDeltaX = deltaX / (steps + 1.0);\n\n    List<Map<String, Object>> touches = List.of(\n      Map.of(\"identifier\", 0, \"clientX\", centerX - (direction.equals(\"in\") ? deltaX : stepDeltaX), \"clientY\", centerY),\n      Map.of(\"identifier\", 1, \"clientX\", centerX + (direction.equals(\"in\") ? deltaX : stepDeltaX), \"clientY\", centerY)\n    );\n    locator.dispatchEvent(\"touchstart\", Map.of(\"touches\", touches, \"changedTouches\", touches, \"targetTouches\", touches));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":484,"to":498}}}}],["ab156d40-4ebc-4a13-8a9c-1c5f1d219139",{"pageContent":"for (int i = 1; i <= steps; i++) {\n      double offset = direction.equals(\"in\") ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));\n      touches = List.of(\n        Map.of(\"identifier\", 0, \"clientX\", centerX - offset, \"clientY\", centerY),\n        Map.of(\"identifier\", 1, \"clientX\", centerX + offset, \"clientY\", centerY)\n      );\n      locator.dispatchEvent(\"touchmove\", Map.of(\"touches\", touches, \"changedTouches\", touches, \"targetTouches\", touches));\n    }\n\n    locator.dispatchEvent(\"touchend\", Map.of(\"touches\", List.of(), \"changedTouches\", List.of(), \"targetTouches\", List.of()));\n  }\n}\n```\n\n```python async\nfrom playwright.async_api import async_playwright, expect\n\nasync def pinch(locator, arg):\n    bounds = await locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    deltaX = arg.get('deltaX', 50)\n    steps = arg.get('steps', 5)\n    stepDeltaX = deltaX / (steps + 1)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":500,"to":524}}}}],["e2ae44fa-5116-4e94-b10a-ba37bd91d808",{"pageContent":"deltaX = arg.get('deltaX', 50)\n    steps = arg.get('steps', 5)\n    stepDeltaX = deltaX / (steps + 1)\n\n    touches = [\n        {\n            'identifier': 0,\n            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n        {\n            'identifier': 1,\n            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n    ]\n    await locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":522,"to":542}}}}],["2e390425-c2d8-4a6a-8825-20d3967c7c85",{"pageContent":"for i in range(1, steps + 1):\n        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)\n        touches = [\n            {\n                'identifier': 0,\n                'clientX': centerX - offset,\n                'clientY': centerY,\n            },\n            {\n                'identifier': 1,\n                'clientX': centerX + offset,\n                'clientY': centerY,\n            },\n        ]\n        await locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    await locator.dispatch_event('touchend', {\n        'touches': [],\n        'changedTouches': [],\n        'targetTouches': []\n    })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":544,"to":568}}}}],["a801fac8-3311-4b1c-b92f-f3fa7ab716c6",{"pageContent":"await locator.dispatch_event('touchend', {\n        'touches': [],\n        'changedTouches': [],\n        'targetTouches': []\n    })\n\nasync def test_pinch_in_gesture_to_zoom_out_the_map(page):\n    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    await page.get_by_role('button', name='Keep using web').click()\n    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        await pinch(met, {'deltaX': 40, 'direction': 'in'})\n    await page.screenshot(path=\"screenshot.png\")\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        context = await browser.new_context(**p.devices['Pixel 7'])\n        page = await context.new_page()\n        await test_pinch_in_gesture_to_zoom_out_the_map(page)\n        await browser.close()\n\nimport asyncio\nasyncio.run(main())\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":564,"to":589}}}}],["f6d48d85-5c0d-42fe-aa25-37cf22e80b07",{"pageContent":"import asyncio\nasyncio.run(main())\n```\n\n```python sync\nfrom playwright.sync_api import sync_playwright, expect\n\ndef pinch(locator, arg):\n    bounds = locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    deltaX = arg.get('deltaX', 50)\n    steps = arg.get('steps', 5)\n    stepDeltaX = deltaX / (steps + 1)\n\n    touches = [\n        {\n            'identifier': 0,\n            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n        {\n            'identifier': 1,\n            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n    ]\n    locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":587,"to":619}}}}],["b0a12c31-3189-474d-a963-ae8a313d8e60",{"pageContent":"for i in range(1, steps + 1):\n        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)\n        touches = [\n            {\n                'identifier': 0,\n                'clientX': centerX - offset,\n                'clientY': centerY,\n            },\n            {\n                'identifier': 1,\n                'clientX': centerX + offset,\n                'clientY': centerY,\n            },\n        ]\n        locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    locator.dispatch_event('touchend', {\n        'touches': [],\n        'changedTouches': [],\n        'targetTouches': []\n    })","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":621,"to":645}}}}],["a6fd612f-fcd0-4f40-bd80-0813247e866b",{"pageContent":"locator.dispatch_event('touchend', {\n        'touches': [],\n        'changedTouches': [],\n        'targetTouches': []\n    })\n\ndef test_pinch_in_gesture_to_zoom_out_the_map(page):\n    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    page.get_by_role('button', name='Keep using web').click()\n    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        pinch(met, {'deltaX': 40, 'direction': 'in'})\n    page.screenshot(path=\"screenshot.png\")\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    context = browser.new_context(**p.devices['Pixel 7'])\n    page = context.new_page()\n    test_pinch_in_gesture_to_zoom_out_the_map(page)\n    browser.close()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-touch-events.md","title":"src-touch-events","url":"https://playwright.dev/docs/src-touch-events","loc":{"lines":{"from":641,"to":662}}}}],["79d39a23-62d0-43f4-b598-6b69a11ea963",{"pageContent":"---\nid: trace-viewer-intro\ntitle: \"Trace viewer\"\n---\n\n## Introduction\n\nPlaywright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward though each action of your test and visually see what was happening during each action.\n\n**You will learn**\n\n- How to record a trace\n- How to open the trace viewer\n\n## Recording a trace\n\nTraces can be recorded using the [`property: BrowserContext.tracing`] API as follows:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":1,"to":31}}}}],["f7fc96aa-3c8f-430b-adba-d829b006985f",{"pageContent":"```csharp\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TearDown]\n    public async Task TearDown()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            )\n        });\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        // ..\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":30,"to":71}}}}],["d0eb6fe4-5435-4aa3-a730-5603a2375f7f",{"pageContent":"[Test]\n    public async Task GetStartedLink()\n    {\n        // ..\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n         await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TestCleanup]\n    public async Task TestCleanup()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}.zip\"\n            )\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":62,"to":106}}}}],["d22459ce-2c42-43ea-b36f-c04fb6112ab5",{"pageContent":"[TestMethod]\n    public async Task GetStartedLink()\n    {\n        // ...\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;\n\n[WithTestName]\npublic class UnitTest1 : PageTest\n{\n    public override async Task InitializeAsync()\n    {\n        await base.InitializeAsync().ConfigureAwait(false);\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":108,"to":140}}}}],["c575eac5-3915-4b2b-907f-63d52719826c",{"pageContent":"public override async Task DisposeAsync()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n               $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip\"\n            )\n        });\n        await base.DisposeAsync().ConfigureAwait(false);\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        // ...\n        await Page.GotoAsync(\"https://playwright.dev/dotnet/docs/intro\");\n    }\n}\n\npublic class WithTestNameAttribute : BeforeAfterTestAttribute\n{\n    public static string CurrentTestName = string.Empty;\n    public static string CurrentClassName = string.Empty;\n\n    public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":142,"to":172}}}}],["ae5d3c66-cb53-4846-b460-5680852d2c6c",{"pageContent":"public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }\n\n    public override void After(MethodInfo methodInfo)\n    {\n    }\n}\n```\n</TabItem>\n</Tabs>\n\nThis will record a zip file for each test, e.g. `PlaywrightTests.ExampleTest.GetStartedLink.zip` and place it into the `bin/Debug/net8.0/playwright-traces/` directory.\n\n## Opening the trace\n\nYou can open the saved trace using the Playwright CLI or in your browser on [`trace.playwright.dev`](https://trace.playwright.dev). Make sure to add the full path to where your trace's zip file is located. Once opened you can click on each action or use the timeline to see the state of the page before and after each action. You can also inspect the log, source and network during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it, open devtools etc.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":168,"to":186}}}}],["15a46f21-699d-4ee0-af12-dbf359408be6",{"pageContent":"```bash csharp\npwsh bin/Debug/net8.0/playwright.ps1 show-trace bin/Debug/net8.0/playwright-traces/PlaywrightTests.ExampleTest.GetStartedLink.zip\n```\n\n![playwright trace viewer dotnet](https://github.com/microsoft/playwright/assets/13063165/4372d661-5bfa-4e1f-be65-0d2fe165a75c)\n\n\nCheck out our detailed guide on [Trace Viewer](/trace-viewer.md) to learn more about the trace viewer and how to setup your tests to record a trace only when the test fails.\n\n## What's next\n\n- [Run tests on CI with GitHub Actions](/ci-intro.md)\n- [Learn more about the MSTest, NUnit, and xUnit base classes](./test-runners.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-csharp.md","title":"src-trace-viewer-intro-csharp","url":"https://playwright.dev/docs/src-trace-viewer-intro-csharp","loc":{"lines":{"from":189,"to":201}}}}],["b16db11d-b90d-4c97-b4bb-83335354117f",{"pageContent":"---\nid: trace-viewer-intro\ntitle: \"Trace viewer\"\n---\n\n## Introduction\n\nPlaywright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward though each action of your test and visually see what was happening during each action.\n\n**You will learn**\n\n- How to record a trace\n- How to open the trace viewer\n\n## Recording a trace\n* langs: python\n\nTraces can be recorded by running your tests with the `--tracing` flag.\n\n```bash\npytest --tracing on\n```\nOptions for tracing are:\n- `on`: Record trace for each test\n- `off`: Do not record trace. (default)\n- `retain-on-failure`: Record trace for each test, but remove all traces from successful test runs.\n\nThis will record the trace and place it into the file named `trace.zip` in your `test-results` directory.\n\n<details>\n<summary>If you are not using Pytest, click here to learn how to record traces.</summary>","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-java-python.md","title":"src-trace-viewer-intro-java-python","url":"https://playwright.dev/docs/src-trace-viewer-intro-java-python","loc":{"lines":{"from":1,"to":31}}}}],["c076751e-3435-40f2-bf7c-882f73e5c848",{"pageContent":"<details>\n<summary>If you are not using Pytest, click here to learn how to record traces.</summary>\n\n```python async\nbrowser = await chromium.launch()\ncontext = await browser.new_context()\n\n# Start tracing before creating / navigating a page.\nawait context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\nawait context.tracing.stop(path = \"trace.zip\")\n```\n\n```python sync\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n</details>\n\n## Recording a trace\n* langs: java\n  \nTraces can be recorded using the [`property: BrowserContext.tracing`] API as follows:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-java-python.md","title":"src-trace-viewer-intro-java-python","url":"https://playwright.dev/docs/src-trace-viewer-intro-java-python","loc":{"lines":{"from":30,"to":66}}}}],["4d441e7c-4149-48fb-8752-4da36e77dc0f",{"pageContent":"</details>\n\n## Recording a trace\n* langs: java\n  \nTraces can be recorded using the [`property: BrowserContext.tracing`] API as follows:\n\n```java\nBrowser browser = browserType.launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true)\n  .setSources(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n\nThis will record the trace and place it into the file named `trace.zip`.\n\n## Opening the trace","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-java-python.md","title":"src-trace-viewer-intro-java-python","url":"https://playwright.dev/docs/src-trace-viewer-intro-java-python","loc":{"lines":{"from":61,"to":89}}}}],["4faef1bc-05b8-4a80-ba33-cdb886088f17",{"pageContent":"This will record the trace and place it into the file named `trace.zip`.\n\n## Opening the trace\n\nYou can open the saved trace using the Playwright CLI or in your browser on [`trace.playwright.dev`](https://trace.playwright.dev). Make sure to add the full path to where your trace's zip file is located. Once opened you can click on each action or use the timeline to see the state of the page before and after each action. You can also inspect the log, source and network during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it, open devtools etc.\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\n```bash python\nplaywright show-trace trace.zip\n```\n\n######\n* langs: python, java\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/10fe3585-8401-4051-b1c2-b2e92ac4c274)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-java-python.md","title":"src-trace-viewer-intro-java-python","url":"https://playwright.dev/docs/src-trace-viewer-intro-java-python","loc":{"lines":{"from":87,"to":104}}}}],["d309bb7e-b9cd-475e-bfec-5cbccb242b4f",{"pageContent":"######\n* langs: python, java\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/10fe3585-8401-4051-b1c2-b2e92ac4c274)\n\n\nTo learn more check out our detailed guide on [Trace Viewer](/trace-viewer.md).\n\n## What's next\n\n- [Run tests on CI with GitHub Actions](/ci-intro.md)\n- [Learn more about Trace Viewer](/trace-viewer.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-java-python.md","title":"src-trace-viewer-intro-java-python","url":"https://playwright.dev/docs/src-trace-viewer-intro-java-python","loc":{"lines":{"from":101,"to":112}}}}],["2ca6111f-1270-4201-b66d-ca7477059387",{"pageContent":"---\nid: trace-viewer-intro\ntitle: \"Trace viewer\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nPlaywright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward through each action of your test and visually see what was happening during each action.\n\n**You will learn**\n\n- [How to record a trace](/trace-viewer-intro.md#recording-a-trace)\n- [How to open the HTML report](/trace-viewer-intro.md#opening-the-html-report)\n- [How to open and view the trace](/trace-viewer-intro.md#opening-the-trace)\n\n<LiteYouTube\n    id=\"yP6AnTxC34s\"\n    title=\"Viewing Playwright Traces\"\n/>\n\n## Recording a Trace","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-js.md","title":"src-trace-viewer-intro-js","url":"https://playwright.dev/docs/src-trace-viewer-intro-js","loc":{"lines":{"from":1,"to":23}}}}],["269538b3-df2c-40fd-8e01-021caf6578b6",{"pageContent":"<LiteYouTube\n    id=\"yP6AnTxC34s\"\n    title=\"Viewing Playwright Traces\"\n/>\n\n## Recording a Trace\n\nBy default the [playwright.config](./trace-viewer.md#tracing-on-ci) file will contain the configuration needed to create a `trace.zip` file for each test. Traces are setup to run `on-first-retry` meaning they will be run on the first retry of a failed test. Also `retries` are set to 2 when running on CI and 0 locally. This means the traces will be recorded on the first retry of a failed test but not on the first run and not on the second retry.\n\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: process.env.CI ? 2 : 0, // set to 2 when running on CI\n  // ...\n  use: {\n    trace: 'on-first-retry', // record traces on first retry of each test\n  },\n});\n```\n\nTo learn more about available options to record a trace check out our detailed guide on [Trace Viewer](/trace-viewer.md).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-js.md","title":"src-trace-viewer-intro-js","url":"https://playwright.dev/docs/src-trace-viewer-intro-js","loc":{"lines":{"from":18,"to":38}}}}],["9a91af74-e875-4f16-b2d7-1e3fe6c2a914",{"pageContent":"To learn more about available options to record a trace check out our detailed guide on [Trace Viewer](/trace-viewer.md).\n\nTraces are normally run in a Continuous Integration(CI) environment, because locally you can use [UI Mode](/test-ui-mode.md) for developing and debugging tests. However, if you want to run traces locally without using [UI Mode](/test-ui-mode.md), you can force tracing to be on with `--trace on`.\n\n```bash\nnpx playwright test --trace on\n```\n\n## Opening the HTML report\n\nThe HTML report shows you a report of all your tests that have been run and on which browsers as well as how long they took. Tests can be filtered by passed tests, failed, flaky or skipped tests. You can also search for a particular test. Clicking on a test will open the detailed view where you can see more information on your tests such as the errors, the test steps and the trace.\n\n```bash\nnpx playwright show-report\n```\n\n## Opening the trace","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-js.md","title":"src-trace-viewer-intro-js","url":"https://playwright.dev/docs/src-trace-viewer-intro-js","loc":{"lines":{"from":38,"to":54}}}}],["daf6cfbc-a7b0-4cce-8d1f-7031ecb181f5",{"pageContent":"```bash\nnpx playwright show-report\n```\n\n## Opening the trace\n\nIn the HTML report click on the trace icon next to the test name file name to directly open the trace for the required test.\n\n![playwright html report](https://github.com/microsoft/playwright/assets/13063165/a3da1fb5-6619-4c03-98aa-adf65c376525)\n\n\nYou can also click open the detailed view of the test and scroll down to the `'Traces'` tab and open the trace by clicking on the trace screenshot.\n\n![playwright html report detailed view](https://github.com/microsoft/playwright/assets/13063165/2b583d6f-5241-4ecf-83a8-650072d4a201)\n\n\nTo learn more about reporters check out our detailed guide on reporters including the [HTML Reporter](/test-reporters.md#html-reporter).\n\n## Viewing the trace","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-js.md","title":"src-trace-viewer-intro-js","url":"https://playwright.dev/docs/src-trace-viewer-intro-js","loc":{"lines":{"from":50,"to":68}}}}],["9c6223ea-f11d-430f-9aab-e1f3346f4c9f",{"pageContent":"To learn more about reporters check out our detailed guide on reporters including the [HTML Reporter](/test-reporters.md#html-reporter).\n\n## Viewing the trace\n\nView traces of your test by clicking through each action or hovering using the timeline and see the state of the page before and after the action. Inspect the log, source and network, errors and console during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it and open the browser DevTools to inspect the HTML, CSS, etc.\n\n![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/10fe3585-8401-4051-b1c2-b2e92ac4c274)\n\nTo learn more about traces check out our detailed guide on [Trace Viewer](/trace-viewer.md).\n\n## What's next\n\n- [Run tests on CI with GitHub Actions](/ci-intro.md)\n- [Learn more about Trace Viewer](/trace-viewer.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer-intro-js.md","title":"src-trace-viewer-intro-js","url":"https://playwright.dev/docs/src-trace-viewer-intro-js","loc":{"lines":{"from":66,"to":79}}}}],["b7cdd3c7-d0e7-45e2-9520-ebffcc91a1b2",{"pageContent":"---\nid: trace-viewer\ntitle: \"Trace viewer\"\n---\n\nimport LiteYouTube from '@site/src/components/LiteYouTube';\n\n## Introduction\n\nPlaywright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has run. Traces are a great way for debugging your tests when they fail on CI. You can open traces [locally](#opening-the-trace) or in your browser on [trace.playwright.dev](https://trace.playwright.dev).\n\n######\n* langs: js\n\n<LiteYouTube\n    id=\"yP6AnTxC34s\"\n    title=\"Viewing Playwright Traces\"\n/>\n\n## Opening Trace Viewer\n\nYou can open a saved trace using either the Playwright CLI or in the browser at [trace.playwright.dev](https://trace.playwright.dev). Make sure to add the full path to where your `trace.zip` file is located.\n\n```bash js\nnpx playwright show-trace path/to/trace.zip\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\n```bash python\nplaywright show-trace trace.zip\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":1,"to":34}}}}],["568c0085-af7e-4c3f-b2f9-79ed9a119156",{"pageContent":"```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\n```bash python\nplaywright show-trace trace.zip\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip\n```\n\n### Using [trace.playwright.dev](https://trace.playwright.dev)\n\n[trace.playwright.dev](https://trace.playwright.dev) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop or via the `Select file(s)` button.\n\nTrace Viewer loads the trace entirely in your browser and does not transmit any data externally.\n\n<img width=\"1119\" alt=\"Drop Playwright Trace to load\" src=\"https://user-images.githubusercontent.com/13063165/194577918-b4d45726-2692-4093-8a28-9e73552617ef.png\" />\n\n### Viewing remote traces\n\nYou can open remote traces directly using its URL. This makes it easy to view the remote trace without having to manually download the file from CI runs, for example.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":28,"to":50}}}}],["0e21c729-4262-44ca-9665-56fce99d267b",{"pageContent":"### Viewing remote traces\n\nYou can open remote traces directly using its URL. This makes it easy to view the remote trace without having to manually download the file from CI runs, for example.\n\n```bash js\nnpx playwright show-trace https://example.com/trace.zip\n```\n\n```bash java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace https://example.com/trace.zip\"\n```\n\n```bash python\nplaywright show-trace https://example.com/trace.zip\n```\n\n```bash csharp\npwsh bin/Debug/netX/playwright.ps1 show-trace https://example.com/trace.zip\n```\n\nWhen using [trace.playwright.dev](https://trace.playwright.dev), you can also pass the URL of your uploaded trace at some accessible storage (e.g. inside your CI) as a query parameter. CORS (Cross-Origin Resource Sharing) rules might apply.\n\n```txt\nhttps://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/fa874b0d59cdedec675521c21124e93161d66533.zip\n```\n\n## Recording a trace\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":48,"to":75}}}}],["a5c66b8c-df9e-443a-884d-0b3850001163",{"pageContent":"```txt\nhttps://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/fa874b0d59cdedec675521c21124e93161d66533.zip\n```\n\n## Recording a trace\n* langs: js\n\n### Tracing locally\n* langs: js\n\nTo record a trace during development mode set the `--trace` flag to `on` when running your tests. You can also use [UI Mode](./test-ui-mode.md) for a better developer experience, as it traces each test automatically.\n\n```bash\nnpx playwright test --trace on\n```\n\nYou can then open the HTML report and click on the trace icon to open the trace.\n```bash\nnpx playwright show-report\n```\n### Tracing on CI\n* langs: js\n\nTraces should be run on continuous integration on the first retry of a failed test\nby setting the `trace: 'on-first-retry'` option in the test configuration file. This will produce a `trace.zip` file for each test that was retried.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":70,"to":94}}}}],["49c9759a-a5ef-4118-ab65-6186fa1ffe85",{"pageContent":"```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: 1,\n  use: {\n    trace: 'on-first-retry',\n  },\n});\n```\n\n```js tab=js-library\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":96,"to":118}}}}],["e6dc0eca-342e-458e-99bd-f6e14d3b1ab9",{"pageContent":"const page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\nAvailable options to record a trace:\n- `'on-first-retry'` - Record a trace only when retrying a test for the first time.\n- `'on-all-retries'` - Record traces for all test retries.\n- `'off'` - Do not record a trace.\n- `'on'` - Record a trace for each test. (not recommended as it's performance heavy)\n- `'retain-on-failure'` - Record a trace for each test, but remove it from successful test runs.\n\n\nYou can also use `trace: 'retain-on-failure'` if you do not enable retries but still want traces for failed tests.\n\nThere are more granular options available, see [`property: TestOptions.trace`].\n\nIf you are not using Playwright as a Test Runner, use the [`property: BrowserContext.tracing`] API instead.\n\n## Recording a trace\n* langs: python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":113,"to":135}}}}],["9dc3673d-1f3c-4884-a280-df5123b96c91",{"pageContent":"If you are not using Playwright as a Test Runner, use the [`property: BrowserContext.tracing`] API instead.\n\n## Recording a trace\n* langs: python\n\nTraces can be recorded by running your tests with the `--tracing` flag.\n\n```bash\npytest --tracing on\n```\nOptions for tracing are:\n- `on`: Record trace for each test\n- `off`: Do not record trace. (default)\n- `retain-on-failure`: Record trace for each test, but remove all traces from successful test runs.\n\nThis will record the trace and place it into the file named `trace.zip` in your `test-results` directory.\n\n<details>\n<summary>If you are not using Pytest, click here to learn how to record traces.</summary>\n\n```python async\nbrowser = await chromium.launch()\ncontext = await browser.new_context()\n\n# Start tracing before creating / navigating a page.\nawait context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":132,"to":160}}}}],["aadc0d32-0d32-4ef4-b0f3-9cb9fc103ead",{"pageContent":"page = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\nawait context.tracing.stop(path = \"trace.zip\")\n```\n\n```python sync\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n</details>\n\n## Recording a trace\n* langs: java\n\nTraces can be recorded using the [`property: BrowserContext.tracing`] API as follows:\n\n```java\nBrowser browser = browserType.launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true)\n  .setSources(true));","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":159,"to":195}}}}],["94ab3825-a6c7-4a0a-ae5f-57ca19af6f46",{"pageContent":"// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true)\n  .setSources(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\nThis will record the trace and place it into the file named `trace.zip`.\n\n## Recording a trace\n* langs: csharp\n\nTraces can be recorded using the [`property: BrowserContext.tracing`] API as follows:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":191,"to":224}}}}],["7966f227-6d6f-4fd6-9852-f8f238bdde1b",{"pageContent":"```csharp\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = TestContext.CurrentContext.Test.ClassName + \".\" + TestContext.CurrentContext.Test.Name,\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TearDown]\n    public async Task TearDown()\n    {\n        // This will produce e.g.:\n        // bin/Debug/net8.0/playwright-traces/PlaywrightTests.Tests.Test1.zip\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            )\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":223,"to":255}}}}],["2edaeead-c02c-4722-8657-a30b6173b10f",{"pageContent":"[Test]\n    public async Task TestYourOnlineShop()\n    {\n        // ..\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTestsMSTest;\n\n[TestClass]\npublic class UnitTest1 : PageTest\n{\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n         await Context.Tracing.StartAsync(new()\n        {\n            Title = TestContext.TestName,\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":257,"to":288}}}}],["a5e0a927-18dc-4c7a-9236-b9569d2b6e54",{"pageContent":"[TestCleanup]\n    public async Task TestCleanup()\n    {\n        // This will produce e.g.:\n        // bin/Debug/net8.0/playwright-traces/PlaywrightTests.UnitTest1.zip\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.FullyQualifiedTestClassName}.zip\"\n            )\n        });\n    }\n\n    [TestMethod]\n    public async Task TestYourOnlineShop()\n    {\n        // ...\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":290,"to":322}}}}],["4fd90c3b-5ae5-4bee-93f5-e6c589ab8c11",{"pageContent":"</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;\n\n[WithTestName]\npublic class UnitTest1 : PageTest\n{\n    public override async Task InitializeAsync()\n    {\n        await base.InitializeAsync().ConfigureAwait(false);\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":313,"to":337}}}}],["9e97e3b7-a8c1-4a28-9ad9-6ec54001dc78",{"pageContent":"public override async Task DisposeAsync()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n               $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip\"\n            )\n        });\n        await base.DisposeAsync().ConfigureAwait(false);\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        // ...\n        await Page.GotoAsync(\"https://playwright.dev/dotnet/docs/intro\");\n    }\n}\n\npublic class WithTestNameAttribute : BeforeAfterTestAttribute\n{\n    public static string CurrentTestName = string.Empty;\n    public static string CurrentClassName = string.Empty;\n\n    public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }\n\n    public override void After(MethodInfo methodInfo)\n    {\n    }\n}\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":339,"to":375}}}}],["d3c5c55e-0205-428d-b48d-3604f9661ff1",{"pageContent":"public override void After(MethodInfo methodInfo)\n    {\n    }\n}\n```\n\n</TabItem>\n</Tabs>\n\nThis will record the trace and place it into the `bin/Debug/net8.0/playwright-traces/` directory.\n\n\n## Run trace only on failure\n* langs: csharp\n\nSetup your tests to record a trace only when the test fails:\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":371,"to":416}}}}],["103a91e7-2174-4b13-a37b-a9cc52cb325d",{"pageContent":"[TearDown]\n    public async Task TearDown()\n    {\n        var failed = TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Error\n            || TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Failure;\n\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = failed ? Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            ) : null,\n        });\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        // ..\n    }\n}\n```\n</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":418,"to":449}}}}],["c8e04e9a-14cc-42af-b259-4f17bd3790e9",{"pageContent":"```csharp\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n         await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TestCleanup]\n    public async Task TestCleanup()\n    {\n        var failed = new[] { UnitTestOutcome.Failed, UnitTestOutcome.Error, UnitTestOutcome.Timeout, UnitTestOutcome.Aborted }.Contains(TestContext.CurrentTestOutcome);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":444,"to":469}}}}],["8595bf5c-1037-43e4-a769-7a43b67ea311",{"pageContent":"await Context.Tracing.StopAsync(new()\n        {\n            Path = failed ? Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}.zip\"\n            ) : null,\n        });\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        // ...\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":471,"to":498}}}}],["aba157a9-6ed8-419d-b5d7-df9796e81ead",{"pageContent":"</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;\n\n[WithTestName]\npublic class UnitTest1 : PageTest\n{\n    public override async Task InitializeAsync()\n    {\n        await base.InitializeAsync().ConfigureAwait(false);\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":489,"to":513}}}}],["02d568ba-2c36-477c-9c94-3f580aa9353f",{"pageContent":"public override async Task DisposeAsync()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = !TestOk ? Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n               $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip\"\n            ) : null\n        });\n        await base.DisposeAsync().ConfigureAwait(false);\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        // ...\n        await Page.GotoAsync(\"https://playwright.dev/dotnet/docs/intro\");\n    }\n}\n\npublic class WithTestNameAttribute : BeforeAfterTestAttribute\n{\n    public static string CurrentTestName = string.Empty;\n    public static string CurrentClassName = string.Empty;\n\n    public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":515,"to":545}}}}],["6da0ecbf-e473-444d-8b39-1ff025c42496",{"pageContent":"public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }\n\n    public override void After(MethodInfo methodInfo)\n    {\n    }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Trace Viewer features\n### Actions\n\nIn the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.\n\n![actions tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/948b65cd-f0fd-4c7f-8e53-2c632b5a07f1)\n\n**Selecting each action reveals:**\n- Action snapshots\n- Action log\n- Source code location\n\n### Screenshots","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":541,"to":568}}}}],["1c980ce9-0e14-4d94-bb52-71d728e528f4",{"pageContent":"**Selecting each action reveals:**\n- Action snapshots\n- Action log\n- Source code location\n\n### Screenshots\n\nWhen tracing with the [`option: Tracing.start.screenshots`] option turned on (default), each trace records a screencast and renders it as a film strip. You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.\n\nDouble click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.\n\n![timeline view in trace viewer](https://github.com/microsoft/playwright/assets/13063165/b04a7d75-54bb-4ab2-9e30-e76f6f74a2c8)\n\n\n### Snapshots","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":563,"to":577}}}}],["7fb3731f-f094-4b42-b085-d5cde00bee7f",{"pageContent":"![timeline view in trace viewer](https://github.com/microsoft/playwright/assets/13063165/b04a7d75-54bb-4ab2-9e30-e76f6f74a2c8)\n\n\n### Snapshots\n\nWhen tracing with the [`option: Tracing.start.snapshots`] option turned on (default), Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:\n\n| Type | Description |\n|------|-------------|\n|Before|A snapshot at the time action is called.|\n|Action|A snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked.|\n|After|A snapshot after the action.|\n\nHere is what the typical Action snapshot looks like:\n\n![action tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/7168d549-eb0a-4964-9c93-483f03711fa9)\n\nNotice how it highlights both, the DOM Node as well as the exact click position.\n\n### Source","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":574,"to":593}}}}],["0b13fc98-88d5-46e3-ba34-7608b398353f",{"pageContent":"Notice how it highlights both, the DOM Node as well as the exact click position.\n\n### Source\n\nWhen you click on an action in the sidebar, the line of code for that action is highlighted in the source panel.\n\n![showing source code tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/daa8845d-c250-4923-aa7a-5d040da9adc5)\n\n### Call\n\nThe call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.\n\n![showing call tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/95498580-f9dd-4932-a123-c37fe7cfc3c2)\n\n### Log\n\nSee a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":591,"to":607}}}}],["85344f3e-54a0-4135-b7e9-473ec2f5f50f",{"pageContent":"![showing log of tests in trace viewer](https://github.com/microsoft/playwright/assets/13063165/de621461-3bab-4140-b39d-9f02d6672dbf)\n\n### Errors\n\nIf your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.\n\n![showing errors in trace viewer](https://github.com/microsoft/playwright/assets/13063165/e9ef77b3-05d1-4df2-852c-981023723d34)\n\n### Console\n\nSee console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.\n\n![showing log of tests in trace viewer](https://github.com/microsoft/playwright/assets/13063165/4107c08d-1eaf-421c-bdd4-9dd2aa641d4a)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":609,"to":621}}}}],["a3255410-fbfb-4641-adb7-75e188d4c568",{"pageContent":"![showing log of tests in trace viewer](https://github.com/microsoft/playwright/assets/13063165/4107c08d-1eaf-421c-bdd4-9dd2aa641d4a)\n\nDouble click on an action from your test in the actions sidebar. This will filter the console to only show the logs that were made during that action. Click the *Show all* button to see all console logs again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The console tab will also be filtered to only show the logs that were made during the actions selected.\n\n\n### Network\n\nThe Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":621,"to":630}}}}],["3d445783-7d11-47f2-94a9-b457363b07d2",{"pageContent":"![network requests tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/0a3d1671-8ccd-4f7a-a844-35f5eb37f236)\n\nDouble click on an action from your test in the actions sidebar. This will filter the network requests to only show the requests that were made during that action. Click the *Show all* button to see all network requests again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The network tab will also be filtered to only show the network requests that were made during the actions selected.\n\n### Metadata\n\nNext to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.\n\n![meta data in trace viewer](https://github.com/microsoft/playwright/assets/13063165/82ab3d33-1ec9-4b8a-9cf2-30a6e2d59091)\n\n### Attachments\n* langs: js","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":632,"to":645}}}}],["074c8678-ff74-47c8-a579-9f39428d3856",{"pageContent":"![meta data in trace viewer](https://github.com/microsoft/playwright/assets/13063165/82ab3d33-1ec9-4b8a-9cf2-30a6e2d59091)\n\n### Attachments\n* langs: js\n\nThe \"Attachments\" tab allows you to explore attachments. If you're doing [visual regression testing](./test-snapshots.md), you'll be able to compare screenshots by examining the image diff, the actual image and the expected image. When you click on the expected image you can use the slider to slide one image over the other so you can easily see the differences in your screenshots.\n\n![attachments tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/4386178a-5808-4fa8-9436-315350a23b04)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-trace-viewer.md","title":"src-trace-viewer","url":"https://playwright.dev/docs/src-trace-viewer","loc":{"lines":{"from":642,"to":649}}}}],["09142855-e466-4cde-a88e-1b2dc979f244",{"pageContent":"---\nid: videos\ntitle: \"Videos\"\n---\n\n## Introduction\n\nWith Playwright you can record videos for your tests.\n\n## Record video\n* langs: js\n\nPlaywright Test can record videos for your tests, controlled by the `video` option in your Playwright config. By default videos are off.\n\n- `'off'` - Do not record video.\n- `'on'` - Record video for each test.\n- `'retain-on-failure'` - Record video for each test, but remove all videos from successful test runs.\n- `'on-first-retry'` - Record video only when retrying a test for the first time.\n\nVideo files will appear in the test output directory, typically `test-results`. See [`property: TestOptions.video`] for advanced video configuration.\n\nVideos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":1,"to":22}}}}],["f1b745b7-b47b-40f5-aae4-b504c62afd65",{"pageContent":"Videos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].\n\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({ recordVideo: { dir: 'videos/' } });\n// Make sure to await close, so that videos are saved.\nawait context.close();\n```\n\nYou can also specify video size. The video size defaults to the viewport size scaled down to fit 800x800. The video of the viewport is placed in the top-left corner of the output video, scaled down to fit if necessary. You may need to set the viewport size to match your desired video size.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":22,"to":39}}}}],["e415b73c-8f53-4533-ac83-cfa94371e296",{"pageContent":"```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: {\n      mode: 'on-first-retry',\n      size: { width: 640, height: 480 }\n    }\n  },\n});\n```\n\n```js tab=js-library\nconst context = await browser.newContext({\n  recordVideo: {\n    dir: 'videos/',\n    size: { width: 640, height: 480 },\n  }\n});\n```\n\nFor multi-page scenarios, you can access the video file associated with the page via the\n[`method: Page.video`].\n\n\n```js\nconst path = await page.video().path();\n```\n\n:::note\nNote that the video is only available after the page or browser context is closed.\n:::\n\n## Record video\n* langs: python, java, csharp\n\nVideos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":41,"to":77}}}}],["11c8182c-2705-46cc-8c62-fca0307e94e9",{"pageContent":"Videos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].\n\n```js\nconst context = await browser.newContext({ recordVideo: { dir: 'videos/' } });\n// Make sure to await close, so that videos are saved.\nawait context.close();\n```\n\n```java\ncontext = browser.newContext(new Browser.NewContextOptions().setRecordVideoDir(Paths.get(\"videos/\")));\n// Make sure to close, so that videos are saved.\ncontext.close();\n```\n\n```python async\ncontext = await browser.new_context(record_video_dir=\"videos/\")\n# Make sure to await close, so that videos are saved.\nawait context.close()\n```\n\n```python sync\ncontext = browser.new_context(record_video_dir=\"videos/\")\n# Make sure to close, so that videos are saved.\ncontext.close()\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":77,"to":101}}}}],["68611960-a06f-4aeb-bdb4-f527fc77d7f7",{"pageContent":"```python sync\ncontext = browser.new_context(record_video_dir=\"videos/\")\n# Make sure to close, so that videos are saved.\ncontext.close()\n```\n\n```csharp\nvar context = await browser.NewContextAsync(new()\n{\n    RecordVideoDir = \"videos/\"\n});\n// Make sure to close, so that videos are saved.\nawait context.CloseAsync();\n```\n\nYou can also specify video size. The video size defaults to the viewport size scaled down to fit 800x800. The video of the viewport is placed in the top-left corner of the output video, scaled down to fit if necessary. You may need to set the viewport size to match your desired video size.\n\n```js\nconst context = await browser.newContext({\n  recordVideo: {\n    dir: 'videos/',\n    size: { width: 640, height: 480 },\n  }\n});\n```\n\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setRecordVideoDir(Paths.get(\"videos/\"))\n  .setRecordVideoSize(640, 480));\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":97,"to":127}}}}],["c887fa1b-dc9f-48b9-a013-4f56d88b66cc",{"pageContent":"```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setRecordVideoDir(Paths.get(\"videos/\"))\n  .setRecordVideoSize(640, 480));\n```\n\n```python async\ncontext = await browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 640, \"height\": 480}\n)\n```\n\n```python sync\ncontext = browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 640, \"height\": 480}\n)\n```\n\n```csharp\nvar context = await browser.NewContextAsync(new()\n{\n    RecordVideoDir = \"videos/\",\n    RecordVideoSize = new RecordVideoSize() { Width = 640, Height = 480 }\n});\n// Make sure to close, so that videos are saved.\nawait context.CloseAsync();\n```\n\nSaved video files will appear in the specified folder. They all have generated unique names.\nFor the multi-page scenarios, you can access the video file associated with the page via the\n[`method: Page.video`].\n\n\n```js\nconst path = await page.video().path();\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":123,"to":160}}}}],["f5e44f36-eccb-4ee5-82e7-3833f04ba70f",{"pageContent":"```js\nconst path = await page.video().path();\n```\n\n```java\npath = page.video().path();\n```\n\n```python async\npath = await page.video.path()\n```\n\n```python sync\npath = page.video.path()\n```\n\n```csharp\nvar path = await page.Video.PathAsync();\n```\n\n:::note\nNote that the video is only available after the page or browser context is closed.\n:::","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-videos.md","title":"src-videos","url":"https://playwright.dev/docs/src-videos","loc":{"lines":{"from":158,"to":180}}}}],["01fb1525-71d6-412b-bae8-5e6aa539c3a7",{"pageContent":"---\nid: webview2\ntitle: \"WebView2\"\n---\n\n## Introduction\n\nThe following will explain how to use Playwright with [Microsoft Edge WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/). WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses [`method: BrowserType.connectOverCDP`] which connects to it via the Chrome DevTools Protocol (CDP).\n\n## Overview","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":1,"to":10}}}}],["2cb31970-7a2e-4e60-be63-906e2a6bef0a",{"pageContent":"## Overview\n\nA WebView2 control can be instructed to listen to incoming CDP connections by setting either the `WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS` environment variable with `--remote-debugging-port=9222` or calling [EnsureCoreWebView2Async](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22) with the `--remote-debugging-port=9222` argument. This will start the WebView2 process with the Chrome DevTools Protocol enabled which allows the automation by Playwright. 9222 is an example port in this case, but any other unused port can be used as well.\n\n```csharp generic\nawait this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()\n{\n  AdditionalBrowserArguments = \"--remote-debugging-port=9222\",\n})).ConfigureAwait(false);\n```\n\nOnce your application with the WebView2 control is running, you can connect to it via Playwright:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":10,"to":21}}}}],["d7e06ec1-f92b-4e85-86cb-dbd6c61ae26e",{"pageContent":"Once your application with the WebView2 control is running, you can connect to it via Playwright:\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst context = browser.contexts()[0];\nconst page = context.pages()[0];\n```\n\n```java\nBrowser browser = playwright.chromium().connectOverCDP(\"http://localhost:9222\");\nBrowserContext context = browser.contexts().get(0);\nPage page = context.pages().get(0);\n```\n\n```python async\nbrowser = await playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ncontext = browser.contexts[0]\npage = context.pages[0]\n```\n\n```python sync\nbrowser = playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ncontext = browser.contexts[0]\npage = context.pages[0]\n```\n\n```csharp\nvar browser = await playwright.Chromium.ConnectOverCDPAsync(\"http://localhost:9222\");\nvar context = browser.Contexts[0];\nvar page = context.Pages[0];\n```","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":21,"to":51}}}}],["df53d077-3ecb-49d8-9639-16abb84d1b06",{"pageContent":"```csharp\nvar browser = await playwright.Chromium.ConnectOverCDPAsync(\"http://localhost:9222\");\nvar context = browser.Contexts[0];\nvar page = context.Pages[0];\n```\n\nTo ensure that the WebView2 control is ready, you can wait for the [`CoreWebView2InitializationCompleted`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.corewebview2initializationcompleted?view=webview2-dotnet-1.0.1343.22) event:\n\n```csharp generic\nthis.webView.CoreWebView2InitializationCompleted += (_, e) =>\n{\n    if (e.IsSuccess)\n    {\n        Console.WriteLine(\"WebView2 initialized\");\n    }\n};\n```\n\n## Writing and running tests","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":47,"to":65}}}}],["e780dc79-493b-4f3a-93c7-a08fa76800be",{"pageContent":"## Writing and running tests\n\nBy default, the WebView2 control will use the same user data directory for all instances. This means that if you run multiple tests in parallel, they will interfere with each other. To avoid this, you should set the `WEBVIEW2_USER_DATA_FOLDER` environment variable (or use [WebView2.EnsureCoreWebView2Async Method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22)) to a different folder for each test. This will make sure that each test runs in its own user data directory.\n\nUsing the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the [Page] instance to your test:\n\n<!-- source code is available here to verify that the examples are working https://github.com/mxschmitt/playwright-webview2-demo -->","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":65,"to":71}}}}],["59ea74f8-578b-4d03-a3d9-ac3ea4867e4d",{"pageContent":"<!-- source code is available here to verify that the examples are working https://github.com/mxschmitt/playwright-webview2-demo -->\n\n```js title=\"webView2Test.ts\"\nimport { test as base } from '@playwright/test';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport childProcess from 'child_process';\n\nconst EXECUTABLE_PATH = path.join(\n    __dirname,\n    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',\n);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":71,"to":83}}}}],["d46fd1dd-aeaa-498f-b8c2-c44d0c60602e",{"pageContent":"export const test = base.extend({\n  browser: async ({ playwright }, use, testInfo) => {\n    const cdpPort = 10000 + testInfo.workerIndex;\n    // Make sure that the executable exists and is executable\n    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);\n    const userDataDir = path.join(\n        fs.realpathSync.native(os.tmpdir()),\n        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,\n    );\n    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {\n      shell: true,\n      env: {\n        ...process.env,\n        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,\n        WEBVIEW2_USER_DATA_FOLDER: userDataDir,\n      }\n    });\n    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {\n      if (data.toString().includes('WebView2 initialized'))\n        resolve();\n    }));\n    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);\n    await use(browser);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":85,"to":107}}}}],["edd62a46-e225-45e8-8539-0931ec03e184",{"pageContent":"resolve();\n    }));\n    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);\n    await use(browser);\n    await browser.close();\n    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);\n    fs.rmdirSync(userDataDir, { recursive: true });\n  },\n  context: async ({ browser }, use) => {\n    const context = browser.contexts()[0];\n    await use(context);\n  },\n  page: async ({ context }, use) => {\n    const page = context.pages()[0];\n    await use(page);\n  },\n});","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":104,"to":120}}}}],["6a584d26-98a1-4976-9a4d-4576cb5af376",{"pageContent":"export { expect } from '@playwright/test';\n```\n\n```js title=\"example.spec.ts\"\nimport { test, expect } from './webView2Test';\n\ntest('test WebView2', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  const getStarted = page.getByText('Get Started');\n  await expect(getStarted).toBeVisible();\n});\n```\n\n```java title=\"WebView2Process.java\"\npackage com.example;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class WebView2Process {\n  public int cdpPort;\n  private Path _dataDir;\n  private Process _process;\n  private Path _executablePath = Path.of(\"../webview2-app/bin/Debug/net8.0-windows/webview2.exe\");\n\n  public WebView2Process() throws IOException {\n    cdpPort = nextFreePort();\n    _dataDir = Files.createTempDirectory(\"pw-java-webview2-tests-\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":122,"to":155}}}}],["25d6dec7-d65d-425c-96f7-49cb4a868d98",{"pageContent":"if (!Files.exists(_executablePath)) {\n      throw new RuntimeException(\"Executable not found: \" + _executablePath);\n    }\n    ProcessBuilder pb = new ProcessBuilder().command(_executablePath.toAbsolutePath().toString());\n    Map<String, String> envMap = pb.environment();\n    envMap.put(\"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\", \"--remote-debugging-port=\" + cdpPort);\n    envMap.put(\"WEBVIEW2_USER_DATA_FOLDER\", _dataDir.toString());\n    _process = pb.start();\n    // wait until \"WebView2 initialized\" got printed\n    BufferedReader reader = new BufferedReader(new InputStreamReader(_process.getInputStream()));\n    while (true) {\n      String line = reader.readLine();\n      if (line == null) {\n        throw new RuntimeException(\"WebView2 process exited\");\n      }\n      if (line.contains(\"WebView2 initialized\")) {\n        break;\n      }\n    }\n  }\n\n  private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":157,"to":178}}}}],["747b2187-b123-440e-b035-1ac5789ce0e6",{"pageContent":"private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);\n\n  private static boolean available(int port) {\n    try (ServerSocket ignored = new ServerSocket(port)) {\n      return true;\n    } catch (IOException ignored) {\n      return false;\n    }\n  }\n\n  static int nextFreePort() {\n    for (int i = 0; i < 100; i++) {\n      int port = nextUnusedPort.getAndIncrement();\n      if (available(port)) {\n        return port;\n      }\n    }\n    throw new RuntimeException(\"Cannot find free port: \" + nextUnusedPort.get());\n  }\n\n  public void dispose() {\n    _process.destroy();\n    try {\n      _process.waitFor();\n    } catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n```\n\n```java title=\"TestExample.java\"\npackage com.example;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":178,"to":210}}}}],["d4a6fdb6-b9d1-4660-a8e1-c85b9f7a8dbf",{"pageContent":"```java title=\"TestExample.java\"\npackage com.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nimport java.io.IOException;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static WebView2Process webview2Process;\n  static Playwright playwright;\n  static Browser browser;\n  static BrowserContext context;\n  static Page page;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":209,"to":231}}}}],["045c8c3d-9858-4117-bfe9-8f4eeeff370d",{"pageContent":"@BeforeAll\n  static void launchBrowser() throws IOException {\n    playwright = Playwright.create();\n    webview2Process = new WebView2Process();\n    browser = playwright.chromium().connectOverCDP(\"http://127.0.0.1:\" + webview2Process.cdpPort);\n    context = browser.contexts().get(0);\n    page = context.pages().get(0);\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    webview2Process.dispose();\n  }\n\n  @Test\n  public void shouldClickButton() {\n    page.navigate(\"https://playwright.dev\");\n    Locator gettingStarted = page.getByText(\"Get started\");\n    assertThat(gettingStarted).isVisible();\n  }\n}\n```\n\n```python title=\"conftest.py\"\nimport os\nimport socket\nimport tempfile\nimport pytest\nfrom pathlib import Path\nfrom playwright.sync_api import Playwright, Browser, BrowserContext\nimport subprocess\n\nEXECUTABLE_PATH = (\n    Path(__file__).parent\n    / \"..\"\n    / \"webview2-app\"\n    / \"bin\"\n    / \"Debug\"\n    / \"net8.0-windows\"\n    / \"webview2.exe\"\n)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":233,"to":273}}}}],["de12d37c-2f94-4175-b01c-ef2656f97270",{"pageContent":"EXECUTABLE_PATH = (\n    Path(__file__).parent\n    / \"..\"\n    / \"webview2-app\"\n    / \"bin\"\n    / \"Debug\"\n    / \"net8.0-windows\"\n    / \"webview2.exe\"\n)\n\n\n@pytest.fixture(scope=\"session\")\ndef data_dir():\n    with tempfile.TemporaryDirectory(\n        prefix=\"playwright-webview2-tests\", ignore_cleanup_errors=True\n    ) as tmpdirname:\n        yield tmpdirname\n\n\n@pytest.fixture(scope=\"session\")\ndef webview2_process_cdp_port(data_dir: str):\n    cdp_port = _find_free_port()\n    process = subprocess.Popen(\n        [EXECUTABLE_PATH],\n        env={\n            **dict(os.environ),\n            \"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\": f\"--remote-debugging-port={cdp_port}\",\n            \"WEBVIEW2_USER_DATA_FOLDER\": data_dir,\n        },\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        universal_newlines=True,\n    )\n    while True:\n        line = process.stdout.readline()\n        if \"WebView2 initialized\" in line:\n            break\n    yield cdp_port\n    process.terminate()","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":265,"to":303}}}}],["3c3348cc-274f-40f9-b898-46ddc5570ba7",{"pageContent":"@pytest.fixture(scope=\"session\")\ndef browser(playwright: Playwright, webview2_process_cdp_port: int):\n    browser = playwright.chromium.connect_over_cdp(\n        f\"http://127.0.0.1:{webview2_process_cdp_port}\"\n    )\n    yield browser\n\n\n@pytest.fixture(scope=\"function\")\ndef context(browser: Browser):\n    context = browser.contexts[0]\n    yield context\n\n\n@pytest.fixture(scope=\"function\")\ndef page(context: BrowserContext):\n    page = context.pages[0]\n    yield page\n\n\ndef _find_free_port(port=9000, max_port=65535):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    while port <= max_port:\n        try:\n            sock.bind((\"\", port))\n            sock.close()\n            return port\n        except OSError:\n            port += 1\n    raise IOError(\"no free ports\")\n```\n\n```python title=\"test_webview2.py\"\nfrom playwright.sync_api import Page, expect","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":306,"to":339}}}}],["55a299c0-87c9-4f93-b31e-12efad8b1102",{"pageContent":"```python title=\"test_webview2.py\"\nfrom playwright.sync_api import Page, expect\n\n\ndef test_webview2(page: Page):\n    page.goto(\"https://playwright.dev\")\n    get_started = page.get_by_text(\"Get Started\")\n    expect(get_started).to_be_visible()\n```\n\n```csharp\n// WebView2Test.cs\nusing System.Diagnostics;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PlaywrightTest\n{\n    public IBrowser Browser { get; internal set; } = null!;\n    public IBrowserContext Context { get; internal set; } = null!;\n    public IPage Page { get; internal set; } = null!;\n    private Process? _webView2Process = null;\n    private string _userDataDir = null!;\n    private string _executablePath = Path.Join(Directory.GetCurrentDirectory(), @\"..\\..\\..\\..\\webview2-app\\bin\\Debug\\net8.0-windows\\webview2.exe\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":338,"to":364}}}}],["ca37e0b9-bf83-43e1-94da-a95511883aac",{"pageContent":"[TestInitialize]\n    public async Task BrowserTestInitialize()\n    {\n        var cdpPort = 10000 + WorkerIndex;\n        Assert.IsTrue(File.Exists(_executablePath), \"Make sure that the executable exists\");\n        _userDataDir = Path.Join(Path.GetTempPath(), $\"playwright-webview2-tests/user-data-dir-{WorkerIndex}\");\n        // WebView2 does some lazy cleanups on shutdown so we can't clean it up after each test\n        if (Directory.Exists(_userDataDir))\n        {\n            Directory.Delete(_userDataDir, true);\n        }\n        _webView2Process = Process.Start(new ProcessStartInfo(_executablePath)\n        {\n            EnvironmentVariables =\n        {\n            [\"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\"] = $\"--remote-debugging-port={cdpPort}\",\n            [\"WEBVIEW2_USER_DATA_FOLDER\"] = _userDataDir,\n        },\n            RedirectStandardOutput = true,\n        });\n        while (!_webView2Process!.HasExited)\n        {","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":366,"to":387}}}}],["5e20fab7-76f0-4951-97a6-208df83cba51",{"pageContent":"[\"WEBVIEW2_USER_DATA_FOLDER\"] = _userDataDir,\n        },\n            RedirectStandardOutput = true,\n        });\n        while (!_webView2Process!.HasExited)\n        {\n            var output = await _webView2Process!.StandardOutput.ReadLineAsync();\n            if (_webView2Process!.HasExited)\n            {\n                throw new Exception(\"WebView2 process exited unexpectedly\");\n            }\n            if (output != null && output.Contains(\"WebView2 initialized\"))\n            {\n                break;\n            }\n        }\n        var cdpAddress = $\"http://127.0.0.1:{cdpPort}\";\n        Browser = await Playwright.Chromium.ConnectOverCDPAsync(cdpAddress);\n        Context = Browser.Contexts[0];\n        Page = Context.Pages[0];\n    }","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":382,"to":402}}}}],["d41bf1b3-c06a-4327-85fc-60bb5f1167ac",{"pageContent":"[TestCleanup]\n    public async Task BrowserTestCleanup()\n    {\n        _webView2Process!.Kill(true);\n        await Browser.CloseAsync();\n    }\n}\n```\n\n```csharp\n// UnitTest1.cs\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : WebView2Test\n{\n    [TestMethod]\n    public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n        var getStarted = Page.GetByText(\"Get Started\");\n        await Expect(getStarted).ToBeVisibleAsync();\n    }\n}\n```\n\n## Debugging","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":404,"to":433}}}}],["f7401fcf-b2f5-40b3-9fbe-6ca6c656f751",{"pageContent":"## Debugging\n\nInside your webview2 control, you can just right-click to open the context menu and select \"Inspect\" to open the DevTools or press <kbd>F12</kbd>. You can also use the [WebView2.CoreWebView2.OpenDevToolsWindow](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.opendevtoolswindow?view=webview2-dotnet-1.0.1462.37) method to open the DevTools programmatically.\n\nFor debugging tests, see the Playwright [Debugging guide](./debug).","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-webview2.md","title":"src-webview2","url":"https://playwright.dev/docs/src-webview2","loc":{"lines":{"from":433,"to":437}}}}],["41c08ab5-c2ef-478f-99b6-57dad3d443b2",{"pageContent":"---\nid: writing-tests\ntitle: \"Writing tests\"\n---\n\n## Introduction\n\nPlaywright tests are simple, they\n\n- **perform actions**, and\n- **assert the state** against expectations.\n\nThere is no need to wait for anything prior to performing an action: Playwright\nautomatically waits for the wide range of [actionability](./actionability.md)\nchecks to pass prior to performing each action.\n\nThere is also no need to deal with the race conditions when performing the checks -\nPlaywright assertions are designed in a way that they describe the expectations\nthat need to be eventually met.\n\nThat's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":1,"to":24}}}}],["45859b87-0558-4272-861b-8ec08af4201b",{"pageContent":"That's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**\n\n- [How to write the first test](/writing-tests.md#first-test)\n- [How to perform actions](/writing-tests.md#actions)\n- [How to use assertions](/writing-tests.md#assertions)\n- [How tests run in isolation](/writing-tests.md#test-isolation)\n- [How to use test hooks](/writing-tests.md#using-test-hooks)\n  \n## First test\n\nTake a look at the following example to see how to write a test.\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":21,"to":54}}}}],["e8b3f153-890d-4261-98a6-ef459b0d01bf",{"pageContent":"namespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":54,"to":84}}}}],["d58afda1-ed18-44d9-95c6-e106f619f865",{"pageContent":"</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":83,"to":113}}}}],["2fa90f44-db2d-4e38-9425-c41b2880f884",{"pageContent":"// Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":112,"to":145}}}}],["b5748f39-4455-4214-b7d8-a2076fe7d9e5",{"pageContent":"[Fact]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n</TabItem>\n</Tabs>\n\n## Actions\n\n### Navigation\n\nMost of the tests will start by navigating the page to a URL. After that, the test\nwill be able to interact with the page elements.\n\n```csharp\nawait Page.GotoAsync(\"https://playwright.dev\");\n```\n\nPlaywright will wait for the page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":142,"to":172}}}}],["d7f7830f-2879-4dfa-9130-a6b448cfbfe6",{"pageContent":"Playwright will wait for the page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions\n\nPerforming actions starts with locating the elements. Playwright uses [Locators API](./locators.md) for that. Locators represent a way to find element(s) on the page at any moment, learn more about the [different types](./locators.md) of locators available. Playwright will wait for the element to be [actionable](./actionability.md) prior to performing the action, so there is no need to wait for it to become available.\n\n\n```csharp\n// Create a locator.\nvar getStarted = Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" });\n\n// Click it.\nawait getStarted.ClickAsync();\n```\n\nIn most cases, it'll be written in one line:\n\n```csharp\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n```\n\n### Basic actions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":169,"to":191}}}}],["c28deb3e-017e-4ead-a930-c89877930e35",{"pageContent":"In most cases, it'll be written in one line:\n\n```csharp\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n```\n\n### Basic actions\n\nThis is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the [Locator API](./api/class-locator.md) section to\nlearn more about them.\n\n| Action | Description |\n| :- | :- |\n| [`method: Locator.check`] | Check the input checkbox |\n| [`method: Locator.click`] | Click the element |\n| [`method: Locator.uncheck`] | Uncheck the input checkbox |\n| [`method: Locator.hover`] | Hover mouse over the element |\n| [`method: Locator.fill`] | Fill the form field, input text |\n| [`method: Locator.focus`] | Focus the element |\n| [`method: Locator.press`] | Press single key |\n| [`method: Locator.setInputFiles`] | Pick files to upload |\n| [`method: Locator.selectOption`] | Select option in the drop down |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":185,"to":206}}}}],["3cff012c-75e7-4672-8ec0-65abc2d6b717",{"pageContent":"## Assertions\n  \nPlaywright provides an async function called [Expect](./test-assertions) to assert and wait until the expected condition is met.\n\n```csharp\nawait Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n``` \n  \nHere is the list of the most popular async assertions. Note that there are [many more](./test-assertions.md) to get familiar with:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":208,"to":216}}}}],["023c207f-3a1b-4a09-8abe-bdc5c72c7275",{"pageContent":"| Assertion | Description |\n| :- | :- |\n| [`method: LocatorAssertions.toBeChecked`] | Checkbox is checked |\n| [`method: LocatorAssertions.toBeEnabled`] | Control is enabled |\n| [`method: LocatorAssertions.toBeVisible`] | Element is visible |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |\n| [`method: LocatorAssertions.toHaveAttribute`] | Element has attribute |\n| [`method: LocatorAssertions.toHaveCount`] | List of elements has given length |\n| [`method: LocatorAssertions.toHaveText`] | Element matches text |\n| [`method: LocatorAssertions.toHaveValue`] | Input element has value |\n| [`method: PageAssertions.toHaveTitle`] | Page has title |\n| [`method: PageAssertions.toHaveURL`] | Page has URL |\n\n\n## Test Isolation","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":218,"to":232}}}}],["bb469931-3f38-435f-86b4-37ae2c50fd21",{"pageContent":"## Test Isolation\n\nThe Playwright NUnit and MSTest test framework base classes will isolate each test from each other by providing a separate `Page` instance. Pages are isolated between tests due to the Browser Context, which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":232,"to":267}}}}],["f20ac664-03f7-4d87-9cea-3b5843fb9a44",{"pageContent":"</TabItem>\n<TabItem value=\"mstest\">\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\n```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Using Test Hooks\n\n<Tabs\n  groupId=\"test-runners\"\n  defaultValue=\"mstest\"\n  values={[\n    {label: 'MSTest', value: 'mstest'},\n    {label: 'NUnit', value: 'nunit'},\n    {label: 'xUnit', value: 'xunit'},\n  ]\n}>\n<TabItem value=\"nunit\">","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":266,"to":320}}}}],["a9ea9e38-b062-46c3-af8e-121cd579df3b",{"pageContent":"You can use `SetUp`/`TearDown` to prepare and clean up your test environment:\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    [SetUp]\n    public async Task SetUp()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"mstest\">\n\nYou can use `TestInitialize`/`TestCleanup` to prepare and clean up your test environment:\n\n```csharp title=\"UnitTest1.cs\"\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":322,"to":360}}}}],["522f2c3f-211a-4b44-ae16-a38952ea2ab6",{"pageContent":"```csharp title=\"UnitTest1.cs\"\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"xunit\">\n\nYou can use `InitializeAsync`/`DisposeAsync` to prepare and clean up your test environment:\n\n```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":355,"to":389}}}}],["a2aae4b7-6a80-4e5b-89be-705cae5e622c",{"pageContent":"```csharp title=\"UnitTest1.cs\"\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    override public async Task InitializeAsync()\n    {\n        await base.InitializeAsync();\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n\n    public override async Task DisposeAsync()\n    {\n        Console.WriteLine(\"After each test cleanup\");\n        await base.DisposeAsync();\n    }\n}\n```\n</TabItem>\n</Tabs>\n\n## What's Next\n\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Run tests on CI](./ci-intro.md)\n- [Learn more about the MSTest, NUnit, or xUnit base classes](./test-runners.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-csharp.md","title":"src-writing-tests-csharp","url":"https://playwright.dev/docs/src-writing-tests-csharp","loc":{"lines":{"from":385,"to":422}}}}],["d46fe911-c536-4d3a-ba6b-db5dc31c1fc5",{"pageContent":"---\nid: writing-tests\ntitle: \"Writing tests\"\n---\n\n## Introduction\n\nPlaywright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with [auto-wait](./actionability.md) built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides [assertThat](./test-assertions.md) overloads to write assertions.\n\nTake a look at the example test below to see how to write a test using web first assertions, locators and selectors.\n\n```java\npackage org.example;\n\nimport java.util.regex.Pattern;\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.AriaRole;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-java.md","title":"src-writing-tests-java","url":"https://playwright.dev/docs/src-writing-tests-java","loc":{"lines":{"from":1,"to":19}}}}],["e7f7560d-0c58-4654-9b0c-9115d1001772",{"pageContent":"import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class App {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            Page page = browser.newPage();\n            page.navigate(\"https://playwright.dev\");\n\n            // Expect a title \"to contain\" a substring.\n            assertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n\n            // create a locator\n            Locator getStarted = page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Get Started\"));\n\n            // Expect an attribute \"to be strictly equal\" to the value.\n            assertThat(getStarted).hasAttribute(\"href\", \"/docs/intro\");\n\n            // Click the get started link.\n            getStarted.click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-java.md","title":"src-writing-tests-java","url":"https://playwright.dev/docs/src-writing-tests-java","loc":{"lines":{"from":19,"to":38}}}}],["83cbdd70-03a6-4df7-917a-4950093e6a8d",{"pageContent":"// Click the get started link.\n            getStarted.click();\n\n            // Expects page to have a heading with the name of Installation.\n            assertThat(page.getByRole(AriaRole.HEADING,\n               new Page.GetByRoleOptions().setName(\"Installation\"))).isVisible();\n        }\n    }\n}\n```\n\n\n### Assertions\n\nPlaywright provides [`assertThat`](./test-assertions.md) overloads which will wait until the expected condition is met.\n\n```java\nimport java.util.regex.Pattern;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n```\n\n\n### Locators\n\n[Locators](./locators.md) are the central piece of Playwright's auto-waiting and retry-ability. Locators represent a way to find element(s) on the page at any moment and are used to perform actions on elements such as `.click` `.fill` etc. Custom locators can be created with the [`method: Page.locator`] method.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-java.md","title":"src-writing-tests-java","url":"https://playwright.dev/docs/src-writing-tests-java","loc":{"lines":{"from":37,"to":63}}}}],["eebbd145-7995-4474-bbf9-8ffef693daf3",{"pageContent":"```java\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nLocator getStarted = page.locator(\"text=Get Started\");\n\nassertThat(getStarted).hasAttribute(\"href\", \"/docs/intro\");\ngetStarted.click();\n```\n\nPlaywright supports many different locators like [role](./locators.md#locate-by-role) [text](./locators.md#get-by-text), [test id](./locators.md#get-by-test-id) and many more. Learn more about available locators and how to pick one in this [in-depth guide](./locators.md).\n\n\n```java\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page.locator(\"text=Installation\")).isVisible();\n```\n\n\n### Test Isolation\n\nPlaywright has the concept of a [BrowserContext] which is an in-memory isolated browser profile. It's recommended to create a new [BrowserContext] for each test to ensure they don't interfere with each other.","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-java.md","title":"src-writing-tests-java","url":"https://playwright.dev/docs/src-writing-tests-java","loc":{"lines":{"from":65,"to":86}}}}],["7705dd89-4eda-4cca-98ad-9404fcca19be",{"pageContent":"```java\nBrowser browser = playwright.chromium().launch();\nBrowserContext context = browser.newContext();\nPage page = context.newPage();\n```\n\n## What's Next\n\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen.md)\n- [See a trace of your tests](./trace-viewer-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-java.md","title":"src-writing-tests-java","url":"https://playwright.dev/docs/src-writing-tests-java","loc":{"lines":{"from":88,"to":98}}}}],["66c27406-e846-44ed-8b2f-cab27ec3b1c4",{"pageContent":"---\nid: writing-tests\ntitle: \"Writing tests\"\n---\n## Introduction\n\nPlaywright tests are simple, they\n\n- **perform actions**, and\n- **assert the state** against expectations.\n\nThere is no need to wait for anything prior to performing an action: Playwright\nautomatically waits for the wide range of [actionability](./actionability.md)\nchecks to pass prior to performing each action.\n\nThere is also no need to deal with the race conditions when performing the checks -\nPlaywright assertions are designed in a way that they describe the expectations\nthat need to be eventually met.\n\nThat's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":1,"to":23}}}}],["1aa1a7c7-eaf9-4cad-a353-db9e7a3a376b",{"pageContent":"That's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**\n\n- [How to write the first test](/writing-tests.md#first-test)\n- [How to perform actions](/writing-tests.md#actions)\n- [How to use assertions](/writing-tests.md#assertions)\n- [How tests run in isolation](/writing-tests.md#test-isolation)\n- [How to use test hooks](/writing-tests.md#using-test-hooks)\n\n## First test\n\nTake a look at the following example to see how to write a test.\n\n```js title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":20,"to":49}}}}],["66126fb3-26fd-489c-aa5d-67710f0fb2c1",{"pageContent":"test('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects page to have a heading with the name of Installation.\n  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n});\n```\n  \n:::note\nAdd `// @ts-check` at the start of each test file when using JavaScript in VS Code to get automatic type checking.\n:::\n\n\n## Actions\n\n### Navigation\n\nMost of the tests will start with navigating page to the URL. After that, test\nwill be able to interact with the page elements.\n\n```js\nawait page.goto('https://playwright.dev/');\n```\n\n```python\npage.goto(\"https://playwright.dev/\")\n```\n\nPlaywright will wait for page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":45,"to":79}}}}],["a69f0472-552a-4bb0-b33d-815262728741",{"pageContent":"Playwright will wait for page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions\n\nPerforming actions starts with locating the elements. Playwright uses [Locators API](./locators.md) for that. Locators represent a way to find element(s) on the page at any moment, learn more about the [different types](./locators.md) of locators available. Playwright will wait for the element to be [actionable](./actionability.md) prior to performing the action, so there is no need to wait for it to become available.\n\n\n```js\n// Create a locator.\nconst getStarted = page.getByRole('link', { name: 'Get started' });\n\n// Click it.\nawait getStarted.click();\n```\n\nIn most cases, it'll be written in one line:\n\n```js\nawait page.getByRole('link', { name: 'Get started' }).click();\n```\n\n### Basic actions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":76,"to":98}}}}],["d31c5ad1-f30f-4252-8ab0-bcebf565e696",{"pageContent":"// Click it.\nawait getStarted.click();\n```\n\nIn most cases, it'll be written in one line:\n\n```js\nawait page.getByRole('link', { name: 'Get started' }).click();\n```\n\n### Basic actions\n\nThis is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the [Locator API](./api/class-locator.md) section to\nlearn more about them.\n\n| Action | Description |\n| :- | :- |\n| [`method: Locator.check`] | Check the input checkbox |\n| [`method: Locator.click`] | Click the element |\n| [`method: Locator.uncheck`] | Uncheck the input checkbox |\n| [`method: Locator.hover`] | Hover mouse over the element |\n| [`method: Locator.fill`] | Fill the form field, input text |\n| [`method: Locator.focus`] | Focus the element |\n| [`method: Locator.press`] | Press single key |\n| [`method: Locator.setInputFiles`] | Pick files to upload |\n| [`method: Locator.selectOption`] | Select option in the drop down |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":88,"to":113}}}}],["a3a6d780-a256-41a9-8364-24433dc24b42",{"pageContent":"## Assertions\n  \nPlaywright includes [test assertions](./test-assertions.md) in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation.\n\nThere are many generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n\n```js\nexpect(success).toBeTruthy();\n```\n\nPlaywright also includes async matchers that will wait until the expected condition is met. Using these matchers allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing \"Playwright\":\n\n```js\nawait expect(page).toHaveTitle(/Playwright/);\n```\n  \nHere is the list of the most popular async assertions. Note that there are [many more](./test-assertions.md) to get familiar with:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":115,"to":131}}}}],["989b1556-4408-431d-b1e7-1d241ddd9162",{"pageContent":"```js\nawait expect(page).toHaveTitle(/Playwright/);\n```\n  \nHere is the list of the most popular async assertions. Note that there are [many more](./test-assertions.md) to get familiar with:\n\n| Assertion | Description |\n| :- | :- |\n| [`method: LocatorAssertions.toBeChecked`] | Checkbox is checked |\n| [`method: LocatorAssertions.toBeEnabled`] | Control is enabled |\n| [`method: LocatorAssertions.toBeVisible`] | Element is visible |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |\n| [`method: LocatorAssertions.toHaveAttribute`] | Element has attribute |\n| [`method: LocatorAssertions.toHaveCount`] | List of elements has given length |\n| [`method: LocatorAssertions.toHaveText`] | Element matches text |\n| [`method: LocatorAssertions.toHaveValue`] | Input element has value |\n| [`method: PageAssertions.toHaveTitle`] | Page has title |\n| [`method: PageAssertions.toHaveURL`] | Page has URL |","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":127,"to":144}}}}],["d83318c0-4087-4bfd-810b-021e3065a3c7",{"pageContent":"### Test Isolation\n  \nPlaywright Test is based on the concept of [test fixtures](./test-fixtures.md) such as the [built in page fixture](./test-fixtures#built-in-fixtures), which is passed into your test. Pages are [isolated between tests due to the Browser Context](./browser-contexts), which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.\n\n```js title=\"tests/example.spec.ts\"\nimport { test } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  // \"page\" belongs to an isolated BrowserContext, created for this specific test.\n});\n\ntest('another test', async ({ page }) => {\n  // \"page\" in this second test is completely isolated from the first test.\n});\n```\n\n### Using Test Hooks","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":146,"to":162}}}}],["564c1c33-e4c7-4dc6-bc6e-1a4176085234",{"pageContent":"test('another test', async ({ page }) => {\n  // \"page\" in this second test is completely isolated from the first test.\n});\n```\n\n### Using Test Hooks\n\nYou can use various [test hooks](./api/class-test.md) such as `test.describe` to declare a group of tests and `test.beforeEach` and `test.afterEach` which are executed before/after each test. Other hooks include the `test.beforeAll` and `test.afterAll` which are executed once per worker before/after all tests.\n\n```js title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.describe('navigation', () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto('https://playwright.dev/');\n  });\n\n  test('main navigation', async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL('https://playwright.dev/');\n  });\n});\n```\n\n## What's Next","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":157,"to":182}}}}],["b73e7122-2c42-4399-865a-8afbbd987650",{"pageContent":"test('main navigation', async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL('https://playwright.dev/');\n  });\n});\n```\n\n## What's Next\n\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Explore UI Mode](./test-ui-mode.md)\n- [Run tests on CI with GitHub Actions](./ci-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-js.md","title":"src-writing-tests-js","url":"https://playwright.dev/docs/src-writing-tests-js","loc":{"lines":{"from":175,"to":188}}}}],["daf3c7a7-e54f-40d6-b033-32dcc711b2df",{"pageContent":"---\nid: writing-tests\ntitle: \"Writing tests\"\n---\n## Introduction\n\nPlaywright tests are simple, they\n\n- **perform actions**, and\n- **assert the state** against expectations.\n\nThere is no need to wait for anything prior to performing an action: Playwright\nautomatically waits for the wide range of [actionability](./actionability.md)\nchecks to pass prior to performing each action.\n\nThere is also no need to deal with the race conditions when performing the checks -\nPlaywright assertions are designed in a way that they describe the expectations\nthat need to be eventually met.\n\nThat's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":1,"to":23}}}}],["d52992ee-a9dd-42c7-896f-1ddd6691c152",{"pageContent":"That's it! These design choices allow Playwright users to forget about flaky\ntimeouts and racy checks in their tests altogether.\n\n**You will learn**\n\n- [How to write the first test](/writing-tests.md#first-test)\n- [How to perform actions](/writing-tests.md#actions)\n- [How to use assertions](/writing-tests.md#assertions)\n- [How tests run in isolation](/writing-tests.md#test-isolation)\n- [How to use test hooks](/writing-tests.md#using-fixtures)\n\n## First test\n\nTake a look at the following example to see how to write a test. Note how the file name follows the `test_` prefix convention as well as each test name.\n\n```python title=\"test_example.py\"\nimport re\nfrom playwright.sync_api import Page, expect\n\ndef test_has_title(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":20,"to":46}}}}],["1118bc78-c6e1-48bc-b4e2-cc4f8d60e713",{"pageContent":"# Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Click the get started link.\n    page.get_by_role(\"link\", name=\"Get started\").click()\n\n    # Expects page to have a heading with the name of Installation.\n    expect(page.get_by_role(\"heading\", name=\"Installation\")).to_be_visible()\n```\n\n## Actions\n\n### Navigation\n\nMost of the tests will start with navigating page to the URL. After that, test\nwill be able to interact with the page elements.\n\n```js\nawait page.goto('https://playwright.dev/');\n```\n\n```python\npage.goto(\"https://playwright.dev/\")\n```\n\nPlaywright will wait for page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":42,"to":73}}}}],["d51999c8-62ff-4a60-8d0d-5e3a9bf4bcf1",{"pageContent":"Playwright will wait for page to reach the load state prior to moving forward.\nLearn more about the [`method: Page.goto`] options.\n\n### Interactions\n\nPerforming actions starts with locating the elements. Playwright uses [Locators API](./locators.md) for that. Locators represent a way to find element(s) on the page at any moment, learn more about the [different types](./locators.md) of locators available. Playwright will wait for the element to be [actionable](./actionability.md) prior to performing the action, so there is no need to wait for it to become available.\n\n\n```python\n# Create a locator.\nget_started = page.get_by_role(\"link\", name=\"Get started\")\n\n# Click it.\nget_started.click()\n```\n\nIn most cases, it'll be written in one line:\n\n```python\npage.get_by_role(\"link\", name=\"Get started\").click()\n```\n\n### Basic actions","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":70,"to":92}}}}],["0f7445bb-8e84-4ed0-af5d-3e72ff931c20",{"pageContent":"# Click it.\nget_started.click()\n```\n\nIn most cases, it'll be written in one line:\n\n```python\npage.get_by_role(\"link\", name=\"Get started\").click()\n```\n\n### Basic actions\n\nThis is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the [Locator API](./api/class-locator.md) section to\nlearn more about them.\n\n| Action | Description |\n| :- | :- |\n| [`method: Locator.check`] | Check the input checkbox |\n| [`method: Locator.click`] | Click the element |\n| [`method: Locator.uncheck`] | Uncheck the input checkbox |\n| [`method: Locator.hover`] | Hover mouse over the element |\n| [`method: Locator.fill`] | Fill the form field, input text |\n| [`method: Locator.focus`] | Focus the element |\n| [`method: Locator.press`] | Press single key |\n| [`method: Locator.setInputFiles`] | Pick files to upload |\n| [`method: Locator.selectOption`] | Select option in the drop down |\n\n## Assertions\n* langs: python","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":82,"to":110}}}}],["37217035-3fab-4035-a284-faf6d8762d2d",{"pageContent":"## Assertions\n* langs: python\n\nPlaywright includes [assertions](./test-assertions.md) that will wait until the expected condition is met. Using these assertions allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing \"Playwright\":\n\n```python\nimport re\nfrom playwright.sync_api import expect\n\nexpect(page).to_have_title(re.compile(\"Playwright\"))\n```\n\nHere is the list of the most popular async assertions. Note that there are [many more](./test-assertions.md) to get familiar with:","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":109,"to":121}}}}],["f709c7b4-b9ae-44ae-92c6-59d4221cf377",{"pageContent":"expect(page).to_have_title(re.compile(\"Playwright\"))\n```\n\nHere is the list of the most popular async assertions. Note that there are [many more](./test-assertions.md) to get familiar with:\n\n| Assertion | Description |\n| :- | :- |\n| [`method: LocatorAssertions.toBeChecked`] | Checkbox is checked |\n| [`method: LocatorAssertions.toBeEnabled`] | Control is enabled |\n| [`method: LocatorAssertions.toBeVisible`] | Element is visible |\n| [`method: LocatorAssertions.toContainText`] | Element contains text |\n| [`method: LocatorAssertions.toHaveAttribute`] | Element has attribute |\n| [`method: LocatorAssertions.toHaveCount`] | List of elements has given length |\n| [`method: LocatorAssertions.toHaveText`] | Element matches text |\n| [`method: LocatorAssertions.toHaveValue`] | Input element has value |\n| [`method: PageAssertions.toHaveTitle`] | Page has title |\n| [`method: PageAssertions.toHaveURL`] | Page has URL |\n\n\n### Test isolation","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":118,"to":137}}}}],["623ed45c-0b1e-4ef1-8265-b2d04a53938b",{"pageContent":"### Test isolation\n\nThe Playwright Pytest plugin is based on the concept of test fixtures such as the [built in page fixture](./test-runners.md), which is passed into your test. Pages are [isolated between tests due to the Browser Context](./browser-contexts), which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.\n\n```python title=\"test_example.py\"\nfrom playwright.sync_api import Page\n\ndef test_example_test(page: Page):\n  pass\n  # \"page\" belongs to an isolated BrowserContext, created for this specific test.\n\ndef test_another_test(page: Page):\n  pass\n  # \"page\" in this second test is completely isolated from the first test.\n```\n\n### Using fixtures","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":137,"to":153}}}}],["b06b1240-a623-4ce3-9d9d-d2ab1c8267cd",{"pageContent":"def test_another_test(page: Page):\n  pass\n  # \"page\" in this second test is completely isolated from the first test.\n```\n\n### Using fixtures\n\nYou can use various [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html#autouse-fixtures-fixtures-you-don-t-have-to-request) to execute code before or after your tests and to share objects between them. A `function` scoped fixture e.g. with autouse behaves like a beforeEach/afterEach. And a `module` scoped fixture with autouse behaves like a beforeAll/afterAll which runs before all and after all the tests.\n\n```python title=\"test_example.py\"\nimport pytest\nfrom playwright.sync_api import Page, expect\n\n@pytest.fixture(scope=\"function\", autouse=True)\ndef before_each_after_each(page: Page):\n    \n    print(\"before the test runs\")\n\n    # Go to the starting url before each test.\n    page.goto(\"https://playwright.dev/\")\n    yield\n    \n    print(\"after the test runs\")","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":148,"to":170}}}}],["814e61d8-a1bb-416f-9d73-d1723de06854",{"pageContent":"# Go to the starting url before each test.\n    page.goto(\"https://playwright.dev/\")\n    yield\n    \n    print(\"after the test runs\")\n\ndef test_main_navigation(page: Page):\n    # Assertions use the expect API.\n    expect(page).to_have_url(\"https://playwright.dev/\")\n```\n\n## What's next\n\n- [Run single test, multiple tests, headed mode](./running-tests.md)\n- [Generate tests with Codegen](./codegen-intro.md)\n- [See a trace of your tests](./trace-viewer-intro.md)\n- [Run tests on CI with GitHub Actions](./ci-intro.md)","metadata":{"source":"/Users/berkdurmus/work/trace-station/data/docs/src-writing-tests-python.md","title":"src-writing-tests-python","url":"https://playwright.dev/docs/src-writing-tests-python","loc":{"lines":{"from":166,"to":182}}}}]],{"0":"43439606-7dc6-417e-98ae-2ce434de887c","1":"2e360474-1c8f-4bb6-9a08-8d1ac4a6261e","2":"88d7a894-5a18-45fd-8ecf-d8862dd70cb6","3":"043c53a0-ca0a-41ba-a115-10563dffe59a","4":"f130d71b-5f18-42b8-b402-d4de29917e8d","5":"62a21950-ade4-4943-9eda-8c70db7dc911","6":"89d49a72-a92b-459b-9594-0897190e0e08","7":"54dec4f2-2d8d-46f8-957c-f43db34359f3","8":"150dd3d6-b2e9-4b62-b752-ecae8f55be17","9":"a8bf9872-fb53-4b34-bf8b-175ddf1ba263","10":"4e16e9ee-53ae-4b4a-9854-21b4f1703fdf","11":"cfdea4c5-77c9-4629-8dd5-2df5b406e9fb","12":"0ec7b1ea-4273-4458-bf96-a9b064d2e6fb","13":"ebce995d-3293-40f2-be9d-69beb2de2ee1","14":"6cfa85bf-405f-4779-b43d-72d0d31b5d2b","15":"57b20b87-ece8-4912-b0e2-c27d288841cf","16":"35f094bc-bdcc-4dcc-b396-d67456fb5926","17":"d772e757-d9bb-42fb-8abc-c33b27f49dc4","18":"82291124-45bb-4844-b1d2-4ccd9dba9df2","19":"5a1cb1f8-b8e5-4b8a-aae2-c2da7526795b","20":"b1b42572-46dd-4460-93ba-5ae138c23657","21":"d1c554f7-947a-42ad-bfef-86fbb4996aa8","22":"92200ce9-08b3-40cc-960e-55a627f21026","23":"f8892238-5dd8-400b-8654-c2b5e7d495d8","24":"2d697cc4-795b-494b-b2c3-f2537a73207f","25":"f1e6eb31-13aa-4d12-bfec-e457963ccc47","26":"b6e259a1-5c05-4b88-93fb-05f7820b37de","27":"ef00592c-b0d0-4c89-b705-a2883ebfc295","28":"9942d4f7-218f-4a8f-94b0-97200db1af72","29":"9a080366-936d-4047-a294-2eab1a817508","30":"20c2174b-24bf-4c0f-b869-ab6a94b9b520","31":"8fcddd6f-2cd7-458b-8025-f4d36fc01dfc","32":"ab0bfd7c-6c1a-4537-9a34-cb88fe47fa70","33":"c81cf55b-7176-4911-af54-40c720a3fa85","34":"7584c092-48ed-46a0-aafa-e26818ca9d16","35":"0bdbbd9c-6ac4-4e56-a0b9-a454645ddb85","36":"18680297-375d-4b04-be49-ba339cf04786","37":"edee5358-1be7-4a32-9e94-babe04486761","38":"bfabb259-4d74-4b96-8fa0-10b77c57b0f3","39":"5f641849-ec8b-4c16-bd6c-a3d4e2a17911","40":"a0bd3ffc-7915-4ef9-a6c8-5699b4b8e213","41":"2004f52b-8eb5-4904-90cd-28817810e106","42":"e148577c-29b5-4a77-823d-954d25dc3fab","43":"752b5252-7eb0-4a7a-a302-03e98164aaa7","44":"a1710c39-0e7e-46d3-9527-21b7f7d1fc34","45":"bfc7e663-5ff3-42e9-86f0-46db1d5f794a","46":"474a168c-1e40-498f-a428-79e4b283a7fb","47":"0b00cead-c639-4484-8d9a-fb87b635ec71","48":"f8a84026-a49a-462b-98e4-356ccebb2f98","49":"5981b891-d5b7-4685-8e29-bfb1c14c646d","50":"2f85fc56-a6e6-454f-afca-054e769d6219","51":"7a4ebf3e-3083-4756-a793-353f1a38ea84","52":"1582773b-2cb0-4707-81d5-5e0457887394","53":"d73cbe3e-8b5c-4773-bd58-d1c300cec854","54":"94b66405-d1f2-45be-9cb6-4c6a5e3f3b1d","55":"94bbb68e-2e80-4f21-b4bf-360e0fc507bc","56":"81ddea1f-5c61-4634-8ac7-b3efe1eda6ae","57":"97e92fdf-419c-40fc-a094-5623c9ed8995","58":"6e62ce12-efc5-42fe-97b9-03e1b2954489","59":"1c9f65ce-c86c-4fb9-b6e4-832d77e1f34d","60":"c028d365-f050-4d28-ac5e-6788f7dc0f91","61":"6987a6ce-abe9-45d8-8908-58dea9f764d4","62":"80f0c4a8-1056-4ceb-aded-18d9b4e52407","63":"50b88ce1-9cf5-41a3-b10f-fe6bffdb409c","64":"fbda51cb-7789-4c42-ad2f-759442991cf8","65":"b7646c13-240d-4075-96d9-2b36cbc6f0d3","66":"9a4e8675-e93e-45bf-b130-4c718ef4848d","67":"06f9c3c9-4d77-4640-8391-4e00f83ec56a","68":"693d87e8-1125-4435-b542-4e89f4dd1711","69":"e3f202ea-08bb-4c48-a1c7-44ff45648f1c","70":"f48b50f3-afeb-4ee3-b34e-e42df0bbfb9c","71":"281aaefb-ec27-49f1-ba67-ada3a3357dde","72":"2c70cce4-9261-4572-8b50-79881401ebc6","73":"f7faf073-40ca-49ae-a3a1-ce30ce6a5313","74":"a0012d46-26ab-4b17-99ea-0ab250ae999d","75":"d8c9f7a5-d26e-4803-b222-7dfee9f72e12","76":"49dc7cfe-1066-4554-9e61-ec2cfea40ad8","77":"811500f3-ecc5-45d7-954a-95f98a296cd4","78":"30c0be30-66ff-433f-af88-79b8e50d51ad","79":"8a998bf6-309e-4bab-b218-1edda5d9f21f","80":"df3d8de0-63d7-4e56-b3d2-c6076286ab7c","81":"ed99f17c-7a91-4b73-bf1d-9971a6d6d50f","82":"35081a7e-1b41-4714-9c29-12ab6f3b2eb9","83":"633c2dd5-02b5-4846-bb5f-ff4aad57dcde","84":"9b322e02-1e3c-4499-91f6-3f96f76bd90f","85":"e0b942d3-3a43-498c-9c68-664e373da42d","86":"62697e3a-20de-4c25-8f23-c5d2685ac890","87":"e879d556-4989-497e-89cb-c9895263f675","88":"62173208-be11-49ef-8dd7-6b16eead7c80","89":"b125326f-562b-4845-8cef-1a83f601cb07","90":"f402c819-26a6-4f37-80fc-85262caf7e06","91":"9d046703-41e9-45d2-99e5-b04ed9f3f191","92":"f71ae43c-d61d-481f-ab9d-b3f03c8304c7","93":"cffc5ca5-3b01-4740-a308-4dec848bffd5","94":"a2bb2a25-ad1e-404a-98f2-1317f1e0155c","95":"7a31b95b-eeb0-49cd-bb14-46cf5a08e2a2","96":"f9a82e5e-d134-4907-9569-c575e174dad4","97":"c5bc615d-900d-49bb-b142-b6aebcdff1c6","98":"190e6d08-fe37-43ae-8e5e-22100326347f","99":"fa9d58ca-e822-40f1-90b4-180cf3a4c1d2","100":"e24ef4d3-17e7-454f-ba91-439b816e42c9","101":"33b99617-f995-4ad4-94eb-6e88c5d68346","102":"4235e3a7-d2a5-4539-bde1-37c7a12f480c","103":"75a1beaa-7729-4abe-9048-91e08e28837e","104":"b3c35821-6e1a-4759-a8e8-b4b5b360d60f","105":"5f8fa047-d9be-4554-85ad-122e1192f785","106":"f344b6f2-6536-4afd-873d-953a628f4463","107":"38d33054-7f8c-421e-999e-bf8fa4be35af","108":"1be4b9ce-1658-45b2-af61-19639889c541","109":"d9eb283b-12d0-4b59-9d39-50cd4545d3cb","110":"c8f41250-6926-45ee-b2a3-2805c92afdd7","111":"cbcee5a9-c22a-4aae-a309-776c3290037f","112":"de94ca74-90ff-4758-a46a-ac8255b45ef6","113":"d37b45df-c745-4782-bfa4-b01b4a69eb4e","114":"7d04cf0c-f3fb-414f-a265-1151f0cc3c4b","115":"3ec9f856-b978-4358-ba47-d16256d9d0a3","116":"cbb90d09-5d6c-41eb-a92d-06b1eb206f4b","117":"d7a68231-c985-4f56-8141-b42c77c84a16","118":"886a9639-9980-4736-8f62-1b578f86e374","119":"030f054a-69c1-4330-84d6-06648f1af637","120":"9b7c7497-51af-4084-9cc7-5c01fb661d01","121":"bd33f861-6420-47c0-b8f7-f127c82ae4b6","122":"cb3267bc-32bb-4de4-be67-c7d75741ff89","123":"52824691-911a-40ac-b10c-feb74426cc6c","124":"c46027c1-5d56-41f0-a36e-8f23a32136af","125":"722e2434-57c3-4e24-851f-59e931e17f61","126":"48f5102b-7f1f-40f4-8850-1217a79d5971","127":"65a37586-7e34-4332-983d-d61a17257f2a","128":"9fd95e90-b9ab-464f-a352-e4296e529e2f","129":"8b338b5b-844f-48e4-8647-e6f2fc152b84","130":"edb6be7a-fd1d-4b57-87b6-cc42b050fa7b","131":"9442c47b-3221-48d1-a2b1-481189fddee0","132":"ec541b84-095a-4413-b355-0163c500880f","133":"432db75f-1215-48e8-a685-f29018aa1a64","134":"e23dc709-68f4-4987-8c5f-e7196e83447b","135":"37098acb-bfd1-4e51-9647-62782f0eb870","136":"dd7fa571-9e50-4ec1-bc72-447c64fd7928","137":"b8f3ae34-4585-473e-b1bd-ef3ad21117cb","138":"40dee75e-bcbc-440e-9822-6279f118a5c2","139":"b919aeb4-b4be-48cc-8336-9f71d7291d35","140":"65dd8a9a-517a-4959-9cb8-e84a4b9ea668","141":"a88032e4-5c7d-4bd6-8f9f-02e2a89db3b4","142":"8832ef0a-8126-46df-808d-93ff6f2ba8c0","143":"f245baf2-33ba-48d3-a7d7-cdd2583adb00","144":"abc21a2b-58d0-4f7c-9dcd-820e41f19618","145":"99dbc343-28ab-4f13-a045-5154ecfeb335","146":"8a1f2535-f2ee-48e8-acf7-56ff3f2b4cc0","147":"322235c8-37f4-45f6-8af6-3ae49e2ce89f","148":"460e5677-0627-4f6d-8db7-475b1553859c","149":"54541375-99c4-4eed-9f2c-dd8f99b00a37","150":"24a546d8-1aff-470f-bff3-0cda793928b7","151":"c1d76567-66e6-4ee0-9ac7-30b64728792f","152":"a69ce2f0-b732-428d-a21d-8171cff72833","153":"6603f662-2536-40ad-808c-e1f0beedefd3","154":"20e1edc6-1662-4690-a933-113eb4ed6172","155":"e95b7230-2324-42e2-95e7-dea6b3536156","156":"c99a34ba-9c6c-4998-a915-376c189e4429","157":"b4ca7c5a-a9d8-4222-84b0-bea052ceeb3e","158":"b9bbc9e8-3bce-4217-95d6-5649d37489df","159":"b322a6d6-49d4-42f5-8bbf-e92cff58d8fe","160":"e86bbd09-8edc-4f4e-a54f-ba60d3e39715","161":"e8137cff-9307-46f5-9517-383a8d87b919","162":"cabca344-daf8-4d66-922b-383a09931b0a","163":"b717cadc-327b-45aa-ac8d-0ff57488571f","164":"2930d919-68e3-482e-9486-5716e101795c","165":"8b0e566d-f1dd-4701-97ab-53b51f27f850","166":"223acfbb-2cd5-4cff-9134-1e7f6bd21c48","167":"9a8233d5-b20b-46d6-9962-cf64c88e7a5d","168":"49a260d5-3318-4137-81d0-108c317283a7","169":"654b066a-1104-491e-80fb-aa43ee0d7605","170":"909e69c8-72ca-4afb-8dca-123005ce64e4","171":"358e292b-1989-4077-83d1-6e0a6d810248","172":"4c267fd8-0e81-492a-8542-754b9541c04d","173":"c89c0ec3-364d-4ba0-87c4-a7183f6ac5d0","174":"4a5c2fbd-8693-4acc-912e-1f96e0b92168","175":"2730c6e9-5c90-45e7-a089-fea977918236","176":"871cc982-88b8-4eca-b0be-27e618cf7218","177":"87593f51-68e7-4939-85f7-8a42fefcb4f1","178":"733d1718-556b-495c-a93f-b70bbaa58231","179":"db54cc7d-8a4e-401a-a8f8-27550ff8d146","180":"c49f38ed-dd12-4c81-bc82-d77a29bce3cd","181":"361b64b9-abe5-4318-a171-376fee31277f","182":"b061bc8d-1e86-48e8-bdba-b98cf1f6fb9f","183":"19abba45-d3e4-4b02-b2ad-c0afd1cb8520","184":"cdee7938-4ec5-43df-92f2-5c5eca07ddcd","185":"3031a76f-1907-4f2b-81ea-447b468f12ea","186":"f72c49ae-a39e-4362-aa23-520df0304925","187":"6827acf1-4686-4fec-9762-ea73263f743e","188":"613ca16e-72b6-491a-8dd8-28bcaec6caba","189":"99cc4612-d852-4328-915a-ff01088e3193","190":"a1c4ff6c-617a-41fc-be0f-a171a9a89ae0","191":"3cd0521e-83df-43a9-aa04-13160c668869","192":"a208cd62-7ce4-405a-b86b-419f928736d8","193":"9ab69827-9d41-429b-a55b-854b3c1a5519","194":"8fad24bd-deb1-44c9-8e7a-4be601fd2e4d","195":"efb6a74b-4a13-49ee-8937-76946e204aeb","196":"da4fb87d-b540-4dcd-883a-f7cb4b7173a9","197":"1134471a-3e4a-4d44-b36d-40463227c2da","198":"6bf6f26e-d4b7-4815-b061-3f92d3679507","199":"63a3d2c3-abe2-4dbc-b119-11ad0b61c0f9","200":"411e33ed-f58e-45ed-beeb-cb4397097f9c","201":"8c906b78-df48-4f72-852f-27a233949df3","202":"e8bfde14-013c-46e7-826f-4264f3e77600","203":"a9cc88a0-c9d3-4877-921c-335f47813494","204":"ca1d72e3-198d-424c-b618-39493105af4c","205":"0e3d4119-6a25-467f-9b05-8878d856671f","206":"8cc850c2-dcd2-4f31-a878-922b72c96ba0","207":"60decc60-c9b0-4dd0-92ef-48632eff34ea","208":"5dbbf0ab-0763-4aba-a427-b87b4f8b701c","209":"fe477ebd-cc06-4ebd-8afc-aaa33934b63f","210":"409d645a-c9ce-4877-8ddc-606b466750b0","211":"aa59eac6-e889-4864-ad46-c62364efde9c","212":"89a16835-94fe-477d-ad9f-9946269fbca1","213":"c5e77450-f489-4508-b6c7-9bff01480669","214":"a423db1d-61f7-40b5-963e-8cf87e516021","215":"9d1de86c-ba74-45c4-95a6-bd20db7e9b60","216":"c769102d-1051-4ae2-b9e8-89ce5c97966c","217":"1a46a351-b137-437e-8349-09264c07cf7b","218":"6f46df0c-0a98-4cbe-a744-73c942f8c10a","219":"4dd66cc4-49e2-4942-9e0d-48a4e35cc113","220":"fe353ac0-08cd-469b-9633-d05bd76514ac","221":"aaa8dffd-4b22-4401-8833-51a9bd3ce7e8","222":"1ec17d91-7227-4f80-9b40-abfbea5294df","223":"416e416d-58d7-4b1b-bc7b-09fb28ed6349","224":"d184b39a-9793-4b82-b505-2aef565dd281","225":"fc90e3c8-7b8d-4509-8836-88288f6e79b6","226":"6f0c0175-390d-479c-a25e-c80deedd0580","227":"66800d4c-8d3d-4ac3-b98f-05f480957a80","228":"af21dc6b-95f0-40bf-bbc8-c8b3aa53bef7","229":"774f4e51-af9d-471c-b40e-7175e578192e","230":"64132247-ebb4-4333-840c-9a32007a73c9","231":"73800fd5-0889-472c-b7d2-405c6e1f3629","232":"878f19c9-98d8-401e-92e0-3c090d71ca68","233":"efdefc5b-384e-4b84-a481-5bd300b7cd6c","234":"67bba72e-a3dd-4f6e-b2b5-165387359a79","235":"59c9daa3-849f-43ec-8c93-017f752b689a","236":"76cee8af-900b-4074-942b-6759117c830f","237":"5e4bdb14-4712-473a-8815-bab46fbedfc7","238":"17bffc95-af26-4de7-95b6-f45562c1c657","239":"2dc67264-b22f-4062-81c6-7a54172b3c4e","240":"c2a60430-a200-45ad-9895-3810bb62b34f","241":"3052caa3-ac50-4f4d-b3fb-b991beb5c99d","242":"88f99db7-62a6-4196-b1b9-a67afd4a97c2","243":"1b34b662-10ea-4a87-9711-c010797502ae","244":"6bfaec87-430b-4378-b73f-70e25c81c19b","245":"4f7cb385-8498-4f4f-afd7-a6aaaaa3e8f0","246":"47b32318-9b8a-4ba7-9cbf-ecc69c7c14a1","247":"4fced092-5cf4-4409-8c86-48946984a469","248":"3bde518b-9c3f-4f81-b29f-648380498569","249":"398d5e2c-4f6f-4241-bedf-357eb3f8fe52","250":"e2fbc736-04da-4f21-80a7-17aca1c32e68","251":"a14aa332-266d-4ea7-894b-558cd148e786","252":"74de9bd7-a958-4529-b3ca-747bf51d86c1","253":"d6c1e859-faa2-4ae7-a0ad-f7332bba5561","254":"e3cc6c34-e3d2-4c66-b6d4-30dd5c0aa221","255":"26e46d32-4496-4405-93c6-0c6638804406","256":"77ec0dac-992a-4e81-95ab-6ff914440785","257":"1b228676-a3a6-452b-86e0-7e078ac22cf7","258":"ba15ae62-5512-47e8-846d-37b987c73da0","259":"c83df59a-1d22-4b26-95a2-3110ae3959f6","260":"995f95be-8f62-4a68-b607-d3702a5183cc","261":"19ef81c6-929d-48e9-8136-f68f39acd802","262":"6aac30c9-b0a7-4834-bd6a-df3e5129c4cf","263":"5679cef3-3ab9-4fb9-b10c-48c2d7b5e54d","264":"91eeabd8-f648-4173-9879-e35a75cf2c17","265":"8c159782-53b9-4a50-b59c-ce06ed8a46d6","266":"46f4ccff-d222-4ae8-baa4-76b294f42921","267":"e17d5315-d3aa-4e6d-9e24-f983dcc2acad","268":"8230f301-3c00-4633-8123-98a2d63c07c8","269":"1f02d322-6bdf-49a8-b36b-00a5b94db0ac","270":"16b5d38f-1762-4f37-a369-356bb20263d0","271":"fed62de5-ecc5-4596-9ce8-4da4300c1cf0","272":"b8b5cf2b-2611-410b-8f5f-d3fbba4868fa","273":"afb7a922-349a-4393-80e7-c79bb3bfa730","274":"0f90f5d1-1ff4-4219-bb02-d6c557f01254","275":"4eb8df2a-4caf-40b9-b51f-0da2ab79c55a","276":"9b5b3518-ed89-4a00-83a6-e53434f82d3e","277":"8af47a5a-18e0-464a-8f96-056d3a2c2db7","278":"9e12482d-e1f3-4a9c-b628-8db2e49b7369","279":"a908e518-e396-4ad9-b231-846f8f62332d","280":"6ceee2cf-9660-42f9-b334-1aaf615216f5","281":"5274e06f-68a5-47eb-8394-91059602abe8","282":"8c898fd6-65c3-4ee5-adb7-036d9aa013f4","283":"d0216fc0-457f-4d0e-88d0-7e0d7fac98d6","284":"ae4edffe-441e-4ccd-9338-ae2af151c98a","285":"ab1631a9-1ccf-4579-9d20-8201fa9e7a05","286":"814f09ff-3e43-4954-bbac-7e143a22d3fb","287":"efa74e0c-cd01-43ec-aaf3-429c12060666","288":"cf610959-58af-40f1-8014-534f5552ce8b","289":"b8bb2138-bd48-4d9d-b3b0-1ae5e73c7182","290":"5ec4cf4e-1b54-4edd-9880-ac11dd49d866","291":"4ec3dbc2-6e75-4155-8bc6-63d7d71ae784","292":"b853a05b-697c-44da-b4bd-7d51d3a644a1","293":"bfa7dedb-e7cf-4fd7-9fa5-372223d52bb3","294":"9dc13d84-15c2-4776-bbea-a499f65d0844","295":"f5676154-c22a-494b-9da9-aa01e1a3f03c","296":"0356371e-b0aa-42ac-bb2c-42f4fcc929e9","297":"713ebf5e-1d8c-4436-af60-f9e9ecd11e68","298":"ca20121b-8221-48d4-a8d1-9948c62c32eb","299":"40b35ede-1a8d-49cd-8966-2eb4b4003680","300":"29d88c50-f461-48c5-8446-5f3c502041d8","301":"0ad145f0-83e6-4350-a2f0-3e3917f01d18","302":"39a3f86d-55b6-41e9-af7d-120268bf2895","303":"59cba928-e7a5-4817-bb46-13f0704dea45","304":"81a29456-e547-4a46-bf09-86e920f1fe7e","305":"0f23132f-ee84-40b0-9042-8f2e740c11a8","306":"9b963174-7f76-442a-b91b-43757438b236","307":"16ca4b27-f5a8-4c92-ba8b-e6a6c4891bab","308":"a5d4bd8e-861b-485d-bd9b-466523a2b189","309":"7de0c6fc-0bc3-4d8b-902c-29c8e64dc082","310":"0f3f91fa-6024-443e-833e-4ab581b9ee08","311":"b98cecc3-bb54-4eae-adb3-a7b18449a484","312":"f32d23ef-a527-41bb-9616-973b7cd363d6","313":"cc473c19-4191-41e6-86cb-18e2b87fed4b","314":"efa1c153-a8e9-48dd-82de-ef359b1f6e2d","315":"3570ad86-3829-4d72-a230-1a20f345d66e","316":"ba291a8d-0778-468b-961f-f4beb84d3b06","317":"ab047cf0-0e30-4217-928f-e9b61bdf6094","318":"be36fc8d-e538-4a93-803b-b97cec39588a","319":"3b2e62d1-8506-4f51-83e5-d132b2cec8ef","320":"ad521d9d-f210-4d24-a649-5bafe6a408cd","321":"158cb7b0-7801-4a8d-8eaa-ed1afeae3f2c","322":"806d65c0-efd5-475a-9dd6-f65f332ffdb0","323":"488f5bef-8d1a-464a-91eb-fef0a96d6d23","324":"ca60876d-232c-42bb-bab3-7c908478115c","325":"f8fb6577-7ace-4f74-aec8-43c9c3f488d3","326":"a151734c-9478-4832-89b9-ea66b74f7f84","327":"26744204-53c2-449d-a025-25fd60058e61","328":"d544728f-0be1-4976-b061-32bfa4404015","329":"77aa416f-c127-44f6-b056-3746423e9157","330":"4dd2b9d1-c185-4c3f-b787-732aa734e53c","331":"f9270262-b5e9-42e3-9e2a-c0d99515203f","332":"f4ded597-7fac-4a98-8b64-86de750f83d9","333":"19afba2c-e690-4292-8c45-44d839e51289","334":"eb308002-a6a7-4fe5-8ae9-9dd337bb6626","335":"6e4b8fa4-7c04-4ece-8050-6228b006a203","336":"8d7642cf-d336-4939-8e07-782776b20bcc","337":"533bf019-5a2a-45dc-a19e-dd1f1c5df492","338":"62c3ddc8-1896-4ddf-ab46-304492ca230b","339":"14d8e86d-7228-475b-9de0-f82f41bdc83e","340":"9c71785d-618d-4fef-8ef6-3a9102c22cdd","341":"468cf8be-2460-4c3f-a963-a68f097ed469","342":"5d4eb10f-2c91-453c-b021-d5d81f7311d4","343":"53ebe62b-6a89-426c-a8f7-49dd694a7771","344":"77481719-3e41-4e10-9a23-72785d8e970a","345":"d244b3f1-6ebd-4f0b-909a-a9f1e59aff96","346":"f780847f-9312-4c4c-9764-29c155952386","347":"199a010a-e081-47b8-a342-d00207dddd9f","348":"495c87bc-837e-4809-828c-77ae7bd07e95","349":"f1d603ad-0c76-4ffe-9ff7-fd1b3037d355","350":"a8281a3f-1c34-485f-b3d4-3e917196b795","351":"4cfb8d59-e4d5-43c1-b763-e1e02f2794d4","352":"cc36d1a9-ed60-4f9b-9656-0e2895bbf215","353":"57ce7f06-8747-45b8-8371-556d23095f12","354":"b900b7f7-62ab-49f9-a944-dea1c883d7a2","355":"505bf92c-8a78-40a5-9db8-06ecdcc0a31a","356":"63affc6a-e56a-4aff-a248-6f7227c0defd","357":"ef098070-91d6-470c-9a87-5c7ebd0810a8","358":"6c2e366b-1460-4114-a5bf-09e19424aa6d","359":"f5aedeae-9e5e-4f08-9d45-aeca77a54ba3","360":"e8668193-25ae-49ac-91e1-530ee3bfed6f","361":"dcee3655-6866-48c0-8a5e-bfaf3e3706c4","362":"a275a0e7-06f3-40a4-ad21-4564c54558de","363":"5151608e-9cea-459d-bf11-89495beaed98","364":"f3e3844a-c22a-4534-a24c-feec14bce067","365":"d21f48d9-69be-4706-8331-885fe5429426","366":"be6c9d7e-cf55-48b9-b91f-bff78edbc447","367":"5cde2895-404f-4b32-8b65-f672d6dc4ba6","368":"4289a9c2-b224-412a-b37f-096e26adbe8c","369":"965e4a34-073d-4165-b58d-11400fa22f5a","370":"804a854c-588b-485c-83ee-a9109e0c3d80","371":"3cc58c26-8e5c-4f5c-9edd-1f76872e56b5","372":"87e36c01-89ef-4687-97ca-bc4c66c85bb9","373":"bf85e96c-2ca1-4ae1-a52d-46006fd282cd","374":"7c38518c-a39c-4595-8f76-69fbfd043491","375":"ab0bf2a9-50b9-4121-be1e-f6b02e9dbc14","376":"f21aebe7-acf4-4fe0-ba08-5ed34239809d","377":"2df28cc3-e68f-46aa-a5ad-a187996acc97","378":"eb3ebca7-d05d-44c2-a355-53c82525f69c","379":"019eff22-5bbc-47ad-8a80-4d6340030ef0","380":"5949c5f6-ebe4-4a21-a1b1-6d6d88058bda","381":"e0833baa-0431-48cf-8670-7e43248562bb","382":"bea5c833-00b5-4f09-904e-9f29b377aeb3","383":"05b73e85-1b59-4336-a3e0-52f0063481bb","384":"639c3c3c-4f66-4bca-8f82-2fb0f5ae1fa8","385":"ee89dada-8f77-4904-b1be-91fd7d10f773","386":"49448a9d-95c8-46cd-bd88-37b98b30ae0b","387":"2564240e-3ded-47c9-ac83-75d2e3f7b8b0","388":"e47ff29d-7c0e-45d3-9e61-eb058ed7aa8f","389":"ea883dce-d282-4824-b4b3-40a0165dc8d9","390":"68f1e64b-497f-4b27-9be1-60493d2944fc","391":"d0fa3b79-4cf1-496d-8872-aeae9c60a60a","392":"3b244396-b9fc-49a6-b567-ab5a464a83e8","393":"23a1b8a8-3076-4b82-9af5-40f3c9761f37","394":"cd7c0794-57a7-4a4c-8d06-dba6664d09e6","395":"622ee92c-79a0-4e56-8dde-f34a06c3cb8b","396":"752c20d3-af98-474f-9420-8bc0b302ad5a","397":"6a79d4cc-9902-4a4e-83e5-ff2dc5bb72cd","398":"78a0d95a-859b-4ef7-8a63-ac573a4517d8","399":"9693eb9e-bada-4e9d-aab2-fe497265d5c8","400":"cd7244b6-1501-4932-8ff7-75e333829acd","401":"c995b1a7-c15f-41e6-bbc0-12b05555810a","402":"ba7fa75f-5fca-499a-9b91-c6dd3dc238e2","403":"40e10d84-5bef-42af-a3b2-b373cb0d89ea","404":"e5e2d4a1-5ed9-4b2e-9785-32d1db266379","405":"568f7e52-f746-47b4-8a41-8a72615dddb5","406":"3df94a9d-8526-4887-88de-8965046669d1","407":"65ecca58-2f6f-46d7-8806-9a48701424c8","408":"b3f61c13-905b-4e5a-b119-f6629163aab9","409":"0ee2a0bf-67a6-444d-b7b6-232a68a8132e","410":"2ef054a0-f288-4503-87cf-6703a3c407e4","411":"91290edd-0b07-41a9-aeaa-8738653cb179","412":"922c45a0-b413-423b-9455-3535c700517b","413":"e231a93f-d738-45d6-8d88-0ed03f9f5842","414":"028628cc-8be2-4f4a-9a0d-c50640b8b015","415":"e2a35e29-bd0f-437e-aae3-216dab8e8041","416":"328fbd8e-cfe5-4d1e-bd46-1f99e7df16ed","417":"be872196-7f58-44fb-81b1-5eacefa621cc","418":"a3027183-4578-4bee-a4d3-a4070bad1c7e","419":"31b2b009-9383-4cb4-a680-52c307c50ceb","420":"1f8491ad-841a-40ed-a5cf-04b047431970","421":"e80b9615-bc76-4170-9d64-e574e81fa86c","422":"1b2e73ad-55be-4ac7-80df-13c66da59252","423":"062b11d2-05cb-491b-a969-bab20712d6a1","424":"6294102b-d205-4bd5-971a-5658df7f953a","425":"fab07d62-c86f-4396-bef6-4a10a7619eb9","426":"4a3351a2-32c7-411f-9815-cae4cae07160","427":"05b24aea-ad17-4b45-bd8b-f652aa6dcdee","428":"bde3fab9-a7af-4eda-914c-1cc8a1746b94","429":"871ad0d5-751d-400c-b4fa-8e50b040dc92","430":"ee775a70-0103-48cc-85fd-8407e8d42086","431":"fc309475-39d4-4ecd-a2d6-b9012f8053ea","432":"05d71cc5-242d-4855-8ec2-205594474b7c","433":"0ae51fd6-5945-41be-b77c-8f3948b21ca2","434":"088e0b9e-beda-4aa1-bda4-db86af4ae9d7","435":"51e4d639-a6ea-40a2-9efd-4896154da965","436":"eb27dff2-e26e-467d-a1d7-23171cb411a1","437":"c41de1de-42b7-4054-8f94-fb2cc0c7123c","438":"30224b28-902d-40d2-b733-824a45985ce9","439":"722e8e8b-f0f4-4112-be4f-f76859a46da3","440":"fb754f91-5273-4bba-b6c6-ec47b93c2dcc","441":"cbad130e-b5a1-48ee-9d94-fda7b7d38f6b","442":"4dabe110-d271-4935-b267-1c2e194a1f37","443":"e254ab37-61d1-4b61-a253-42d94ce5aec3","444":"478f938e-b3b1-4540-813c-df1270f91b18","445":"7c1a0a68-9cc6-4ceb-a506-5c1ab05bcae5","446":"2d4b34e0-7085-432c-9ccb-1e0820deaba6","447":"4621ebb3-11e4-4607-a5ef-f5aba02f2f69","448":"35b03521-9116-483a-9072-5933653c1cc2","449":"115f7f76-034a-4a24-9ad8-61a6b5a7b160","450":"fc8218ca-57f4-4c0e-8419-be0f1dd12db6","451":"210ade29-50d1-4248-8096-744b84510a96","452":"76c9d047-e5ac-4cc1-a24f-479f82bab47f","453":"f66428d0-8796-49f2-bce4-47d54be67919","454":"84dc926c-5b91-4973-8965-bff57c84695a","455":"77b3598f-2ba8-4da0-9500-a1c5c9f7d95b","456":"d1032fe9-8ff2-46b2-bd95-080a5ceaae64","457":"1b17055f-5023-4580-91fb-d7540f49c600","458":"cc8fb27d-451b-49b3-ab99-30c8b266a40a","459":"65747c83-b562-4eab-897f-486036ef66da","460":"b874b3fe-1dbc-49a6-9c7a-1fac8f2b0268","461":"081314db-2353-4b78-9d73-a5905b0196bf","462":"51fe952a-512a-4a5e-943c-4879db90470f","463":"55ef2575-54df-4aaa-93cf-cc0c49ab3ea5","464":"c0b63add-92c5-4c0c-afde-e0b89bbda1c9","465":"9740bf20-4571-4792-8d61-b1ecf40517ae","466":"cc01300a-4642-4935-9642-632a354a015f","467":"cc37c16f-b7b1-4946-a1e9-365de6866718","468":"776f3968-aca1-44ef-ab8a-bf8d89d5a774","469":"827326ef-0c12-43c4-851b-808b820c63a0","470":"e0eef975-f74f-4822-9e9d-eda307a76b6f","471":"b3930da1-eb60-4780-a183-cbcad2f5558c","472":"e970f4cb-7732-4f7e-857d-64042700ee9f","473":"a9ab23a8-1ac7-4bdf-a7f4-bfa01c75978d","474":"0db3fb2d-ebeb-40ab-80c0-c602bc17a339","475":"9d49cae3-3565-4d54-9932-ab33e12908d1","476":"82dba786-0c7a-471b-a960-d5d422825f3a","477":"08cfdb29-1a33-49ab-989a-11b3d8756375","478":"91929e69-1413-4005-8bd1-708c0a702bfa","479":"c466bf6b-7619-47a1-b51c-242cbd7faafd","480":"d3f15265-7eb0-4a5a-b358-d5d4bf889651","481":"b380309e-f543-4489-8f6c-7e6a77565eac","482":"82cee8f3-9906-49f6-85b5-9741202520ac","483":"9a20c809-e08f-404e-bbd1-ce1fc8a60bc2","484":"6066613f-6616-42e3-b9ca-1293f8af7830","485":"3f5c6b56-402c-41ec-a851-d412bc11c0c9","486":"e4896ff2-4932-4a5c-b49d-40ca1eaff521","487":"396d550b-07d8-467b-bfb7-b06012d9d3fc","488":"5c530d0d-af1e-4951-99b1-7b375683e715","489":"15313d44-d643-4399-b2de-156bac2d2a58","490":"22232e99-9dbf-4ce9-b20f-f70b4b3c6a2f","491":"d351be3f-afe3-4f94-997f-cecdca24a082","492":"e0c031d4-3054-4234-97b3-7ac456e95c75","493":"d4c8cbd6-d7c2-430a-ab79-24a5b95a2954","494":"02090f0b-7fe2-416b-9ed3-9d0c2cb3ea7a","495":"7a20a453-5e66-4a76-82d6-ee43be16889e","496":"a8729e27-aa33-413d-bebc-be01fbaa39c3","497":"2b11a6a7-f85e-4d21-a5fe-92d86fbc8a16","498":"7181e77c-28f5-473e-9e94-8b29c543631c","499":"eef8e852-cec7-4d72-a0e7-a766e3b53e88","500":"51e88b63-60d5-493f-aada-bfa56e014280","501":"e8f772e5-02f4-4276-a112-b5e18400fbde","502":"7fa1a7e9-bf80-44dc-aad4-278dcd1ddec2","503":"84047fe4-039d-4b4f-b84a-23b196ef43a7","504":"99b769b4-caa0-492d-a326-c00bbec76b91","505":"9451e578-76d7-4c06-a8ec-f955140c47d5","506":"09389794-7c93-4ca1-b1d4-a35763fb4646","507":"7988aefc-7209-4ff7-8674-0fb1b943e701","508":"89a7dc45-5bde-40a2-913c-d402beeba554","509":"953067cf-58f8-4c9f-8f4e-e1829e9ee996","510":"67e272ec-8678-4e0c-bcd2-cac9c6435533","511":"58545fa0-ab9a-4749-943c-c8357ca844f6","512":"65d13a95-e5e3-45aa-9853-77d930eea31d","513":"6bbaa57c-e145-45c4-9aba-20b3fdc5cc23","514":"d309c1c4-250f-4514-986e-39c9fcf7e2b3","515":"3505191d-6045-4470-a51c-2372e5040d55","516":"575ec4cd-3fd0-404a-9cb5-2e91ed846a57","517":"a8d568b2-519a-4ac6-91ed-b1b371fd081f","518":"6abc7614-338c-47bb-b171-afc80b69d7a7","519":"6913b1cb-e5b3-4a30-805b-5d83c1ae4ef8","520":"09f925b2-fe6d-458c-a079-df8461971569","521":"2db7bc90-16ce-447f-b15c-e93a9d0a251d","522":"e92a4cdd-77d8-4093-89e8-84cbc24b8d23","523":"8b7ec079-b4be-48cf-a5d4-c4f2b67b3a9a","524":"02a048f4-b627-4a06-a501-d33c99a57ab3","525":"8628a7e0-7821-4466-97bb-9cbaf84a1536","526":"03336cf6-c46e-49d0-9efc-8faac2edcac8","527":"a41c83d2-255d-433f-8ead-637484c900ce","528":"f16df397-e135-4b05-a01a-3c8505aacc5e","529":"cd85573e-9fa9-4cc3-92cf-aa4b567e3e10","530":"86fb0c96-2627-4da9-949b-b786cfa43ecc","531":"1a1800e1-858a-44e4-a3d7-78e5f0dd308e","532":"d9553bf0-b985-461b-a91c-41e2908ca0df","533":"a633518c-b752-42af-849c-0c405232c935","534":"aa4b7a08-cc1f-480b-baee-07e96f2cffd2","535":"cc361ed5-4f73-4fb3-8295-52ad4abba5c5","536":"87edcbce-77e1-40ae-931a-46d44d7bf637","537":"a02be2ae-0d31-4ab4-acc1-8840ce177510","538":"d4f623a7-4f99-47df-a9af-c02eba32c0c7","539":"3731f689-fd6a-44d1-a7db-f49a6dce6f44","540":"4d2481ff-ffd6-47fe-bb9e-a60e5ffbb8e4","541":"1554da21-c510-4d3e-bc71-a16acb328657","542":"68854aa0-3453-4437-b9b2-b310dc2754a9","543":"88482fe7-6e24-4d25-abbb-e494638f430d","544":"2b74ef35-a61c-422d-a828-289e8a252199","545":"6eefa6c4-4cfe-430e-a719-f6bfd329760d","546":"83331dc4-0d99-4755-8a9a-e9a71891e695","547":"18a2095e-e9ee-49ec-b303-7b496779df32","548":"fa3666ed-32d4-4412-88c5-a306f6842d7e","549":"9f385f1b-8ee8-496c-8b7c-9e2005bd762a","550":"1acfc595-0c62-4edf-a2ca-a979dacd6dcc","551":"785bc559-c1f3-4c83-b048-45357ee8b11b","552":"7799d0c9-7120-4016-8017-232ccf48d062","553":"c917e777-0284-455e-897d-e3ea24cd5de7","554":"c7925367-180a-4f65-8592-bab8e903d60a","555":"f04b7ad5-e69b-4473-bcb6-d53711647939","556":"d2a5a178-5952-40b6-b214-b6b546b915a9","557":"bc703277-2e60-4bc4-8d83-38ae3fad789a","558":"d94e6112-fdc5-402d-947c-88d4e57ea5e1","559":"916ac027-8410-413e-965d-09d17ff3df3a","560":"39e881f6-d5ca-4f0f-8973-7b6708259945","561":"cb881169-bd68-4242-a995-2746c961f17f","562":"6f5599e2-563d-4304-99fa-ed581bdbcea9","563":"f30a8dfe-5a82-4f12-98e9-020385e45ce1","564":"ca1cf691-24df-40f3-88c8-649d38a0f39d","565":"661311bf-dd6a-45fa-bea0-ef185b9af317","566":"cff7ea3a-1bdc-44c6-8d54-ae6f285d5324","567":"e987867b-d375-4665-a938-70640ce2e1ac","568":"91f5f8ce-3e5d-4a70-b08a-a6692196ab6f","569":"03faee40-4a67-4dd5-b5dd-77ab9b12c88d","570":"aff0e1ed-c400-4013-bd6c-e5f69b9df1e6","571":"74c4a06a-f82f-4c7c-bff1-3d192a462d8b","572":"35f19220-7573-4c1d-9020-5ffef2b76904","573":"0cd26492-db1e-42d8-aa1a-e88e65bd9968","574":"05ffa2aa-77b6-4258-8e83-3efe7e2e1dc8","575":"c0a8f388-058b-49fd-9888-39319567fdf2","576":"d1163ad8-f318-4a4e-abdb-37bc2e640c13","577":"9aaa6492-d6ee-4b65-a85a-890a92b9ecb7","578":"4fe6b710-1416-44b9-8917-7fb3230c4399","579":"1ad2724c-e5c7-42cf-9e51-5b57b447c1bb","580":"3e8ad52b-92e9-4525-96a7-d4444bb09bd1","581":"d8083f10-80b1-4a4f-b5f7-18155a0ef635","582":"823dab51-ba51-4c88-b657-41492ed63c37","583":"82c0fe1b-581b-4d96-8269-fd75afc54dca","584":"bf97f4f5-8ad8-4ef0-8c24-070bc0fd487b","585":"d76bab6f-4549-474c-9fea-9d0ad39f8000","586":"e68efed6-4a8a-4fea-b906-b4116d7e0727","587":"5a9efd1a-cac9-4f7f-a6a7-0b274d6767f1","588":"1f730fb7-5b13-4a11-a3a7-8d008d5fbd49","589":"d471fef3-72dc-49aa-8948-9581bfc36053","590":"08b12942-9039-417d-9989-900627175338","591":"72ff955d-ea1e-4f12-bcfd-0b36bc11e5cd","592":"a7309c09-7ab2-4af1-b5ba-bd33ba4c59e3","593":"80fd7e7f-cd1b-4cae-9931-7a02fd85e36f","594":"93a10f49-7ecd-4a0f-9596-acfdd4243772","595":"26a11961-4da7-4ff8-9993-280010ab4f77","596":"1f06f9c3-d4ed-42a6-9691-06b7cdf8312d","597":"056a3adc-bb67-438d-a7d2-b55eefe6ceb8","598":"9ee8b484-8d86-4b5f-952e-f0576d5c1850","599":"dd262392-ea15-48e0-813c-80072d546fa5","600":"1fd209dd-c637-4385-b1a6-11da7f5cc241","601":"b1eea9a0-384c-44bb-a164-ac623e2484a0","602":"2ee746f6-14c9-4d72-b791-cc2455883bcd","603":"29ba2d73-5d87-4572-b7d2-db272c68fc96","604":"e76cc128-e637-4c33-966a-eea0e715b321","605":"6dc7f2dd-70a5-491c-81a5-080476222351","606":"85177a6a-9058-435e-837f-51f8c0bec26f","607":"443e8cc3-32a3-4099-8e60-2f321a145b28","608":"4f3f3634-6f57-4843-a369-4bd3ef35d3d4","609":"440f48dc-14a2-45ab-a2d4-a3355bd9f488","610":"fdea9770-bcbe-4491-84ba-9b298b30d597","611":"af056807-6a96-4770-929d-237913e4e834","612":"d80cefd6-5a4b-4f3e-9d70-55b4a3af3f63","613":"24d5f6cf-865a-48ad-b5ac-c846f585488f","614":"46f09a4b-8ef0-4bc4-b02d-b0ceaaf5d9c9","615":"b559c9d7-d067-437e-8bf2-596998e1dd39","616":"88d24f14-b4ef-402c-bbb9-5dbb86721ee5","617":"54622c8b-0cad-448d-8a8a-e8149e031760","618":"0a786526-c858-47c9-9b5e-32fd6b1b9e7d","619":"ac00a952-69b6-4db5-8875-b95517cdc803","620":"902fb8ad-65e7-488e-8b74-10e9c6699944","621":"3801e1aa-0559-485c-9d27-16ed4219dab9","622":"c3fe9734-c5ca-48df-a161-cb18af42bc02","623":"81403abf-86ef-4c83-a4b7-6d6e5a050e69","624":"a7266043-48d0-4596-9ad6-839d8208220e","625":"86321d63-bdfe-44c2-aee4-d567d86abe0b","626":"59acaf28-1356-4e89-aea0-c4ab25325f82","627":"3eee67b1-e51e-40e8-b401-a1f2457ee1d0","628":"1b801420-8379-42b1-a9c3-85732766bb17","629":"087a038b-5530-4b9c-883c-3cc212c5370b","630":"dfbab6ef-e4d6-408d-9260-f59806ef809e","631":"3d33cd17-f566-4126-8113-0aee0cadc2a5","632":"0220fee6-81a6-46a0-90ca-c93abb3777b9","633":"52c99d8d-96fd-4812-ada7-c2668c53f819","634":"bfa2b84f-3214-4175-a933-db768c8b606c","635":"b41c9ff8-7f41-46be-b646-f69eab3bd8c8","636":"332f2fd2-7c00-4c3e-a0c4-399f265a98dc","637":"9d307ce4-5b4a-44d1-9ded-70ab1d9b4d15","638":"7fb381c0-d4bf-4df9-bb5d-9363751c934f","639":"154eb93e-aad6-412d-8dea-037382eff1c4","640":"9afd036a-52a3-44cf-ae77-a48236e00f10","641":"bf8682dd-bf8b-469e-b5c4-b5855519bf34","642":"96b06b87-a943-49b6-8a2e-933a1081f815","643":"6c492d06-1d5e-4836-87b9-c17b319b0a56","644":"3f405185-79c4-49f3-8826-620cee628055","645":"f5d5299d-0654-4162-b997-47398e774bf7","646":"9d309ec0-3241-4eab-bedb-5e17fc8e38f6","647":"b8bafa82-efa2-4983-94a2-e1d4f00919b2","648":"a842b3fe-b02f-4a2f-80df-687c5ebe6f8f","649":"da93ef06-f7f0-425c-9941-d6e42dd5f1bb","650":"4e4c1131-60fa-43a6-88eb-e30421103341","651":"288fe820-0b52-4729-a879-c67a338c9572","652":"aebcf289-56b8-4046-83d0-18a0654858ed","653":"da5f5643-95cb-45f0-ad3e-6d9bb0974776","654":"5306ef25-d1c7-46ff-80ee-c1f936969231","655":"0f1f0f30-a029-4ada-9c82-696e19aa566f","656":"39f6b619-676c-415d-909b-f094c39504b6","657":"3d098627-b915-47c1-befe-ff6d11279d91","658":"e62193ca-0362-4bb9-8836-0076ddf3a4f7","659":"64927f9c-4497-4087-ac13-3464b690eb32","660":"ceb9f28d-7775-494e-910f-87403f606a50","661":"49a455dd-180c-4f74-822d-d307df69ab37","662":"7b2083f1-8a8f-4a68-9872-67f529bb6410","663":"d50a290a-6c66-4a74-8412-29f073bae039","664":"8491e6ba-fa10-4466-a9e0-dd2c3810ca0a","665":"370a3157-eda7-4bc7-89a8-96493a6fd264","666":"6cd01763-481a-4964-a8f5-dfb02c08f251","667":"4a1269de-34f8-45c1-9608-71b3cf242cb5","668":"2459c746-505c-48d1-bb2f-bb7480a1d351","669":"f9fedf42-87f3-4881-b199-e40c0608dad5","670":"2a163997-db09-4d77-8054-18a30e7a1b36","671":"95280bd1-54a6-4fe5-8f41-589f7d5464bb","672":"9cad3006-5d6b-4362-bf18-f090a0f183f1","673":"2f749b45-e1e9-4f00-9259-ea9feff903ff","674":"9ebd2c69-edb8-47ec-b863-7791bb692af1","675":"0387baf9-98d7-4e73-81f0-949ab9983c00","676":"353e68fd-3896-4ad9-b90d-c4ce0cd761b5","677":"f1ecbdf7-79f5-4162-ae45-b39e68ac3291","678":"8616e60b-0f71-4e1f-924b-e900c275b781","679":"f374081e-d5cb-4102-9bf2-b48b85f0be3a","680":"eda70522-c1df-429b-9666-75abe8b58263","681":"4aa48e45-d1aa-4ae1-8618-b35b84687ca2","682":"fb5d0a9d-63f2-4a69-b201-086649b44c69","683":"03680649-b7da-48ce-a8e5-2f5de64579fb","684":"b975c7a8-5458-401e-9804-5ec931b9de95","685":"cbb42d5b-25f0-46d3-a310-6e7fe881cae8","686":"4283092c-4bff-4ea7-b956-1effa1ae4d98","687":"0d8b279a-e034-47c8-9069-72132ee610fe","688":"5a92a51b-4b45-47b2-86ae-0dcdd429c283","689":"608233fe-3caf-4c6b-bbf5-86856dfecb6d","690":"0393f4ca-01c8-4c61-8faf-8ce2863caef6","691":"faa0181d-204f-4f8f-ab17-e5f363731d37","692":"fad85067-f1bc-4e4e-a188-0b0ec9507906","693":"2fb31c8c-2e81-417b-9386-cf6dbc74de0a","694":"67ef2236-7407-40c4-a8a2-6686ef001743","695":"daa928c1-4849-40e1-9061-6ab3a1c4313c","696":"8d067240-cc7b-4b2e-990c-7b78b9faa067","697":"f2ab80e3-c0c2-4c63-8771-8b0ed8d4926d","698":"0372a81a-8dc4-4e1e-bfa7-5094fb00c6b4","699":"b2bcd82e-ed4d-4624-a3f2-d61021b0a0ae","700":"bcdb7eea-c009-49ba-b900-fe01379c588d","701":"503411d7-f7ee-41d5-90b9-1c41df547807","702":"89a4ee1c-3140-4519-bf97-c348f313c397","703":"1f8c4584-88fc-415f-8454-6f032da2ae88","704":"40dbb416-d0a8-4880-b6b2-7eecbad474bd","705":"22f8a2ca-ef28-42cf-936d-2bb5c51ebc2c","706":"021f1223-8f32-48d2-bc6a-b85e2fd8fb47","707":"a38d9d0e-a90f-4692-a8fa-35baa5122d74","708":"2a6ad3ec-29e8-4c96-9aa0-3e21d070d5bf","709":"04e03b14-8cc8-4dfe-b702-d8a8d1c06b83","710":"f472af2c-10ee-4622-97e1-2b8760af3f31","711":"5f34e0ca-e8ef-4b29-a83f-502706e5d9bb","712":"791757ca-0781-4bcd-9906-aa946049d904","713":"02fbe0de-b747-447e-8349-f461a2dbee9d","714":"bb6e927d-4fd4-4cdf-ae8a-eb24584e5cff","715":"f2c4b2d8-60fd-4f4d-a3c2-b64527ab323d","716":"5a354302-92e0-422c-b78c-610d7d4b7bdf","717":"b51d3e90-2644-48d1-b49d-fd9b6179fb46","718":"c9492287-26bf-451a-853a-e5e4be496e02","719":"1624d904-c173-468b-bc34-473b7d185ac0","720":"8f78ebbe-a936-4051-bbf3-7127753e61d0","721":"3406c76e-1bf3-46f2-93a4-d1a63054220d","722":"cdb79175-152a-4aea-b664-d546e42a184b","723":"e7b8a476-013c-40af-b0b2-c5986ee03868","724":"c683b53c-3ec5-49aa-8d44-239961c0b7fc","725":"7ac97a90-a025-4d0d-b472-ad45e0cca1a1","726":"4d6323b8-9242-4fcc-90fe-2c9750ec0ff2","727":"70cdeeed-cef9-4575-8af6-88311436dbe9","728":"add7d7e3-52aa-426b-b9b8-0f594ab4ad05","729":"17d18bfe-0158-456c-809b-4332d421173d","730":"84bdfa65-ff4e-45a6-93d9-b12e99abec51","731":"a74258b5-c642-478b-b604-882532e05f0b","732":"aaa59c01-ad8c-4f05-91d7-0da8c5fc61a1","733":"41ac940c-18e8-4065-a0d4-4c7fb0f67afe","734":"2171dbcb-a52e-493b-8674-a1805a35ee0f","735":"38651c42-1c65-414d-bed4-2fd89ff800d8","736":"08b2ee45-0759-4e41-b9a1-80777a29fad4","737":"ec8b2819-85df-4682-b26f-7c51eca5abf5","738":"b925465f-06c4-4a57-818d-75c89edb9e05","739":"189bb7a2-f324-48cb-b984-5876d9e6a6d2","740":"290b9422-6246-4bf2-9923-05b92b186ebb","741":"29d1caa0-472f-45b6-9c4a-4bcfa272ba1f","742":"98ddda61-69a3-443a-bbb0-12fda0798f83","743":"ab89d55a-f833-4096-b245-e925a8817820","744":"052ee110-36eb-4e54-b06c-8f4d1d4cba52","745":"ca0181e7-7b2a-4340-8ac6-6b4a41fb6087","746":"759e8e4d-f5f5-4208-b5cf-f7ad418150cb","747":"f9e7edda-28ff-4699-ae7b-00a2c615c9ce","748":"8433dea4-4784-4f31-aa24-e3cf7bb7fdc0","749":"2e6dca86-1ce1-4839-9a74-7ca6348d642a","750":"6c42364b-a3b2-4adc-ba2e-c22464775bff","751":"5597af33-b685-4057-8f2a-71c065181fe4","752":"7d3a4ab5-d8ef-4f3e-8958-4826a27b2712","753":"f1c02cd2-20fc-45fa-ae68-a83551fb7906","754":"48026c58-e7ae-4a9a-be08-35645e9cd59f","755":"4db97689-ca11-4275-933b-6b56c2ae58e4","756":"0d6be7e0-749d-4c64-903c-75f1eeecab4c","757":"8e19dd75-b397-4450-b183-2962e9e40c5d","758":"ca6ab599-70be-4e88-b8c3-762479ce9d61","759":"72fb86b6-9754-458a-9a00-5ecf842192e4","760":"3f5a5d75-682e-4d2c-be9e-878582f5c38f","761":"c25e30e4-773a-48e3-9867-e1ed74fcfdfa","762":"f11f4721-a14f-4f38-9bb8-1ae701c06b47","763":"3effbcce-e668-4b75-bd20-7f8df8f46b6b","764":"a7c90012-e89c-4652-8d64-02421b49b3d2","765":"ecb291c0-9e8a-4363-9f4b-6f300c0c4a3a","766":"3da36de4-b120-49b3-b051-47ba95601874","767":"e732c34b-0b0f-4969-900e-53c5ec615c83","768":"e61a7413-d693-4699-8525-14fed8a05054","769":"4a2d7ae1-b1ed-4c3b-88d6-ffd891de450a","770":"a2bd9737-6431-4539-9891-f31822f73a4d","771":"9c0e4966-7ccf-44ca-a222-ec807878607a","772":"6f6701a5-47bf-4e14-8240-b4b4858330a0","773":"92d2f18c-501d-46a0-a794-6519c772254b","774":"8d80a347-3ccd-439a-be82-a38f63f202e5","775":"1c4c480c-685d-4804-9e2d-5af75c03e0e1","776":"f9661aca-6ebb-4fb0-9fda-9e2d86510a13","777":"40bdadff-8e24-4451-9cb5-4f52d80f3414","778":"43c28ecc-293d-4027-b8b6-508abeac7b07","779":"25f6fdc8-d3a6-449f-b9f5-33c50783f2a3","780":"bbc880f7-ff7e-4ef0-9981-19cc97dfadcd","781":"1a232237-35f5-447f-b9b9-d479bcb40d2f","782":"2a84f763-6879-4beb-a759-1c60234e5387","783":"4a7c5623-5961-470e-abe5-beacc23ea7bd","784":"39711b38-3ae4-455d-9ca2-46c57224522f","785":"44f0b2dc-14c8-4300-8163-187c359217c5","786":"16dc24df-adae-423b-aeeb-452d497332d4","787":"9721979f-e19b-4405-b7a4-ca5fda46aa26","788":"d6580490-d881-4d14-bcdb-cd3ad55addcf","789":"83b23189-1749-477a-97ba-47b9d2e54e7d","790":"5b1745f7-c018-4079-bc5f-8fe5537d5f13","791":"3c94a383-a7dd-49c2-8d13-14db468a7f33","792":"a15942f6-31d2-40f6-82db-522ba6395ad9","793":"bfabbdd2-603e-4929-8338-3575e3df779b","794":"4e935852-bae9-45b4-b6d4-43bbe0863f59","795":"8b22f660-293c-4648-a32c-6498fd6755b3","796":"6cd601f3-6192-4a42-8a71-57c69e0baf9f","797":"920a2d21-6a24-46fd-86ad-0275d710848e","798":"3dea244a-9bd8-4500-be78-d97d960fd7ec","799":"dfbb7e0c-ccb2-4797-96d5-13ee36c37f0a","800":"23e71a76-9f10-48a9-b3fe-7872d93bc9de","801":"c8f28eb8-1a94-48ca-9078-5d27b1feeb66","802":"1c824b93-d91a-41cb-844d-f71fbcc6e29c","803":"ba19b097-2138-4b2e-98a0-67e006ca7b1a","804":"c3de6179-f635-4253-97b5-f3296d9d9ea9","805":"c0a23d39-9007-4851-81c7-f4195bfb105a","806":"9317c68c-5332-4800-8d1d-c2b2f84d9b10","807":"d40ef758-6fe7-4ece-9b7c-433c3f49b50a","808":"7cfdf88c-bb68-4430-a927-019bf8c401b9","809":"140bdd9e-1df5-4e79-a8c9-e551510154a0","810":"2c628ca2-6d58-46c0-af01-7f5d089a3937","811":"21acc18e-2040-40ad-9cff-bb5f3c14a21d","812":"8c2b8c91-2ccf-4566-8d24-ac1ba3a0db55","813":"cafb898c-42c8-4ced-ab28-5a84b1b70e71","814":"1e6592e9-3bca-489c-9fdd-7ba2e9350204","815":"757768d7-61a4-4db4-999a-7ae3c32f99b2","816":"afda86cb-3f60-4969-8402-1cd646c2e76b","817":"2bb3627e-a5a8-4052-89f6-599c8d177209","818":"711edc59-4741-4d9f-8723-572c618a95e8","819":"f628f247-4598-49a1-b1a9-282e8e09792a","820":"9dc45493-3576-4ae9-a9b2-ddb951cc15f4","821":"ab349324-1420-4655-a67f-2146ecc3fa44","822":"d73fa3d4-a8bc-4f8a-b6ed-ec8dd6161c02","823":"de774100-0147-41f2-9099-cc7c149e13f9","824":"490c9886-c327-4277-893c-9393b3b7bd19","825":"dcde33cc-d4cb-472a-90ea-c21b8a401f9c","826":"4abc180e-25a4-493e-a2b1-d0572603e7f8","827":"c5fba4d4-94a4-43e3-9253-24d4d97cd74c","828":"09056f3c-e6d7-4ed8-a8b3-b644ec21c3de","829":"40c4cae7-60cd-464e-be54-e99a77791b5b","830":"107b50da-50b4-4b12-a3d5-73fc397bded9","831":"7880ebc1-2c1a-47bb-bee6-d97644e748fb","832":"bffeb258-578b-4e3d-a6b4-b0cda21ef25a","833":"40768345-6575-4597-bf93-8592d608794c","834":"79001406-212c-49d3-a59c-0697aba67b46","835":"50d5e8de-5d3a-4127-8fca-971f0aaffb67","836":"d6d8b7bf-cd16-48f2-850e-709c2108101b","837":"296174e3-709c-4b80-bbf0-5a8a359bb38d","838":"5343d6bb-5bb7-4b71-aabe-229bea057f69","839":"b7b1149c-f16a-4d3c-b521-1302a74fc68e","840":"ce46e5d1-2632-49af-8e73-17290163aab4","841":"163f35c1-2d63-4211-845a-0e0ca6940a8e","842":"80a896b3-0524-4f84-8703-6df36b8a85be","843":"307e7b94-9125-4e6d-9e16-23c800ddaf3b","844":"7cfdfa75-1716-4d53-b23e-f22f54f86969","845":"7a97a6e0-903e-473a-8d43-f778a9e22c53","846":"ffc18b6b-26b6-483a-bfe6-bcff69f6bc1d","847":"a37ba868-9b88-49f0-a59a-59bd13dcf6ab","848":"92e8f8ec-9aa3-4582-a1d1-20441d9dcb52","849":"6b0b5c4d-5430-4ab2-ad48-a1e004583718","850":"a6845686-d391-472a-88b5-547e06134185","851":"b76794ae-0aa0-41ea-9fd9-c5659feecfdc","852":"0235838b-a16c-4d31-8a8f-b2a1b90c1d84","853":"c2363b97-f152-4681-b959-3b288ccec8a4","854":"170170d9-3779-4b3d-9a81-b4b80ec559c3","855":"781b716a-4906-45ec-aa67-ea7e61da65a8","856":"44e34d36-6932-4b86-bb9d-b4fcecc9d7c9","857":"2c36d282-9d8b-4b35-b715-df9d3d16ecbb","858":"e07b7e57-1925-4d4d-b542-e6f1a1726c17","859":"3941b6d0-84c4-405a-a27a-914dfc17f8bf","860":"972680fe-2f83-47bb-af15-940f9bc20aee","861":"9945a4f4-d471-428d-9df6-9386b392c889","862":"3fa74e91-549d-449b-9c2c-7d852a7a4572","863":"91fd89f6-2fa3-437c-95c3-bb0ad1b423df","864":"3311c0ff-3965-4007-8272-b251d4a47201","865":"7e54a20f-48f1-4990-8c14-047983b81c89","866":"0a71ffb2-5f9f-4310-9c0e-bd6955716161","867":"5d8b685d-05c2-4020-89fb-7ae17aacc8cd","868":"1896760f-e78c-4f80-af58-26733be4be87","869":"479df23f-b6e2-4986-a680-682d619b87bf","870":"dcfe27b8-1dad-4ca1-afa7-d09824004367","871":"31c1f54e-498c-4635-8bde-b4e0df126154","872":"79b6ac2f-76ad-4167-be18-149dd22bcc5b","873":"41b1912e-a286-4fd1-a4ca-baa86502c91f","874":"fcfed155-3393-4c3b-9f30-340ffd8d5de2","875":"1b09cf8a-847c-4378-8a0e-07a0f00a9154","876":"24bd4c2a-51ba-48d7-8a73-cad97b68d9cf","877":"7935f539-f5f5-4e88-8ff1-316d257a2be4","878":"656318bf-1343-4279-89ba-b0c0683f3147","879":"b72180a5-3bd7-4700-84c3-632967e1dfef","880":"b4029aba-e5e0-4699-b556-1c3bc845089d","881":"51369c8b-9958-4196-961e-b45baab61624","882":"eb5c5b26-d576-40a5-b81c-4cc6fd375c74","883":"2db2e393-915a-40d2-9421-f07b14676bcb","884":"261e9603-b4a4-43bf-8921-782769c2e145","885":"b61f5c77-291b-42e1-b9db-ccc62dd9a99d","886":"538705f8-3dbd-4bb6-a0df-6fc925945544","887":"172dc6d9-e4ce-46c1-9187-cb7bf80e1e1c","888":"278379ee-7ec6-45dd-85c3-13b7480ff148","889":"e3a27838-abf7-46b7-ab0c-e0a1c30528b0","890":"327178c9-c466-4dc2-ae3b-50ae523a32af","891":"9f588d92-caf9-48f0-bcee-d35bff661b77","892":"faae1b5e-2c97-4534-9c34-9bdeeaf5cfcd","893":"7fa83fb7-828f-4916-bf39-ccc478bb55ee","894":"0298abf9-0243-419f-8c02-4e5db9e29da3","895":"57dea57a-d2b0-4789-84be-bbee037d37eb","896":"e9cd24cd-a249-45ab-917a-9a236e400764","897":"01e254e7-88de-4c5b-a453-df77e08c3522","898":"4aa5a4ee-5972-4dd7-82cd-dd4863848010","899":"59ba8ea9-c539-4b82-8466-86371b28be6e","900":"f97716fd-48a6-4d96-a0ad-0748eb4f7f13","901":"a358e1ac-0dbf-4e61-b626-f37a608abaf3","902":"2d028e1b-b718-45b5-9d05-f1243e3d2f9c","903":"0d2d41ad-4260-4c69-a95d-bc3e5d0ccc83","904":"37a110cf-0b1a-407e-8453-469195f6d0a7","905":"37a2d046-8ac0-4a7a-8bde-24f7955e18b2","906":"63a19a3e-f19e-4551-ad22-a5f55c1a9101","907":"eb82e5cb-51ba-43c4-98f3-a5ca9669cf55","908":"2d6c58b5-3476-4542-a926-19cbbb040438","909":"12bfb468-393a-40e8-bb99-89bf59b4905b","910":"a64d706c-8340-47c8-a869-f4eefb064c0a","911":"55b99c75-eba4-4174-ad96-36e8e676d17c","912":"ec704697-bcc5-445e-99b2-976a064b3763","913":"f8102ad8-ab2c-438b-aa1a-a4dbe3cc66ea","914":"a34cec4d-53c0-4513-9140-6828ca32cbb4","915":"df22820a-ba0e-4e36-b320-caa1ffbe53c0","916":"6879f459-ebbe-469c-95d3-066a75c7f087","917":"8f27e37e-146e-4d7a-b531-fdf9e9c72bcf","918":"d3e0c6d3-4886-485a-86d2-096db3ed4be0","919":"71ef79bf-a49b-4c9b-b0c5-25058b6e0a88","920":"0b300d43-d679-4786-8ff6-dd4c92e4bc8a","921":"22555cea-3748-4275-9550-f82c27380881","922":"f482931d-e7c8-4ad9-b74c-ae85a1b64f9a","923":"77558fea-2259-4a7e-b653-12260043a33c","924":"f57da900-2005-4310-b25e-c6a6af9bfea6","925":"9218b810-e762-4e5e-b5da-e7931a0f0b26","926":"52d10034-ed5d-4fcf-9236-ef8c9538d26e","927":"a6188b93-9295-476a-88c2-19c67574b9e0","928":"3ed81047-66cc-49fe-991f-942cfa883f2d","929":"ea60dead-4303-4f1a-8a49-32c956702ff8","930":"f471e502-34e0-40ad-9a6e-025e87a438b0","931":"941e0a3f-e227-4ee7-a349-88478061c7de","932":"9bc9e661-4ec2-41af-8696-5f89e7e28a39","933":"88fe6009-08b0-4c60-a29f-aef10cc68923","934":"e316e8d5-2bf0-4766-b621-ae8eba1ace47","935":"a7d49d79-e1c7-450c-aa68-2fd9a47bed5b","936":"a235a256-f42e-4ec0-bb4b-dd2a2eb39c14","937":"483b6b9c-5a56-44c2-ad7a-ffcfb9227708","938":"e72c6c15-5289-46e8-8255-3398b796f390","939":"9205b66f-2b1c-4b76-8ed4-482a3b2ed673","940":"3bc93924-40f3-4e69-afc6-cc57bfadfc62","941":"3ea022ba-067b-4a84-bd02-f6fdf0c7673d","942":"fdac7607-7527-4f2f-a1db-57967f7be3a5","943":"a0c96caa-4b4e-4b79-b0fa-b124bbd7604d","944":"77df76a8-d232-466e-b423-6909ba02127f","945":"7f055446-1f81-4c40-9225-bf115d3db5e8","946":"2010135d-c90f-4865-abbc-7f4a383ed86d","947":"d4c551f8-bb47-427a-b1f9-5aa0da050ffa","948":"9f5049a7-0846-4281-a119-53b7d4d61bb8","949":"3bfe7702-9e49-40b1-b307-dcab23c40c2d","950":"5503f113-d682-434d-869e-ae7f05a9ebcb","951":"a9ba8b69-989f-46e3-80a3-f6c6f016e566","952":"16954899-c81a-4608-8502-414ea283f853","953":"d59ed4f1-a275-4e55-855d-d4499c4f839a","954":"b5e7ef56-d98b-43b0-ac02-c191981b57e6","955":"d040a616-f883-40cd-af3a-d3e8be0b3a3e","956":"cb712181-d858-4334-b985-4e4d6f84843a","957":"2625c340-db90-451b-b0b6-c6b7b7d5067e","958":"df4f7450-d346-49eb-908e-fa0b85d70847","959":"4a52d008-8726-464d-a0b4-8a00c3784255","960":"c7600796-9b9c-49ba-930e-cfebf1e3cbf4","961":"389b99f9-4dcf-48fc-b18e-8b0a7eb12c4f","962":"d5f188bc-d85c-459f-b265-2a514efd0a72","963":"a58e843f-920d-410b-9057-e8c59c8299ba","964":"f75734c7-f757-49b9-bbff-44a6bb3b7f05","965":"67097528-7311-4b0d-86d3-3d58a1250400","966":"25c0ce17-c05c-4d07-a5d2-69e6caa61143","967":"c78a30e8-9944-4d58-b29f-8c5bcf577e98","968":"73c07184-0dcb-4959-92cb-822bc6a59849","969":"075041d1-60d0-408c-9767-a7d59368afa9","970":"53d10b7f-1738-4f14-b408-e5d793f93168","971":"4177208b-76ca-4459-a69e-7e1b7da1c6bf","972":"6bef5be9-31e4-4105-9e26-7263c8eb64f2","973":"4b0ae50a-f6d1-4183-87b7-8781a7888d7a","974":"61a15032-199b-43a0-b9c7-db805c468bf8","975":"5f3e98c7-4a61-4f0a-a922-874fb9e5b400","976":"595d4a19-df33-4d36-ae3f-b05b1ef7e98d","977":"5581493f-da6c-431b-93e0-114d7d4199a3","978":"59195e87-5f5d-4f53-ab08-efce0d863f12","979":"34a4b68b-6893-4225-90a2-f709a9fdab48","980":"db98e8c6-f091-4fc5-b255-197d44ba1b68","981":"851e5aa8-aa34-4fbc-9588-1baad6954f94","982":"7413eb25-c3e0-4334-a090-e192a6be216c","983":"bc492c0f-0f50-4c1e-859f-aa5841111df3","984":"ae81167c-11f8-46f7-bde0-f82cb86c14d5","985":"9b2c8b44-2130-4fc4-b1ef-2c8c27744e3a","986":"aea09ff6-3d6a-4f31-9cc0-7449a0a670dc","987":"cb8c1d66-090f-4852-bb80-2ef68cd39975","988":"ccfe1aae-f025-442f-9eee-f7853111fd88","989":"67d5eded-2dc8-4f28-a50c-fe61620754e6","990":"d665962d-fd6c-40b1-b9b5-25471460e1f7","991":"d23a4ff0-7543-45b2-8918-c133cd613d4a","992":"1dfdd3e2-55a3-46c2-82f0-17cea9b5f765","993":"fbedeea2-87c4-4f17-9a46-47f2086e1c11","994":"bef1d12e-2641-499e-8a2a-a8fe8ddb6091","995":"bc27c901-3782-4e4f-b0ca-d377d62c3f60","996":"85279bf7-addf-493f-8523-b07a12f7887d","997":"55b56b4c-564b-4d4f-a619-a1031aa7bc35","998":"54542556-de10-49ab-9853-a602a540a001","999":"efac7e16-8907-4282-a440-65bbce3745b4","1000":"3282f968-36ee-4282-81bb-d019668d6e9f","1001":"90932a05-4a44-4d0c-83a9-af73e5286ce6","1002":"53175254-f9f6-4e1a-a83b-c4b926463067","1003":"b712a088-fc6c-470c-a5a8-6237de604a0c","1004":"e106c775-a2cc-446d-9386-44facca5d907","1005":"518c210b-4d91-4349-ba03-66549207a425","1006":"3ac285ef-ccd9-4534-a5af-f4ec269482f1","1007":"3d4f540a-1af8-4fab-868c-e8763d36ade5","1008":"ce7ce749-b2fc-4826-87b8-dca548569155","1009":"6bfae5ed-6421-4b88-a295-b85cda80e8ed","1010":"55bc9c59-2066-4a78-a17a-81a6a3e2dce3","1011":"e09d7b76-6937-443e-9274-6ad02c0fe8a5","1012":"9be199af-bc8e-499c-922e-77c964c02608","1013":"f5758c74-f960-40af-95c1-6872f66ee60a","1014":"10984388-6879-4b2a-85f7-ec83d58362d0","1015":"323c72c2-1613-4890-b4b7-8806cefceb2f","1016":"f82ce58b-9220-48a9-b345-41dcf346f75c","1017":"f9a1af4e-869a-431a-8c83-b582d3c8ff6f","1018":"db42d058-4916-4f53-9acd-58cfbbb7ea64","1019":"58719581-5464-4a6b-ab65-9fd3e241ee7d","1020":"c0ee04d8-c7cb-4153-a013-0e2faec6bee4","1021":"2334e055-550c-4d76-aacd-7b9d386e9c68","1022":"2bfe770d-9284-4d9d-b1e9-c07ed279acd2","1023":"90b0748b-756c-47d2-ac93-cdb07f58bca6","1024":"a486ffd2-1a6e-4f28-ac7f-4e9cce019e81","1025":"9d95d9fd-20f8-4dbb-922b-15ae11980fef","1026":"9ee707a6-8186-44a8-9d3c-c24452899d11","1027":"3153370d-8559-4f1f-aa94-a3b118a46ba6","1028":"27e08156-6424-4a45-88e5-430cc7264420","1029":"7ddd21aa-81d3-4494-8580-788a71588d29","1030":"d8bf30b3-43d4-4f76-ba51-7f3e6ceaeb30","1031":"2ba0bff2-8eee-44ee-9d12-8e9144167d11","1032":"2281c0d2-40ad-4d39-9d2d-b69c5ef81afd","1033":"197b7b75-2bd2-4f08-96d3-4f292511609c","1034":"d9546175-3489-4920-82b6-2a35640edf1c","1035":"a4838040-302d-4b3e-88e7-eb331c245ce7","1036":"0883e36a-5689-43d3-a88e-cd6a260b8f08","1037":"2950c9ad-ebab-436e-a606-72831cc84582","1038":"e940b731-d6d1-4503-ba57-ef42410caef7","1039":"486b4a00-dd9e-4b00-a554-bb6acae8ebc8","1040":"f40eb1d2-1d24-4d56-9eac-f03c220fa47b","1041":"a26b605a-5b32-43c5-829a-71eaf2103748","1042":"35a08e03-9caf-4645-b01b-326e42ce35dc","1043":"50fbb531-10f8-49f7-85c0-64792926ff67","1044":"6216da23-1c08-47d5-aa39-9a7bff451e4f","1045":"470ebebd-086e-437b-b1e3-5722ce38abd5","1046":"50a5d1cc-2156-4edf-8e14-eab21e05c2ba","1047":"83473a93-ee71-432e-a27c-70452fa9fb29","1048":"dc4542ee-bdbd-4cdf-96aa-bbec0826f697","1049":"f3fcc90e-fd37-4620-8902-012c1873590e","1050":"16fbc0a9-91e1-46ba-8cc2-6587ba565497","1051":"adbe795c-3b18-42cc-a956-ed3713a479f8","1052":"d6d8125b-b1db-4192-9b18-7b3bcd4d33b4","1053":"5b2aa5f1-2965-41ee-b418-14d76217d16e","1054":"f8ddaf37-879c-49d2-be22-973e44d8aefc","1055":"94a07199-3cfa-4013-8af6-66aa100fc2ae","1056":"c935d730-df12-4d81-b39c-83961207359f","1057":"3be251f2-8e3d-4254-beea-6075ebf37d06","1058":"ad595624-2f84-4e41-91b1-43040661a333","1059":"aa1fc31c-65f0-4b32-a4a3-368ff161c5e3","1060":"37375d8c-6aaf-4f2a-b923-6159eb0f18d8","1061":"adcaea91-55a5-4535-a8c2-d607513848a6","1062":"77d46cc9-257a-4141-93a9-ac5891bcd9a3","1063":"2fd67c8b-2c3d-4a42-9be8-9280e2bdc89a","1064":"09005223-6e27-4c51-802f-9c6292572040","1065":"34f9e1e6-8c69-42dd-99d7-1dd516992e7c","1066":"bb900935-395b-452d-965a-e19eea587d45","1067":"9cd968cb-3508-4153-a6e8-9f57c5d979dc","1068":"e0d469c6-5378-47b2-89d8-9d301c485614","1069":"ab373638-cba9-462c-8f90-04331e130c49","1070":"507448d1-62c8-41c8-81b5-f03a15a82735","1071":"167db70c-5c91-4613-a453-a6237d6a69ad","1072":"16b8ac1e-1503-45b4-bdeb-27f301abc641","1073":"a74f3a85-5dea-42b4-bc5e-b57e58d79965","1074":"ee6dfd86-c2f5-4b6b-ac1d-1d4c11f0e150","1075":"9b11d44d-77f3-4b6b-a269-b402edc58ab2","1076":"27facfb1-50f1-4d29-bc7e-a703fae651d0","1077":"bc224e7a-cc63-4ed4-87c5-c4f4466b323d","1078":"de6b7ebd-cf1b-4209-aeec-01da41a521ce","1079":"c1544148-c0b1-413c-a4c7-c690a8b3a226","1080":"11315a8e-93bc-4ba9-8e5a-f5ce42c8b3aa","1081":"dfd1c2da-3f4d-4c67-8638-c0a8958cd925","1082":"285544de-8fac-4146-adaa-8367d608b26d","1083":"1ede9497-286e-4af1-b3db-5164dff57c8f","1084":"7c04c99d-4a98-45a6-b1cd-5bf0186030ab","1085":"213bd73d-b17b-4346-bf40-4a3808a8cf98","1086":"e284c9fe-7615-4804-a30f-590f9e224c5c","1087":"5da53bc4-f2af-490f-bc66-6388c2c57b10","1088":"85f1a10b-53df-44f8-9f3e-1e83b922651c","1089":"6295ad11-9207-4774-8e4f-b6e467fb3b98","1090":"fc5a7b19-a69a-4875-85d4-47c0dfaf1ca7","1091":"df3c0fdb-c328-470d-9770-d8b20ea24045","1092":"d4064423-9b9d-4631-a309-979e034f8558","1093":"86c328aa-4145-48fb-bcaf-58cb4c5101aa","1094":"dcd9475a-1792-4cd5-b67e-4b8ccf873fdf","1095":"f5810af2-7a98-405b-a26d-2c34ad9bc7c6","1096":"92127b0c-fd4a-40b2-9d1c-f0ea05a69173","1097":"38b4b576-3181-4fdc-b30e-fc8ee41b3f1d","1098":"31d6ba8f-d8ce-47c6-b209-d692a9128a4c","1099":"61a212d3-8a38-4919-9b15-ea17018d72ef","1100":"89f17228-b002-4c3e-8d94-7f558738d881","1101":"120c5711-ac49-436d-9a77-33d0b7bc7d66","1102":"a98466c3-327b-4302-abf2-85e9bf319e0b","1103":"b84a9f5e-e2f7-4e37-bce5-fa54944c7af0","1104":"e70ddc36-7a85-4355-93b6-c19da969e4ee","1105":"983b885c-803a-4dcb-8acf-851e4f1b630f","1106":"156d422c-a016-4b12-9834-66a065c8046b","1107":"99dbe711-b74e-4407-b8ea-df78c127feab","1108":"8a4edc03-d49d-452e-badb-64c1cb90defb","1109":"6074cda1-99ce-46f4-b1ff-267cf2c641fb","1110":"ce084f48-14f0-432c-8f2f-99adb2c7e063","1111":"ab207068-a7b5-49ca-8244-c23e4bec6b24","1112":"033dd88d-4868-46fe-b427-20b11f02a705","1113":"49d8dcb6-5bb5-4007-9e2b-62eefbdd7f76","1114":"9f892098-15ab-4fa8-9231-ffbb559af862","1115":"0f665b27-3d4f-42db-ba74-61a53580bcf3","1116":"2981a635-5bff-4e00-9e90-c6e923ea343f","1117":"fb79fbe9-4a05-4f38-af6f-4ae86d439d95","1118":"de4508bb-375d-4c6d-a688-a8a94ef59245","1119":"77e613d1-bc28-40c2-a552-4814b2d6ea4b","1120":"f8d45982-a1e4-4268-afb7-08c66f2697bf","1121":"22bb6a54-f14e-458c-8bc7-953a82ec354a","1122":"a31b4e85-d110-4e12-a38c-4463e41c2751","1123":"eb3f4840-1177-4651-80e1-9187d6d44af0","1124":"ce8edd52-9281-49ec-86c2-99f437af779a","1125":"0fe8132d-e1d9-4723-bc3a-7f35726566e5","1126":"cf65d7e1-9e46-4047-9f11-45a86d8b476c","1127":"ce2a9f31-7e6a-497f-9e8e-5ce2848592d9","1128":"0fdfb1d9-80a9-4d62-87b5-74a31b812d7a","1129":"f2735b1a-be3b-4914-8a32-d134e4b2734b","1130":"d7c4688b-e877-48de-aae6-527454556ea0","1131":"370d1e41-de67-4c74-8d1a-726159caad94","1132":"90acb0ce-ac2b-49d7-bfc6-23edbdd372cd","1133":"e91cc640-14a7-4e7a-be30-7c7dcbcb46fe","1134":"0df7173e-6b22-44cc-a945-91f7b0d0d583","1135":"bd147dbf-a1d6-4427-b05b-1747d76f01de","1136":"0d7d155f-3f46-420a-97ed-8ca30cbe4db1","1137":"67528c96-f572-4379-a120-0876e31321ca","1138":"f40b91b5-a499-47a4-8f6d-656ac0f25037","1139":"436b36d4-1b82-4f14-80f7-40aca9b6cbcf","1140":"c2d8b489-20c4-4a71-b311-19eabdcf0e25","1141":"4ba581da-b1ff-492b-a826-832988d400e0","1142":"e4a27766-cb76-4026-abb5-17517c98f0b5","1143":"44bfdf4e-fb29-4d77-952a-144d8bd05413","1144":"634facbe-7a3e-481c-9986-ce0319cbfb1c","1145":"03b5c195-1198-41f3-a5d5-89a9296f2c15","1146":"910d227d-c504-4013-8895-8033d4459d1c","1147":"a29f1c13-979d-4302-ace8-3c37e95c91a5","1148":"a34e15df-3680-48a2-b293-3d0907cca7e7","1149":"77ee64c2-c9e4-487d-94fc-9050d4ac3dfb","1150":"801de11b-dbf4-4e7c-8225-9a2479dec5b7","1151":"8f481508-64c5-45a9-a032-4295485f6341","1152":"9d07490d-5e8b-4a5b-983c-ebf576ddf349","1153":"33def50b-4bdc-4d37-b3a6-86b8469d0b29","1154":"0489be26-90da-471a-9a03-ef1407759360","1155":"97886149-6f27-4aa4-bd0c-818ecbeb3e54","1156":"0dd49341-108d-431c-bb59-63a9230289c1","1157":"a5a5f3de-bc17-487b-8e84-c7ca8c753b2a","1158":"fd4f0a59-1d94-4e62-bc3e-868f199315c9","1159":"ea0956ef-21f3-4bf4-9918-9eaa49f980d0","1160":"a7b2603e-506a-4465-a6a8-755707f6ab12","1161":"c7fd4078-ea2b-42d4-b9b6-2e9ff1a1cabe","1162":"33f0a9d2-6dec-43c2-b78b-830199d3f134","1163":"915143c8-60c2-4926-a158-23f572f22014","1164":"08691e6b-64c8-4805-ac9a-840f35fa8139","1165":"f77c7b66-a1d6-453d-a4c7-61fe153ca33f","1166":"09f578bc-7113-40f6-9e7c-1dc77b739a4e","1167":"2da5784c-a7e4-4fab-bcd2-bc97263fe5d2","1168":"745dc07f-854e-44d0-b4c3-45661b192445","1169":"85a26db4-60c4-4878-ac7d-f09198306a82","1170":"11797611-a87f-46f9-b44f-e2e13f53efea","1171":"6e45aef0-aa4a-4a04-b963-6ee7689b139c","1172":"a07ed676-d62c-4634-b08f-59a69bdc7d76","1173":"7c4bd48c-c58a-476c-821a-d23b31f7962f","1174":"7cd87b0b-2066-4f51-8a0c-9841109b2ebf","1175":"2a80f95e-a721-4dec-948b-e8a51f220781","1176":"33d7571b-352b-49ff-b7e2-b7a40bcf287f","1177":"e6f13a7e-ebc5-436d-9ccc-e5ba3f3629a5","1178":"d8e6cbbb-7b81-4b2e-a068-bea81df6923d","1179":"ad9b304f-546c-4e4c-9791-6d0b1229d94d","1180":"07f3ce39-b060-4d5d-a3ff-7157b22dcbeb","1181":"87139f69-7dff-4257-aa22-bda4a25036ec","1182":"1a581e33-c9e9-461a-84d4-207fb22cecb9","1183":"ca8f2542-d2e8-47d4-b7ac-861112616627","1184":"b1066e8d-5ad2-44ff-905b-4bd66e52af7d","1185":"92ce2301-3dd3-4b60-83dc-39b635b87935","1186":"ce45ae51-c033-4496-9b2d-0e33706333e5","1187":"0047961c-c576-4f84-8e1a-2e28541aff86","1188":"fb7907b2-cfc7-4a73-9c82-fda48d44bc82","1189":"aecadfb7-b6af-4193-aba4-83a8c54abcc5","1190":"37943a80-f1c3-4a29-a747-366e50a79235","1191":"ae34fc5b-c67b-4eee-809f-ac7390d181f6","1192":"d5c26173-2744-4655-9c24-b5d05421c597","1193":"8bbe6a8e-8799-4b9e-98cb-b2ee8507d60f","1194":"09df70fe-57ef-442e-899f-eb6bafafc516","1195":"0f3ae3fc-b885-4ea1-a32e-e7ff9c6a02f2","1196":"84c44b8e-6eab-41fe-b3d1-13301880d91d","1197":"fa08fa2a-f54d-4042-8a7b-19a4731920e8","1198":"42f9864e-483a-488b-a6b2-45d22d8862ab","1199":"29363262-45f7-4943-9625-81c14a762d88","1200":"6b9b37f9-bb12-40a1-a3d2-40fb3f497f94","1201":"05b49cba-ce0b-47c5-9220-3fd8ad19da19","1202":"eef9cbfd-a9bb-4f6a-bb95-04cbdc024ff7","1203":"7063a656-fb3c-4d02-bccf-8d49d700d112","1204":"0a788c44-b377-4d0b-abd1-715985cda69c","1205":"b0081353-4d0a-4171-b5cd-5368239adec2","1206":"138e5248-c6b6-41ca-9682-f75ef6a9607f","1207":"2be7af72-9fb7-45c0-87b1-728f13d93dc0","1208":"f4667e9c-0d77-4810-9de3-72054fa1a486","1209":"7dc971ec-6e76-49f6-b03d-fa43b5ba9305","1210":"b76c1f50-cf57-4bbb-bcb3-6ca952eef369","1211":"bee62ba1-ab9e-470a-a193-5e13ded3172c","1212":"2acd1fbd-2968-4164-b914-013d44509aee","1213":"ff2f297d-c66c-459e-85be-219a08aae09e","1214":"61b7e11c-3d9f-4666-a565-4f300fb3cfdd","1215":"69b0b12c-9193-4f26-8491-4142cc5d344f","1216":"9a4dcff2-4d48-4da9-abd5-ec09770726c1","1217":"528b7164-7160-4034-9760-39625e65f430","1218":"8c83a026-f760-4d81-b1d9-d0a5796b266f","1219":"f61955f7-852c-44f9-9ff4-5fc4d5351228","1220":"0c401d73-0930-441d-b3ba-98abeafbe4fb","1221":"cf13ef32-0635-4885-845a-830b2e6c8166","1222":"2ac13863-6e2b-4bb7-b833-d3d2294c1579","1223":"d61456a3-b64e-43dc-9de3-ad28e8816ce3","1224":"59012585-bade-466b-9d81-cf60d80c459d","1225":"383bcc76-b8e8-4479-aca6-9eb5674b2ec0","1226":"4a5e9a88-0143-4c61-b619-50ec303e7f93","1227":"d262af73-bc32-4c9c-a14c-4cd0e94cfa55","1228":"3ad1b653-7342-43c2-85a1-7f4887525c6a","1229":"6a02ad0e-2cf7-48da-8ff9-ac9b915a4811","1230":"fdcb5f18-df44-4b8b-9b65-ef868472198f","1231":"2055e122-2f92-4140-897e-7b589de6b2f6","1232":"70307598-8a98-488f-a453-48c7a230cddb","1233":"302e417b-ae76-4fe3-800e-358abfc6d92b","1234":"b922bdf3-dc76-4ebf-a2cd-216c17e677d1","1235":"ebe9bec4-bf35-4a59-bcc5-4ee70d053c68","1236":"84ab881d-43ca-4524-8fc2-23ce2d571096","1237":"a61f02c9-f602-470e-b078-63248ec2a1b7","1238":"aa6e98a2-036b-40e1-83ee-c45662247042","1239":"211f100f-ac51-41ab-86b1-d69f4502bd88","1240":"c936ba04-fb46-4a71-9a0a-da8cfe4d9fdb","1241":"00a2ea5d-5e37-4529-b849-5e7c7cbc2272","1242":"e1577606-e211-491c-bd50-066ddc2bf5e5","1243":"e0de178d-4886-48cd-b8f6-814075016375","1244":"8979d3c9-cc44-4511-8bff-e011a19b8b07","1245":"99f236b4-2d5b-48cc-811a-e49ce029d912","1246":"466529f6-3dca-4e3b-96c1-0bbba80732b6","1247":"71af2bdd-0d5b-4926-8919-0f9de73a8add","1248":"4bc118d5-d581-402c-84c3-d847fca8dbcc","1249":"073845eb-0b27-47ed-a7df-d99b7b6ca652","1250":"02ace685-a9dc-41c6-92e7-a12a7890c18a","1251":"5091ef5e-f9ee-46d0-9848-d6278fb7b31a","1252":"503cb391-f469-4297-99e8-9979fb5fcee0","1253":"949f729c-1a26-4523-ad41-67419354a290","1254":"d94a24e1-d5e1-480f-8102-b44dbf543f85","1255":"9c32a411-0d4c-44f2-b36f-3f88ee08a17b","1256":"496aeef4-9a0c-4631-967e-249cbadffb6a","1257":"991d68e5-4c07-4857-8a8c-33747a8533d7","1258":"17a25b07-c9b3-4cb8-8ee8-7581bb61b223","1259":"d7b7b05e-572f-410f-a601-647062e45e20","1260":"644e7b6f-3630-44ec-9b56-7147d7c0a079","1261":"50e6ef8e-fb48-4b2c-a7a7-af3cc02eed28","1262":"114d6846-6b4d-4d1e-b70d-3dd9374d5251","1263":"1af9c4ec-b36b-4f06-a17c-1456613c24ef","1264":"c435ce3b-93c7-41e9-a059-dcca8fa53153","1265":"60d2e448-b701-4052-83a4-5b4517cff50b","1266":"82128e87-0725-44cf-b505-36683c79db22","1267":"bb0b631f-3dec-4034-b792-1ac9d866dcd8","1268":"437aa2bf-eebe-4c49-899a-d56ac3c64882","1269":"578c3060-3129-4b3d-ac81-4242238c8af1","1270":"f26149a0-d722-47bd-8eba-750b31a38572","1271":"cac5fcde-f3d6-4daa-ba4d-2ec9589f4a5e","1272":"dd992bc9-2d2a-442a-8ee1-bf3617f489a6","1273":"9de07ed3-5aad-4c0e-9b2a-3010cefd5ad1","1274":"cacfb445-8fa5-4298-9206-6c39d94b38e5","1275":"1bacc82c-6793-4983-b66c-cc8d3a67a927","1276":"1b6a14ec-63db-4021-b1bb-9e4570a80beb","1277":"3cb0e5cf-fdd7-4184-bb0f-aae196cc055f","1278":"22c2e944-433b-4264-a022-0b2223d89363","1279":"2c6999cb-181a-438d-ba1f-b8b58fdbd3bf","1280":"a8bf5f3f-48c0-4dcf-a787-fba7fd17ba6f","1281":"ca56cd37-9964-4d1a-a519-8bc512b2db40","1282":"88929abc-71ab-4685-8562-7de2c252d95f","1283":"898fc22c-ddca-4e9a-a574-75b5bc950cf0","1284":"47d6a1a8-4511-42b4-a46f-d721de926245","1285":"e05f8b3c-417e-4e57-b721-c52abb357895","1286":"b8d10d79-fa2a-48b9-80ce-b1b566376309","1287":"99c93798-74d9-4401-aa76-1abe1a0d11ee","1288":"040371e6-1e4f-4205-b5cb-d73ad4e9cc85","1289":"c73bed73-f5f6-4614-b2b0-79ec0b5ccf48","1290":"ec84a921-790f-4339-bd6d-edf32b9c54af","1291":"22e5a570-a23e-453e-8a02-d3efbd15cd5f","1292":"bb1c2bbd-0ad5-48ac-9894-ce796b41abcc","1293":"920406d2-a7c5-4840-acc7-bbc7b205b1b9","1294":"6bc0b8f5-5af8-427a-9228-b1d964da8f7a","1295":"1500fd8e-a27a-46d2-8d40-71b3ce8295fb","1296":"03323516-0654-4d2b-9d91-5922ce8e0a37","1297":"c483e02e-5ba9-43ac-a7a5-4c7c5492f53a","1298":"064e2898-f289-492a-941d-69a38414a365","1299":"ac498f65-06c3-455e-8ea4-e49d7160fab5","1300":"ab15e0cd-367a-4a36-95d7-ee019788d68b","1301":"3eeb64ef-0627-40f8-b327-963d3ce175f7","1302":"856d776d-6fa4-4efc-b84c-cbacfc99680c","1303":"50baef72-a868-4960-acc8-00cad8c5630c","1304":"17ead460-2b4f-4e70-9192-555d31fe2055","1305":"8cd225c9-9f84-443d-b9a2-a55f8ea93ae3","1306":"218d9bd5-f87e-4822-a39c-6e2bedda96e1","1307":"d309efef-4326-4f56-ba1e-2c064a1f2d15","1308":"2f3e54da-7e5f-46b2-afc2-ce60ec01485c","1309":"ea4e514e-c4dd-43e1-be6b-adbfc1e83c7e","1310":"17750bff-c127-4b3c-a9b5-e54d405661dd","1311":"803e54a6-f8fd-41b4-ab28-4daacfa796c4","1312":"c23b5c8f-cb97-4b83-8e45-45871e58ea64","1313":"810e46fc-2d10-4cf1-9bf8-76ac121199f3","1314":"65f65352-7ae4-4bee-b686-8c582efb6c3e","1315":"b18e719a-8d6e-4d37-bc87-a14efe8132f7","1316":"d0987140-b6d1-48fe-9b3a-e21b80cad47e","1317":"05c9b42c-a4f4-4236-8d43-8e2904f1c571","1318":"7e0ce39f-7fd1-4e35-94e0-200d7e83a53e","1319":"a152e9bc-c851-47ab-b0bb-242253176249","1320":"415cda92-61c6-4b14-b0f5-df4f62e4858f","1321":"d8df5d2d-7036-4c70-96de-8be9295d09d2","1322":"184cbc3c-34e9-4bcc-a88b-60133a4a863b","1323":"a3b408a4-cc0a-431f-b120-34403f94e5a0","1324":"784afa0e-8bf1-4045-8b55-3820e0c846bc","1325":"349d0afd-e4aa-474b-a796-daf6cc67b26c","1326":"0d10bde8-59f7-43ab-80b5-d94353e7b971","1327":"1783fadb-e9e5-43a8-9ce8-fbaf83bcb57d","1328":"4c2b8831-ef78-4ca9-8fba-6b49957ccc3a","1329":"6e9d96d4-1fab-41b3-b98e-eb67495356f3","1330":"094a13e7-af1f-4495-af96-21837dbe968c","1331":"e12cd7d8-6bd5-4162-a1ee-7ec093fe4192","1332":"1e9b58d3-68aa-4562-9928-2e8778868e9b","1333":"e040b9f0-010e-421d-9c9b-0e76e3a84b7c","1334":"cbb656bc-49db-4463-a678-b16c770d821a","1335":"c3b090ae-14f1-4c28-b244-71588a950202","1336":"fbdc6629-c1bb-40f9-8ef3-65eb1ca4a4ba","1337":"40fc29d6-3e8f-46fd-9d63-90b23e1332dc","1338":"8454ad18-d088-412f-87bc-88a6b52beabb","1339":"444ad107-d8a1-4f28-bc80-c9fd9005d7cf","1340":"509aaa2b-520c-4e65-9ddd-575f4c0eadb5","1341":"b1a5a4c9-a0ef-4e7e-9fc2-39fc03baad05","1342":"bf3ed6b1-877c-4ed8-9011-e9a1189f4b87","1343":"8de92262-43a5-49a6-bced-1f5d23645880","1344":"5917ffdd-1be3-424f-81d9-dce4a9d43613","1345":"d6accd94-c71a-4492-91fb-d9106a922d7a","1346":"4bea11a6-b7be-4e38-b642-8fa2756bd1fa","1347":"9fb00ca7-afb8-4fa8-b253-2fc6a50eda2f","1348":"f572598f-e869-4b5e-8151-e1d2f8ad2d3d","1349":"e061e972-1a43-4725-92e3-8100c7756e74","1350":"fc3717c5-0d13-44ad-8827-80aed35aacfc","1351":"39c25491-e966-42c5-b056-b32a48d52064","1352":"c6fcfa8c-3e81-451d-ac8a-caec733f8b40","1353":"8698d70d-2209-4433-8cbf-0381b5057dad","1354":"bee2fc25-be87-420a-bc5b-013e825f4db8","1355":"4ee6d856-a750-4e66-bc5b-b22639038f70","1356":"034f8a09-e77d-4b62-a869-8fce7ea5f4fd","1357":"c8549fbf-b29a-4177-850b-98098557d9e0","1358":"e7c3b2c1-be76-4811-802f-39c8380fc1c4","1359":"cc11174c-3977-4d3a-9fe2-70b197862651","1360":"407ca730-acba-4124-9468-284867b34b90","1361":"58fe7661-0f49-4cf5-b740-101bd5038ae4","1362":"b3575a18-1ff8-41d2-9408-3aba27e9e4df","1363":"b25bf0a6-2e0f-4c01-bd76-467e4f362d9b","1364":"4b812e37-c97c-48e7-a3d9-b257b96effbd","1365":"5a59d28e-7435-4c70-900e-5ce3bebd203a","1366":"a0c6c8e9-2a1b-42a9-996c-22f649fa7ad9","1367":"6206be9d-08ad-4e7d-ba68-6dc48a2cd1e1","1368":"ae381a2d-7bd4-4309-86e6-7ba34099fc8d","1369":"4ad075fa-14cd-4581-a7d3-c2c5c2130355","1370":"e6b0ca2a-161f-4248-bf56-689098d3bc93","1371":"dcedc751-07bd-4ead-b7f2-38d6dc260cfd","1372":"72e74ebc-9b42-433f-a6e9-6070377f4cbc","1373":"c2ba0488-6cdf-40a6-8d96-41b8ad2850f4","1374":"cb802480-a87c-4fff-a9c5-c52430c7c8fe","1375":"376221ff-0b0e-42b5-9071-c8481ce4fabf","1376":"3bf4504c-cc88-4269-9bfa-8947e07f48bb","1377":"c37566de-f239-45e1-a7c7-ba275ad93a10","1378":"86e2a28a-7fe6-4eec-a968-c93296fdfdea","1379":"d9ad1ad4-3f7a-44bb-b17d-dd606fe1bda2","1380":"c299ec17-588b-4d75-b805-4d50b5fd0901","1381":"bc38b6f9-0274-442d-a2f0-b768bb257f4f","1382":"919779b4-1ad8-4005-9648-189284da2f89","1383":"7b528da5-7835-490c-889a-a091a46ea314","1384":"7ad3e5c1-3cff-4772-a2a8-3e2941ce1a20","1385":"6566e500-5e04-4cb3-9e88-a76ea9811724","1386":"5903cb7b-7ef7-4df6-8ab6-fe737cefb714","1387":"e21594d8-e4e8-44d6-b37f-0ec9db84aae0","1388":"a95b2f30-5e06-4591-a87e-d5a870ec7a11","1389":"73f5bf1a-e4ff-4ae6-b619-99ae854e57f0","1390":"29705df3-1f6c-4615-b6b8-0a034191a7ee","1391":"4dff7de8-e01e-4306-bfe1-dbddb7babd2a","1392":"4d8585a5-4e54-4ab9-a8ad-ca7905f3e196","1393":"75784f82-0165-46d2-9a1a-4615549bb5d3","1394":"36e54532-2965-491d-849d-5ee2e70010e0","1395":"e210a76a-415c-4fb7-ba76-0323cdbe89cf","1396":"e156c2d6-917b-4173-bda8-98b62b07bfa1","1397":"3834c51f-3f00-4078-9266-6b7c93546d94","1398":"9521bc08-448d-490b-96ef-a63e0166059b","1399":"88ac95a6-b071-4011-a370-3229264a8c88","1400":"214d8b1d-994e-4ae2-8a08-edcdc4d92c35","1401":"c5e7f141-118d-4044-8c2d-b721ff18d5cf","1402":"2ee2dff2-b1c9-4162-9bea-d09d0f20f012","1403":"7fedeb27-af08-4910-a9d2-85f715fa0400","1404":"b6912910-900a-4986-b07c-4e5c251e6285","1405":"b3460b75-67d9-4cd8-9cbe-a7a7336d8de1","1406":"d7b4c368-8b13-4178-b7b7-caed4f84c76d","1407":"8c687be6-6bde-4e56-8605-75f31c11e696","1408":"94d91396-67fc-4fd3-8f4c-4110b57a6cd2","1409":"4f26a38a-4685-4561-b79d-db5e90ec29c6","1410":"e696f5f5-dcb9-4cc6-a5bc-c3468dd4feaa","1411":"e6e80d96-ff6b-4424-9e37-62a2daa1ebb4","1412":"ce3a90b8-b367-45ec-a0f9-2277cb151c48","1413":"56d8f051-93cc-4ffb-9833-95385f8fb3a3","1414":"970a003e-b190-4294-91e9-6ab37c2c82f6","1415":"221a03a3-5960-445e-9f25-50b899aabca1","1416":"d487c25b-66d1-453b-96bb-42660dde5551","1417":"f4f568ee-35ec-4fbf-b497-fbe727c1271b","1418":"d11d4382-d101-40c7-a614-a89e8443f963","1419":"d72b502c-ec30-4792-b374-9f1f65d70bc9","1420":"2f37d850-0dd2-4a7d-8934-17e6ca1243d0","1421":"539d7bd1-dba0-45c9-bc23-dd82cf0935e3","1422":"29909aeb-80bc-487b-ad61-5d82adb04b8a","1423":"7edc23ee-8e19-4dab-b55e-398dd4ac5f52","1424":"9e5819bb-9641-42a1-b85d-7907b862c5eb","1425":"50c0f727-7e43-4223-ba68-ee1442d8d44f","1426":"0f0aa578-353a-4863-9995-7580fa7c7438","1427":"2b2f55a8-9ef7-4745-a530-19da915e6d39","1428":"f122ea89-67b4-4287-aa41-ea032e2cfff7","1429":"2670bf56-30e3-4a83-aef9-bc58b19e52a6","1430":"577f7698-c9ff-4906-9f66-bb9afade5734","1431":"27405248-5789-48c4-9def-680d352f9e4d","1432":"b375b2f6-0e99-42be-9cd4-7100e95c1265","1433":"b71697fe-188e-4c27-a568-b8d5bc2a5fdc","1434":"aa98d90d-3fae-4172-a7b1-2f7751c8f86e","1435":"aae2063b-fc27-4eb9-afbd-5791d0522d6c","1436":"ce91ab46-0210-4166-ae01-c0c218e23e7f","1437":"4644d3ff-bd82-47ee-929c-47fc5ccf4b25","1438":"b0d0b7cf-7600-4ba4-b01e-d021e9adda93","1439":"41565c51-ec99-4049-b026-d98a7042404e","1440":"f1245136-ce56-4cae-b58c-744078014aec","1441":"4c9063aa-892f-493e-a4b2-b5f2cdccca5f","1442":"21a6ca14-dbad-4a7f-a6ae-3c78d0f243b5","1443":"8d7a5c75-14bf-43c8-a233-aaa5f5ad7cb7","1444":"3b700f46-397b-4cf2-adb0-1772073daac7","1445":"f3face0f-6062-442d-bd76-4790f270eb3f","1446":"b690964c-7cc4-4ce9-99d6-7a3f5b295b10","1447":"ed890694-34e0-4446-8f56-ca8578801d37","1448":"cb535148-7816-4ac9-98aa-42c23f34ca93","1449":"ba67f372-5127-4cdf-aab7-0c268cc4d9dc","1450":"4e914fe4-4e24-476d-9066-dfa3d35df8f6","1451":"f5f04734-f0c7-4008-a2a1-b0370a806ca8","1452":"4e553232-c6ac-42c6-8dbb-59cd787a8646","1453":"d72e44c1-82fc-4c0d-9758-0ec213982762","1454":"8513d751-23cd-41c0-86a6-8ad231911d60","1455":"782b2e5b-5541-4c9a-99f8-ff3dda899574","1456":"b2f80995-52f0-48d1-9d24-8ce5cc467b45","1457":"bdf80411-3307-4c66-bfe2-128dfe8e5136","1458":"52601bb1-12bb-4af4-b8ac-5876a96af6ab","1459":"66a6d2db-04ee-4f4f-bf00-8c4e314cc496","1460":"68e45bae-4259-4a7e-9c97-09df2690b414","1461":"f73779b4-69ce-4265-9fe8-ebceef5dad00","1462":"b0b55a96-5a13-4cba-86da-54277580c841","1463":"62bbbd64-5c63-4732-bb7d-0b4e0cc8ff32","1464":"a5d285c5-99fd-484c-8ede-3bf91ac7afcc","1465":"3f9af0e7-1a66-441f-ad18-0f5fc76ec471","1466":"e770e1eb-8de8-4239-962a-4ab7fc049927","1467":"532a8ebf-2346-4597-8f23-cc5cfc1987dd","1468":"7524a8b9-691e-4ef2-b92c-70b28a291b1a","1469":"761f6f77-1470-4796-90df-304da8f262a2","1470":"5a4bb4cc-1c2e-42e5-88f5-503bfcdce4d4","1471":"6601c430-c946-4ff0-8710-2053df0730ef","1472":"2f910343-7449-4588-a199-adf4d2acb325","1473":"3e4f1bc0-a89b-4b28-adba-ed25d21ad357","1474":"1198b002-facf-4158-aa5a-bed14bb60996","1475":"6cbb2e7e-fe7e-44f7-863d-7c2236d15fcd","1476":"74f1ffd3-ca87-46e1-9e43-f7c8fbc3473c","1477":"07419a79-0f1a-4554-8d35-d797d82c55d7","1478":"75b49b19-354a-4b93-8fe9-fe9eb6a9a5bd","1479":"9686d3f7-dc9e-4948-9517-e1d539f00d47","1480":"652f20c5-be90-4ffa-8feb-e947e52172d0","1481":"3e740df8-8ddb-40c0-a9f0-1f49e7379a62","1482":"501b867e-c0fa-49c3-b115-ec5eb7cd4599","1483":"5e2eaf7e-6bb2-4b0b-92f0-a3235e971c24","1484":"99571624-90ad-44b2-a48e-e3179542740c","1485":"e570641e-c3e8-4356-adc6-1be572882b7d","1486":"9081f5f0-9e15-49b4-b1ad-1ef05bf3ba2a","1487":"4135a2ff-369f-4291-9c83-c14d3910f8d6","1488":"bfb18c7d-7b79-4bbe-ba6f-cf6a0f297934","1489":"e17d7d83-712c-452a-9450-99d48599774b","1490":"187021c9-8b27-4a22-991a-2cbaa6fc194d","1491":"7c94d0d8-65cf-4851-a29a-f861920c413c","1492":"1cc7c900-c00a-40e0-a8dc-c8af91a00349","1493":"984e5cd3-1754-41bc-9b81-4c199320e5a5","1494":"bb92eefa-2f44-4f6d-84ff-19a7d719697b","1495":"1ac9d574-9f8c-473a-b33a-c79085612eb4","1496":"7ba9f9fe-7503-4f5a-82e0-034bad9f0695","1497":"f5e13939-30e9-47a2-8d4c-125ede36b936","1498":"b3e608bf-9f5a-46dd-ae76-de467415b92d","1499":"88d0c285-2c6b-422d-af85-f0fb8005eb38","1500":"7d429b89-7508-4973-afd3-c2ad968882a5","1501":"fee47215-5098-4dda-81ce-b56cf64c1109","1502":"44bb2d95-9992-4a37-af2e-31e289cd553d","1503":"be8eed72-6f49-49cd-80c5-df8b5a85a4f1","1504":"b7ae512e-d594-43a3-b241-08297ab2dc70","1505":"1faf9167-8b8c-42a8-b24c-1a96a71edf8c","1506":"617f35b6-2ece-444c-b149-609db7eb609e","1507":"4d2a050c-845f-4567-a296-3ee385bc3ae4","1508":"899a9544-6956-4aca-883b-ce9a659c0cac","1509":"d5d2299f-0414-452e-82b1-005d2a172b5b","1510":"b7ca2d33-d963-4b83-aba3-bdea4a0f3b28","1511":"d5105621-6075-4591-baa3-a4d8b0777470","1512":"e29b9ff8-55ef-4261-a121-12c46e056866","1513":"7d42c714-ad11-4df6-89be-66a2d42e0c22","1514":"7681cafe-48fb-4e7e-88dd-3da594a51c17","1515":"c793a7d6-fb69-482c-ba6c-e492c8904fcd","1516":"f98e55a2-205e-4240-8788-092a481ec4d7","1517":"eb412c1d-4c79-408a-8fc7-826a9b172485","1518":"ae5090aa-c676-4f67-ab36-ac85d2b7aa28","1519":"06c971f8-89d8-4b5a-8db9-bcf83557a17f","1520":"4dbd072f-2f91-43d8-9749-7936961ffea3","1521":"9c776496-1ce8-4a77-8a7c-9f8323fdc012","1522":"c57c3d89-acea-475c-afa5-e07a23ebb6d0","1523":"7c7e0e8e-f5ed-43bd-9e9d-9843200cd312","1524":"2faa74fb-b9a5-449e-9f43-33bc2cdf9693","1525":"2bf397f0-27dc-405c-8656-e6860972251e","1526":"27fb97e2-1c83-44f6-9512-3f22dd046540","1527":"b7a2465b-a3e7-4e0d-8786-ba10f26ae010","1528":"eb50c1b5-9d8c-4a15-bfb8-3996e56c7b8e","1529":"949d092a-f752-40c8-80de-61dd21c2881d","1530":"0904d701-0967-45d2-becd-a55c4126ee6a","1531":"3e2523af-0d2a-41a8-bfd0-e0ba8ee1fc21","1532":"6ba46d74-0231-44e5-a6bb-a45d8e83aea5","1533":"c9061a61-635e-4c7f-a85a-0cae7d0561eb","1534":"b028523f-1803-4ae9-b61a-81b45b0293a5","1535":"0099e45e-9070-46f1-a74c-974e913868a7","1536":"c87b0657-4509-4869-b02d-78657d6346c1","1537":"ca3d4c0b-e974-4b7b-9791-ec177c1c57b0","1538":"12eeb7e2-08a0-4b1e-ad9b-cb999dd255d5","1539":"966fad57-a99a-44a0-a269-1c7ccc066793","1540":"b862db95-fd9a-4302-a456-3724adfd433f","1541":"470565aa-0aa1-402f-9c08-df7beb6eb704","1542":"5b207d84-5016-451a-a03d-b15c52f97302","1543":"3d0a589c-4f3e-4e1d-a80d-17775a0b07f3","1544":"042da158-422a-4186-ac1b-f2461385b677","1545":"f897ce86-d1d8-4c11-b408-544c59717056","1546":"6f31d35c-10d2-45b3-9710-277af767ccc2","1547":"4a5a0c42-abc1-41b9-a2cb-6caf1d096934","1548":"88885b2c-d16c-4c43-bbb1-da5705526960","1549":"4a05c367-6b19-4531-acf1-02a2c21918aa","1550":"508ce83e-3145-4351-9661-72021255b4f6","1551":"68d1c03b-1ca1-49ef-b94b-9cb38a0be677","1552":"cd381ed3-9f1b-4558-aa58-1384504c6cee","1553":"cfb59d98-ab06-47b9-8ff8-574ae231e630","1554":"02aaf7dc-7ab4-4d57-a470-5b7c94f45182","1555":"cbb368c6-d2ab-4357-a646-7f8a9580ef60","1556":"57d62456-6c20-45eb-ad1e-b025a1a43fa5","1557":"9fcf37eb-a116-4b5f-b993-bb8b73403592","1558":"752deea8-c742-4336-b27d-ba270042c285","1559":"be73790c-f231-4b5e-9943-58376628b931","1560":"9841af7b-fc1f-4f13-899a-8345354d88de","1561":"3aaf1eb5-cbd2-4027-ac42-284dc0a6eaae","1562":"cd11fcfa-8160-48cc-9579-0fe48cba3c36","1563":"a72e1520-9857-430e-adea-6c9bc5359173","1564":"e4db2848-f1a5-4e5b-b870-3bbc4137d95b","1565":"241fc3cb-3f49-433f-83ee-d268c22c36cc","1566":"b5ad6872-de12-4e0a-a46f-55ae1228e70c","1567":"d873c0be-7156-49c2-a41c-1e7f9e193d5b","1568":"09131feb-0e9c-48fc-a705-3ea6f5d60aea","1569":"b0b7b3ae-e104-4d7c-81b0-4d8a607800fa","1570":"fe03e2d4-0d0d-4c28-af48-7b36ba41f09b","1571":"0b263615-f7a9-4c5b-a347-5cda172dd00f","1572":"ade9bd6d-e44b-4d1f-bfae-d73f8ae2fd31","1573":"e1295374-f3e1-4621-a1a8-77bf002e7d5e","1574":"d6a25fc2-d34f-479a-8d45-94e351a99bc9","1575":"319edcf3-a468-4fdc-b4aa-bc95243dab60","1576":"e47a7541-bf33-4072-bb52-db973333fbf2","1577":"04a6a2f7-a764-4eef-9538-f83f61990e6f","1578":"499b7778-79b2-4da2-ad8b-df1ad10038dc","1579":"e9006fe1-a637-4fba-ad53-d6be2f1cbe33","1580":"2c5e551f-4d19-41c0-b83c-2292e6f4144e","1581":"afe24828-7340-4af8-8a02-c312fbc6d8d4","1582":"5690f169-1f1b-4111-90d9-023752007d93","1583":"894831e3-e36a-4a35-98df-bbd22978dd80","1584":"e3c9cdab-90e3-4cb1-a9a8-53a59e1bddab","1585":"6efac490-842c-4738-b56f-11a73f093ec7","1586":"98cd1793-c860-4596-9b59-b41921ee5544","1587":"307c6b6f-cedd-48db-b7b0-dac687222695","1588":"c5816d9b-b24a-4683-94ac-7e8bf479b99b","1589":"4a8cd97b-bd7e-402b-aa00-44246abcfd8b","1590":"95b61cf1-4be2-4ce8-a101-39d4b6402191","1591":"47a41dc8-8685-4051-8918-c850efe16b83","1592":"c18b8771-0572-4720-a1b3-02eb26dc5310","1593":"723f31a7-b20b-48cb-8364-7acc5866e6dd","1594":"b487ce20-1d62-4d4f-b86b-8a22984f2671","1595":"032a3b2d-adb1-4577-a667-9838711bbf7d","1596":"1c60103a-9142-401a-9dff-30229c7e09bb","1597":"52e375d4-0357-4afe-a9c2-72f563ea1a5d","1598":"2035d81b-6e18-4676-adad-01893bc8b695","1599":"0f9fa5f9-056e-4a5b-9a57-4fd58934db91","1600":"947dc75a-74e1-4039-b013-746b2209a122","1601":"a4378f23-d685-45ee-80a6-7c266734e21b","1602":"fbeb9ac8-cf5f-4a32-9980-d81fb7bc8555","1603":"880ff080-66fc-4703-aa4f-069343fa69a7","1604":"3e4c60d7-2303-4490-9dd0-74cb81310f08","1605":"a5c10816-aa71-4eed-8cae-de490d4a8cc6","1606":"8adc608b-858a-46ae-8ed4-8a620c783261","1607":"3cbb471d-4d3b-4f74-8779-bd5fb15026af","1608":"32d01de2-5e59-4c14-94ee-fc9e944f22f8","1609":"dc3805e3-d785-4201-b8cc-705b42561d03","1610":"1eefdece-ab54-4a88-827b-13e603c4aa7a","1611":"6409a0db-49b2-4f22-a8c2-af85db074f10","1612":"cb9eedc7-0e10-4677-9e36-5dbb4f5e31f6","1613":"00acb2dd-aeb5-4cfe-88f2-974c135c8fa9","1614":"d629bb68-7462-4914-8270-41326a08d51f","1615":"fd4f7856-ae90-4f79-b1a9-c9e6b87cbf7d","1616":"79e1fd33-00e9-4303-9fa2-a7556fffa17d","1617":"398e11ad-f2c2-4b68-99dd-a60236670e0c","1618":"19b6b76d-4a16-4958-b3fa-7662a5b34033","1619":"6cc942bf-72ff-4f72-a1c3-94cb2701388a","1620":"80e6d92d-981d-4723-af58-aff469fe1a96","1621":"8621bb8f-2f64-4345-b143-ae8ab5b63a85","1622":"5bae59a2-7bf4-4d37-b1e8-a0452b548e5f","1623":"8d32adde-e89e-486e-8e17-c31c6824e5f7","1624":"b07cbf98-a30d-43a4-b4ad-c3c42fd17207","1625":"93baf2c0-c52c-45c3-abbf-c774ca2563cb","1626":"42673f4b-6fb5-4de2-bbab-6c51746725e3","1627":"c26e4d54-8621-4f1b-ad48-2d1c63e83931","1628":"66746d64-0ef1-438f-b7ef-a29f7d03a254","1629":"727ab950-6925-40dd-99b8-bb6b3368a454","1630":"da14923b-4754-4018-a779-54b626a5b669","1631":"728412e1-d841-43fc-85e4-293ab8cdcda9","1632":"07907991-3903-4609-8982-34fb147d44c2","1633":"9079afd4-5e76-428c-90d0-79d7593d5650","1634":"3bf63704-8798-46b3-b833-d3e9d9ce2a3a","1635":"a8751233-75a5-467d-bd02-b071e8c9522b","1636":"39ca2ff3-901c-4cc8-93f4-b1ee21112791","1637":"1d74e90c-fc5b-42bf-91a3-a87abcd33441","1638":"00241f58-130b-42ab-b012-73f9555bcf74","1639":"3c4f37da-a690-4785-80ee-3a8fd85a0bea","1640":"40de3bb6-26fb-4697-b6ef-90b3acb03bc0","1641":"d94c2080-6ac6-4a23-8744-958f00a34f29","1642":"552b8951-dec0-45e5-85ee-bbba95920ddd","1643":"286ef22e-c088-4360-bcb1-66a733ae9103","1644":"ad1b4a09-fa3e-4ffb-88e3-de34e5a9dcb8","1645":"8144bb17-837f-4313-bf26-46abceb4dbf5","1646":"131e6ae8-957c-49cf-879f-99c629ff8a5e","1647":"7f5a0f65-847f-4434-b921-6a4bc0c0946c","1648":"987200ae-bdd5-43a7-b88d-aa2e7efae426","1649":"52180b2b-766b-4c4b-939d-aa5fe325ca3d","1650":"9e1d1e08-66f9-4340-b16f-5a88fba0c695","1651":"f274c859-5b11-4439-95d1-534a29830db4","1652":"9ad8e96d-d9e1-4790-8141-ea64152a1577","1653":"c2357e84-5175-49bc-9631-a64c43665c45","1654":"6d9b978d-1875-4050-be36-30c463e9f991","1655":"780f1c56-6ff1-49f6-9d1b-749a155fe571","1656":"3f573252-48cb-4422-a2d9-43b9dcfa2a7b","1657":"96233c5d-c005-4ee6-92c2-dd680d99639c","1658":"d2a0f3eb-e646-4ea2-967e-a86857707105","1659":"2859e370-a629-4485-a865-48b4e27c1bcf","1660":"f5492fbc-eb83-4f71-ae01-496b4511d348","1661":"680d133c-fe96-4dde-8267-1da886944489","1662":"210f6d56-3790-47e5-b9e1-d3d11878eebd","1663":"eb028a96-02b2-4c27-9d56-7b3ea889f6a3","1664":"f268c3e8-1051-4dd8-866c-307fabd96cff","1665":"44b0e975-d746-4fc9-b079-c04f3cdf20c9","1666":"5380a6da-b237-4974-965f-83390f067ec3","1667":"b4b74550-4412-49ea-8cfd-9e2f8a7638d9","1668":"bc512cd2-3ae2-4301-9f61-3948653f157d","1669":"a5421c82-711d-4fce-8dad-4f0ef92108c0","1670":"d6e17164-753d-4375-8a3d-8270fa877017","1671":"1ab7e70b-89b4-465f-b1c8-fe93f80456b0","1672":"f13e4512-7e43-449a-944e-76addf5b60ea","1673":"83489b78-d538-4dee-a4ff-33128a010ba0","1674":"e99cc406-343d-42f3-bca2-37c986331d4b","1675":"f1b635cf-054b-417c-858a-655b796bdebc","1676":"187a9fca-00e2-4b68-84c8-2874fc1d281b","1677":"cfa26371-68b7-4d3f-a187-26fc6b85e8d7","1678":"d89e30f1-0289-4d9e-ad23-d972dc5d3b30","1679":"946b60fd-d70c-4a89-a78b-1ead777e6cd6","1680":"0eb4080b-9b55-4a02-b9fa-7441105b7b58","1681":"4db73f91-e841-49cb-8e7b-9414d3dbd499","1682":"b7cf8e26-a86b-4de7-b74e-99b461910d78","1683":"99a5a360-1686-4204-9245-fb71083c01bf","1684":"7112d828-ced0-435d-bfc1-14b79116b2e7","1685":"853c0d40-8aa3-4007-ae74-4dc1e870f2e9","1686":"0fc70018-cfca-4923-acde-f40f1d6ea700","1687":"3c400348-7b8a-4235-9c8f-0dc5cfa89c73","1688":"cfb65f54-14ec-4275-a605-8ec109bc3b53","1689":"37a3611e-2fc8-4fb4-9eb6-8f8c81e63e5e","1690":"fb701753-65ed-4caf-ab51-2cb920c69bc3","1691":"7cdafb04-e3a0-469d-9a87-0ecdb92fb7a7","1692":"530c610e-8d42-4521-ae2b-c5fc24b803ee","1693":"9e9773e6-9ace-4a43-b5a2-288e98c78e81","1694":"0b9287e1-df37-4452-89ea-bad053f3f6bb","1695":"5b607bee-e1f9-4fd5-8336-7d5cc0672a4c","1696":"a2c68204-d449-420a-a9d4-8882bcb861d0","1697":"e5815e4e-1800-45e5-be11-c7c8903e2d73","1698":"e44a5198-57fc-4d74-9e09-294fe7b51b4c","1699":"92f0eb63-b8fd-406b-8eeb-c770ec08cbdc","1700":"9c571d70-3678-4bd0-8d05-0c0e6160310a","1701":"bdfff2a4-9f7b-4f01-8f42-ece797d29ff0","1702":"520dd139-df46-4c38-8ec2-03f337a6eee3","1703":"20901edc-49d0-4632-a110-29a51677e2ed","1704":"931c8c84-c670-47fc-aa89-5af052ac4d96","1705":"c06c883e-b168-49c1-bf11-d4525a75bec2","1706":"3d1c5096-e74c-44e3-ab7d-5a73fd5197e2","1707":"615da532-0b46-45ea-9607-bcfacbf64262","1708":"73ace45a-ac9b-43ba-8268-015b7faefd8b","1709":"a88cec45-1a37-40b4-9a08-cf758e681125","1710":"236f3b34-f779-4c0e-9cbf-1db5206b092b","1711":"43f633e0-edfd-41a7-bce9-6042cedbc74d","1712":"1c1f7701-a757-4cc4-9859-05b497d27984","1713":"2eda1660-cc1e-4af2-b75d-54da2949d402","1714":"3c41c36a-f3d9-4475-92bd-46aa0ae7a5f0","1715":"4c85b47b-6ae9-4d1e-9a76-9e9f2b8f8986","1716":"0482c89b-a89a-4136-bd21-671f2a725327","1717":"12218a50-43fe-4543-9faf-357b2c75d77d","1718":"7744736c-8031-451f-b700-ad677bb06e83","1719":"ee74e794-fce1-42ae-bcde-2ce5b8978aa8","1720":"0c6ad1fd-a164-4c4e-aea3-b8afc72ed3ef","1721":"f66e06c4-3207-4085-a7db-cd6bfa114ea8","1722":"54c2f58d-f4a9-4d94-a2c1-39799edb0eb1","1723":"ec973bc8-4a17-4ef9-9ebf-82404e1fe6b4","1724":"a59d1d49-2b02-446e-b5e5-dd0e769076c7","1725":"b6989894-9d88-4b5b-b9d4-d11d702a0b6f","1726":"24cdf0fd-e3bc-4972-b0aa-56ab62004c03","1727":"824ed2d6-fe74-4c3e-aa28-155616f3d131","1728":"efe25dd7-a182-4367-8d8e-41836e544d01","1729":"1063db8e-91eb-46ab-8bfe-cafb948cf51d","1730":"cf37f1cf-495f-40e0-9990-faab6c2eb001","1731":"d1a6c17c-f8f7-4acc-82a3-2b66b49ee389","1732":"23489110-5f68-4627-a349-82591b659e3b","1733":"f28ae86f-2e50-4f34-bf14-4aac27724ebf","1734":"c0d759ed-b6d1-4122-8a21-57bdfe8f1032","1735":"3cb60164-c557-4f97-b950-f937ae9a8054","1736":"8c2d9904-4fbe-451e-9fb4-02f87b8086cb","1737":"c1e31392-261d-4c88-bc66-982055a5271f","1738":"02a0f8ea-6fe3-4368-b662-5aa33ffae8cf","1739":"f9a20896-cc07-46a7-a553-48070b1d9a94","1740":"9abccf38-6fa5-4d86-8588-46f74ef96f35","1741":"81cfa5bb-3758-4607-ae9b-f625edb20cf9","1742":"5e26356c-b531-49ec-ab58-7b630f002cc6","1743":"e8980808-0e48-40d0-9c4f-1f6740339c62","1744":"d5394ffe-ed20-459b-9335-1f40f35856be","1745":"8e6854d5-7e2e-4ffe-8cba-0c0ac3ab00d8","1746":"f641d83f-5d38-4bf6-b343-b3cc6001aee6","1747":"07a298d5-2fb0-4c28-af22-e84ec5ec568e","1748":"8eaeaf93-9ec7-4737-8247-12319d770d9c","1749":"a8d309aa-66fb-4977-b7f7-2ace567063bb","1750":"21b1d261-3ff4-47a2-9a1f-8bc9e7c318ff","1751":"21ac5c81-efc6-4801-9501-532948914c98","1752":"b15f572a-aaf8-4cb7-aa5d-5e77f9e183f9","1753":"1b418dda-88ee-4e37-8184-e186c5281ec2","1754":"79045207-9655-4200-a314-5790fa9830f5","1755":"4b95465d-c5eb-4f0c-9168-924fbf7a5b44","1756":"3691d6ef-1ff4-4fa2-8878-56cdfbefdd8c","1757":"7e1dc098-8e03-4a1c-87f4-94ebb2f941f9","1758":"c39b4c93-0c6b-482f-b376-ce720b16f2ab","1759":"dc255899-e924-47f9-b545-7c8910e6fee9","1760":"278d8ffc-4c78-415e-a110-f679c21b8581","1761":"4937618e-8ce1-40cc-abd1-9226c8e211f1","1762":"a3851703-2537-4406-bb61-7ada3fd01b3c","1763":"4e8a5969-d7bf-4fad-a85e-b46c0de73ff1","1764":"be98f2f2-fe0d-49e7-93ed-8c3e4ffa0c25","1765":"1ac96dbc-ec4b-462d-aa11-894126eef3b2","1766":"1e78a897-d32e-4227-ad62-fc4de2d2e5c5","1767":"b4ffbd7e-160e-4ad4-b4ec-d5c038ed62c4","1768":"d903f5af-961f-4520-9ec0-1fab52dfb498","1769":"f1269a5a-2f44-43c7-9aee-911fb1ce0231","1770":"1f23ef0a-f831-4a4b-93ea-1e9567d4ffc4","1771":"ee45436a-dcf5-4a3d-8ac5-aa1ab3a9400a","1772":"99611482-40f8-4a41-a7eb-c941a329591d","1773":"ace70e12-34a9-46b7-a867-5ec4e4a3ee51","1774":"9434f2b1-85eb-4790-8ae4-eaa1271b715a","1775":"d356e8b4-3988-4b55-bd76-17624d4d0419","1776":"3c7b7648-809e-429f-b1e6-72b3de5f139c","1777":"46278b8f-36ad-4405-ab84-2a7f3fdffad2","1778":"17f8d9cf-5e07-45fa-b64d-fde61976d11e","1779":"6f181158-4f3e-40a3-a854-559a316b5534","1780":"e9b8e6be-2464-4915-abd0-1a60c09f1c7c","1781":"a93731e3-4adf-4b97-9092-2bf74c556212","1782":"66e7ab64-1dac-4f20-bf17-4f1b08db4388","1783":"694000a1-4590-4ec4-af9a-11ec35e78306","1784":"8b956693-26aa-4e83-878a-b619a3ada1d8","1785":"bad1c9ff-af42-44d5-9e5c-bbb00ff04879","1786":"2366204c-e3ee-47cf-8b03-b35a03553170","1787":"412ace7a-c100-4d8e-9e1e-b0ec10e9e415","1788":"294d3c49-08ef-4add-844a-69a0140dbeef","1789":"deb772a2-5b9e-48d9-b520-f7c5055ad6d5","1790":"3ea28450-dbe4-4f60-8052-98764ea2a289","1791":"cfac9379-8eba-4eff-bd85-e6ec19e197a6","1792":"b87bf453-fa33-4092-8981-502183c57bdf","1793":"b0c69b57-c3f3-4f6a-8967-b18202fce573","1794":"be8cccb7-a70a-4065-8ce0-493f0ff3ceab","1795":"42fd7e6f-f7d6-4e95-838c-1adcf207254c","1796":"27e7a2bb-d4c6-42ce-8db1-1de18345c9af","1797":"80712229-3d8e-4018-ae20-e5172a785313","1798":"d36acf1c-3cd3-4d5c-92cd-1c76dddeab87","1799":"e34f51b6-4851-482e-bfef-0bf052c48179","1800":"c6c829bc-c554-4dd6-915b-c81bfd715572","1801":"522d7071-bc5d-4d34-af78-bc93734c3e2a","1802":"5f0634a1-6424-49e6-b433-48faa2790c2a","1803":"86289ea9-a8ee-4104-b886-94422dd3f19c","1804":"86a7d411-8413-4d2d-969f-5345be8565bb","1805":"519806b0-9c57-4578-8303-69df4a5248d4","1806":"db36a43b-9c6b-4f0a-a167-f81fdb641a7a","1807":"af16badd-2c37-482c-b48a-96d70f00aada","1808":"82c407ba-dae2-499d-bf2e-6377546781ef","1809":"ef8fdf74-67a6-42ec-92c9-7955fc5e1ba0","1810":"1d1169d8-44db-4d83-a8e2-51fd81eda4fd","1811":"b018e164-a5c6-40f0-b8ed-5ed32977c114","1812":"b6894d12-3b51-43bc-84db-02d80bdb1152","1813":"89834fe8-8632-4377-84d3-e390496408fd","1814":"2c4280b5-d129-4904-8836-34b87e218f56","1815":"8f52d5e5-9004-4262-90f7-403e98c32209","1816":"096132e7-4860-4de8-a192-b56b75f7b684","1817":"b67effc9-304c-483f-864b-dd6829866ccf","1818":"b7bea22d-1c83-4dbe-b9c4-57b9e3d70bdc","1819":"292269e6-7bba-45a0-a3ad-74da84b39390","1820":"1a2ced63-e302-4847-87a8-7d4a16fa31f0","1821":"644a3f30-8c2f-4159-88ba-875324f7bcb0","1822":"e717bb53-ddeb-41a9-9336-742256551576","1823":"ae1257d5-6a03-46dd-9a3f-82ca48b63f59","1824":"6f1abc5f-d636-4e33-b3b0-669359a65fc7","1825":"b412a9c1-8a76-4392-873d-49f5b557a533","1826":"2d20772d-ff42-42c9-bef8-17722c357a9f","1827":"557c95b7-0d21-42c4-8a95-dd6fc86f2da5","1828":"a1a7da15-3275-4fa2-8194-a2c9495b6576","1829":"70e80156-ba54-42a2-85f1-02f5c73443d1","1830":"f2b85167-838a-4a92-a1db-6bacf2385e24","1831":"e2a389e0-6ca3-4bc0-b4da-48fcb9d487bb","1832":"afcc4428-fefa-4c26-aeeb-2df59d04357d","1833":"f3529cdd-8e22-4ec5-84cd-5ce205d167db","1834":"685e91fb-788d-4a1e-b6d8-63953c954fc0","1835":"20dfc6cc-d669-4817-9794-97e758431845","1836":"544f3143-a1ae-4325-8293-6724a47d9ab5","1837":"c4042b89-7d2d-424e-a680-d0c4c30131d9","1838":"ab156d40-4ebc-4a13-8a9c-1c5f1d219139","1839":"e2ae44fa-5116-4e94-b10a-ba37bd91d808","1840":"2e390425-c2d8-4a6a-8825-20d3967c7c85","1841":"a801fac8-3311-4b1c-b92f-f3fa7ab716c6","1842":"f6d48d85-5c0d-42fe-aa25-37cf22e80b07","1843":"b0a12c31-3189-474d-a963-ae8a313d8e60","1844":"a6fd612f-fcd0-4f40-bd80-0813247e866b","1845":"79d39a23-62d0-43f4-b598-6b69a11ea963","1846":"f7fc96aa-3c8f-430b-adba-d829b006985f","1847":"d0eb6fe4-5435-4aa3-a730-5603a2375f7f","1848":"d22459ce-2c42-43ea-b36f-c04fb6112ab5","1849":"c575eac5-3915-4b2b-907f-63d52719826c","1850":"ae5d3c66-cb53-4846-b460-5680852d2c6c","1851":"15a46f21-699d-4ee0-af12-dbf359408be6","1852":"b16db11d-b90d-4c97-b4bb-83335354117f","1853":"c076751e-3435-40f2-bf7c-882f73e5c848","1854":"4d441e7c-4149-48fb-8752-4da36e77dc0f","1855":"4faef1bc-05b8-4a80-ba33-cdb886088f17","1856":"d309bb7e-b9cd-475e-bfec-5cbccb242b4f","1857":"2ca6111f-1270-4201-b66d-ca7477059387","1858":"269538b3-df2c-40fd-8e01-021caf6578b6","1859":"9a91af74-e875-4f16-b2d7-1e3fe6c2a914","1860":"daf6cfbc-a7b0-4cce-8d1f-7031ecb181f5","1861":"9c6223ea-f11d-430f-9aab-e1f3346f4c9f","1862":"b7cdd3c7-d0e7-45e2-9520-ebffcc91a1b2","1863":"568c0085-af7e-4c3f-b2f9-79ed9a119156","1864":"0e21c729-4262-44ca-9665-56fce99d267b","1865":"a5c66b8c-df9e-443a-884d-0b3850001163","1866":"49c9759a-a5ef-4118-ab65-6186fa1ffe85","1867":"e6dc0eca-342e-458e-99bd-f6e14d3b1ab9","1868":"9dc3673d-1f3c-4884-a280-df5123b96c91","1869":"aadc0d32-0d32-4ef4-b0f3-9cb9fc103ead","1870":"94ab3825-a6c7-4a0a-ae5f-57ca19af6f46","1871":"7966f227-6d6f-4fd6-9852-f8f238bdde1b","1872":"2edaeead-c02c-4722-8657-a30b6173b10f","1873":"a5e0a927-18dc-4c7a-9236-b9569d2b6e54","1874":"4fd90c3b-5ae5-4bee-93f5-e6c589ab8c11","1875":"9e97e3b7-a8c1-4a28-9ad9-6ec54001dc78","1876":"d3c5c55e-0205-428d-b48d-3604f9661ff1","1877":"103a91e7-2174-4b13-a37b-a9cc52cb325d","1878":"c8e04e9a-14cc-42af-b259-4f17bd3790e9","1879":"8595bf5c-1037-43e4-a769-7a43b67ea311","1880":"aba157a9-6ed8-419d-b5d7-df9796e81ead","1881":"02d568ba-2c36-477c-9c94-3f580aa9353f","1882":"6da0ecbf-e473-444d-8b39-1ff025c42496","1883":"1c980ce9-0e14-4d94-bb52-71d728e528f4","1884":"7fb3731f-f094-4b42-b085-d5cde00bee7f","1885":"0b13fc98-88d5-46e3-ba34-7608b398353f","1886":"85344f3e-54a0-4135-b7e9-473ec2f5f50f","1887":"a3255410-fbfb-4641-adb7-75e188d4c568","1888":"3d445783-7d11-47f2-94a9-b457363b07d2","1889":"074c8678-ff74-47c8-a579-9f39428d3856","1890":"09142855-e466-4cde-a88e-1b2dc979f244","1891":"f1b745b7-b47b-40f5-aae4-b504c62afd65","1892":"e415b73c-8f53-4533-ac83-cfa94371e296","1893":"11c8182c-2705-46cc-8c62-fca0307e94e9","1894":"68611960-a06f-4aeb-bdb4-f527fc77d7f7","1895":"c887fa1b-dc9f-48b9-a013-4f56d88b66cc","1896":"f5e44f36-eccb-4ee5-82e7-3833f04ba70f","1897":"01fb1525-71d6-412b-bae8-5e6aa539c3a7","1898":"2cb31970-7a2e-4e60-be63-906e2a6bef0a","1899":"d7e06ec1-f92b-4e85-86cb-dbd6c61ae26e","1900":"df53d077-3ecb-49d8-9639-16abb84d1b06","1901":"e780dc79-493b-4f3a-93c7-a08fa76800be","1902":"59ea74f8-578b-4d03-a3d9-ac3ea4867e4d","1903":"d46fd1dd-aeaa-498f-b8c2-c44d0c60602e","1904":"edd62a46-e225-45e8-8539-0931ec03e184","1905":"6a584d26-98a1-4976-9a4d-4576cb5af376","1906":"25d6dec7-d65d-425c-96f7-49cb4a868d98","1907":"747b2187-b123-440e-b035-1ac5789ce0e6","1908":"d4a6fdb6-b9d1-4660-a8e1-c85b9f7a8dbf","1909":"045c8c3d-9858-4117-bfe9-8f4eeeff370d","1910":"de12d37c-2f94-4175-b01c-ef2656f97270","1911":"3c3348cc-274f-40f9-b898-46ddc5570ba7","1912":"55a299c0-87c9-4f93-b31e-12efad8b1102","1913":"ca37e0b9-bf83-43e1-94da-a95511883aac","1914":"5e20fab7-76f0-4951-97a6-208df83cba51","1915":"d41bf1b3-c06a-4327-85fc-60bb5f1167ac","1916":"f7401fcf-b2f5-40b3-9fbe-6ca6c656f751","1917":"41c08ab5-c2ef-478f-99b6-57dad3d443b2","1918":"45859b87-0558-4272-861b-8ec08af4201b","1919":"e8b3f153-890d-4261-98a6-ef459b0d01bf","1920":"d58afda1-ed18-44d9-95c6-e106f619f865","1921":"2fa90f44-db2d-4e38-9425-c41b2880f884","1922":"b5748f39-4455-4214-b7d8-a2076fe7d9e5","1923":"d7f7830f-2879-4dfa-9130-a6b448cfbfe6","1924":"c28deb3e-017e-4ead-a930-c89877930e35","1925":"3cff012c-75e7-4672-8ec0-65abc2d6b717","1926":"023c207f-3a1b-4a09-8abe-bdc5c72c7275","1927":"bb469931-3f38-435f-86b4-37ae2c50fd21","1928":"f20ac664-03f7-4d87-9cea-3b5843fb9a44","1929":"a9ea9e38-b062-46c3-af8e-121cd579df3b","1930":"522f2c3f-211a-4b44-ae16-a38952ea2ab6","1931":"a2aae4b7-6a80-4e5b-89be-705cae5e622c","1932":"d46fe911-c536-4d3a-ba6b-db5dc31c1fc5","1933":"e7f7560d-0c58-4654-9b0c-9115d1001772","1934":"83cbdd70-03a6-4df7-917a-4950093e6a8d","1935":"eebbd145-7995-4474-bbf9-8ffef693daf3","1936":"7705dd89-4eda-4cca-98ad-9404fcca19be","1937":"66c27406-e846-44ed-8b2f-cab27ec3b1c4","1938":"1aa1a7c7-eaf9-4cad-a353-db9e7a3a376b","1939":"66126fb3-26fd-489c-aa5d-67710f0fb2c1","1940":"a69f0472-552a-4bb0-b33d-815262728741","1941":"d31c5ad1-f30f-4252-8ab0-bcebf565e696","1942":"a3a6d780-a256-41a9-8364-24433dc24b42","1943":"989b1556-4408-431d-b1e7-1d241ddd9162","1944":"d83318c0-4087-4bfd-810b-021e3065a3c7","1945":"564c1c33-e4c7-4dc6-bc6e-1a4176085234","1946":"b73e7122-2c42-4399-865a-8afbbd987650","1947":"daf3c7a7-e54f-40d6-b033-32dcc711b2df","1948":"d52992ee-a9dd-42c7-896f-1ddd6691c152","1949":"1118bc78-c6e1-48bc-b4e2-cc4f8d60e713","1950":"d51999c8-62ff-4a60-8d0d-5e3a9bf4bcf1","1951":"0f7445bb-8e84-4ed0-af5d-3e72ff931c20","1952":"37217035-3fab-4035-a284-faf6d8762d2d","1953":"f709c7b4-b9ae-44ae-92c6-59d4221cf377","1954":"623ed45c-0b1e-4ef1-8265-b2d04a53938b","1955":"b06b1240-a623-4ce3-9d9d-d2ab1c8267cd","1956":"814e61d8-a1bb-416f-9d73-d1723de06854"}]